[{"techniquename": "Web Services", "detection": "Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control () or .", "description": "Adversaries may register for web services\u00a0that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0025": " APT17  : APT17 has created profile pages in Microsoft TechNet that were used as C2 infrastructure.", "G0016": " APT29  : APT29 has registered algorithmically generated Twitter handles that are used for C2 by malware, such as HAMMERTOSS.", "G0050": " APT32  : APT32 has set up Dropbox, Amazon S3, and Google Drive to host malicious downloads.", "G0125": " HAFNIUM  : HAFNIUM has acquired web services for use in C2 and exfiltration.", "G0136": " IndigoZebra  : IndigoZebra created Dropbox accounts for their operations.", "G0032": " Lazarus Group  : Lazarus Group has hosted malicious downloads on Github.", "G0069": " MuddyWater  : MuddyWater has used file sharing services including OneHub to distribute tools.", "G0010": " Turla  : Turla has created web accounts including Dropbox and GitHub for C2 and document exfiltration.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used GitHub to host malware linked in spearphishing e-mails."}, "id": "T1583.006", "subtechniqueof": "T1583", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Virtual Private Server", "detection": "Once adversaries have provisioned a VPS (ex: for use as a command and control server), internet scans may reveal servers that adversaries have acquired. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.", "description": "Adversaries may rent Virtual Private Servers (VPSs)\u00a0that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.Acquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0125": " HAFNIUM  : HAFNIUM has operated from leased virtual private servers (VPS) in the United States.", "G0088": " TEMP.Veles  : TEMP.Veles has used Virtual Private Server (VPS) infrastructure."}, "id": "T1583.003", "subtechniqueof": "T1583", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "DNS Server", "detection": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.", "description": "Adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.By running their own DNS servers, adversaries can have more control over how they administer server-side DNS C2 traffic (DNS). With control over a DNS server, adversaries can configure DNS applications to provide conditional responses to malware and, generally, have more flexibility in the structure of the DNS-based C2 channel.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1583.002", "subtechniqueof": "T1583", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.0", "created": "01 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Acquire Infrastructure", "detection": "Consider use of services that may aid in tracking of newly acquired infrastructure, such as WHOIS databases for domain registration information. Once adversaries have provisioned infrastructure (ex: a server for use in command and control), internet scans may help proactively discover adversary acquired infrastructure. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.", "description": "Adversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Additionally, botnets are available for rent or purchase.Use of these infrastructure solutions allows an adversary to stage, launch, and execute an operation. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contact to third-party web services. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1583", "subtechniques": ["T1583.001", "T1583.002", "T1583.003", "T1583.004", "T1583.005", "T1583.006"], "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "30 September 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Server", "detection": "Once adversaries have provisioned a server (ex: for use as a command and control server), internet scans may reveal servers that adversaries have acquired. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.", "description": "Adversaries may buy, lease, or rent physical servers\u00a0that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations.Adversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0093": " GALLIUM  : GALLIUM has used Taiwan-based servers that appear to be exclusive to GALLIUM.", "G0034": " Sandworm Team  : Sandworm Team has leased servers from resellers instead of leasing infrastructure directly from hosting companies to enable its operations."}, "id": "T1583.004", "subtechniqueof": "T1583", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Domains", "detection": "Domain registration information is, by design, captured in public registration logs. Consider use of services that may aid in tracking of newly acquired domains, such as WHOIS databases and/or passive DNS. In some cases it may be possible to pivot on known pieces of domain registration information to uncover other infrastructure purchased by the adversary. Consider monitoring for domains created with a similar structure to your own, including under a different TLD. Though various tools and services exist to track, query, and monitor domain name registration information, tracking across multiple DNS infrastructures can require multiple tools/services or more advanced analytics.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access and Command and Control.", "description": "Adversaries may purchase domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.Adversaries can use purchased domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control. Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD). Typosquatting may be used to aid in delivery of payloads via Drive-by Compromise. Adversaries can also use internationalized domain names (IDNs) to create visually similar lookalike domains for use in operations.Domain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.", "mitigations": {"M1056": " Pre-compromise  : Organizations may intentionally register similar domains to their own to deter adversaries from creating typosquatting domains. Other facets of this technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0006": " APT1  : APT1 has registered hundreds of domains for use in operations.", "G0007": " APT28  : APT28 registered domains imitating NATO, OSCE security websites, Caucasus information resources and other organizations. ", "G0016": " APT29  : APT29 has acquired C2 domains, sometimes through resellers.", "G0050": " APT32  : APT32 has set up and operated websites to gather information and deliver malware.", "G0137": " Ferocious Kitten  : Ferocious Kitten has acquired domains imitating legitimate sites.", "G0046": " FIN7  : FIN7 has registered look-alike domains for use in phishing campaigns.", "G0136": " IndigoZebra  : IndigoZebra has established domains, some of which were designed to look like official government domains, for their operations.", "G0094": " Kimsuky  : Kimsuky has registered domains to spoof targeted organizations and trusted third parties.", "G0032": " Lazarus Group  : Lazarus Group has acquired infrastructure related to their campaigns to act as distribution points and C2 channels.", "G0065": " Leviathan  : Leviathan has established domains that impersonate legitimate entities to use for targeting efforts. ", "G0059": " Magic Hound  : Magic Hound has registered fraudulent domains such as \"mail-newyorker.com\" and \"news12.com.recover-session-service.site\" to target specific victims with phishing attacks.", "G0045": " menuPass  : menuPass has registered malicious domains for use in intrusion campaigns.", "G0129": " Mustang Panda  : Mustang Panda have acquired C2 domains prior to operations.", "G0034": " Sandworm Team  : Sandworm Team has registered domain names and created URLs that are often designed to mimic or spoof legitimate websites, such as email login pages, online file sharing and storage websites, and password reset pages.", "G0122": " Silent Librarian  : Silent Librarian has acquired domains to establish credential harvesting pages, often spoofing the target organization and using free top level domains .TK, .ML, .GA, .CF, and .GQ.", "G0139": " TeamTNT  : TeamTNT has obtained domains to host their payloads.", "G0134": " Transparent Tribe  : Transparent Tribe has registered domains to mimic file sharing, government, defense, and research websites for use in targeted campaigns.", "G0128": " ZIRCONIUM  : ZIRCONIUM has purchased domains for use in targeted campaigns."}, "id": "T1583.001", "subtechniqueof": "T1583", "tactics": ["Resource Development"], "platforms": ["PRE"], "capecid": ["CAPEC-630"], "contributors": ["Deloitte Threat Library Team; Vinayak Wadhwa, Lucideus; Wes Hurd"], "version": "1.1", "created": "30 September 2020", "lastmodified": "16 October 2021"}, {"techniquename": "Botnet", "detection": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during , , or .", "description": "Adversaries may buy, lease, or rent a network of compromised systems\u00a0that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1583.005", "subtechniqueof": "T1583", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.0", "created": "01 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Active Scanning", "detection": "Monitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields.Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.Adversaries may perform different forms of active scanning depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1595", "subtechniques": ["T1595.001", "T1595.002"], "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Search Victim-Owned Websites", "detection": "Monitor for suspicious network traffic that could be indicative of adversary reconnaissance, such as rapid successions of requests indicative of web crawling and/or large quantities of requests originating from a single source (especially if the source is known to be associated with an adversary). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields.", "description": "Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: Email Addresses). These sites may also have details highlighting business operations and relationships.Adversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Trusted Relationship or Phishing).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0034": " Sandworm Team  : Sandworm Team has conducted research against potential victim websites as part of its operational planning.", "G0122": " Silent Librarian  : Silent Librarian has searched victim's websites to identify the interests and academic areas of targeted individuals and to scrape source code, branding, and organizational contact information for phishing pages."}, "id": "T1594", "subtechniques": ["No sub-techniques"], "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Search Engines", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).Adversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Valid Accounts or Phishing).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1593.002", "subtechniqueof": "T1593", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Social Media", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.Adversaries may search in different social media sites depending on what information they seek to gather. Threat actors may passively harvest data from these sites, as well as use information gathered to create fake profiles/groups to elicit victim\u2019s into revealing specific information (i.e. Spearphishing Service). Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Spearphishing via Service).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0094": " Kimsuky  : Kimsuky has used Twitter to monitor potential victims and to prepare targeted phishing e-mails."}, "id": "T1593.001", "subtechniqueof": "T1593", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Search Open Websites/Domains", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.Adversaries may search in different online sites depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: External Remote Services or Phishing).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0034": " Sandworm Team  : Sandworm Team researched Ukraine's unique legal entity identifier (called an \"EDRPOU\" number), including running queries on the EDRPOU website, in preparation for the NotPetya attack. Sandworm Team has also researched third-party websites to help it craft credible spearphishing emails."}, "id": "T1593", "subtechniques": ["T1593.001", "T1593.002"], "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "DNS/Passive DNS", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts.Adversaries may search DNS data to gather actionable information. Threat actors can query nameservers for a target organization directly, or search through centralized repositories of logged DNS query responses (known as passive DNS). Adversaries may also seek and target DNS misconfigurations/leaks that reveal information about internal networks. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Search Victim-Owned Websites or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1596.001", "subtechniqueof": "T1596", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "CDNs", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor\u2019s geographical region.Adversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organization\u2019s website. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Drive-by Compromise).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1596.004", "subtechniqueof": "T1596", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Digital Certificates", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.Adversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates. Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content). Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Trusted Relationship).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1596.003", "subtechniqueof": "T1596", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "WHOIS", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.Adversaries may search WHOIS data to gather actionable information. Threat actors can use online resources or command-line utilities to pillage through WHOIS data for information about potential victims. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1596.002", "subtechniqueof": "T1596", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Scan Databases", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.Adversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets, or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1596.005", "subtechniqueof": "T1596", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Search Closed Sources", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.Adversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1597", "subtechniques": ["T1597.001", "T1597.002"], "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Spearphishing Link", "detection": "Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.Monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.", "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. The given website may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. From the fake website, information is gathered in web forms and sent to the attacker. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.", "mitigations": {"M1054": " Software Configuration  : Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation.", "M1017": " User Training  : Users can be trained to identify social engineering techniques and spearphishing attempts."}, "procedureexamples": {"G0050": " APT32  : APT32 has used malicious links to direct users to web pages designed to harvest credentials.", "G0094": " Kimsuky  : Kimsuky has used links in e-mail to steal account information.", "G0059": " Magic Hound  : Magic Hound has used SMS and email messages with links designed to steal credentials.", "G0034": " Sandworm Team  : Sandworm Team has crafted spearphishing emails with hyperlinks designed to trick unwitting recipients into revealing their account credentials.", "G0121": " Sidewinder  : Sidewinder has sent e-mails with malicious links to credential harvesting websites.", "G0122": " Silent Librarian  : Silent Librarian has used links in e-mails to direct victims to credential harvesting websites designed to appear like the targeted organization's login page.", "S0649": " SMOKEDHAM  : SMOKEDHAM has been delivered via malicious links in phishing emails."}, "id": "T1598.003", "subtechniqueof": "T1598", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "contributors": ["Philip Winther; Robert Simmons, @MalwareUtkonos; Sebastian Salla, McAfee"], "version": "1.1", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Spearphishing Service", "detection": "Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts).Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: Social Media or Search Victim-Owned Websites) to craft persuasive and believable lures.", "mitigations": {"M1017": " User Training  : Users can be trained to identify social engineering techniques and spearphishing attempts."}, "id": "T1598.001", "subtechniqueof": "T1598", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "contributors": ["Robert Simmons, @MalwareUtkonos"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Search Open Technical Databases", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.Adversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1596", "subtechniques": ["T1596.001", "T1596.002", "T1596.003", "T1596.004", "T1596.005"], "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Purchase Technical Data", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.Adversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victim\u2019s infrastructure. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1597.002", "subtechniqueof": "T1597", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Threat Intel Vendors", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.Adversaries may search in private threat intelligence vendor data to gather actionable information. Threat actors may seek information/indicators gathered about their own campaigns, as well as those conducted by other adversaries that may align with their target industries, capabilities/objectives, or other operational concerns. Information reported by vendors may also reveal opportunities other forms of reconnaissance (ex: Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application or External Remote Services).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1597.001", "subtechniqueof": "T1597", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Business Relationships", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization\u2019s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim\u2019s hardware and software resources.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise, Drive-by Compromise, or Trusted Relationship).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0034": " Sandworm Team  : In preparation for its attack against the 2018 Winter Olympics, Sandworm Team conducted online research of partner organizations listed on an official PyeongChang Olympics partnership site."}, "id": "T1591.002", "subtechniqueof": "T1591", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "IP Addresses", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about assigned IP addresses may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0138": " Andariel  : Andariel has limited its watering hole attacks to specific IP address ranges.", "G0125": " HAFNIUM  : HAFNIUM has obtained IP addresses for publicly-accessible Exchange servers."}, "id": "T1590.005", "subtechniqueof": "T1590", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Spearphishing Attachment", "detection": "Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.", "description": "Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file. The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.", "mitigations": {"M1054": " Software Configuration  : Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation.", "M1017": " User Training  : Users can be trained to identify social engineering techniques and spearphishing attempts."}, "procedureexamples": {"S0373": " Astaroth  : Astaroth has been delivered via malicious e-mail attachments.", "G0121": " Sidewinder  : Sidewinder has sent e-mails with malicious attachments that lead victims to credential harvesting websites."}, "id": "T1598.002", "subtechniqueof": "T1598", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "contributors": ["Philip Winther; Robert Simmons, @MalwareUtkonos; Sebastian Salla, McAfee"], "version": "1.1", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Network Security Appliances", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1590.006", "subtechniqueof": "T1590", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Phishing for Information", "detection": "Depending on the specific method of phishing, the detections can vary. Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.When it comes to following links, monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts).", "description": "Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from Phishing in that the objective is gathering data from the victim rather than executing malicious code.All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns.Adversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means. Phishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.", "mitigations": {"M1054": " Software Configuration  : Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation.", "M1017": " User Training  : Users can be trained to identify social engineering techniques and spearphishing attempts."}, "procedureexamples": {"G0007": " APT28  : APT28 has used spearphishing to compromise credentials.", "G0128": " ZIRCONIUM  : ZIRCONIUM targeted presidential campaign staffers with credential phishing e-mails."}, "id": "T1598", "subtechniques": ["T1598.001", "T1598.002", "T1598.003"], "tactics": ["Reconnaissance"], "platforms": ["PRE"], "contributors": ["Philip Winther; Robert Simmons, @MalwareUtkonos; Sebastian Salla, McAfee"], "version": "1.1", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Identify Roles", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business roles may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1591.004", "subtechniqueof": "T1591", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Identify Business Tempo", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization\u2019s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim\u2019s hardware and software resources.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise or Trusted Relationship)", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1591.003", "subtechniqueof": "T1591", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Determine Physical Locations", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather the victim's physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Physical locations of a target organization may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites or Social Media). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Phishing or Hardware Additions).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1591.001", "subtechniqueof": "T1591", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.1", "created": "02 October 2020", "lastmodified": "27 August 2021"}, {"techniquename": "Gather Victim Org Information", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing or Trusted Relationship).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1591", "subtechniques": ["T1591.001", "T1591.002", "T1591.003", "T1591.004"], "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.1", "created": "02 October 2020", "lastmodified": "27 August 2021"}, {"techniquename": "Network Denial of Service", "detection": "Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.", "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.A Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.For DoS attacks targeting the hosting system directly, see Endpoint Denial of Service.", "mitigations": {"M1037": " Filter Network Traffic  : When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.Depending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.As immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."}, "procedureexamples": {"G0007": " APT28  : In 2016, APT28 conducted a distributed denial of service (DDoS) attack against the World Anti-Doping Agency.", "S0532": " Lucifer  : Lucifer can execute TCP, UDP,  and HTTP denial of service (DoS) attacks."}, "id": "T1498", "subtechniques": ["T1498.001", "T1498.002"], "tactics": ["Impact"], "platforms": ["Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "impacttype": ["Availability"], "contributors": ["Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team"], "version": "1.1", "created": "17 April 2019", "lastmodified": "12 April 2021"}, {"techniquename": "Inhibit System Recovery", "detection": "Use process monitoring to monitor the execution and command line parameters of binaries involved in inhibiting system recovery, such as vssadmin, wbadmin, and bcdedit. The Windows event logs, ex. Event ID 524 indicating a system catalog was deleted, may contain entries associated with suspicious activity.Monitor the status of services involved in system recovery. Monitor the registry for changes associated with system recovery features (ex: the creation of ).", "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact.A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:", "mitigations": {"M1053": " Data Backup  : Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.", "M1028": " Operating System Configuration  : Consider technical controls to prevent the disabling of services or deletion of files involved in system recovery. "}, "procedureexamples": {"S0640": " Avaddon  : Avaddon deletes backups and shadow copies using native system tools.", "S0638": " Babuk  : Babuk has the ability to delete shadow volumes using .", "S0570": " BitPaymer  : BitPaymer attempts to remove the backup shadow files from the host using .", "S0611": " Clop  : Clop can delete the shadow volumes with  and can use bcdedit to disable recovery options.", "S0608": " Conficker  : Conficker resets system restore points and deletes backup files.", "S0575": " Conti  : Conti can delete Windows Volume Shadow Copies using .", "S0616": " DEATHRANSOM  : DEATHRANSOM can delete volume shadow copies on compromised hosts.", "S0605": " EKANS  : EKANS removes backups of Volume Shadow Copies to disable any restoration capabilities.", "S0618": " FIVEHANDS  : FIVEHANDS has the ability to delete volume shadow copies on compromised hosts.", "S0132": " H1N1  : H1N1 disable recovery options and deletes shadow copies from the victim.", "S0617": " HELLOKITTY  : HELLOKITTY can delete volume shadow copies on compromised hosts.", "S0260": " InvisiMole  : InvisiMole can can remove all system restore points.", "S0389": " JCry  : JCry has been observed deleting shadow copies to ensure that data cannot be restored easily.   ", "S0449": " Maze  : Maze has attempted to delete the shadow volumes of infected machines, once before and once after the encryption process.", "S0576": " MegaCortex  : MegaCortex has deleted volume shadow copies using .", "S0457": " Netwalker  : Netwalker can delete the infected system's Shadow Volumes to prevent recovery.", "S0365": " Olympic Destroyer  : Olympic Destroyer uses the native Windows utilities , , and  to delete and disable operating system recovery features such as the Windows backup catalog and Windows Automatic Repair.", "S0654": " ProLock  : ProLock can use vssadmin.exe to remove volume shadow copies.", "S0583": " Pysa  : Pysa has the functionality to delete shadow copies. ", "S0481": " Ragnar Locker  : Ragnar Locker can delete volume shadow copies using .", "S0496": " REvil  : REvil can use vssadmin to delete volume shadow copies and bcdedit to disable recovery features.", "S0400": " RobbinHood  : RobbinHood deletes shadow copies to ensure that all the data cannot be restored easily. ", "S0446": " Ryuk  : Ryuk has used  to to delete volume shadow copies and  to force deletion of shadow copies created by third-party applications.", "S0366": " WannaCry  : WannaCry uses , , , and  to delete and disable operating system recovery features.", "S0612": " WastedLocker  : WastedLocker can delete shadow volumes. "}, "id": "T1490", "subtechniques": ["No sub-techniques"], "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Availability"], "contributors": ["Yonatan Gotlib, Deep Instinct"], "version": "1.0", "created": "02 April 2019", "lastmodified": "14 July 2020"}, {"techniquename": "Direct Network Flood", "detection": "Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.", "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. Direct Network Flood are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.Botnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.", "mitigations": {"M1037": " Filter Network Traffic  : When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.Depending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.As immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."}, "id": "T1498.001", "subtechniqueof": "T1498", "tactics": ["Impact"], "platforms": ["Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "impacttype": ["Availability"], "capecid": ["CAPEC-125,", "CAPEC-486"], "version": "1.2", "created": "02 March 2020", "lastmodified": "29 March 2021"}, {"techniquename": "Reflection Amplification", "detection": "Detection of reflection amplification can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a reflection amplification DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.", "description": "Adversaries may attempt to cause a denial of service by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflector may be used to focus traffic on the target.Reflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS and NTP, though the use of several others in the wild have been documented.  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.", "mitigations": {"M1037": " Filter Network Traffic  : When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.Depending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.As immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."}, "id": "T1498.002", "subtechniqueof": "T1498", "tactics": ["Impact"], "platforms": ["Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "impacttype": ["Availability"], "capecid": ["CAPEC-490"], "version": "1.2", "created": "02 March 2020", "lastmodified": "29 March 2021"}, {"techniquename": "Resource Hijacking", "detection": "Consider monitoring process resource usage to determine anomalous activity associated with malicious hijacking of computer resources such as CPU, memory, and graphics processing resources. Monitor for suspicious use of network resources associated with cryptocurrency mining software. Monitor for common cryptomining software process names and files on local systems that may indicate compromise and resource usage.", "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems which may impact system and/or hosted service availability. One common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive. Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining. Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.Additionally, some cryptocurrency mining malware kills off processes for competing malware to ensure it\u2019s not competing for resources.", "procedureexamples": {"G0096": " APT41  : APT41 deployed a Monero cryptocurrency mining tool in a victim\u2019s environment.", "G0108": " Blue Mockingbird  : Blue Mockingbird has used XMRIG to mine cryptocurrency on victim systems.", "S0486": " Bonadan  : Bonadan can download an additional module which has a cryptocurrency mining extension.", "S0492": " CookieMiner  : CookieMiner has loaded coinmining software onto systems to mine for Koto cryptocurrency. ", "S0601": " Hildegard  : Hildegard has used xmrig to mine cryptocurrency.", "S0434": " Imminent Monitor  : Imminent Monitor has the capability to run a cryptocurrency miner on the victim machine.", "S0599": " Kinsing  : Kinsing has created and run a Bitcoin cryptocurrency miner.", "S0451": " LoudMiner  : LoudMiner harvested system resources to mine cryptocurrency, using XMRig to mine Monero. ", "S0532": " Lucifer  : Lucifer can use system resources to mine cryptocurrency, dropping XMRig to mine Monero.", "G0106": " Rocke  : Rocke has distributed cryptomining malware.", "S0468": " Skidmap  : Skidmap is a kernel-mode rootkit used for cryptocurrency mining.", "G0139": " TeamTNT  : TeamTNT has deployed XMRig Docker images to mine cryptocurrency. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1496", "subtechniques": ["No sub-techniques"], "tactics": ["Impact"], "platforms": ["Containers, IaaS, Linux, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "impacttype": ["Availability"], "contributors": ["Alfredo Oliveira, Trend Micro; David Fiser, @anu4is, Trend Micro; Jay Chen, Palo Alto Networks; Magno Logan, @magnologan, Trend Micro; Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team"], "version": "1.2", "created": "17 April 2019", "lastmodified": "14 April 2021"}, {"techniquename": "System Shutdown/Reboot", "detection": "Use process monitoring to monitor the execution and command line parameters of binaries involved in shutting down or rebooting systems. Windows event logs may also designate activity associated with a shutdown/reboot, ex. Event ID 1074 and 6006.", "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer. Shutting down or rebooting systems may disrupt access to computer resources for legitimate users.Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.", "procedureexamples": {"G0067": " APT37  : APT37 has used malware that will issue the command  to reboot a system after wiping its MBR.", "G0082": " APT38  : APT38 has used a custom MBR wiper named BOOTWRECK, which will initiate a system reboot after wiping the victim's MBR.", "S0607": " KillDisk  : KillDisk attempts to reboot the machine by terminating specific processes.", "G0032": " Lazarus Group  : Lazarus Group has rebooted systems after destroying files and wiping the MBR on infected systems.", "S0372": " LockerGoga  : LockerGoga has been observed shutting down infected systems.", "S0582": " LookBack  : LookBack can shutdown and reboot the victim machine.", "S0449": " Maze  : Maze has issued a shutdown command on a victim machine that, upon reboot, will run the ransomware within a VM.", "S0368": " NotPetya  : NotPetya will reboot the system one hour after infection.", "S0365": " Olympic Destroyer  : Olympic Destroyer will shut down the compromised system after it is done modifying system configuration settings.", "S0140": " Shamoon  : Shamoon will reboot the infected system once the wiping functionality has been completed.   "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1529", "subtechniques": ["No sub-techniques"], "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Availability"], "version": "1.0", "created": "04 October 2019", "lastmodified": "27 March 2020"}, {"techniquename": "Service Stop", "detection": "Monitor processes and command-line arguments to see if critical processes are terminated or stop running.Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at . Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links.Alterations to the service binary path or the service startup type changed to disabled may be suspicious.Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example,  may be used by an adversary to prevent services from starting.", "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. Adversaries may accomplish this by disabling individual services of high importance to an organization, such as , which will make Exchange content inaccessible . In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.", "mitigations": {"M1030": " Network Segmentation  : Operate intrusion detection, analysis, and response systems on a separate network from the production environment to lessen the chances that an adversary can see and interfere with critical response functions.", "M1022": " Restrict File and Directory Permissions  : Ensure proper process and file permissions are in place to inhibit adversaries from disabling or interfering with critical services.", "M1024": " Restrict Registry Permissions  : Ensure proper registry permissions are in place to inhibit adversaries from disabling or interfering with critical services.", "M1018": " User Account Management  : Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."}, "procedureexamples": {"S0640": " Avaddon  : Avaddon looks for and attempts to stop database processes.", "S0638": " Babuk  : Babuk can stop specific services related to backups.", "S0611": " Clop  : Clop can kill several processes and services related to backups and security solutions. ", "S0575": " Conti  : Conti can stop up to 146 Windows services related to security, backup, database, and email solutions through the use of .", "S0625": " Cuba  : Cuba has a hardcoded list of services and processes to terminate.", "S0605": " EKANS  : EKANS stops database, data backup solution, antivirus, and ICS-related processes.", "S0431": " HotCroissant  : HotCroissant has the ability to stop services on the infected host.", "G0119": " Indrik Spider  : Indrik Spider has used PsExec to stop services prior to the execution of ransomware.", "S0604": " Industroyer  : Industroyer\u2019s data wiper module writes zeros into the registry keys in  to render a system inoperable.", "S0607": " KillDisk  : KillDisk terminates various processes to get the user to reboot the victim machine.", "G0032": " Lazarus Group  : Lazarus Group has stopped the MSExchangeIS service to render Exchange contents inaccessible to users.", "S0582": " LookBack  : LookBack can kill processes and delete services.", "S0449": " Maze  : Maze has stopped SQL services to ensure it can encrypt any database. ", "S0576": " MegaCortex  : MegaCortex can stop and disable services on the system. ", "S0457": " Netwalker  : Netwalker can terminate system processes and services, some of which relate to backup software.", "S0365": " Olympic Destroyer  : Olympic Destroyer uses the API call  to disable all services on the affected system.", "S0556": " Pay2Key  : Pay2Key can stop the MS SQL service at the end of the encryption process to release files locked by the service.", "S0583": " Pysa  : Pysa can stop services and processes. ", "S0481": " Ragnar Locker  : Ragnar Locker has attempted to stop services associated with business applications and databases to release the lock on files used by these applications so they may be encrypted.", "S0496": " REvil  : REvil has the capability to stop services and kill processes.", "S0400": " RobbinHood  : RobbinHood stops 181 Windows services on the system before beginning the encryption process. ", "S0446": " Ryuk  : Ryuk has called  for stopping services, disabling services and killing processes.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has the capability to stop processes and services.", "S0366": " WannaCry  : WannaCry attempts to kill processes associated with Exchange, Microsoft SQL Server, and MySQL to make it possible to encrypt their data stores.", "G0102": " Wizard Spider  : Wizard Spider has used taskkill.exe and net.exe to stop backup, catalog, cloud, and other services prior to network encryption."}, "id": "T1489", "subtechniques": ["No sub-techniques"], "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "impacttype": ["Availability"], "version": "1.2", "created": "29 March 2019", "lastmodified": "02 March 2021"}, {"techniquename": "Disk Content Wipe", "detection": "Look for attempts to read/write to sensitive locations like the partition boot sector or BIOS parameter block/superblock. Monitor for direct access read/write attempts using the  notation. Monitor for unusual kernel driver installation activity.", "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.Adversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface. Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data. Adversaries have been observed leveraging third-party drivers like RawDisk to directly access disk content. This behavior is distinct from Data Destruction because sections of the disk are erased instead of individual files.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.", "mitigations": {"M1053": " Data Backup  : Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."}, "procedureexamples": {"G0032": " Lazarus Group  : Lazarus Group has used malware like WhiskeyAlfa to overwrite the first 64MB of every drive with a mix of static and random buffers. A similar process is then used to wipe content in logical drives and, finally, attempt to wipe every byte of every sector on every drive. WhiskeyBravo can be used to overwrite the first 4.9MB of physical drives. WhiskeyDelta can overwrite the first 132MB or 1.5MB of each drive with random data from heap memory.", "S0576": " MegaCortex  : MegaCortex can wipe deleted data from all drives using .", "S0364": " RawDisk  : RawDisk has been used to directly access the hard disk to help overwrite arbitrarily sized portions of disk content.", "S0380": " StoneDrill  : StoneDrill can wipe the accessible physical or logical drives of the infected machine.    "}, "id": "T1561.001", "subtechniqueof": "T1561", "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Availability"], "version": "1.0", "created": "20 February 2020", "lastmodified": "28 March 2020"}, {"techniquename": "Endpoint Denial of Service", "detection": "Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.In addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt.Externally monitor the availability of services that may be targeted by an Endpoint DoS.", "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.In cases where traffic manipulation is used, there may be points in the the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.For attacks attempting to saturate the providing network, see Network Denial of Service.", "mitigations": {"M1037": " Filter Network Traffic  : Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."}, "procedureexamples": {"S0052": " OnionDuke  : OnionDuke has the capability to use a Denial of Service module.", "G0034": " Sandworm Team  : Sandworm Team temporarily disrupted service to Georgian government, non-government, and private sector websites after compromising a Georgian web hosting provider in 2019.", "S0412": " ZxShell  : ZxShell has a feature to perform SYN flood attack on a host. "}, "id": "T1499", "subtechniques": ["T1499.001", "T1499.002", "T1499.003", "T1499.004"], "tactics": ["Impact"], "platforms": ["Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "impacttype": ["Availability"], "capecid": ["CAPEC-227,", "CAPEC-131,", "CAPEC-130,", "CAPEC-125"], "contributors": ["Alfredo Oliveira, Trend Micro; David Fiser, @anu4is, Trend Micro; Magno Logan, @magnologan, Trend Micro; Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team"], "version": "1.1", "created": "18 April 2019", "lastmodified": "14 April 2021"}, {"techniquename": "OS Exhaustion Flood", "detection": "Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.", "description": "Adversaries may target the operating system (OS) for a DoS attack, since the (OS) is responsible for managing the finite resources on a system. These attacks do not need to exhaust the actual resources on a system since they can simply exhaust the limits that an OS self-imposes to prevent the entire system from being overwhelmed by excessive demands on its capacity.Different ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods. With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.ACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.", "mitigations": {"M1037": " Filter Network Traffic  : Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."}, "id": "T1499.001", "subtechniqueof": "T1499", "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "impacttype": ["Availability"], "capecid": ["CAPEC-469,", "CAPEC-482"], "version": "1.1", "created": "20 February 2020", "lastmodified": "16 September 2020"}, {"techniquename": "Service Exhaustion Flood", "detection": "Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.In addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt.Externally monitor the availability of services that may be targeted by an Endpoint DoS.", "description": "Adversaries may target the different network services provided by systems to conduct a DoS. Adversaries often target DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.One example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.Another variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.", "mitigations": {"M1037": " Filter Network Traffic  : Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport."}, "id": "T1499.002", "subtechniqueof": "T1499", "tactics": ["Impact"], "platforms": ["Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "impacttype": ["Availability"], "capecid": ["CAPEC-488,", "CAPEC-489,", "CAPEC-528"], "version": "1.2", "created": "20 February 2020", "lastmodified": "29 March 2021"}, {"techniquename": "Application Exhaustion Flood", "detection": "Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.In addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt.", "description": "Adversaries may target resource intensive features of web applications to cause a denial of service (DoS). Specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself. ", "mitigations": {"M1037": " Filter Network Traffic  : Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport."}, "id": "T1499.003", "subtechniqueof": "T1499", "tactics": ["Impact"], "platforms": ["Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "impacttype": ["Availability"], "version": "1.1", "created": "20 February 2020", "lastmodified": "29 March 2021"}, {"techniquename": "Application or System Exploitation", "detection": "Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack. Externally monitor the availability of services that may be targeted by an Endpoint DoS.", "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users.  Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent DoS condition.", "mitigations": {"M1037": " Filter Network Traffic  : Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport."}, "procedureexamples": {"S0604": " Industroyer  : Industroyer uses a custom DoS tool that leverages CVE-2015-5374 and targets hardcoded IP addresses of Siemens SIPROTEC devices."}, "id": "T1499.004", "subtechniqueof": "T1499", "tactics": ["Impact"], "platforms": ["Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "impacttype": ["Availability"], "version": "1.1", "created": "20 February 2020", "lastmodified": "29 March 2021"}, {"techniquename": "Firmware Corruption", "detection": "System firmware manipulation may be detected. Log attempts to read/write to BIOS and compare against known patching behavior.", "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.", "mitigations": {"M1046": " Boot Integrity  : Check the integrity of the existing BIOS and device firmware to determine if it is vulnerable to modification.", "M1026": " Privileged Account Management  : Prevent adversary access to privileged accounts or access necessary to replace system firmware.", "M1051": " Update Software  : Patch the BIOS and other firmware as necessary to prevent successful use of known vulnerabilities."}, "procedureexamples": {"S0606": " Bad Rabbit  : Bad Rabbit has used an executable that installs a modified bootloader to prevent normal boot-up.", "S0266": " TrickBot  : TrickBot module \"Trickboot\" can write or erase the UEFI/BIOS firmware of a compromised device."}, "id": "T1495", "subtechniques": ["No sub-techniques"], "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, root"], "impacttype": ["Availability"], "version": "1.0", "created": "12 April 2019", "lastmodified": "14 July 2020"}, {"techniquename": "Disk Wipe", "detection": "Look for attempts to read/write to sensitive locations like the partition boot sector, master boot record, disk partition table, or BIOS parameter block/superblock. Monitor for direct access read/write attempts using the  notation. Monitor for unusual kernel driver installation activity.", "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.", "mitigations": {"M1053": " Data Backup  : Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."}, "id": "T1561", "subtechniques": ["T1561.001", "T1561.002"], "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Availability"], "version": "1.0", "created": "20 February 2020", "lastmodified": "28 March 2020"}, {"techniquename": "Stored Data Manipulation", "detection": "Where applicable, inspect important file hashes, locations, and modifications for suspicious/unexpected values.", "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Consider encrypting important information to reduce an adversary\u2019s ability to perform tailored data modifications.", "M1029": " Remote Data Storage  : Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and manipulate backups.", "M1022": " Restrict File and Directory Permissions  : Ensure least privilege principles are applied to important information resources to reduce exposure to data manipulation risk."}, "procedureexamples": {"G0082": " APT38  : APT38 has used DYEPACK to create, delete, and alter records in databases used for SWIFT transactions.", "S0562": " SUNSPOT  : SUNSPOT created a copy of the SolarWinds Orion software source file with a  extension to backup the original content, wrote SUNBURST using the same filename but with a  extension, and then moved SUNBURST using  to the original filename with a  extension so it could be compiled within Orion software."}, "id": "T1565.001", "subtechniqueof": "T1565", "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Integrity"], "version": "1.0", "created": "02 March 2020", "lastmodified": "02 March 2020"}, {"techniquename": "Transmitted Data Manipulation", "detection": "Detecting the manipulation of data as at passes over a network can be difficult without the appropriate tools. In some cases integrity verification checks, such as file hashing, may be used on critical files as they transit a network. With some critical processes involving transmission of data, manual or out-of-band integrity checking may be useful for identifying manipulated data. ", "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Manipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Encrypt all important data flows to reduce the impact of tailored modifications on data in transit."}, "procedureexamples": {"G0082": " APT38  : APT38 has used DYEPACK to manipulate SWIFT messages en route to a printer.", "S0395": " LightNeuron  : LightNeuron is capable of modifying email content, headers, and attachments during transit.", "S0530": " Melcoz  : Melcoz can monitor the clipboard for cryptocurrency addresses and change the intended address to one controlled by the adversary.", "S0455": " Metamorfo  : Metamorfo has a function that can watch the contents of the system clipboard for valid bitcoin addresses, which it then overwrites with the attacker's address. "}, "id": "T1565.002", "subtechniqueof": "T1565", "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Integrity"], "version": "1.0", "created": "02 March 2020", "lastmodified": "02 March 2020"}, {"techniquename": "Runtime Data Manipulation", "detection": "Inspect important application binary file hashes, locations, and modifications for suspicious/unexpected values.", "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Adversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct Change Default File Association and Masquerading to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.", "mitigations": {"M1030": " Network Segmentation  : Identify critical business and system processes that may be targeted by adversaries and work to isolate and secure those systems against unauthorized access and tampering.", "M1022": " Restrict File and Directory Permissions  : Prevent critical business and system processes from being replaced, overwritten, or reconfigured to load potentially malicious code."}, "procedureexamples": {"G0082": " APT38  : APT38 has used DYEPACK.FOX to manipulate PDF data as it is accessed to remove traces of fraudulent SWIFT transactions from the data displayed to the end user."}, "id": "T1565.003", "subtechniqueof": "T1565", "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Integrity"], "version": "1.0", "created": "02 March 2020", "lastmodified": "28 March 2020"}, {"techniquename": "Defacement", "detection": "Monitor internal and external websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.", "description": "Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages. ", "mitigations": {"M1053": " Data Backup  : Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."}, "id": "T1491", "subtechniques": ["T1491.001", "T1491.002"], "tactics": ["Impact"], "platforms": ["IaaS, Linux, Windows, macOS"], "impacttype": ["Integrity"], "version": "1.2", "created": "08 April 2019", "lastmodified": "08 March 2021"}, {"techniquename": "Internal Defacement", "detection": "Monitor internal and websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.", "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of Internal Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.", "mitigations": {"M1053": " Data Backup  : Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."}, "procedureexamples": {"G0032": " Lazarus Group  : Lazarus Group replaced the background wallpaper of systems with a threatening image after rendering the system unbootable with a Disk Structure Wipe"}, "id": "T1491.001", "subtechniqueof": "T1491", "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "impacttype": ["Integrity"], "version": "1.0", "created": "20 February 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Disk Structure Wipe", "detection": "Look for attempts to read/write to sensitive locations like the master boot record and the disk partition table. Monitor for direct access read/write attempts using the  notation. Monitor for unusual kernel driver installation activity.", "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table. The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. Disk Structure Wipe may be performed in isolation, or along with Disk Content Wipe if all sectors of a disk are wiped.To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.", "mitigations": {"M1053": " Data Backup  : Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."}, "procedureexamples": {"G0067": " APT37  : APT37 has access to destructive malware that is capable of overwriting a machine's Master Boot Record (MBR).", "G0082": " APT38  : APT38 has used a custom MBR wiper named BOOTWRECK to render systems inoperable.", "S0607": " KillDisk  : KillDisk overwrites the first sector of the Master Boot Record with \"0x00\".", "G0032": " Lazarus Group  : Lazarus Group malware SHARPKNOT overwrites and deletes the Master Boot Record (MBR) on the victim's machine and has possessed MBR wiper malware since at least 2009.", "S0364": " RawDisk  : RawDisk was used in Shamoon to help overwrite components of disk structure like the MBR and disk partitions.", "G0034": " Sandworm Team  : Sandworm Team has used the BlackEnergy KillDisk component to corrupt the infected system's master boot record.", "S0140": " Shamoon  : Shamoon has been seen overwriting features of disk structure such as the MBR.", "S0380": " StoneDrill  : StoneDrill can wipe the master boot record of an infected computer."}, "id": "T1561.002", "subtechniqueof": "T1561", "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Availability"], "version": "1.0", "created": "20 February 2020", "lastmodified": "28 March 2020"}, {"techniquename": "External Defacement", "detection": "Monitor external websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.", "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda. External Defacement may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as Drive-by Compromise.", "mitigations": {"M1053": " Data Backup  : Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."}, "procedureexamples": {"G0034": " Sandworm Team  : Sandworm Team defaced approximately 15,000 websites belonging to Georgian government, non-government, and private sector organizations in 2019."}, "id": "T1491.002", "subtechniqueof": "T1491", "tactics": ["Impact"], "platforms": ["IaaS, Linux, Windows, macOS"], "impacttype": ["Integrity"], "version": "1.1", "created": "20 February 2020", "lastmodified": "08 March 2021"}, {"techniquename": "Transfer Data to Cloud Account", "detection": "Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. ", "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.A defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.Incidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts. ", "mitigations": {"M1037": " Filter Network Traffic  : Implement network-based filtering restrictions to prohibit data transfers to untrusted VPCs.", "M1027": " Password Policies  : Consider rotating access keys within a certain number of days to reduce the effectiveness of stolen credentials.", "M1018": " User Account Management  : Limit user account and IAM policies to the least privileges required. Consider using temporary credentials for accounts that are only valid for a certain period of time to reduce the effectiveness of compromised accounts."}, "id": "T1537", "subtechniques": ["No sub-techniques"], "tactics": ["Exfiltration"], "platforms": ["IaaS"], "permissionsrequired": ["User"], "requiresnetwork": ["Yes"], "contributors": ["Praetorian"], "version": "1.1", "created": "30 August 2019", "lastmodified": "08 March 2021"}, {"techniquename": "Data Manipulation", "detection": "Where applicable, inspect important file hashes, locations, and modifications for suspicious/unexpected values. With some critical processes involving transmission of data, manual or out-of-band integrity checking may be useful for identifying manipulated data.", "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Consider encrypting important information to reduce an adversary\u2019s ability to perform tailored data modifications.", "M1030": " Network Segmentation  : Identify critical business and system processes that may be targeted by adversaries and work to isolate and secure those systems against unauthorized access and tampering.", "M1029": " Remote Data Storage  : Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and manipulate backups.", "M1022": " Restrict File and Directory Permissions  : Ensure least privilege principles are applied to important information resources to reduce exposure to data manipulation risk."}, "id": "T1565", "subtechniques": ["T1565.001", "T1565.002", "T1565.003"], "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Integrity"], "version": "1.0", "created": "02 March 2020", "lastmodified": "24 April 2021"}, {"techniquename": "Data Encrypted for Impact", "detection": "Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories.In some cases, monitoring for unusual kernel driver installation activity can aid in detection.In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.In cloud environments, storage objects within compromised accounts may also be encrypted.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable cloud-delivered protection and Attack Surface Reduction (ASR) rules to block the execution of files that resemble ransomware. ", "M1053": " Data Backup  : Consider implementing IT disaster recovery plans that contain procedures for regularly taking and testing data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery. Consider enabling versioning in cloud environments to maintain backup copies of storage objects."}, "procedureexamples": {"G0082": " APT38  : APT38 has used Hermes ransomware to encrypt files with AES256.", "G0096": " APT41  : APT41 used a ransomware called Encryptor RaaS to encrypt files on the targeted systems and provide a ransom note to the user.", "S0640": " Avaddon  : Avaddon encrypts the victim system using a combination of AES256 and RSA encryption schemes.", "S0638": " Babuk  : Babuk can use ChaCha8 and ECDH to encrypt data.", "S0606": " Bad Rabbit  : Bad Rabbit has encrypted files and disks using AES-128-CBC and RSA-2048.", "S0570": " BitPaymer  : BitPaymer can import a hard-coded RSA 1024-bit public key, generate a 128-bit RC4 key for each file, and encrypt the file in place, appending  to the filename.", "S0611": " Clop  : Clop can encrypt files using AES, RSA, and RC4 and will add the \".clop\" extension to encrypted files. ", "S0575": " Conti  : Conti can use , , and  to rapidly encrypt files, excluding those with the extensions of .exe, .dll, and .lnk. It has used a different AES-256 encryption key per file with a bundled RAS-4096 public encryption key that is unique for each victim. Conti can use \"Windows Restart Manager\" to ensure files are unlocked and open for encryption.", "S0625": " Cuba  : Cuba has the ability to encrypt system data and add the \".cuba\" extension to encrypted files. ", "S0616": " DEATHRANSOM  : DEATHRANSOM can use public and private key pair encryption to encrypt files for ransom payment.", "S0554": " Egregor  : Egregor can encrypt all non-system files using a hybrid AES-RSA algorithm prior to displaying a ransom note. ", "S0605": " EKANS  : EKANS uses standard encryption library functions to encrypt files.", "G0046": " FIN7  : FIN7 has encrypted virtual disk volumes on ESXi servers using a version of Darkside ransomware.", "S0618": " FIVEHANDS  : FIVEHANDS can use an embedded NTRU public key to encrypt data for ransom.", "S0617": " HELLOKITTY  : HELLOKITTY can use an embedded RSA-2048 public key to encrypt victim data for ransom.", "G0119": " Indrik Spider  : Indrik Spider has encrypted domain-controlled systems using BitPaymer.", "S0389": " JCry  : JCry has encrypted files and demanded Bitcoin to decrypt those files. ", "S0607": " KillDisk  : KillDisk has a ransomware component that encrypts files with an AES key that is also RSA-1028 encrypted.", "S0372": " LockerGoga  : LockerGoga has encrypted files, including core Windows OS files, using RSA-OAEP MGF1 and then demanded Bitcoin be paid for the decryption key.", "S0449": " Maze  : Maze has disrupted systems by encrypting files on targeted machines, claiming to decrypt files if a ransom payment is made. Maze has used the ChaCha algorithm, based on Salsa20, and an RSA algorithm to encrypt files.", "S0576": " MegaCortex  : MegaCortex has used the open-source library, Mbed Crypto, and generated AES keys to carry out the file encryption process.", "S0457": " Netwalker  : Netwalker can encrypt files on infected machines to extort victims. ", "S0368": " NotPetya  : NotPetya encrypts user files and disk structures like the MBR with 2048-bit RSA.", "S0556": " Pay2Key  : Pay2Key can encrypt data on victim's machines using RSA and AES algorithms in order to extort a ransom payment for decryption.", "S0654": " ProLock  : ProLock can encrypt files on a compromised host with RC6, and encrypts the key with RSA-1024.", "S0583": " Pysa  : Pysa has used RSA and AES-CBC encryption algorithm to encrypt a list of targeted file extensions. ", "S0481": " Ragnar Locker  : Ragnar Locker encrypts files on the local machine and mapped drives prior to displaying a note demanding a ransom.", "S0496": " REvil  : REvil can encrypt files on victim systems and demands a ransom to decrypt the files.", "S0400": " RobbinHood  : RobbinHood will search for an RSA encryption key and then perform its encryption process on the system files. ", "S0446": " Ryuk  : Ryuk has used a combination of symmetric (AES) and asymmetric (RSA) encryption to encrypt files. Files have been encrypted with their own AES key and given a file extension of .RYK. Encrypted directories have had a ransom note of RyukReadMe.txt written to the directory.", "S0370": " SamSam  : SamSam encrypts victim files using RSA-2048 encryption and demands a ransom be paid in Bitcoin to decrypt those files.", "S0639": " Seth-Locker  : Seth-Locker can encrypt files on a targeted system, appending them with the suffix .seth.", "S0140": " Shamoon  : Shamoon has an operational mode for encrypting data instead of overwriting it.", "S0242": " SynAck  : SynAck encrypts the victims machine followed by asking the victim to pay a ransom. ", "G0092": " TA505  : TA505 has used a wide variety of ransomware, such as Locky, Jaff, Bart, Philadelphia, and GlobeImposter, to encrypt victim files and demand a ransom payment.", "S0595": " ThiefQuest  : ThiefQuest encrypts a set of file extensions on a host, deletes the original files, and provides a ransom note with no contact information.", "S0366": " WannaCry  : WannaCry encrypts user files and demands that a ransom be paid in Bitcoin to decrypt those files.", "S0612": " WastedLocker  : WastedLocker can encrypt data and leave a ransom note. ", "S0341": " Xbash  : Xbash has maliciously encrypted victim's database systems and demanded a cryptocurrency ransom be paid.", "S0658": " XCSSET  : XCSSET performs AES-CBC encryption on files under , , and with a fixed key and renames files to give them a  extension. Only files with sizes less than 500MB are encrypted."}, "id": "T1486", "subtechniques": ["No sub-techniques"], "tactics": ["Impact"], "platforms": ["IaaS, Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Availability"], "contributors": ["Oleg Kolesnikov, Securonix"], "version": "1.2", "created": "15 March 2019", "lastmodified": "16 August 2021"}, {"techniquename": "Exfiltration Over Web Service", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.", "description": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.Web service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.", "mitigations": {"M1057": " Data Loss Prevention  : Data loss prevention can be detect and block sensitive data being uploaded to web services via web browsers.", "M1021": " Restrict Web-Based Content  : Web proxies can be used to enforce an external network communication policy that prevents use of unauthorized external services."}, "procedureexamples": {"G0007": " APT28  : APT28 can exfiltrate data over Google Drive. ", "S0547": " DropBook  : DropBook has used legitimate web services to exfiltrate data.", "S0508": " Ngrok  : Ngrok has been used by threat actors to configure servers for data exfiltration."}, "id": "T1567", "subtechniques": ["T1567.001", "T1567.002"], "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "contributors": ["William Cain"], "version": "1.1", "created": "09 March 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Exfiltration to Cloud Storage", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to known cloud storage services. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.", "description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.Examples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service. ", "mitigations": {"M1021": " Restrict Web-Based Content  : Web proxies can be used to enforce an external network communication policy that prevents use of unauthorized external services."}, "procedureexamples": {"S0635": " BoomBox  : BoomBox can upload data to dedicated per-victim folders in Dropbox.", "S0651": " BoxCaon  : BoxCaon has the capability to download folders' contents on the system and upload the results back to its Dropbox drive.", "G0114": " Chimera  : Chimera has exfiltrated stolen data to OneDrive accounts.", "S0538": " Crutch  : Crutch has exfiltrated stolen data to Dropbox.", "S0363": " Empire  : Empire can use Dropbox for data exfiltration.", "G0046": " FIN7  : FIN7 has exfiltrated stolen data to the MEGA file sharing site.", "G0125": " HAFNIUM  : HAFNIUM has exfiltrated data to file sharing sites, including MEGA.", "S0037": " HAMMERTOSS  : HAMMERTOSS exfiltrates data by uploading it to accounts created by the actors on Web cloud storage providers for the adversaries to retrieve later.", "G0065": " Leviathan  : Leviathan has used an uploader known as LUNCHMONEY that can exfiltrate files to Dropbox.", "S0340": " Octopus  : Octopus has exfiltrated data to file sharing sites.", "S0629": " RainyDay  : RainyDay can use a file exfiltration tool to upload specific files to Dropbox.   ", "G0010": " Turla  : Turla has used WebDAV to upload stolen USB files to a cloud drive. Turla has also exfiltrated stolen files to OneDrive and 4shared.", "G0128": " ZIRCONIUM  : ZIRCONIUM has exfiltrated stolen data to Dropbox."}, "id": "T1567.002", "subtechniqueof": "T1567", "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "version": "1.0", "created": "09 March 2020", "lastmodified": "28 March 2020"}, {"techniquename": "Exfiltration to Code Repository", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to code repositories. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.", "description": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network. ", "mitigations": {"M1021": " Restrict Web-Based Content  : Web proxies can be used to enforce an external network communication policy that prevents use of unauthorized external services."}, "procedureexamples": {"S0363": " Empire  : Empire can use GitHub for data exfiltration."}, "id": "T1567.001", "subtechniqueof": "T1567", "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "version": "1.0", "created": "09 March 2020", "lastmodified": "28 March 2020"}, {"techniquename": "Scheduled Transfer", "detection": "Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.", "description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel or Exfiltration Over Alternative Protocol.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools. "}, "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL collects, compresses, encrypts, and exfiltrates data to the C2 server every 10 minutes.", "S0154": " Cobalt Strike  : Cobalt Strike can set its Beacon payload to reach out to the C2 server on an arbitrary and random interval.", "S0126": " ComRAT  : ComRAT has been programmed to sleep outside local business hours (9 to 5, Monday to Friday).", "S0200": " Dipsind  : Dipsind can be configured to only run during normal working hours, which would make its communications harder to distinguish from normal traffic.", "G0126": " Higaisa  : Higaisa sent the victim computer identifier in a User-Agent string back to the C2 server every 10 minutes.", "S0283": " jRAT  : jRAT can be configured to reconnect at certain intervals.", "S0265": " Kazuar  : Kazuar can sleep for a specific time and be set to communicate at specific intervals.", "S0395": " LightNeuron  : LightNeuron can be configured to exfiltrate data during nighttime or working hours.", "S0211": " Linfo  : Linfo creates a backdoor through which remote attackers can change the frequency at which compromised hosts contact remote C2 infrastructure.", "S0409": " Machete  : Machete sends stolen data to the C2 server every 10 minutes. ", "S0223": " POWERSTATS  : POWERSTATS can sleep for a given number of seconds.", "S0596": " ShadowPad  : ShadowPad has sent data back to C2 every 8 hours.", "S0444": " ShimRat  : ShimRat can sleep when instructed to do so by the C2.  "}, "id": "T1029", "subtechniques": ["No sub-techniques"], "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "version": "1.1", "created": "31 May 2017", "lastmodified": "28 March 2020"}, {"techniquename": "Account Access Removal", "detection": "Use process monitoring to monitor the execution and command line parameters of binaries involved in deleting accounts or changing passwords, such as use of . Windows event logs may also designate activity associated with an adversary's attempt to remove access to an account:Alerting on  and these Event IDs may generate a high degree of false positives, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.", "description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.Adversaries may also subsequently log off and/or reboot boxes to set malicious changes into place.", "procedureexamples": {"S0372": " LockerGoga  : LockerGoga has been observed changing account passwords and logging off current users.", "S0576": " MegaCortex  : MegaCortex has changed user account passwords and logged users off the system."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1531", "subtechniques": ["No sub-techniques"], "tactics": ["Impact"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Availability"], "version": "1.0", "created": "09 October 2019", "lastmodified": "14 July 2020"}, {"techniquename": "Exfiltration over USB", "detection": "Monitor file access on removable media. Detect processes that execute when removable media are mounted.", "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.", "mitigations": {"M1057": " Data Loss Prevention  : Data loss prevention can detect and block sensitive data being copied to USB devices.", "M1042": " Disable or Remove Feature or Program  : Disable Autorun if it is unnecessary.  Disallow or restrict removable media at an organizational policy level if they are not required for business operations. ", "M1034": " Limit Hardware Installation  : Limit the use of USB devices and removable media within a network."}, "procedureexamples": {"S0092": " Agent.btz  : Agent.btz creates a file named thumb.dd on all USB flash drives connected to the victim. This file contains information about the infected system and activity logs.", "S0409": " Machete  : Machete has a feature to copy files from every drive onto a removable drive in a hidden folder.", "G0129": " Mustang Panda  : Mustang Panda has used a customized PlugX variant which could exfiltrate documents from air-gapped networks.", "S0125": " Remsec  : Remsec contains a module to move data from airgapped networks to Internet-connected systems by using a removable USB device.", "S0035": " SPACESHIP  : SPACESHIP copies staged data to removable drives when they are inserted into the system.", "G0081": " Tropic Trooper  : Tropic Trooper has exfiltrated data using USB storage devices.   ", "S0136": " USBStealer  : USBStealer exfiltrates collected files via removable media from air-gapped victims."}, "id": "T1052.001", "subtechniqueof": "T1052", "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Presence of physical medium or device"], "contributors": ["William Cain"], "version": "1.1", "created": "11 March 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Data Destruction", "detection": "Use process monitoring to monitor the execution and command-line parameters of binaries that could be involved in data destruction activity, such as . Monitor for the creation of suspicious files as well as high unusual file modification activity. In particular, look for large quantities of file modifications in user directories and under .In cloud environments, the occurrence of anomalous high-volume deletion events, such as the  and  events in AWS, or a high quantity of data deletion events, such as , within a short period of time may indicate suspicious activity.", "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as  and  often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares..In cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.", "mitigations": {"M1053": " Data Backup  : Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."}, "procedureexamples": {"G0082": " APT38  : APT38 has used a custom secure delete function to make deleted files unrecoverable.", "S0089": " BlackEnergy  : BlackEnergy 2 contains a \"Destroy\" plug-in that destroys data stored on victim hard drives by overwriting file contents.", "S0604": " Industroyer  : Industroyer\u2019s data wiper module clears registry keys and overwrites both ICS configuration and Windows files.", "S0265": " Kazuar  : Kazuar can overwrite files with random data before deleting them.", "S0607": " KillDisk  : KillDisk deletes system files to make the OS unbootable. KillDisk also targets and deletes files with 35 different file extensions.", "G0032": " Lazarus Group  : Lazarus Group has used a custom secure delete function to overwrite file contents with data from heap memory.", "S0365": " Olympic Destroyer  : Olympic Destroyer overwrites files locally and on remote shares. ", "S0139": " PowerDuke  : PowerDuke has a command to write random data across a file and delete it.", "S0238": " Proxysvc  : Proxysvc can overwrite files indicated by the attacker before deleting them.", "S0364": " RawDisk  : RawDisk was used in Shamoon to write to protected system locations such as the MBR and disk partitions in an effort to destroy data.", "S0496": " REvil  : REvil has the capability to destroy files and folders.", "G0034": " Sandworm Team  : Sandworm Team has used the BlackEnergy KillDisk component to overwrite files on Windows-based Human-Machine Interfaces. ", "S0195": " SDelete  : SDelete deletes data in a way that makes it unrecoverable.", "S0140": " Shamoon  : Shamoon attempts to overwrite operating system files and disk structures with image files. In a later variant, randomly generated data was used for data overwrites.", "S0380": " StoneDrill  : StoneDrill has a disk wiper module that targets files other than those in the Windows directory.", "S0341": " Xbash  : Xbash has destroyed Linux-based databases as part of its ransomware capabilities.  "}, "id": "T1485", "subtechniques": ["No sub-techniques"], "tactics": ["Impact"], "platforms": ["IaaS, Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "impacttype": ["Availability"], "contributors": ["Brent Murphy, Elastic; David French, Elastic; Prasad Somasamudram, McAfee; Sekhar Sarukkai, McAfee ; Syed Ummar Farooqh, McAfee; Varonis Threat Labs"], "version": "1.1", "created": "14 March 2019", "lastmodified": "25 March 2021"}, {"techniquename": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  ", "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields. ", "mitigations": {"M1057": " Data Loss Prevention  : Data loss prevention can detect and block sensitive data being sent over unencrypted protocols.", "M1037": " Filter Network Traffic  : Enforce proxies and use dedicated servers for services such as DNS and only allow those systems to communicate over respective ports/protocols, instead of all systems within a network. ", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level. ", "M1030": " Network Segmentation  : Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network."}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has routines for exfiltration over SMTP, FTP, and HTTP.", "G0050": " APT32  : APT32's backdoor can exfiltrate data by encoding it in the subdomain field of DNS packets.", "G0064": " APT33  : APT33 has used FTP to exfiltrate files (separately from the C2 channel).", "S0190": " BITSAdmin  : BITSAdmin can be used to create BITS Jobs to upload files from a compromised host.", "S0252": " Brave Prince  : Some Brave Prince variants have used South  Korea's Daum email service to exfiltrate information, and later variants have posted the data to a web server via an HTTP post command.", "S0335": " Carbon  : Carbon uses HTTP to send data to the C2 server.", "S0107": " Cherry Picker  : Cherry Picker exfiltrates files over FTP.", "S0492": " CookieMiner  : CookieMiner has used the  command to exfiltrate data over HTTP.", "S0212": " CORALDECK  : CORALDECK has exfiltrated data in HTTP POST headers.", "S0050": " CosmicDuke  : CosmicDuke exfiltrates collected files over FTP or WebDAV. Exfiltration servers can be separately configured from C2 servers.", "S0281": " Dok  : Dok exfiltrates logs of its execution stored in the  folder over FTP using the  command. ", "G0037": " FIN6  : FIN6 has sent stolen payment card data to remote servers via HTTP POSTs.", "G0061": " FIN8  : FIN8 has used FTP to exfiltrate collected data.", "S0095": " FTP  : FTP may be used to exfiltrate data separate from the main command and control protocol.", "S0487": " Kessel  : Kessel can exfiltrate credentials and other information via HTTP POST request, TCP, and DNS.", "S0356": " KONNI  : KONNI has used FTP to exfiltrate reconnaissance data out.", "G0032": " Lazarus Group  : Lazarus Group malware SierraBravo-Two generates an email message via SMTP containing information about newly infected victims.", "G0049": " OilRig  : OilRig has exfiltrated data over FTP separately from its primary C2 channel over DNS.", "S0428": " PoetRAT  : PoetRAT has used FTP for exfiltration.", "S0125": " Remsec  : Remsec can exfiltrate data via a DNS tunnel or email, separately from its C2 channel.", "G0076": " Thrip  : Thrip has used WinSCP to exfiltrate data from a targeted organization over FTP.", "S0466": " WindTail  : WindTail has the ability to automatically exfiltrate files using the macOS built-in utility /usr/bin/curl.", "G0102": " Wizard Spider  : Wizard Spider has exfiltrated victim information using FTP."}, "id": "T1048.003", "subtechniqueof": "T1048", "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "contributors": ["William Cain"], "version": "1.1", "created": "15 March 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Artifacts and evidence of symmetric key exchange may be recoverable by analyzing network traffic or looking for hard-coded values within malware. If recovered, these keys can be used to decrypt network data from command and control channels. ", "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Symmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. Network protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP). ", "mitigations": {"M1037": " Filter Network Traffic  : Enforce proxies and use dedicated servers for services such as DNS and only allow those systems to communicate over respective ports/protocols, instead of all systems within a network. ", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level. ", "M1030": " Network Segmentation  : Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network."}, "id": "T1048.001", "subtechniqueof": "T1048", "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "version": "1.0", "created": "15 March 2020", "lastmodified": "28 March 2020"}, {"techniquename": "Exfiltration Over C2 Channel", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. ", "description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.", "mitigations": {"M1057": " Data Loss Prevention  : Data loss prevention can detect and block sensitive data being sent over unencrypted protocols.", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools. "}, "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL exfiltrates data over the same channel used for C2.", "S0584": " AppleJeus  : AppleJeus has exfiltrated collected host information to a C2 server.", "S0622": " AppleSeed  : AppleSeed can exfiltrate files via the C2 channel.", "G0022": " APT3  : APT3 has a tool that exfiltrates data over the C2 channel.", "G0050": " APT32  : APT32's backdoor has exfiltrated data using the already opened channel with its C&C server.", "G0087": " APT39  : APT39 has exfiltrated stolen victim data through C2 communications.", "S0373": " Astaroth  : Astaroth exfiltrates collected information from its r1.log file to the external C2 server. ", "S0438": " Attor  : Attor has exfiltrated data over the C2 channel.", "S0031": " BACKSPACE  : Adversaries can direct BACKSPACE to upload files to the C2 Server.", "S0234": " Bandook  : Bandook can upload files from a victim's machine over the C2 channel.", "S0239": " Bankshot  : Bankshot exfiltrates data over its C2 channel.", "S0520": " BLINDINGCAN  : BLINDINGCAN has sent user and system information to a C2 server via HTTP POST requests.", "S0657": " BLUELIGHT  : BLUELIGHT has exfiltrated data over its C2 channel.", "S0651": " BoxCaon  : BoxCaon uploads files and data from a compromised host over the existing C2 channel.", "S0077": " CallMe  : CallMe exfiltrates data to its C2 server over the same protocol as C2 communications.", "S0351": " Cannon  : Cannon exfiltrates collected data over email via SMTP/S and POP3/S C2 channels.", "S0484": " Carberp  : Carberp has exfiltrated data via HTTP to already established C2 servers.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell can upload files over the C2 channel. ", "G0114": " Chimera  : Chimera has used Cobalt Strike C2 beacons for data exfiltration. ", "S0538": " Crutch  : Crutch can exfiltrate data over the primary C2 channel (Dropbox HTTP API).", "S0600": " Doki  : Doki has used Ngrok to establish C2 and exfiltrate data.", "S0502": " Drovorub  : Drovorub can exfiltrate files over C2 infrastructure.", "S0062": " DustySky  : DustySky has exfiltrated data to the C2 server.", "S0024": " Dyre  : Dyre has the ability to send information staged on a compromised host externally to C2.", "S0377": " Ebury  : Ebury can exfiltrate SSH credentials through custom DNS queries.", "S0367": " Emotet  : Emotet has been seen exfiltrating system information stored within cookies sent within an HTTP GET request back to its C2 servers. ", "S0363": " Empire  : Empire can send data gathered from a target through the command and control channel.", "S0568": " EVILNUM  : EVILNUM can upload files over the C2 channel from the infected host. ", "G0101": " Frankenstein  : Frankenstein has collected information via Empire, which is automatically sent the data back to the adversary's C2.", "G0093": " GALLIUM  : GALLIUM used Web shells and HTRAN for C2 and to exfiltrate data.", "G0047": " Gamaredon Group  : A Gamaredon Group file stealer can transfer collected files to a hardcoded C2 server.", "S0493": " GoldenSpy  : GoldenSpy has exfiltrated host environment information to an external C2 domain via port 9006.  ", "S0588": " GoldMax  : GoldMax can exfiltrate files over the existing C2 channel.", "S0477": " Goopy  : Goopy has the ability to exfiltrate data over the Microsoft Outlook C2 channel.", "S0531": " Grandoreiro  : Grandoreiro can send data it retrieves to the C2 server.", "S0632": " GrimAgent  : GrimAgent has sent data related to a compromise host over its C2 channel.", "S0391": " HAWKBALL  : HAWKBALL has sent system information and files over the C2 channel.", "G0126": " Higaisa  : Higaisa exfiltrated data over its C2 channel.", "S0376": " HOPLIGHT  : HOPLIGHT has used its C2 channel to exfiltrate data.    ", "S0431": " HotCroissant  : HotCroissant has the ability to download files from the infected host to the command and control (C2) server.", "S0434": " Imminent Monitor  : Imminent Monitor has uploaded a file containing debugger logs, network information and system information to the C2.", "S0604": " Industroyer  : Industroyer sends information about hardware profiles and previously-received commands back to the C2 server in a POST-request.", "G0004": " Ke3chang  : Ke3chang transferred compressed and encrypted RAR files containing exfiltration through the established backdoor command and control channel during operations.", "S0487": " Kessel  : Kessel has exfiltrated information gathered from the infected system to the C2 server.", "S0526": " KGH_SPY  : KGH_SPY can exfiltrate collected information from the host to the C2 server.", "G0094": " Kimsuky  : Kimsuky has exfiltrated data over its email C2 channel.", "G0032": " Lazarus Group  : Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is uploaded to one of its 10 C2 servers. Another Lazarus Group malware sample also performs exfiltration over the C2 channel.", "G0065": " Leviathan  : Leviathan has exfiltrated data over its C2 channel.", "S0395": " LightNeuron  : LightNeuron exfiltrates data over its email C2 channel.", "S0447": " Lokibot  : Lokibot has the ability to initiate contact with command and control (C2) to exfiltrate stolen data.", "S0409": " Machete  : Machete's collected data is exfiltrated over the same channel used for C2.", "S0652": " MarkiRAT  : MarkiRAT can exfiltrate locally stored data via its C2.", "S0459": " MechaFlounder  : MechaFlounder has the ability to send the compromised user's account name and hostname within a URL to C2.", "S0455": " Metamorfo  : Metamorfo can send the data it collects to the C2 server. ", "S0079": " MobileOrder  : MobileOrder exfiltrates data to its C2 server over the same protocol as C2 communications.", "G0069": " MuddyWater  : MuddyWater has used C2 infrastructure to receive exfiltrated data.", "S0034": " NETEAGLE  : NETEAGLE is capable of reading files over the C2 channel.", "S0385": " njRAT  : njRAT has used HTTP to receive stolen information from the infected machine.   ", "S0340": " Octopus  : Octopus has uploaded stolen files and data from a victim's machine over its C2 channel.", "S0439": " Okrum  : Data exfiltration is done by Okrum using the already opened channel with the C2 server.", "S0264": " OopsIE  : OopsIE can upload files from the victim's machine to its C2 server.", "G0116": " Operation Wocao  : Operation Wocao has used the Xserver backdoor to exfiltrate data.", "S0587": " Penquin  : Penquin can execute the command code  to send files to C2.", "S0428": " PoetRAT  : PoetRAT has exfiltrated data over the C2 channel.", "S0441": " PowerShower  : PowerShower has used a PowerShell document stealer module to pack and exfiltrate .txt, .pdf, .xls or .doc files smaller than 5MB that were modified during the past two days.", "S0238": " Proxysvc  : Proxysvc performs data exfiltration over the control server channel using a custom protocol.", "S0078": " Psylo  : Psylo exfiltrates data to its C2 server over the same protocol as C2 communications.", "S0147": " Pteranodon  : Pteranodon exfiltrates screenshot files to its C2 server.", "S0192": " Pupy  : Pupy can send screenshots files, keylogger data, files, and recorded audio back to the C2 server.", "S0650": " QakBot  : QakBot can send stolen information to C2 nodes including passwords, accounts, and emails.", "S0495": " RDAT  : RDAT can exfiltrate data gathered from the infected system via the established Exchange Web Services API C2 channel.", "S0375": " Remexi  : Remexi performs exfiltration over BITSAdmin, which is also used for the C2 channel.", "S0496": " REvil  : REvil can exfiltrate host and malware information to C2 servers.", "S0448": " Rising Sun  : Rising Sun can send data gathered from the infected machine via HTTP POST request to the C2.    ", "S0240": " ROKRAT  : ROKRAT sends collected files back over same C2 channel.", "G0034": " Sandworm Team  : Sandworm Team has sent system information to its C2 server using HTTP.   ", "S0445": " ShimRatReporter  : ShimRatReporter sent generated reports to the C2 via HTTP POST requests.", "S0610": " SideTwist  : SideTwist has exfiltrated data over its C2 channel.", "S0633": " Sliver  : Sliver can exfiltrate files from the victim using the  command.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has sent system information to a C2 server via HTTP and HTTPS POST requests.", "S0649": " SMOKEDHAM  : SMOKEDHAM has exfiltrated data to its C2 server.", "S0543": " Spark  : Spark has exfiltrated data over the C2 channel. ", "G0038": " Stealth Falcon  : After data is collected by Stealth Falcon malware, it is exfiltrated over the existing C2 channel.", "S0491": " StrongPity  : StrongPity can exfiltrate collected documents through C2 channels.", "S0603": " Stuxnet  : Stuxnet sends compromised victim information via HTTP.", "S0467": " TajMahal  : TajMahal has the ability to send collected files over its C2.", "S0595": " ThiefQuest  : ThiefQuest exfiltrates targeted file extensions in the  folder to the command and control server via unencrypted HTTP. Network packets contain a string with two pieces of information: a file path and the contents of the file in a base64 encoded string.", "S0266": " TrickBot  : TrickBot can send information about the compromised host and upload data to a hardcoded C2 server.", "S0386": " Ursnif  : Ursnif has used HTTP POSTs to exfil gathered information.", "S0476": " Valak  : Valak has the ability to exfiltrate data over the C2 channel.", "G0102": " Wizard Spider  : Wizard Spider has exfiltrated domain credentials and network enumeration information over command and control (C2) channels.", "S0658": " XCSSET  : XCSSET exfiltrates data stolen from a system over its C2 channel.", "S0251": " Zebrocy  : Zebrocy has exfiltrated data to the designated C2 server using HTTP POST requests. ", "G0128": " ZIRCONIUM  : ZIRCONIUM has exfiltrated files via the Dropbox API C2."}, "id": "T1041", "subtechniques": ["No sub-techniques"], "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "contributors": ["William Cain"], "version": "2.1", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Exfiltration Over Bluetooth", "detection": "Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious.Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.", "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.Adversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable Bluetooth in local computer security settings or by group policy if it is not needed within an environment.", "M1028": " Operating System Configuration  : Prevent the creation of new network adapters where possible."}, "procedureexamples": {"S0143": " Flame  : Flame has a module named BeetleJuice that contains Bluetooth functionality that may be used in different ways, including transmitting encoded information from the infected system over the Bluetooth protocol, acting as a Bluetooth beacon, and identifying other Bluetooth devices in the vicinity."}, "id": "T1011.001", "subtechniqueof": "T1011", "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "09 March 2020", "lastmodified": "28 March 2020"}, {"techniquename": "Exfiltration Over Physical Medium", "detection": "Monitor file access on removable media. Detect processes that execute when removable media are mounted.", "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.", "mitigations": {"M1057": " Data Loss Prevention  : Data loss prevention can detect and block sensitive data being copied to physical mediums.", "M1042": " Disable or Remove Feature or Program  : Disable Autorun if it is unnecessary.  Disallow or restrict removable media at an organizational policy level if they are not required for business operations. ", "M1034": " Limit Hardware Installation  : Limit the use of USB devices and removable media within a network."}, "id": "T1052", "subtechniques": ["T1052.001"], "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Presence of physical medium or device"], "contributors": ["William Cain"], "version": "1.2", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. ", "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Asymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. Network protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol. ", "mitigations": {"M1057": " Data Loss Prevention  : Data loss prevention can detect and block sensitive data being uploaded via web browsers.", "M1037": " Filter Network Traffic  : Enforce proxies and use dedicated servers for services such as DNS and only allow those systems to communicate over respective ports/protocols, instead of all systems within a network. ", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level. ", "M1030": " Network Segmentation  : Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network."}, "procedureexamples": {"G0007": " APT28  : APT28 has exfiltrated archives of collected data previously staged on a target's OWA server via HTTPS.", "G0016": " APT29  : APT29 has exfiltrated collected data over a simple HTTPS request to a password-protected archive staged on a victim's OWA servers."}, "id": "T1048.002", "subtechniqueof": "T1048", "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "contributors": ["William Cain"], "version": "1.1", "created": "15 March 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Automated Exfiltration", "detection": "Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious.", "description": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.", "procedureexamples": {"S0438": " Attor  : Attor has a file uploader plugin that automatically exfiltrates the collected data and log files to the C2 server.", "S0050": " CosmicDuke  : CosmicDuke exfiltrates collected files automatically over FTP to remote servers.", "S0538": " Crutch  : Crutch has automatically exfiltrated stolen files to Dropbox.", "S0600": " Doki  : Doki has used a script that gathers information from a hardcoded list of IP addresses and uploads to an Ngrok URL.", "S0377": " Ebury  : Ebury can automatically exfiltrate gathered SSH credentials.", "G0101": " Frankenstein  : Frankenstein has collected information via Empire, which is automatically sent the data back to the adversary's C2.", "G0047": " Gamaredon Group  : Gamaredon Group has used modules that automatically upload gathered documents to the C2 server.", "G0072": " Honeybee  : Honeybee performs data exfiltration is accomplished through the following command-line command: .", "S0395": " LightNeuron  : LightNeuron can be configured to automatically exfiltrate files under a specified directory.", "S0409": " Machete  : Machete\u2019s collected files are exfiltrated automatically to remote servers. ", "S0643": " Peppy  : Peppy has the ability to automatically exfiltrate files and keylogs.", "S0090": " Rover  : Rover automatically searches for files on local drives based on a predefined list of file extensions and sends them to the command and control server every 60 minutes. Rover also automatically sends keylogger files and screenshots to the C2 server on a regular timeframe.", "S0445": " ShimRatReporter  : ShimRatReporter sent collected system and network information compiled into a report to an adversary-controlled C2.", "G0121": " Sidewinder  : Sidewinder has configured tools to automatically send collected files to attacker controlled servers.", "S0491": " StrongPity  : StrongPity can automatically exfiltrate collected documents to the C2 server.", "S0467": " TajMahal  : TajMahal has the ability to manage an automated queue of egress files and commands sent to its C2.", "S0131": " TINYTYPHON  : When a document is found matching one of the extensions in the configuration, TINYTYPHON uploads it to the C2 server.", "G0081": " Tropic Trooper  : Tropic Trooper has used a copy function to automatically exfiltrate sensitive data from air-gapped systems using USB storage.    ", "S0136": " USBStealer  : USBStealer automatically exfiltrates collected files via removable media when an infected device is connected to the second victim after receiving commands from the first victim."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1020", "subtechniques": ["T1020.001"], "tactics": ["Exfiltration"], "platforms": ["Linux, Network, Windows, macOS"], "requiresnetwork": ["Yes"], "contributors": ["ExtraHop"], "version": "1.2", "created": "31 May 2017", "lastmodified": "16 August 2021"}, {"techniquename": "Exfiltration Over Alternative Protocol", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. ", "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different protocol channels could also include Web services such as cloud storage. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. Exfiltration Over Alternative Protocol can be done using various common operating system utilities such as Net/SMB or FTP. On macOS and Linux  may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system. ", "mitigations": {"M1057": " Data Loss Prevention  : Data loss prevention can detect and block sensitive data being uploaded via web browsers.", "M1037": " Filter Network Traffic  : Enforce proxies and use dedicated servers for services such as DNS and only allow those systems to communicate over respective ports/protocols, instead of all systems within a network.", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level.", "M1030": " Network Segmentation  : Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network."}, "procedureexamples": {"S0482": " Bundlore  : Bundlore uses the  command to exfiltrate archived data to a URL.(citation: 20 macOS Common Tools and Techniques)", "S0631": " Chaes  : Chaes has exfiltrated its collected data from the infected machine to the C2, sometimes using the MIME protocol. ", "S0503": " FrameworkPOS  : FrameworkPOS can use DNS tunneling for exfiltration of credit card data.", "S0203": " Hydraq  : Hydraq connects to a predefined domain on port 443 to exfil gathered information.", "S0641": " Kobalos  : Kobalos can exfiltrate credentials over the network via UDP. ", "S0428": " PoetRAT  : PoetRAT has used a .NET tool named dog.exe to exiltrate information over an e-mail account."}, "id": "T1048", "subtechniques": ["T1048.001", "T1048.002", "T1048.003"], "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "contributors": ["Alfredo Abarca; William Cain"], "version": "1.3", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "One-Way Communication", "detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows. User behavior monitoring may help to detect abnormal patterns of activity.", "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.", "M1021": " Restrict Web-Based Content  : Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."}, "procedureexamples": {"S0568": " EVILNUM  : EVILNUM has used a one-way communication method via GitLab and Digital Point to perform C2.", "S0037": " HAMMERTOSS  : The \"tDiscoverer\" variant of HAMMERTOSS establishes a C2 channel by downloading resources from Web services like Twitter and GitHub. HAMMERTOSS binaries contain an algorithm that generates a different Twitter handle for the malware to check for instructions every day.", "G0065": " Leviathan  : Leviathan has received C2 instructions from user profiles created on legitimate websites such as Github and TechNet.", "S0455": " Metamorfo  : Metamorfo has downloaded a zip file for execution on the system. ", "S0052": " OnionDuke  : OnionDuke uses Twitter as a backup C2."}, "id": "T1102.003", "subtechniqueof": "T1102", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "14 March 2020", "lastmodified": "26 March 2020"}, {"techniquename": "Traffic Duplication", "detection": "Monitor network traffic for uncommon data flows (e.g. unusual network communications, suspicious communications that have never been seen before, communications sending fixed size data packets at regular intervals).  Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. ", "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure.  Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device.  Adversaries may abuse traffic mirroring to mirror or redirect network traffic through other network infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through ROMMONkit or Patch System Image. Adversaries may use traffic duplication in conjunction with Network Sniffing, Input Capture, or Adversary-in-the-Middle depending on the goals and objectives of the adversary.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS."}, "id": "T1020.001", "subtechniqueof": "T1020", "tactics": ["Exfiltration"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "capecid": ["CAPEC-117"], "version": "1.1", "created": "19 October 2020", "lastmodified": "16 August 2021"}, {"techniquename": "Data Transfer Size Limits", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. ", "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level."}, "procedureexamples": {"G0007": " APT28  : APT28 has split archived exfiltration files into chunks smaller than 1MB.", "S0030": " Carbanak  : Carbanak exfiltrates data in compressed chunks if a message is larger than 4096 bytes .", "S0154": " Cobalt Strike  : Cobalt Strike will break large data sets into smaller chunks for exfiltration.", "S0170": " Helminth  : Helminth splits data into chunks up to 23 bytes and sends the data in DNS queries to its C2 server.", "S0487": " Kessel  : Kessel can split the data to be exilftrated into chunks that will fit in subdomains of DNS queries.", "S0644": " ObliqueRAT  : ObliqueRAT can break large files of interest into smaller chunks to prepare them for exfiltration.", "S0264": " OopsIE  : OopsIE exfiltrates command output and collected files to its C2 server in 1500-byte blocks.", "S0150": " POSHSPY  : POSHSPY uploads data in 2048-byte chunks.", "S0495": " RDAT  : RDAT can upload a file via HTTP POST response to the C2 split into 102,400-byte portions. RDAT can also download data from the C2 which is split into 81,920-byte portions.  ", "G0027": " Threat Group-3390  : Threat Group-3390 actors have split RAR files for exfiltration into parts."}, "id": "T1030", "subtechniques": ["No sub-techniques"], "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "version": "1.0", "created": "31 May 2017", "lastmodified": "14 July 2020"}, {"techniquename": "Exfiltration Over Other Network Medium", "detection": "Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious.Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.", "description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network", "mitigations": {"M1028": " Operating System Configuration  : Prevent the creation of new network adapters where possible. "}, "id": "T1011", "subtechniques": ["T1011.001"], "tactics": ["Exfiltration"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "contributors": ["Itzik Kotler, SafeBreach"], "version": "1.1", "created": "31 May 2017", "lastmodified": "28 March 2020"}, {"techniquename": "Bidirectional Communication", "detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.", "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. ", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.", "M1021": " Restrict Web-Based Content  : Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."}, "procedureexamples": {"G0005": " APT12  : APT12 has used blogs and WordPress for C2 infrastructure.", "G0007": " APT28  : APT28 has used Google Drive for C2.", "G0016": " APT29  : APT29 has used social media platforms to hide communications to C2 servers.", "G0067": " APT37  : APT37 leverages social networking sites and cloud platforms (AOL, Twitter, Yandex, Mediafire, pCloud, Dropbox, and Box) for C2.", "G0087": " APT39  : APT39 has communicated with C2 through files uploaded to and downloaded from DropBox.", "S0128": " BADNEWS  : BADNEWS can use multiple C2 channels, including RSS feeds, Github, forums, and blogs.", "S0069": " BLACKCOFFEE  : BLACKCOFFEE has also obfuscated its C2 traffic as normal traffic to sites such as Github.", "S0657": " BLUELIGHT  : BLUELIGHT can use different cloud providers for its C2.", "S0651": " BoxCaon  : BoxCaon has used DropBox for C2 communications. ", "S0025": " CALENDAR  : The CALENDAR malware communicates through the use of events in Google Calendar.", "G0008": " Carbanak  : Carbanak has used a VBScript named \"ggldr\" that uses Google Apps Script, Sheets, and Forms services for C2.", "S0054": " CloudDuke  : One variant of CloudDuke uses a Microsoft OneDrive account to exchange commands and stolen data with its operators.", "S0244": " Comnie  : Comnie uses blogs and third-party sites (GitHub, tumbler, and BlogSpot) to avoid DNS-based blocking of their communication to the command and control server.", "S0126": " ComRAT  : ComRAT has the ability to use the Gmail web UI to receive commands and exfiltrate information.", "S0046": " CozyCar  : CozyCar uses Twitter as a backup C2 channel to Twitter accounts specified in its configuration file.", "S0538": " Crutch  : Crutch can use Dropbox to receive commands and upload stolen data.", "S0213": " DOGCALL  : DOGCALL is capable of leveraging cloud storage APIs such as Cloud, Box, Dropbox, and Yandex for C2.", "S0363": " Empire  : Empire can use Dropbox and GitHub for C2.", "G0046": " FIN7  : FIN7 used legitimate services like Google Docs, Google Scripts, and Pastebin for C2.", "S0026": " GLOOXMAIL  : GLOOXMAIL communicates to servers operated by Google using the Jabber/XMPP protocol.", "S0531": " Grandoreiro  : Grandoreiro can utilize web services including Google sites to send and receive C2 data.", "S0215": " KARAE  : KARAE can use public cloud-based storage providers for command and control.", "S0265": " Kazuar  : Kazuar has used compromised WordPress blogs as C2 servers.", "S0042": " LOWBALL  : LOWBALL uses the Dropbox cloud storage service for command and control.", "G0059": " Magic Hound  : Magic Hound malware can use a SOAP Web service to communicate with its C2 server.", "G0069": " MuddyWater  : MuddyWater has used web services including OneHub to distribute remote access tools.", "S0229": " Orz  : Orz has used Technet and Pastebin web pages for command and control.", "S0216": " POORAIM  : POORAIM has used AOL Instant Messenger for C2.", "S0393": " PowerStallion  : PowerStallion uses Microsoft OneDrive as a C2 server via a network drive mapped with .", "S0511": " RegDuke  : RegDuke can use Dropbox as its C2 server.", "S0379": " Revenge RAT  : Revenge RAT used blogpost.com as its primary command and control server during a campaign.", "S0270": " RogueRobin  : RogueRobin has used Google Drive as a Command and Control channel. ", "S0240": " ROKRAT  : ROKRAT leverages legitimate social networking sites and cloud platforms (Twitter, Yandex, and Mediafire) for C2 communications.", "G0034": " Sandworm Team  : Sandworm Team has used the Telegram Bot API from Telegram Messenger to send and receive commands to its Python backdoor. Sandworm Team also used legitimate M.E.Doc software update check requests for sending and receiving commands and hosted malicious payloads on putdrive.com.", "S0218": " SLOWDRIFT  : SLOWDRIFT uses cloud based services for C2.", "G0010": " Turla  : A Turla JavaScript backdoor has used Google Apps Script as its C2 server.", "S0333": " UBoatRAT  : UBoatRAT has used GitHub and a public blog service in Hong Kong for C2 communications.", "S0248": " yty  : yty communicates to the C2 server by retrieving a Google Doc.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used Dropbox for C2 allowing upload and download of files as well as execution of arbitrary commands."}, "id": "T1102.002", "subtechniqueof": "T1102", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "14 March 2020", "lastmodified": "26 March 2020"}, {"techniquename": "Dead Drop Resolver", "detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. User behavior monitoring may help to detect abnormal patterns of activity.", "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.", "M1021": " Restrict Web-Based Content  : Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."}, "procedureexamples": {"G0096": " APT41  : APT41 used legitimate websites for C2 through dead drop resolvers (DDR), including GitHub, Pastebin, and Microsoft TechNet.", "S0373": " Astaroth  : Astaroth can store C2 information on cloud hosting services such as AWS and CloudFlare and websites like YouTube and Facebook.", "S0128": " BADNEWS  : BADNEWS collects C2 information via a dead drop resolver.", "S0069": " BLACKCOFFEE  : BLACKCOFFEE uses Microsoft\u2019s TechNet Web portal to obtain a dead drop resolver containing an encoded tag with the IP address of a command and control server.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER's MSGET downloader uses a dead drop resolver to access malicious payloads.", "S0531": " Grandoreiro  : Grandoreiro can obtain C2 information from Google Docs.", "S0528": " Javali  : Javali can read C2 information from Google Documents and YouTube.", "S0455": " Metamorfo  : Metamorfo has used YouTube to store and hide C&C server domains.", "S0051": " MiniDuke  : Some MiniDuke components use Twitter to initially obtain the address of a C2 server or as a backup if no hard-coded C2 server responds.", "G0040": " Patchwork  : Patchwork hides base64-encoded and encrypted C2 server locations in comments on legitimate websites.", "S0013": " PlugX  : PlugX uses Pastebin to store C2 addresses.", "S0518": " PolyglotDuke  : PolyglotDuke can use Twitter, Reddit, Imgur and other websites to get a C2 URL.", "G0106": " Rocke  : Rocke has used Pastebin to check the version of beaconing malware and redirect to another Pastebin hosting updated malware.", "S0148": " RTM  : RTM has used an RSS feed on Livejournal to update a list of encrypted C2 server names. RTM has also hidden Pony C2 server IP addresses within transactions on the Bitcoin and Namecoin blockchain.", "G0048": " RTM  : RTM has used an RSS feed on Livejournal to update a list of encrypted C2 server names.", "S0341": " Xbash  : Xbash can obtain a webpage hosted on Pastebin to update its C2 domain list."}, "id": "T1102.001", "subtechniqueof": "T1102", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "14 March 2020", "lastmodified": "26 March 2020"}, {"techniquename": "Internal Proxy", "detection": "Analyze network data for uncommon data flows between clients that should not or often do not communicate with one another. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.", "description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.By using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific C2 protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."}, "procedureexamples": {"G0016": " APT29  : APT29 configured at least one instance of Cobalt Strike to use a network pipe over SMB during the 2020 SolarWinds intrusion.", "G0087": " APT39  : APT39 used custom tools to create SOCK5 and custom protocol proxies between infected hosts.", "S0031": " BACKSPACE  : The \"ZJ\" variant of BACKSPACE allows \"ZJ link\" infections with Internet access to relay traffic from \"ZJ listen\" to a command server.", "S0023": " CHOPSTICK  : CHOPSTICK used a proxy server between victims and the C2 server.", "S0154": " Cobalt Strike  : Cobalt Strike can be configured to have commands relayed over a peer-to-peer network of infected hosts. This can be used to limit the number of egress points, or provide access to a host without direct internet access.", "S0502": " Drovorub  : Drovorub can use a port forwarding rule on its agent module to relay network traffic through the client module to a remote host on the same network.", "S0038": " Duqu  : Duqu can be configured to have commands relayed over a peer-to-peer network of infected hosts if some of the hosts do not have Internet access.", "S0512": " FatDuke  : FatDuke can used pipes to connect machines with restricted internet access to remote machines via other infected hosts.", "G0126": " Higaisa  : Higaisa discovered system proxy settings and used them if available.", "S0009": " Hikit  : Hikit supports peer connections.", "S0260": " InvisiMole  : InvisiMole can function as a proxy to create a server that relays communication between the client and C&C server, or between two clients.", "S0265": " Kazuar  : Kazuar has used internal nodes on the compromised network for C2 communications.", "S0051": " MiniDuke  : MiniDuke can can use a named pipe to forward communications from one compromised machine with internet access to other compromised machines.", "G0116": " Operation Wocao  : Operation Wocao can proxy traffic through multiple infected systems.", "S0556": " Pay2Key  : Pay2Key has designated machines in the compromised network to serve as reverse proxy pivot points to channel communications with C2.", "G0041": " Strider  : Strider has used local servers with both local network and Internet access to act as internal proxy nodes to exfiltrate data from other parts of the network without direct Internet access.", "S0603": " Stuxnet  : Stuxnet installs an RPC server for P2P communications."}, "id": "T1090.001", "subtechniqueof": "T1090", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "14 March 2020", "lastmodified": "15 March 2020"}, {"techniquename": "Web Service", "detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.", "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.", "M1021": " Restrict Web-Based Content  : Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."}, "procedureexamples": {"G0050": " APT32  : APT32 has used Dropbox, Amazon S3, and Google Drive to host malicious downloads.", "S0534": " Bazar  : Bazar downloads have been hosted on Google Docs.", "S0635": " BoomBox  : BoomBox can downloaded files from Dropbox using a hardcoded access token.", "S0335": " Carbon  : Carbon can use Pastebin to receive C2 commands.", "S0600": " Doki  : Doki has used the dogechain.info API to generate a C2 address.", "S0547": " DropBook  : DropBook can communicate with its operators by exploiting the Simplenote, DropBox, and the social media platform, Facebook, where it can create fake accounts to control the backdoor and receive instructions.", "G0037": " FIN6  : FIN6 has used Pastebin and Google Storage to host content for their operations.   ", "G0061": " FIN8  : FIN8 has used , a free IP to domain mapping service that also makes SSL certificate generation easier for traffic encryption, as part of their command and control.", "G0117": " Fox Kitten  : Fox Kitten has used Amazon Web Services to host C2.", "G0047": " Gamaredon Group  : Gamaredon Group has used GitHub repositories for downloaders which will be obtained by the group's .NET executable on the compromised system.  ", "S0561": " GuLoader  : GuLoader has the ability to download malware from Google Drive.", "S0601": " Hildegard  : Hildegard has downloaded scripts from GitHub.", "G0100": " Inception  : Inception has incorporated at least five different cloud service providers into their C2 infrastructure including CloudMe.", "S0198": " NETWIRE  : NETWIRE has used web services including Paste.ee to host payloads.", "S0508": " Ngrok  : Ngrok has been used by threat actors to proxy C2 connections to ngrok service subdomains.", "G0106": " Rocke  : Rocke has used Pastebin, Gitee, and GitLab for Command and Control.", "S0546": " SharpStage  : SharpStage has used a legitimate web service for evading detection. ", "S0589": " Sibot  : Sibot has used a legitimate compromised website to download DLLs to the victim's machine.", "S0649": " SMOKEDHAM  : SMOKEDHAM has used Google Drive and Dropbox to host files downloaded by victims via malicious links.", "G0139": " TeamTNT  : TeamTNT has leveraged iplogger.org to send collected data back to C2. ", "G0010": " Turla  : Turla has used legitimate web services including Pastebin, Dropbox, and GitHub for C2 communications."}, "id": "T1102", "subtechniques": ["T1102.001", "T1102.002", "T1102.003"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Anastasios Pingios"], "version": "1.1", "created": "31 May 2017", "lastmodified": "26 March 2020"}, {"techniquename": "External Proxy", "detection": "Analyze network data for uncommon data flows, such as a client sending significantly more data than it receives from an external server. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.", "description": "Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific C2 protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."}, "procedureexamples": {"G0007": " APT28  : APT28 used other victims as proxies to relay command traffic, for instance using a compromised Georgian military email server as a hop point to NATO victims. The group has also used a tool that acts as a proxy to allow C2 even if the victim is behind a router. APT28 has also used a machine to relay and obscure communications between CHOPSTICK and their server.", "G0022": " APT3  : An APT3 downloader establishes SOCKS5 connections for its initial C2.", "G0087": " APT39  : APT39 has used various tools to proxy C2 communications.", "G0053": " FIN5  : FIN5 maintains access to victim environments by using FLIPSIDE to create a proxy for a backup RDP tunnel.", "G0093": " GALLIUM  : GALLIUM used a modified version of HTRAN to redirect connections between networks.", "S0260": " InvisiMole  : InvisiMole InvisiMole can identify proxy servers used by the victim and use them for C2 communication.", "G0032": " Lazarus Group  : Lazarus Group uses multiple proxies to obfuscate network traffic from victims.", "G0045": " menuPass  : menuPass has used a global service provider's IP as a proxy for C2 traffic from a victim.", "G0069": " MuddyWater  : MuddyWater has controlled POWERSTATS from behind a proxy network to obfuscate the C2 location. MuddyWater has used a series of compromised websites that victims connected to randomly to relay information to command and control (C2).", "S0439": " Okrum  : Okrum can identify proxy servers configured and used by the victim, and use it to make HTTP requests to C2 its server.", "S0223": " POWERSTATS  : POWERSTATS has connected to C2 servers through proxies.", "S0650": " QakBot  : QakBot has a module that can proxy C2 communications.", "S0019": " Regin  : Regin leveraged several compromised universities as proxies to obscure its origin.", "S0444": " ShimRat  : ShimRat can use pre-configured HTTP proxies.", "G0091": " Silence  : Silence has used ProxyBot, which allows the attacker to redirect traffic from the current node to the backconnect server via Sock4\\Socks5.   ", "G0131": " Tonto Team  : Tonto Team has routed their traffic through an external server in order to obfuscate their location.", "S0266": " TrickBot  : TrickBot has been known to reach a command and control server via one of nine proxy IP addresses.  "}, "id": "T1090.002", "subtechniqueof": "T1090", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "14 March 2020", "lastmodified": "27 March 2020"}, {"techniquename": "Multi-hop Proxy", "detection": "When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as ) or known adversary infrastructure that uses this technique.In context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers.  Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization.  Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted.  Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.", "description": "To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network. In the case of network infrastructure, particularly routers, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain within the Wide-Area Network (WAN) of the enterprise.  By leveraging Patch System Image, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes.  This custom onion routing network will transport the encrypted C2 traffic through the compromised population, allowing adversaries to communicate with any device within the onion routing network.  This method is dependent upon the Network Boundary Bridging method in order to allow the adversaries to cross the protected network boundary of the Internet perimeter and into the organization\u2019s WAN. Protocols such as ICMP may be used as a transport.", "mitigations": {"M1037": " Filter Network Traffic  : Traffic to known anonymity networks and C2 infrastructure can be blocked through the use of network allow and block lists. It should be noted that this kind of blocking may be circumvented by other techniques like Domain Fronting."}, "procedureexamples": {"G0007": " APT28  : APT28 has routed traffic over Tor and VPN servers to obfuscate their activities.", "G0016": " APT29  : A backdoor used by APT29 created a Tor hidden service to forward traffic from the Tor client to local ports 3389 (RDP), 139 (Netbios), and 445 (SMB) enabling full remote access from outside the network.", "S0438": " Attor  : Attor has used Tor for C2 communication.", "G0132": " CostaRicto  : CostaRicto has used a layer of proxies to manage C2 communications.", "S0281": " Dok  : Dok downloads and installs Tor via homebrew.", "S0384": " Dridex  : Dridex can use multiple layers of proxy servers to hide terminal nodes in its infrastructure.", "G0085": " FIN4  : FIN4 has used Tor to log in to victims' email accounts.", "S0342": " GreyEnergy  : GreyEnergy has used Tor relays for Command and Control servers.", "G0100": " Inception  : Inception used chains of compromised routers to proxy C2 communications between them and cloud service providers.", "S0604": " Industroyer  : Industroyer used Tor nodes for C2.", "S0276": " Keydnap  : Keydnap uses a copy of tor2web proxy for HTTPS communications.", "S0641": " Kobalos  : Kobalos can chain together multiple compromised machines as proxies to reach their final targets.", "G0065": " Leviathan  : Leviathan has used multi-hop proxies to disguise the source of their malicious traffic.", "S0282": " MacSpy  : MacSpy uses Tor for command and control.", "G0116": " Operation Wocao  : Operation Wocao has executed commands through the installed web shell via Tor exit nodes.", "S0623": " Siloscape  : Siloscape uses Tor to communicate with C2.", "S0491": " StrongPity  : StrongPity can use multiple layers of proxy servers to hide terminal nodes in its infrastructure.", "S0183": " Tor  : Traffic traversing the Tor network will be forwarded to multiple nodes before exiting the Tor network and continuing on to its intended destination.", "S0386": " Ursnif  : Ursnif has used Tor for C2.", "S0366": " WannaCry  : WannaCry uses Tor for command and control traffic."}, "id": "T1090.003", "subtechniqueof": "T1090", "tactics": ["Command and Control"], "platforms": ["Linux, Network, Windows, macOS"], "version": "2.0", "created": "14 March 2020", "lastmodified": "21 October 2020"}, {"techniquename": "Domain Fronting", "detection": "If SSL inspection is in place or the traffic is not encrypted, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blocklist or allowlist of domain names. ", "description": "Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS.  Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.", "mitigations": {"M1020": " SSL/TLS Inspection  : If it is possible to inspect HTTPS traffic, the captures can be analyzed for connections that appear to be domain fronting."}, "procedureexamples": {"G0016": " APT29  : APT29 has used the meek domain fronting plugin for Tor to hide the destination of C2 traffic.", "S0154": " Cobalt Strike  : Cobalt Strike has the ability to accept a value for HTTP Host Header to enable domain fronting.", "S0175": " meek  : meek uses Domain Fronting to disguise the destination of network traffic as another server that is hosted in the same Content Delivery Network (CDN) as the intended destination.", "S0649": " SMOKEDHAM  : SMOKEDHAM has used a fronted domain to obfuscate its hard-coded C2 server domain."}, "id": "T1090.004", "subtechniqueof": "T1090", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "capecid": ["CAPEC-481"], "contributors": ["Matt Kelly, @breakersall"], "version": "1.1", "created": "14 March 2020", "lastmodified": "16 September 2020"}, {"techniquename": "Remote Access Software", "detection": "Monitor for applications and processes related to remote admin tools. Correlate activity with other suspicious behavior that may reduce false positives if these tools are used by legitimate users and administrators.Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used. may be used in conjunction to avoid defenses. Adversaries will likely need to deploy and/or install these remote tools to compromised systems. It may be possible to detect or prevent the installation of these tools with host-based solutions.", "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. Remote access tools may be established and used post-compromise as alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system.Admin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns.  ", "mitigations": {"M1038": " Execution Prevention  : Use application control to mitigate installation and use of unapproved software that can be used for remote access.", "M1037": " Filter Network Traffic  : Properly configure firewalls, application firewalls, and proxies to limit outgoing traffic to sites and services used by remote access tools.", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures may be able to prevent traffic to remote access services."}, "procedureexamples": {"S0030": " Carbanak  : Carbanak has a plugin for VNC and Ammyy Admin Tool.", "G0008": " Carbanak  : Carbanak used legitimate programs such as AmmyyAdmin and Team Viewer for remote interactive C2 to target systems.", "G0080": " Cobalt Group  : Cobalt Group used the Ammyy Admin tool as well as TeamViewer for remote access, including to preserve remote access if a Cobalt Strike module was lost.", "G0105": " DarkVishnya  : DarkVishnya used DameWare Mini Remote Control for lateral movement.", "S0384": " Dridex  : Dridex contains a module for VNC.", "S0554": " Egregor  : Egregor has checked for the LogMein event log in an attempt to encrypt files in remote machines.", "G0120": " Evilnum  : EVILNUM has used the malware variant, TerraTV, to run a legitimate TeamViewer application to connect to compromrised machines.", "G0115": " GOLD SOUTHFIELD  : GOLD SOUTHFIELD has used the cloud-based remote management and monitoring tool \"ConnectWise Control\" to deploy REvil.", "S0601": " Hildegard  : Hildegard has established tmate sessions for C2 communications.", "G0094": " Kimsuky  : Kimsuky has used a modified TeamViewer client as a command and control channel.", "G0069": " MuddyWater  : MuddyWater has used a legitimate application, ScreenConnect, to manage systems remotely and move laterally. ", "G0129": " Mustang Panda  : Mustang Panda has installed TeamViewer on targeted systems.", "G0014": " Night Dragon  : Night Dragon has used several remote administration tools as persistent infiltration channels.", "S0148": " RTM  : RTM has the capability to download a VNC module from command and control (C2).", "G0048": " RTM  : RTM has used a modified version of TeamViewer and Remote Utilities for remote access.", "G0034": " Sandworm Team  : Sandworm Team has used remote administration tools or remote industrial control system client software to maliciously release electricity breakers.", "G0139": " TeamTNT  : TeamTNT has established tmate sessions for C2 communications.", "G0076": " Thrip  : Thrip used a cloud-based remote access software called LogMeIn for their attacks.", "S0266": " TrickBot  : TrickBot uses vncDll module to remote control the victim machine."}, "id": "T1219", "subtechniques": ["No sub-techniques"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "requiresnetwork": ["Yes"], "contributors": ["Matt Kelly, @breakersall"], "version": "2.0", "created": "18 April 2018", "lastmodified": "20 June 2020"}, {"techniquename": "Proxy", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Consider monitoring for traffic to known anonymity networks (such as ).", "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.", "mitigations": {"M1037": " Filter Network Traffic  : Traffic to known anonymity networks and C2 infrastructure can be blocked through the use of network allow and block lists. It should be noted that this kind of blocking may be circumvented by other techniques like Domain Fronting.", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific C2 protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. ", "M1020": " SSL/TLS Inspection  : If it is possible to inspect HTTPS traffic, the captures can be analyzed for connections that appear to be domain fronting."}, "procedureexamples": {"G0096": " APT41  : APT41 used a tool called CLASSFON to covertly proxy network communications.", "S0456": " Aria-body  : Aria-body has the ability to use a reverse SOCKS proxy module.", "S0347": " AuditCred  : AuditCred can utilize proxy for communications.", "S0245": " BADCALL  : BADCALL functions as a proxy server between the victim and C2 server.", "G0108": " Blue Mockingbird  : Blue Mockingbird has used frp, ssf, and Venom to establish SOCKS proxy connections.", "S0348": " Cardinal RAT  : Cardinal RAT can act as a reverse proxy.", "S0384": " Dridex  : Dridex contains a backconnect module for tunneling network traffic through a victim's computer. Infected computers become part of a P2P botnet that can relay C2 traffic to other infected peers. ", "G0117": " Fox Kitten  : Fox Kitten has used the open source reverse proxy tools including FRPC and Go Proxy to establish connections from C2 to local servers.", "S0246": " HARDRAIN  : HARDRAIN uses the command  and makes the victim machine function as a proxy server.", "S0376": " HOPLIGHT  : HOPLIGHT has multiple proxy options that mask traffic between the malware and the remote operators. ", "S0040": " HTRAN  : HTRAN can proxy TCP socket connections to obfuscate command and control infrastructure.", "S0283": " jRAT  : jRAT can serve as a SOCKS proxy server.", "S0487": " Kessel  : Kessel can use a proxy during exfiltration if set in the configuration.", "S0108": " netsh  : netsh can be used to set up a proxy tunnel to allow remote host access to an infected host.", "S0198": " NETWIRE  : NETWIRE can implement use of proxies to pivot traffic.", "S0508": " Ngrok  : Ngrok can be used to proxy connections to machines located behind NAT or firewalls.", "G0116": " Operation Wocao  : Operation Wocao has used a custom proxy tool called \"Agent\" which has support for multiple hops.", "S0435": " PLEAD  : PLEAD has the ability to proxy network communications.", "S0378": " PoshC2  : PoshC2 contains modules that allow for use of proxies in command and control.", "S0262": " QuasarRAT  : QuasarRAT can communicate over a reverse proxy using SOCKS5.", "S0629": " RainyDay  : RainyDay can use proxy tools including boost_proxy_client for reverse proxy functionality.", "S0332": " Remcos  : Remcos uses the infected hosts as SOCKS5 proxies to allow for tunneling and proxying.", "G0034": " Sandworm Team  : Sandworm Team's BCS-server tool can create an internal proxy server to redirect traffic from the adversary-controlled C2 to internal servers which may not be connected to the internet, but are interconnected locally. ", "S0461": " SDBbot  : SDBbot has the ability to use port forwarding to establish a proxy between a target host and C2.", "S0273": " Socksbot  : Socksbot can start SOCKS proxy threads.", "S0615": " SombRAT  : SombRAT has the ability to use an embedded SOCKS proxy in C2 communications.", "S0436": " TSCookie  : TSCookie has the ability to proxy communications with command and control (C2) servers.", "G0010": " Turla  : Turla RPC backdoors have included local UPnP RPC proxies.    ", "S0263": " TYPEFRAME  : A TYPEFRAME variant can force the compromised system to function as a proxy server.", "S0386": " Ursnif  : Ursnif has used a peer-to-peer (P2P) network for C2.", "S0207": " Vasport  : Vasport is capable of tunneling though a proxy.", "G0124": " Windigo  : Windigo has delivered a generic Windows proxy Win32/Glubteta.M. Windigo has also used multiple reverse proxy chains as part of their C2 infrastructure.", "S0117": " XTunnel  : XTunnel relays traffic between a C2 server and a victim.", "S0412": " ZxShell  : ZxShell can set up an HTTP or SOCKS proxy. "}, "id": "T1090", "subtechniques": ["T1090.001", "T1090.002", "T1090.003", "T1090.004"], "tactics": ["Command and Control"], "platforms": ["Linux, Network, Windows, macOS"], "contributors": ["Heather Linn; Jon Sheedy; Walker Johnson"], "version": "3.1", "created": "31 May 2017", "lastmodified": "30 August 2021"}, {"techniquename": "Protocol Tunneling", "detection": "Monitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.", "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel. Protocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets. Adversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure. ", "mitigations": {"M1037": " Filter Network Traffic  : Consider filtering network traffic to untrusted or known bad domains and resources. ", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. "}, "procedureexamples": {"G0114": " Chimera  : Chimera has encapsulated Cobalt Strike's C2 protocol in DNS and HTTPS.", "G0080": " Cobalt Group  : Cobalt Group has used the Plink utility to create SSH tunnels.", "S0154": " Cobalt Strike  : Cobalt Strike uses a custom command and control protocol that is encapsulated in HTTP, HTTPS, or DNS. In addition, it conducts peer-to-peer communication over Windows named pipes encapsulated in the SMB protocol. All protocols use their standard assigned ports.", "G0132": " CostaRicto  : CostaRicto has set up remote SSH tunneling into the victim's environment from a malicious domain.", "S0038": " Duqu  : Duqu uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.", "G0037": " FIN6  : FIN6 used the Plink command-line utility to create SSH tunnels to C2 servers.", "S0173": " FLIPSIDE  : FLIPSIDE uses RDP to tunnel traffic from a victim environment.", "G0117": " Fox Kitten  : Fox Kitten has used protocol tunneling for communication and RDP activity on compromised hosts through the use of open source tools such as Ngrok and custom tool SSHMinion.", "S0604": " Industroyer  : Industroyer attempts to perform an HTTP CONNECT via an internal proxy to establish a tunnel.", "G0065": " Leviathan  : Leviathan has used protocol tunneling to further conceal C2 communications and infrastructure.", "S0508": " Ngrok  : Ngrok can tunnel RDP and other services securely over internet connections.", "G0049": " OilRig  : OilRig has used the Plink utility and other tools to create tunnels to C2 servers.", "S0650": " QakBot  : The QakBot proxy module can encapsulate SOCKS5 protocol within its own proxy protocol."}, "id": "T1572", "subtechniques": ["No sub-techniques"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "15 March 2020", "lastmodified": "27 March 2020"}, {"techniquename": "Fallback Channels", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. ", "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. "}, "procedureexamples": {"S0504": " Anchor  : Anchor can use secondary C2 servers for communication after establishing connectivity and relaying victim information to primary C2 servers.", "S0622": " AppleSeed  : AppleSeed can use a second channel for C2 when the primary channel is in upload mode.", "G0096": " APT41  : APT41 used the Steam community page as a fallback mechanism for C2. ", "S0534": " Bazar  : Bazar has the ability to use an alternative C2 server if the primary server fails.", "S0017": " BISCUIT  : BISCUIT malware contains a secondary fallback command and control server that is contacted after the primary command and control server.", "S0089": " BlackEnergy  : BlackEnergy has the capability to communicate over a backup channel via plus.google.com.", "S0348": " Cardinal RAT  : Cardinal RAT can communicate over multiple C2 host and port combinations.", "S0023": " CHOPSTICK  : CHOPSTICK can switch to a new C2 channel if the current one is broken.", "S0538": " Crutch  : Crutch has used a hardcoded GitHub repository as a fallback channel.", "S0021": " Derusbi  : Derusbi uses a backup communication method with an HTTP beacon.", "S0062": " DustySky  : DustySky has two hard-coded domains for C2 servers; if the first does not respond, it will try the second.", "S0377": " Ebury  : Ebury has implemented a fallback mechanism to begin using a DGA when the attacker hasn't connected to the infected system for three days.", "S0401": " Exaramel for Linux  : Exaramel for Linux can attempt to find a new C2 server if it receives an error.", "S0512": " FatDuke  : FatDuke has used several C2 servers per targeted organization.", "G0046": " FIN7  : FIN7's Harpy backdoor malware can use DNS as a backup channel for C2 if HTTP fails.", "S0376": " HOPLIGHT  : HOPLIGHT has multiple C2 channels in place in case one fails.   ", "S0260": " InvisiMole  : InvisiMole has been configured with several servers available for alternate C2 communications.", "S0044": " JHUHUGIT  : JHUHUGIT tests if it can reach its C2 server by first attempting a direct connection, and if it fails, obtaining proxy settings and sending the connection through a proxy, and finally injecting code into a running browser if the proxy method fails.", "S0265": " Kazuar  : Kazuar can accept multiple URLs for C2 servers.", "S0236": " Kwampirs  : Kwampirs uses a large list of C2 servers that it cycles through until a successful connection is established.", "G0032": " Lazarus Group  : Lazarus Group malware SierraAlfa sends data to one of the hard-coded C2 servers chosen at random, and if the transmission fails, chooses a new C2 server to attempt the transmission again.", "S0211": " Linfo  : Linfo creates a backdoor through which remote attackers can change C2 servers.", "S0409": " Machete  : Machete has sent data over HTTP if FTP failed, and has also used a fallback server. ", "S0051": " MiniDuke  : MiniDuke uses Google Search to identify C2 servers if its primary C2 method via Twitter is not working.", "S0084": " Mis-Type  : Mis-Type first attempts to use a Base64-encoded network protocol over a raw TCP socket for C2, and if that method fails, falls back to a secondary HTTP-based protocol to communicate to an alternate C2 server.", "S0034": " NETEAGLE  : NETEAGLE will attempt to detect if the infected host is configured to a proxy. If so, NETEAGLE will send beacons via an HTTP POST request; otherwise it will send beacons via UDP/6000.", "G0049": " OilRig  : OilRig malware ISMAgent falls back to its DNS tunneling mechanism if it is unable to reach the C2 server over HTTP.", "S0501": " PipeMon  : PipeMon can switch to an alternate C2 domain when a particular date has been reached.", "S0269": " QUADAGENT  : QUADAGENT uses multiple protocols (HTTPS, HTTP, DNS) for its C2 server as fallback channels if communication with one is unsuccessful.", "S0629": " RainyDay  : RainyDay has the ability to switch between TCP and HTTP for C2 if one method is not working.", "S0495": " RDAT  : RDAT has used HTTP if DNS C2 communications were not functioning.   ", "S0085": " S-Type  : S-Type primarily uses port 80 for C2, but falls back to ports 443 or 8080 if initial communication fails.", "S0444": " ShimRat  : ShimRat has used a secondary C2 location if the first was unavailable. ", "S0610": " SideTwist  : SideTwist has primarily used port 443 for C2 but can use port 80 as a fallback.", "S0058": " SslMM  : SslMM has a hard-coded primary and backup C2 string.", "S0603": " Stuxnet  : Stuxnet has the ability to generate new C2 domains.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE can randomly pick one of five hard-coded IP addresses for C2 communication; if one of the IP fails, it will wait 60 seconds and then try another IP address.", "S0266": " TrickBot  : TrickBot can use secondary C2 servers for communication after establishing connectivity and relaying victim information to primary C2 servers.", "S0476": " Valak  : Valak can communicate over multiple C2 hosts.", "S0059": " WinMM  : WinMM is usually configured with primary and backup domains for C2 communications.", "S0117": " XTunnel  : The C2 server used by XTunnel provides a port number to the victim to use as a fallback in case the connection closes on the currently used port."}, "id": "T1008", "subtechniques": ["No sub-techniques"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "version": "1.0", "created": "31 May 2017", "lastmodified": "14 July 2020"}, {"techniquename": "Asymmetric Cryptography", "detection": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.", "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.", "M1020": " SSL/TLS Inspection  : SSL/TLS inspection can be used to see the contents of encrypted sessions to look for network-based indicators of malware communication protocols."}, "procedureexamples": {"S0202": " adbupd  : adbupd contains a copy of the OpenSSL library to encrypt C2 traffic.", "S0045": " ADVSTORESHELL  : A variant of ADVSTORESHELL encrypts some C2 with RSA.", "S0438": " Attor  : Attor's Blowfish key is encrypted with a public RSA key.", "S0534": " Bazar  : Bazar can use TLS in C2 communications.", "S0017": " BISCUIT  : BISCUIT uses SSL for encrypting C2 communications.", "S0335": " Carbon  : Carbon has used RSA encryption for C2 communications.", "S0023": " CHOPSTICK  : CHOPSTICK encrypts C2 communications with TLS.", "G0080": " Cobalt Group  : Cobalt Group has used the Plink utility to create SSH tunnels.", "S0154": " Cobalt Strike  : Cobalt Strike can use RSA asymmetric encryption with PKCS1 padding to encrypt data sent to the C2 server.", "S0126": " ComRAT  : ComRAT can use SSL/TLS encryption for its HTTP-based C2 channel. ComRAT has used public key cryptography with RSA and AES encrypted email attachments for its Gmail C2 channel. ", "S0600": " Doki  : Doki has used the embedTLS library for network communications.", "S0384": " Dridex  : Dridex has encrypted traffic with RSA.", "S0367": " Emotet  : Emotet is known to use RSA keys for encrypting C2 traffic. ", "S0363": " Empire  : Empire can use TLS to encrypt its C2 channel.", "G0037": " FIN6  : FIN6 used the Plink command-line utility to create SSH tunnels to C2 servers.", "G0061": " FIN8  : FIN8 has used the Plink utility to tunnel RDP back to C2 infrastructure.", "S0168": " Gazer  : Gazer uses custom encryption for C2 that uses RSA.", "S0588": " GoldMax  : GoldMax has RSA-encrypted its communication with the C2 server.", "S0531": " Grandoreiro  : Grandoreiro can use SSL in C2 communication.", "S0342": " GreyEnergy  : GreyEnergy encrypts communications using RSA-2048.", "S0632": " GrimAgent  : GrimAgent can use a hardcoded server public RSA key to encrypt the first request to C2.", "S0087": " Hi-Zor  : Hi-Zor encrypts C2 traffic with TLS.", "S0483": " IcedID  : IcedID has used SSL and TLS in communications with C2.", "S0250": " Koadic  : Koadic can use SSL and TLS for communications.", "S0641": " Kobalos  : Kobalos's authentication and key exchange is performed using RSA-512. ", "S0409": " Machete  : Machete has used TLS-encrypted FTP to exfiltrate data.", "S0455": " Metamorfo  : Metamorfo's C2 communication has been encrypted using OpenSSL. ", "G0049": " OilRig  : OilRig used the Plink utility and other tools to create tunnels to C2 servers.", "G0116": " Operation Wocao  : Operation Wocao's proxy implementation \"Agent\" can upgrade the socket in use to a TLS socket.", "S0556": " Pay2Key  : Pay2Key has used RSA encrypted communications with C2.", "S0587": " Penquin  : Penquin can encrypt communications using the BlowFish algorithm and a symmetric key exchanged with Diffie Hellman.", "S0428": " PoetRAT  : PoetRAT used TLS to encrypt command and control (C2) communications.", "S0150": " POSHSPY  : POSHSPY encrypts C2 traffic with AES and RSA.", "S0223": " POWERSTATS  : POWERSTATS has encrypted C2 traffic with RSA.", "S0192": " Pupy  : Pupy's default encryption for its C2 communication channel is SSL, but it also has transport options for RSA and AES.", "S0496": " REvil  : REvil has encrypted C2 communications with the ECIES algorithm.", "S0382": " ServHelper  : ServHelper may set up a reverse SSH tunnel to give the attacker access to services running on the victim, such as RDP.", "S0633": " Sliver  : Sliver can use mutual TLS and RSA  cryptography to exchange a session key.", "S0627": " SodaMaster  : SodaMaster can use a hardcoded RSA key to encrypt some of its C2 traffic.", "S0615": " SombRAT  : SombRAT can SSL encrypt C2 traffic.", "S0491": " StrongPity  : StrongPity has encrypted C2 traffic using SSL/TLS.", "S0018": " Sykipot  : Sykipot uses SSL for encrypting C2 communications.", "S0183": " Tor  : Tor encapsulates traffic in multiple layers of encryption, using TLS by default.", "S0094": " Trojan.Karagany  : Trojan.Karagany can secure C2 communications with SSL and TLS.", "G0081": " Tropic Trooper  : Tropic Trooper has used SSL to connect to C2 servers.", "S0180": " Volgmer  : Some Volgmer variants use SSL to encrypt C2 communications.", "S0366": " WannaCry  : WannaCry uses Tor for command and control traffic and routes a custom cryptographic protocol over the Tor circuit.", "S0515": " WellMail  : WellMail can use hard coded client and certificate authority certificates to communicate with C2 over mutual TLS.", "S0514": " WellMess  : WellMess can communicate to C2 with mutual TLS where client and server mutually check certificates.", "S0117": " XTunnel  : XTunnel uses SSL/TLS and RC4 to encrypt traffic.", "S0251": " Zebrocy  : Zebrocy uses SSL and AES ECB for encrypting C2 communications. "}, "id": "T1573.002", "subtechniqueof": "T1573", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "16 March 2020", "lastmodified": "20 April 2021"}, {"techniquename": "Multi-Stage Channels", "detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure. Relating subsequent actions that may result from Discovery of the system and network information or Lateral Movement to the originating process may also yield useful data.", "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."}, "procedureexamples": {"G0022": " APT3  : An APT3 downloader first establishes a SOCKS5 connection to 192.157.198[.]103 using TCP port 1913; once the server response is verified, it then requests a connection to 192.184.60[.]229 on TCP port 81.", "G0096": " APT41  : APT41 used the storescyncsvc.dll BEACON backdoor to download a secondary backdoor.", "S0031": " BACKSPACE  : BACKSPACE attempts to avoid detection by checking a first stage command and control server to determine if it should connect to the second stage server, which performs \"louder\" interactions with the malware.", "S0534": " Bazar  : The Bazar loader is used to download and execute the Bazar backdoor.", "S0069": " BLACKCOFFEE  : BLACKCOFFEE uses Microsoft\u2019s TechNet Web portal to obtain an encoded tag containing the IP address of a command and control server and then communicates separately with that IP address for C2. If the C2 server is discovered or shut down, the threat actors can update the encoded IP address on TechNet to maintain control of the victims\u2019 machines.", "S0220": " Chaos  : After initial compromise, Chaos will download a second stage to establish a more permanent presence on the affected system.", "G0069": " MuddyWater  : MuddyWater has used one C2 to obtain enumeration scripts and monitor web logs, but a different C2 to send data back. ", "S0476": " Valak  : Valak can download additional modules and malware capable of using separate C2 channels."}, "id": "T1104", "subtechniques": ["No sub-techniques"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "version": "1.0", "created": "31 May 2017", "lastmodified": "14 July 2020"}, {"techniquename": "Non-Application Layer Protocol", "detection": "Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network.Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).ICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "mitigations": {"M1037": " Filter Network Traffic  : Filter network traffic to prevent use of protocols across the network boundary that are unnecessary.", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.", "M1030": " Network Segmentation  : Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."}, "procedureexamples": {"S0504": " Anchor  : Anchor has used ICMP in C2 communications.", "G0016": " APT29  : APT29 has used TCP for C2 communications.", "G0022": " APT3  : An APT3 downloader establishes SOCKS5 connections for its initial C2.", "S0456": " Aria-body  : Aria-body has used TCP in C2 communications.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has used EarthWorm for network tunneling with a SOCKS5 server and port transfer functionalities.", "S0234": " Bandook  : Bandook has a command built in to use a raw TCP socket. ", "S0043": " BUBBLEWRAP  : BUBBLEWRAP can communicate using SOCKS.", "S0335": " Carbon  : Carbon uses TCP and UDP for C2.", "S0154": " Cobalt Strike  : Cobalt Strike can be configured to use TCP, ICMP, and UDP for C2 communications.", "S0115": " Crimson  : Crimson uses a custom TCP protocol for C2.    ", "S0498": " Cryptoistic  : Cryptoistic can use TCP in communications with C2.", "S0021": " Derusbi  : Derusbi binds to a raw socket on a random source port between 31800 and 31900 for C2.", "S0502": " Drovorub  : Drovorub can use TCP to communicate between its agent and client modules.", "S0076": " FakeM  : Some variants of FakeM use SSL to communicate with C2 servers.", "G0037": " FIN6  : FIN6 has used Metasploit Bind and Reverse TCP stagers.", "S0032": " gh0st RAT  : gh0st RAT has used an encrypted protocol within TCP segments to communicate with the C2.", "G0125": " HAFNIUM  : HAFNIUM has used TCP for C2.", "S0394": " HiddenWasp  : HiddenWasp communicates with a simple network protocol over TCP.", "S0260": " InvisiMole  : InvisiMole has used TCP to download additional modules.", "S0582": " LookBack  : LookBack uses a custom binary protocol over sockets for C2 communications.", "S0455": " Metamorfo  : Metamorfo has used raw TCP for C2. ", "S0084": " Mis-Type  : Mis-Type network traffic can communicate over a raw socket.", "S0083": " Misdat  : Misdat network traffic communicates over a raw socket.", "S0149": " MoonWind  : MoonWind completes network communication via raw sockets.", "S0630": " Nebulae  : Nebulae can use TCP in C2 communications.", "S0034": " NETEAGLE  : If NETEAGLE does not detect a proxy configured on the infected machine, it will send beacons via UDP/6000. Also, after retrieving a C2 IP address and Port Number, NETEAGLE will initiate a TCP connection to this socket. The ensuing connection is a plaintext C2 channel in which commands are specified by DWORDs.", "S0198": " NETWIRE  : NETWIRE can use TCP in C2 communications.", "G0116": " Operation Wocao  : Operation Wocao has used a custom protocol for command and control.", "S0556": " Pay2Key  : Pay2Key has sent its public key to the C2 server over TCP.", "S0587": " Penquin  : The Penquin C2 mechanism is based on TCP and UDP packets.", "S0158": " PHOREAL  : PHOREAL communicates via ICMP for C2.", "S0501": " PipeMon  : The PipeMon communication module can use a custom protocol based on TLS over TCP.", "G0068": " PLATINUM  : PLATINUM has used the Intel\u00ae Active Management Technology (AMT) Serial-over-LAN (SOL) channel for command and control.", "S0013": " PlugX  : PlugX can be configured to use raw TCP or UDP for command and control.", "S0650": " QakBot  : QakBot has the ability use TCP to send or receive C2 packets.", "S0629": " RainyDay  : RainyDay can use TCP in C2 communications.", "S0055": " RARSTONE  : RARSTONE uses SSL to encrypt its communication with its C2 server.", "S0172": " Reaver  : Some Reaver variants use raw TCP for C2.", "S0019": " Regin  : The Regin malware platform can use ICMP to communicate between infected computers.", "S0125": " Remsec  : Remsec is capable of using ICMP, TCP, and UDP for C2.", "S0461": " SDBbot  : SDBbot has the ability to communicate with C2 with TCP over port 443.", "S0596": " ShadowPad  : ShadowPad has used UDP for C2 communications.", "S0615": " SombRAT  : SombRAT has the ability to use TCP sockets to send data and ICMP to ping the C2 server.", "S0011": " Taidoor  : Taidoor can use TCP for C2 communications.", "S0436": " TSCookie  : TSCookie can use ICMP to receive information on the destination server.", "S0221": " Umbreon  : Umbreon provides access to the system via SSH or any other protocol that uses PAM to authenticate.", "S0515": " WellMail  : WellMail can use TCP for C2 communications.", "S0155": " WINDSHIELD  : WINDSHIELD C2 traffic can communicate via TCP raw sockets.", "S0430": " Winnti for Linux  : Winnti for Linux has used ICMP, custom TCP, and UDP in outbound communications."}, "id": "T1095", "subtechniques": ["No sub-techniques"], "tactics": ["Command and Control"], "platforms": ["Linux, Network, Windows, macOS"], "requiresnetwork": ["Yes"], "contributors": ["Ryan Becwar"], "version": "2.1", "created": "31 May 2017", "lastmodified": "21 October 2020"}, {"techniquename": "Non-Standard Port", "detection": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.", "description": "Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.", "M1030": " Network Segmentation  : Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports for that particular network segment."}, "procedureexamples": {"G0099": " APT-C-36  : APT-C-36 has used port 4050 for C2 communications.", "G0050": " APT32  : An APT32 backdoor can use HTTP over a non-standard TCP port (e.g 14146) which is specified in the backdoor configuration.", "G0064": " APT33  : APT33 has used HTTP over TCP ports 808 and 880 for command and control.", "S0245": " BADCALL  : BADCALL communicates on ports 443 and 8000 with a FakeTLS method.", "S0239": " Bankshot  : Bankshot binds and listens on port 1058 for HTTP traffic while also utilizing a FakeTLS method.", "S0574": " BendyBear  : BendyBear has used a custom RC4 and XOR encrypted protocol over port 443 for C2.", "G0105": " DarkVishnya  : DarkVishnya used ports 5190 and 7900 for shellcode listeners, and 4444, 4445, 31337 for shellcode C2.", "S0021": " Derusbi  : Derusbi has used unencrypted HTTP on port 443 for C2.", "S0367": " Emotet  : Emotet has used HTTP over ports such as 20, 22, 7080, and 50000, in addition to using ports commonly associated with HTTP/S.", "G0046": " FIN7  : FIN7 has used port-protocol mismatches on ports such as 53, 80, 443, and 8080 during C2.", "S0493": " GoldenSpy  : GoldenSpy has used HTTP over ports 9005 and 9006 for network traffic, 9002 for C2 requests, 33666 as a WebSocket, and 8090 to download files.", "S0237": " GravityRAT  : GravityRAT has used HTTP over a non-standard port, such as TCP port 46769.", "S0246": " HARDRAIN  : HARDRAIN binds and listens on port 443 with a FakeTLS method.", "S0376": " HOPLIGHT  : HOPLIGHT has connected outbound over TCP port 443 with a FakeTLS method.", "G0032": " Lazarus Group  : Some Lazarus Group malware uses a list of ordered port numbers to choose a port for C2 traffic, creating port-protocol mismatches.", "G0059": " Magic Hound  : Magic Hound malware has communicated with its C2 server over TCP port 4443 using HTTP.", "S0455": " Metamorfo  : Metamorfo has communicated with hosts over raw TCP on port 9999. ", "S0149": " MoonWind  : MoonWind communicates over ports 80, 443, 53, and 8080 via raw sockets instead of the protocols usually associated with the ports.", "S0385": " njRAT  : njRAT has used port 1177 for HTTP C2 communications.", "S0428": " PoetRAT  : PoetRAT used TLS to encrypt communications over port 143", "S0153": " RedLeaves  : RedLeaves can use HTTP over non-standard ports, such as 995, for C2.", "G0106": " Rocke  : Rocke's miner connects to a C2 server using port 51640.    ", "S0148": " RTM  : RTM used Port 44443 for its VNC module.", "G0034": " Sandworm Team  : Sandworm Team has used port 6789 to accept connections on the group's SSH server.", "G0091": " Silence  : Silence has used port 444 when sending data about the system from the client to the server.  ", "S0491": " StrongPity  : StrongPity has used HTTPS over port 1402 in C2 communication.", "G0088": " TEMP.Veles  : TEMP.Veles has used port-protocol mismatches on ports such as 443, 4444, 8531, and 50501 during C2.", "S0266": " TrickBot  : Some TrickBot samples have used HTTP over ports 447 and 8082 for C2. Newer versions of TrickBot have been known to use a custom communication protocol which sends the data unencrypted over port 443. ", "S0263": " TYPEFRAME  : TYPEFRAME has used ports 443, 8080, and 8443 with a FakeTLS method.", "S0515": " WellMail  : WellMail has been observed using TCP port 25, without using SMTP, to leverage an open port for secure command and control communications."}, "id": "T1571", "subtechniques": ["No sub-techniques"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "14 March 2020", "lastmodified": "26 March 2020"}, {"techniquename": "Ingress Tool Transfer", "detection": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious.Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.", "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."}, "procedureexamples": {"S0469": " ABK  : ABK has the ability to download files from C2.", "S0331": " Agent Tesla  : Agent Tesla can download additional files for execution on the victim\u2019s machine.", "S0092": " Agent.btz  : Agent.btz attempts to download an encrypted binary from a specified domain.", "G0130": " Ajax Security Team  : Ajax Security Team has used Wrapper/Gholee, custom-developed malware, which downloaded additional malware to the infected system.", "S0504": " Anchor  : Anchor can download additional payloads.", "G0138": " Andariel  : Andariel has downloaded additional tools and malware onto compromised hosts.", "G0099": " APT-C-36  : APT-C-36 has downloaded binary data from a specified domain after the malicious document is opened.", "G0026": " APT18  : APT18 can upload a file to the victim\u2019s machine.", "G0007": " APT28  : APT28 has downloaded additional files, including by using a first-stage downloader to contact the C2 server to obtain the second-stage implant.", "G0016": " APT29  : APT29 has downloaded additional tools, such as TEARDROP malware and Cobalt Strike, to a compromised host following initial access.", "G0022": " APT3  : APT3 has a tool that can copy files to remote machines.", "G0050": " APT32  : APT32 has added JavaScript to victim websites to download additional frameworks that profile and compromise website visitors.", "G0064": " APT33  : APT33 has downloaded additional files and programs from its C2 server.   ", "G0067": " APT37  : APT37 has downloaded second stage malware from compromised websites.", "G0082": " APT38  : APT38 used a backdoor, NESTEGG, that has the capability to download and upload files to and from a victim\u2019s machine.", "G0087": " APT39  : APT39 has downloaded tools to compromised hosts.", "G0096": " APT41  : APT41 used certutil to download additional files.", "S0456": " Aria-body  : Aria-body has the ability to download additional payloads from C2.", "S0373": " Astaroth  : Astaroth uses certutil and BITSAdmin to download additional malware. ", "S0438": " Attor  : Attor can download additional plugins, updates and other files. ", "S0347": " AuditCred  : AuditCred can download files and additional malware.", "S0473": " Avenger  : Avenger has the ability to download files from C2 to a compromised host.", "S0344": " Azorult  : Azorult can download and execute additional files. Azorult has also downloaded a ransomware payload called Hermes.", "S0414": " BabyShark  : BabyShark has downloaded additional files from the C2.", "S0475": " BackConfig  : BackConfig can download and execute additional payloads on a compromised host.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has downloaded additional files and tools onto a compromised host.", "S0642": " BADFLICK  : BADFLICK has download files from its C2 server.", "S0128": " BADNEWS  : BADNEWS is capable of downloading additional files through C2 channels, including a new version of itself.", "S0337": " BadPatch  : BadPatch can download and execute or update malware.", "S0234": " Bandook  : Bandook can download files to the system.", "S0239": " Bankshot  : Bankshot uploads files and secondary payloads to the victim's machine.", "S0534": " Bazar  : Bazar can download and deploy additional payloads, including ransomware and post-exploitation frameworks such as Cobalt Strike.", "S0470": " BBK  : BBK has the ability to download files from C2 to the infected host.", "S0574": " BendyBear  : BendyBear is designed to download an implant from a C2 server.", "S0017": " BISCUIT  : BISCUIT has a command to download a file from the C2 server.", "S0268": " Bisonal  : Bisonal has the capability to download files to execute on the victim\u2019s machine.", "S0190": " BITSAdmin  : BITSAdmin can be used to create BITS Jobs to upload and/or download files.", "S0564": " BlackMould  : BlackMould has the ability to download files to the victim's machine.", "S0520": " BLINDINGCAN  : BLINDINGCAN has downloaded files to a victim machine.", "S0657": " BLUELIGHT  : BLUELIGHT can download additional files onto the host. ", "S0486": " Bonadan  : Bonadan can download additional modules from the C2 server.", "S0360": " BONDUPDATER  : BONDUPDATER can download or upload files from its C2 server.", "S0635": " BoomBox  : BoomBox has the ability to download next stage malware components to a compromised system.", "S0651": " BoxCaon  : BoxCaon can download files.", "S0204": " Briba  : Briba downloads files onto infected hosts.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used various tools to download files, including DGet (a similar tool to wget).", "S0471": " build_downer  : build_downer has the ability to download files from C2 to the infected host.", "S0482": " Bundlore  : Bundlore can download and execute new versions of itself.", "S0274": " Calisto  : Calisto has the capability to upload and download files to the victim's machine.", "S0077": " CallMe  : CallMe has the capability to download a file to the victim from the C2 server.", "S0351": " Cannon  : Cannon can download a payload for execution.", "S0484": " Carberp  : Carberp can download and execute new plugins from the C2 server. ", "S0348": " Cardinal RAT  : Cardinal RAT can download and execute additional payloads.", "S0465": " CARROTBALL  : CARROTBALL has the ability to download and install a remote payload.", "S0462": " CARROTBAT  : CARROTBAT has the ability to download and execute a remote file via certutil.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell has a module to download and upload files to the system. ", "S0160": " certutil  : certutil can be used to download files from a given URL.", "S0631": " Chaes  : Chaes can download additional files onto an infected machine.", "S0144": " ChChes  : ChChes is capable of downloading files, including additional modules.", "G0114": " Chimera  : Chimera has remotely copied tools and malware onto targeted systems.", "S0020": " China Chopper  : China Chopper's server component can download remote files.", "S0023": " CHOPSTICK  : CHOPSTICK is capable of performing remote file transmission.", "S0054": " CloudDuke  : CloudDuke downloads and executes additional malware from either a Web address or a Microsoft OneDrive account.", "S0106": " cmd  : cmd can be used to copy files to/from a remotely connected external system.", "G0080": " Cobalt Group  : Cobalt Group has used public sites such as github.com and sendspace.com to upload files and then download them to victim computers. The group's JavaScript backdoor is also capable of downloading files.", "S0154": " Cobalt Strike  : Cobalt Strike can deliver additional payloads to victim machines.", "S0369": " CoinTicker  : CoinTicker executes a Python script to download its second stage.", "S0608": " Conficker  : Conficker downloads an HTTP server to the infected machine.", "S0492": " CookieMiner  : CookieMiner can download additional scripts from a web server.", "S0137": " CORESHELL  : CORESHELL downloads another dropper from its C2 server.", "S0614": " CostaBricks  : CostaBricks has been used to load SombRAT onto a compromised host.", "S0115": " Crimson  : Crimson contains a command to retrieve files from its C2 server.", "S0498": " Cryptoistic  : Cryptoistic has the ability to send and receive files.", "S0527": " CSPY Downloader  : CSPY Downloader can download additional tools to a compromised host.", "S0625": " Cuba  : Cuba can download files from its C2 server.", "S0497": " Dacls  : Dacls can download its payload from a C2 server.", "S0334": " DarkComet  : DarkComet can load any files onto the infected machine to execute.", "G0012": " Darkhotel  : Darkhotel has used first-stage payloads that download additional malware from C2 servers.", "S0187": " Daserf  : Daserf can download remote files.", "S0255": " DDKONG  : DDKONG downloads and uploads files on the victim\u2019s machine.", "S0616": " DEATHRANSOM  : DEATHRANSOM can download files to a compromised host.", "S0354": " Denis  : Denis deploys additional backdoors and hacking tools to the system.", "S0200": " Dipsind  : Dipsind can download remote files.", "S0213": " DOGCALL  : DOGCALL can download and execute additional payloads.", "S0600": " Doki  : Doki has downloaded scripts from C2.", "S0472": " down_new  : down_new has the ability to download files to the compromised host.", "S0134": " Downdelph  : After downloading its main config file, Downdelph downloads multiple payloads from C2 servers.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 copied and installed tools for operations once in the victim environment.", "S0547": " DropBook  : DropBook can download and execute additional files.", "S0502": " Drovorub  : Drovorub can download files to a compromised host.", "S0567": " Dtrack  : Dtrack\u2019s can download and upload a file to the victim\u2019s computer.", "S0024": " Dyre  : Dyre has a command to download and executes additional files.", "S0624": " Ecipekac  : Ecipekac can download additional payloads to a compromised host.", "S0554": " Egregor  : Egregor has the ability to download files from its C2 server.", "G0066": " Elderwood  : The Ritsol backdoor trojan used by Elderwood can download files onto a compromised host from a remote location.", "S0081": " Elise  : Elise can download additional files from the C2 server for execution.", "S0082": " Emissary  : Emissary has the capability to download files from the C2 server.", "S0363": " Empire  : Empire can upload and download to and from a victim machine.", "S0404": " esentutl  : esentutl can be used to copy files from a given URL.", "S0396": " EvilBunny  : EvilBunny has downloaded additional Lua scripts from the C2.", "S0568": " EVILNUM  : EVILNUM can download and upload files to the victim's computer.", "G0120": " Evilnum  : Evilnum can deploy additional components or tools as needed.", "S0401": " Exaramel for Linux  : Exaramel for Linux has a command to download a file from  and to a remote C2 server.", "S0569": " Explosive  : Explosive has a function to download a file to the infected system. ", "S0171": " Felismus  : Felismus can download files from remote servers.", "S0267": " FELIXROOT  : FELIXROOT downloads and uploads files to and from the victim\u2019s machine.", "G0046": " FIN7  : FIN7 has downloaded additional malware to execute on the victim's machine, including by using a PowerShell script to launch shellcode that retrieves an additional payload.", "G0061": " FIN8  : FIN8 has used remote code execution to download subsequent payloads.", "G0117": " Fox Kitten  : Fox Kitten has downloaded additional tools including PsExec directly to endpoints.", "G0101": " Frankenstein  : Frankenstein has uploaded and downloaded files to utilize additional plugins.", "S0628": " FYAnti  : FYAnti can download additional payloads to a compromised host.     ", "G0093": " GALLIUM  : GALLIUM dropped additional tools to victims during their operation, including portqry.exe, a renamed cmd.exe file, winrar, and HTRAN.", "G0047": " Gamaredon Group  : Tools used by Gamaredon Group are capable of downloading and executing additional payloads.", "S0168": " Gazer  : Gazer can execute a task to download a file.", "S0032": " gh0st RAT  : gh0st RAT can download files to the victim\u2019s machine.", "S0249": " Gold Dragon  : Gold Dragon can download additional components from the C2 server.", "S0493": " GoldenSpy  : GoldenSpy constantly attempts to download and execute files from the remote C2, including GoldenSpy itself if not found on the system.   ", "S0588": " GoldMax  : GoldMax can download and execute additional files.", "G0078": " Gorgon Group  : Gorgon Group malware can download additional files from C2 servers.", "S0531": " Grandoreiro  : Grandoreiro can download its second stage from a hardcoded URL within the loader's code.", "S0342": " GreyEnergy  : GreyEnergy can download additional modules and payloads.", "S0632": " GrimAgent  : GrimAgent has the ability to download and execute additional payloads.", "S0561": " GuLoader  : GuLoader can download further malware for execution on the victim's machine.", "S0132": " H1N1  : H1N1 contains a command to download and execute a file from a remotely hosted URL using WinINet HTTP requests.", "G0125": " HAFNIUM  : HAFNIUM has downloaded malware and tools--including Nishang and PowerCat--onto a compromised host. ", "S0499": " Hancitor  : Hancitor has the ability to download additional files from C2.", "S0214": " HAPPYWORK  : can download and execute a second-stage payload.", "S0170": " Helminth  : Helminth can download additional files.", "S0087": " Hi-Zor  : Hi-Zor has the ability to upload and download files from its C2 server.", "S0394": " HiddenWasp  : HiddenWasp downloads a tar compressed archive from a download server to the system.", "S0601": " Hildegard  : Hildegard has downloaded additional scripts that build and run Monero cryptocurrency miners.", "S0376": " HOPLIGHT  : HOPLIGHT has the ability to connect to a remote host in order to upload and download files. ", "S0431": " HotCroissant  : HotCroissant has the ability to upload a file from the command and control (C2) server to the victim machine.", "S0070": " HTTPBrowser  : HTTPBrowser is capable of writing a file to the compromised system from the C2 server.", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can download files and additional malware components.", "S0398": " HyperBro  : HyperBro has the ability to download additional files.", "S0483": " IcedID  : IcedID has the ability to download additional modules and a configuration file from C2.", "G0136": " IndigoZebra  : IndigoZebra has downloaded additional files and tools from its C2 server.", "G0119": " Indrik Spider  : Indrik Spider has downloaded additional scripts, malware, and tools onto a compromised host.", "S0604": " Industroyer  : Industroyer downloads a shellcode payload from a remote C2 server and loads it into memory.", "S0260": " InvisiMole  : InvisiMole can upload files to the victim's machine for operations.", "S0015": " Ixeshe  : Ixeshe can download and execute additional files.", "S0528": " Javali  : Javali can download payloads from remote C2 servers.", "S0044": " JHUHUGIT  : JHUHUGIT can retrieve an additional payload from its C2 server. JHUHUGIT has a command to download files to the victim\u2019s machine.", "S0201": " JPIN  : JPIN can download files and upgrade itself.", "S0283": " jRAT  : jRAT can download and execute files.", "S0648": " JSS Loader  : JSS Loader has the ability to download malicious executables to a compromised host.", "S0215": " KARAE  : KARAE can upload and download files, including second-stage malware.", "S0088": " Kasidet  : Kasidet has the ability to download and execute additional files.", "S0265": " Kazuar  : Kazuar downloads additional plug-ins to load on the victim\u2019s machine, including the ability to upgrade and replace its own binary.", "S0585": " Kerrdown  : Kerrdown can download specific payloads to a compromised host based on OS architecture.", "S0487": " Kessel  : Kessel can download additional modules from the C2 server.", "S0387": " KeyBoy  : KeyBoy has a download and upload functionality.", "S0271": " KEYMARBLE  : KEYMARBLE can upload files to the victim\u2019s machine and can download additional payloads.", "S0526": " KGH_SPY  : KGH_SPY has the ability to download and execute code from remote servers.", "G0094": " Kimsuky  : Kimsuky has used scripts to download additional tools from compromised domains to victim systems.", "S0599": " Kinsing  : Kinsing has downloaded additional lateral movement scripts from C2.", "S0437": " Kivars  : Kivars has the ability to download and execute files.", "S0250": " Koadic  : Koadic can download additional files.", "S0356": " KONNI  : KONNI can download files and execute them on the victim\u2019s machine.", "S0236": " Kwampirs  : Kwampirs downloads additional files from C2 servers.", "G0032": " Lazarus Group  : Several Lazarus Group malware families are capable of downloading and executing binaries from its C2 server.", "G0065": " Leviathan  : Leviathan has downloaded additional scripts and files from adversary-controlled servers.", "S0395": " LightNeuron  : LightNeuron has the ability to download and execute additional files.", "S0211": " Linfo  : Linfo creates a backdoor through which remote attackers can download files onto compromised hosts.", "S0513": " LiteDuke  : LiteDuke has the ability to download files.", "S0447": " Lokibot  : Lokibot downloaded several staged items onto the victim's machine. ", "S0451": " LoudMiner  : LoudMiner used SCP to update the miner from the C2.", "S0042": " LOWBALL  : LOWBALL uses the Dropbox API to request two files, one of which is the same file as the one dropped by the malicious email attachment. This is most likely meant to be a mechanism to update the compromised host with a new version of the LOWBALL malware.", "S0532": " Lucifer  : Lucifer can download and execute a replica of itself using certutil.", "S0409": " Machete  : Machete can download additional files for execution on the victim\u2019s machine. ", "G0059": " Magic Hound  : Magic Hound has downloaded additional code and files from servers onto victims. ", "S0652": " MarkiRAT  : MarkiRAT can download additional files and tools from its C2 server, including through the use of BITSAdmin.", "S0500": " MCMD  : MCMD can upload additional files to a compromised host.", "S0459": " MechaFlounder  : MechaFlounder has the ability to upload and download files to and from a compromised host.", "S0530": " Melcoz  : Melcoz has the ability to download additional files to a compromised host.", "G0045": " menuPass  : menuPass has installed updates and new malware on victims.", "S0455": " Metamorfo  : Metamorfo has used MSI files to download additional files to execute. ", "S0339": " Micropsia  : Micropsia can download and execute an executable from the C2 server.", "S0051": " MiniDuke  : MiniDuke can download additional encrypted backdoors onto the victim via GIF files.", "S0083": " Misdat  : Misdat is capable of downloading files from the C2.", "S0080": " Mivast  : Mivast has the capability to download and execute .exe files.", "S0079": " MobileOrder  : MobileOrder has a command to download a file from the C2 server to the victim mobile device's SD card.", "S0553": " MoleNet  : MoleNet can download additional payloads from the C2. ", "G0021": " Molerats  : Molerats used executables to download malicious files from different sources. ", "S0284": " More_eggs  : More_eggs can download and launch additional payloads.", "S0256": " Mosquito  : Mosquito can upload and download files to the victim.", "G0069": " MuddyWater  : MuddyWater has used malware that can upload additional files to the victim\u2019s machine.", "G0129": " Mustang Panda  : Mustang Panda has downloaded additional executables following the initial infection stage.", "S0228": " NanHaiShu  : NanHaiShu can download additional files from URLs.", "S0336": " NanoCore  : NanoCore has the capability to download and activate additional modules for execution.", "S0247": " NavRAT  : NavRAT can download files remotely.", "S0272": " NDiskMonitor  : NDiskMonitor can download and execute a file from given URL.", "S0630": " Nebulae  : Nebulae can download files from C2.", "S0210": " Nerex  : Nerex creates a backdoor through which remote attackers can download files onto a compromised host.", "S0457": " Netwalker  : Operators deploying Netwalker have used psexec and certutil to retrieve the Netwalker payload.", "S0198": " NETWIRE  : NETWIRE can downloaded payloads from C2 to the compromised host.", "S0118": " Nidiran  : Nidiran can download and execute files.", "S0385": " njRAT  : njRAT can download files to the victim\u2019s machine.", "S0353": " NOKKI  : NOKKI has downloaded a remote module for execution.", "G0133": " Nomadic Octopus  : Nomadic Octopus has used malicious macros to download additional files to the victim's machine. ", "S0340": " Octopus  : Octopus can download additional files and tools onto the victim\u2019s machine.", "G0049": " OilRig  : OilRig can download remote files onto victims.", "S0439": " Okrum  : Okrum has built-in commands for uploading, downloading, and executing files to the system.", "S0264": " OopsIE  : OopsIE can download files from its C2 server to the victim's machine.", "G0116": " Operation Wocao  : Operation Wocao can download additional files to the infected system.", "S0229": " Orz  : Orz can download files onto the victim.", "S0402": " OSX/Shlayer  : OSX/Shlayer can download payloads, and extract bytes from files. OSX/Shlayer uses the  command to download malicious payloads into a temporary directory.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D has a command to download and execute a file on the victim\u2019s machine.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell can upload and download files to and from compromised hosts.", "S0626": " P8RAT  : P8RAT can download additional payloads to a target system.", "S0208": " Pasam  : Pasam creates a backdoor through which remote attackers can upload files.", "G0040": " Patchwork  : Patchwork payloads download additional files from the C2 server.", "S0587": " Penquin  : Penquin can execute the command code  to retrieve remote files from C2.", "S0643": " Peppy  : Peppy can download and execute remote files.", "S0501": " PipeMon  : PipeMon can install additional modules via C2 commands.", "S0124": " Pisloader  : Pisloader has a command to upload a file to the victim machine.", "S0254": " PLAINTEE  : PLAINTEE has downloaded and executed additional plugins.", "G0068": " PLATINUM  : PLATINUM has transferred files using the Intel\u00ae Active Management Technology (AMT) Serial-over-LAN (SOL) channel.", "S0435": " PLEAD  : PLEAD has the ability to upload and download files to and from an infected host.", "S0013": " PlugX  : PlugX has a module to download and execute files on the compromised machine.", "S0428": " PoetRAT  : PoetRAT has the ability to copy files and download/upload files into C2 channels using FTP and HTTPS.", "S0012": " PoisonIvy  : PoisonIvy creates a backdoor through which remote attackers can upload files.", "S0518": " PolyglotDuke  : PolyglotDuke can retrieve payloads from the C2 server.", "S0453": " Pony  : Pony can download additional files onto the infected system. ", "S0150": " POSHSPY  : POSHSPY downloads and executes additional PowerShell code and Windows binaries.", "S0139": " PowerDuke  : PowerDuke has a command to download a file.", "S0145": " POWERSOURCE  : POWERSOURCE has been observed being used to download TEXTMATE and the Cobalt Strike Beacon payload onto victims.", "S0223": " POWERSTATS  : POWERSTATS can retrieve and execute additional PowerShell payloads from the C2 server.", "S0184": " POWRUNER  : POWRUNER can download or upload files from its C2 server.", "S0078": " Psylo  : Psylo has a command to download a file to the system from its C2 server.", "S0147": " Pteranodon  : Pteranodon can download and execute additional files.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY can download additional files and payloads to compromised hosts.", "S0192": " Pupy  : Pupy can upload and download to/from a victim machine.", "S0650": " QakBot  : QakBot has the ability to download additional components and malware.", "S0262": " QuasarRAT  : QuasarRAT can download files to the victim\u2019s machine and execute them.", "S0629": " RainyDay  : RainyDay can download files to a compromised host.", "G0075": " Rancor  : Rancor has downloaded additional malware, including by using certutil.", "S0055": " RARSTONE  : RARSTONE downloads its backdoor component from a C2 server and loads it directly into memory.", "S0241": " RATANKBA  : RATANKBA uploads and downloads information.", "S0495": " RDAT  : RDAT can download files via DNS.    ", "S0153": " RedLeaves  : RedLeaves is capable of downloading a file from a specified URL.", "S0511": " RegDuke  : RegDuke can download files from C2.", "S0332": " Remcos  : Remcos can upload and download files to and from the victim\u2019s machine.", "S0166": " RemoteCMD  : RemoteCMD copies a file over to the remote system before execution.", "S0592": " RemoteUtilities  : RemoteUtilities can upload and download files to and from a target machine.", "S0125": " Remsec  : Remsec contains a network loader to receive executable modules from remote attackers and run them on the local victim. It can also upload and download files over HTTP and HTTPS.", "S0379": " Revenge RAT  : Revenge RAT has the ability to upload and download files.", "S0496": " REvil  : REvil can download a copy of itself from an attacker controlled IP address to the victim machine.", "S0258": " RGDoor  : RGDoor uploads and downloads files to and from the victim\u2019s machine.", "G0106": " Rocke  : Rocke used malware to download additional malicious files to the target system. ", "S0270": " RogueRobin  : RogueRobin can save a new file to the system from the C2 server.", "S0240": " ROKRAT  : ROKRAT retrieves additional malicious payloads from the C2 server.", "S0148": " RTM  : RTM can download additional files.", "S0074": " Sakula  : Sakula has the capability to download files.", "G0034": " Sandworm Team  : Sandworm Team has pushed additional malicious tools onto an infected system to steal user credentials, move laterally, and destroy data.", "S0461": " SDBbot  : SDBbot has the ability to download a DLL from C2 to a compromised host.", "S0053": " SeaDuke  : SeaDuke is capable of uploading and downloading files.", "S0345": " Seasalt  : Seasalt has a command to download additional files.", "S0185": " SEASHARPEE  : SEASHARPEE can download remote files onto victims.", "S0382": " ServHelper  : ServHelper may download additional files to execute.", "S0639": " Seth-Locker  : Seth-Locker has the ability to download and execute files on a compromised host.", "S0596": " ShadowPad  : ShadowPad has downloaded code from a C2 server.", "S0140": " Shamoon  : Shamoon can download an executable to run on the victim.", "G0104": " Sharpshooter  : Sharpshooter downloaded additional payloads after a target was infected with a first-stage downloader.", "S0546": " SharpStage  : SharpStage has the ability to download and execute additional payloads via a DropBox API.", "S0450": " SHARPSTATS  : SHARPSTATS has the ability to upload and download files.", "S0444": " ShimRat  : ShimRat can download additional files.", "S0445": " ShimRatReporter  : ShimRatReporter had the ability to download additional payloads.", "S0217": " SHUTTERSPEED  : SHUTTERSPEED can download and execute an arbitary executable.", "S0589": " Sibot  : Sibot can download and execute a payload onto a compromised system.", "S0610": " SideTwist  : SideTwist has the ability to download additional files.", "G0121": " Sidewinder  : Sidewinder has used LNK files to download remote files to the victim's network.", "G0091": " Silence  : Silence has downloaded additional modules and malware to victim\u2019s machines.  ", "S0468": " Skidmap  : Skidmap has the ability to download files on an infected host. ", "S0633": " Sliver  : Sliver can upload files from the C2 server to the victim machine using the  command.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has downloaded files onto a victim machine.", "S0218": " SLOWDRIFT  : SLOWDRIFT downloads additional payloads.", "S0226": " Smoke Loader  : Smoke Loader downloads a new version of itself once it has installed. It also downloads additional plugins.", "S0649": " SMOKEDHAM  : SMOKEDHAM has used Powershell to download UltraVNC and Ngrok from third-party file sharing sites.", "S0627": " SodaMaster  : SodaMaster has the ability to download additional payloads from C2 to the targeted system.", "S0615": " SombRAT  : SombRAT has the ability to download and execute additional payloads.", "S0516": " SoreFang  : SoreFang can download additional payloads from C2.", "S0374": " SpeakUp  : SpeakUp downloads and executes additional files from a remote server. ", "S0646": " SpicyOmelette  : SpicyOmelette can download malicious files from threat actor controlled AWS URL's.", "S0390": " SQLRat  : SQLRat can make a direct SQL connection to a Microsoft database controlled by the attackers, retrieve an item from the bindata table, then write and execute the file on disk.    ", "S0380": " StoneDrill  : StoneDrill has downloaded and dropped temporary files containing scripts; it additionally has a function to upload files from the victims machine.  ", "S0491": " StrongPity  : StrongPity can download files to specified targets.", "S0559": " SUNBURST  : SUNBURST delivered different payloads, including TEARDROP in at least one instance.", "G0092": " TA505  : TA505 has downloaded additional malware to execute on victim systems.", "G0127": " TA551  : TA551 has retrieved DLLs and installer binaries for malware execution from C2.", "S0011": " Taidoor  : Taidoor has downloaded additional files onto a compromised host.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE can download additional modules from its C2 server.", "S0164": " TDTESS  : TDTESS has a command to download and execute an additional file.", "G0139": " TeamTNT  : TeamTNT has the curl command and batch scripts to download new tools.", "S0595": " ThiefQuest  : ThiefQuest can download and execute payloads in-memory or from disk.", "G0027": " Threat Group-3390  : After re-establishing access to a victim network, Threat Group-3390 actors download tools including gsecdump and WCE that are staged temporarily on websites that were previously compromised but never used.", "G0131": " Tonto Team  : Tonto Team has downloaded malicious DLLs which served as a ShadowPad loader.", "S0266": " TrickBot  : TrickBot downloads several additional files and saves them to the victim's machine.", "S0094": " Trojan.Karagany  : Trojan.Karagany can upload, download, and execute files on the victim.", "G0081": " Tropic Trooper  : Tropic Trooper has used a delivered trojan to download additional files.", "S0436": " TSCookie  : TSCookie has the ability to upload and download files to and from the infected host.", "S0647": " Turian  : Turian can download additional files and tools from its C2.", "G0010": " Turla  : Turla has used shellcode to download Meterpreter after compromising a victim.", "S0199": " TURNEDUP  : TURNEDUP is capable of downloading additional files.", "S0263": " TYPEFRAME  : TYPEFRAME can upload and download files to the victim\u2019s machine.", "S0333": " UBoatRAT  : UBoatRAT can upload and download files to the victim\u2019s machine.", "S0130": " Unknown Logger  : Unknown Logger is capable of downloading remote files.", "S0275": " UPPERCUT  : UPPERCUT can download and upload files to and from the victim\u2019s machine.", "S0386": " Ursnif  : Ursnif has dropped payload and configuration files to disk. Ursnif has also been used to download and execute additional payloads.", "S0476": " Valak  : Valak has downloaded a variety of modules and payloads to the compromised host, including IcedID and NetSupport Manager RAT-based malware.", "S0636": " VaporRage  : VaporRage has the ability to download malicious shellcode to compromised systems.", "S0207": " Vasport  : Vasport can download files.", "S0442": " VBShower  : VBShower has the ability to download VBS files to the target computer.", "S0257": " VERMIN  : VERMIN can download and upload files to the victim's machine.", "G0123": " Volatile Cedar  : Volatile Cedar can deploy additional tools.", "S0180": " Volgmer  : Volgmer can download remote files and additional payloads to the victim's machine.", "S0579": " Waterbear  : Waterbear can receive and load executables from remote C2 servers.", "S0109": " WEBC2  : WEBC2 can download and execute a file.", "S0515": " WellMail  : WellMail can receive data and executable scripts from C2.", "S0514": " WellMess  : WellMess can write files to a compromised host.", "G0107": " Whitefly  : Whitefly has the ability to download additional tools from the C2.", "S0206": " Wiarp  : Wiarp creates a backdoor through which remote attackers can download files.", "G0112": " Windshift  : Windshift has used tools to deploy additional payloads to compromised hosts.", "S0430": " Winnti for Linux  : Winnti for Linux has the ability to deploy modules directly from command and control (C2) servers, possibly for remote command execution, file exfiltration, and socks5 proxying on the infected host. ", "G0090": " WIRTE  : WIRTE has downloaded PowerShell code from the C2 server to be executed.", "S0341": " Xbash  : Xbash can download additional malicious files from its C2 server.", "S0653": " xCaon  : xCaon has a command to download files to the victim's machine.", "S0658": " XCSSET  : XCSSET downloads browser specific AppleScript modules using a constructed URL with the  command, .", "S0388": " YAHOYAH  : YAHOYAH uses HTTP GET requests to download other files that are executed in memory.", "S0251": " Zebrocy  : Zebrocy obtains additional code to execute on the victim's machine, including the downloading of a secondary payload.", "S0230": " ZeroT  : ZeroT can download additional payloads onto the victim.", "S0330": " Zeus Panda  : Zeus Panda can download additional malware plug-in modules and execute them on the victim\u2019s machine.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used tools to download malicious files to compromised hosts.", "S0086": " ZLib  : ZLib has the ability to download files.", "S0412": " ZxShell  : ZxShell has a command to transfer files from a remote host. "}, "id": "T1105", "subtechniques": ["No sub-techniques"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "2.0", "created": "31 May 2017", "lastmodified": "20 March 2020"}, {"techniquename": "Encrypted Channel", "detection": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.", "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.", "M1020": " SSL/TLS Inspection  : SSL/TLS inspection can be used to see the contents of encrypted sessions to look for network-based indicators of malware communication protocols."}, "procedureexamples": {"S0631": " Chaes  : Chaes has used encryption for its C2 channel. ", "S0498": " Cryptoistic  : Cryptoistic can engage in encrypted communications with C2.", "S0032": " gh0st RAT  : gh0st RAT    has encrypted TCP communications to evade detection.", "S0198": " NETWIRE  : NETWIRE can encrypt C2 communications.", "G0081": " Tropic Trooper  : Tropic Trooper has encrypted traffic with the C2 to prevent network detection."}, "id": "T1573", "subtechniques": ["T1573.001", "T1573.002"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "16 March 2020", "lastmodified": "20 April 2021"}, {"techniquename": "Symmetric Cryptography", "detection": "With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.", "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."}, "procedureexamples": {"S0066": " 3PARA RAT  : 3PARA RAT command and control commands are encrypted within the HTTP C2 channel using the DES algorithm in CBC mode with a key derived from the MD5 hash of the string HYF54&%9&jkMCXuiS. 3PARA RAT will use an 8-byte XOR key derived from the string HYF54&%9&jkMCXuiS if the DES decoding fails", "S0065": " 4H RAT  : 4H RAT obfuscates C2 communication using a 1-byte XOR with the key 0xBE.", "S0045": " ADVSTORESHELL  : A variant of ADVSTORESHELL encrypts some C2 with 3DES.", "G0007": " APT28  : APT28 installed a Delphi backdoor that used a custom algorithm for C2 communications.", "G0064": " APT33  : APT33 has used AES for encryption of command and control traffic.", "S0438": " Attor  : Attor has encrypted data symmetrically using a randomly generated Blowfish (OFB) key which is encrypted with a public RSA key.", "S0344": " Azorult  : Azorult can encrypt C2 traffic using XOR.", "S0245": " BADCALL  : BADCALL encrypts C2 traffic using an XOR/ADD cipher.", "S0128": " BADNEWS  : BADNEWS encrypts C2 data with a ROR by 3 and an XOR by 0x23.", "S0234": " Bandook  : Bandook has used AES encryption for C2 communication.", "S0534": " Bazar  : Bazar can send C2 communications with XOR encryption.", "S0127": " BBSRAT  : BBSRAT uses a custom encryption algorithm on data sent back to the C2 server over HTTP.", "S0574": " BendyBear  : BendyBear communicates to a C2 server over port 443 using modified RC4 and XOR-encrypted chunks. ", "S0268": " Bisonal  : Bisonal variants reported on in 2014 and 2015 used a simple XOR cipher for C2. Some Bisonal samples encrypt C2 communications with RC4.", "S0520": " BLINDINGCAN  : BLINDINGCAN has encrypted its C2 traffic with RC4.", "S0486": " Bonadan  : Bonadan can XOR-encrypt C2 communications.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used RC4 encryption (for Datper malware) and AES (for xxmm malware) to obfuscate HTTP traffic. BRONZE BUTLER has also used a tool called RarStar that encodes data with a custom XOR algorithm when posting it to a C2 server.", "S0077": " CallMe  : CallMe uses AES to encrypt C2 traffic.", "S0030": " Carbanak  : Carbanak encrypts the message body of HTTP traffic with RC2 (in CBC mode). Carbanak also uses XOR with random keys for its communications.", "S0348": " Cardinal RAT  : Cardinal RAT uses a secret key with a series of XOR and addition operations to encrypt C2 traffic.", "S0220": " Chaos  : Chaos provides a reverse shell connection on 8338/TCP, encrypted via AES.", "S0144": " ChChes  : ChChes can encrypt C2 traffic with AES or RC4.", "S0023": " CHOPSTICK  : CHOPSTICK encrypts C2 communications with RC4.", "S0154": " Cobalt Strike  : Cobalt Strike has the ability to use AES-256 symmetric encryption in CBC mode with HMAC-SHA-256 to encrypt task commands and XOR to encrypt shell code and configuration data.", "S0244": " Comnie  : Comnie encrypts command and control communications with RC4.", "S0137": " CORESHELL  : CORESHELL C2 messages are encrypted with custom stream ciphers using six-byte or eight-byte keys.", "S0050": " CosmicDuke  : CosmicDuke contains a custom version of the RC4 algorithm that includes a programming error.", "G0012": " Darkhotel  : Darkhotel has used AES-256 and 3DES for C2 communications.", "S0187": " Daserf  : Daserf uses RC4 encryption to obfuscate HTTP traffic.", "S0021": " Derusbi  : Derusbi obfuscates C2 traffic with variable 4-byte XOR keys.", "S0200": " Dipsind  : Dipsind encrypts C2 data with AES256 in ECB mode.", "S0472": " down_new  : down_new has the ability to AES encrypt C2 communications.", "S0134": " Downdelph  : Downdelph uses RC4 to encrypt C2 responses.", "S0384": " Dridex  : Dridex has encrypted traffic with RC4.", "S0038": " Duqu  : The Duqu command and control protocol's data stream can be encrypted with AES-CBC.", "S0377": " Ebury  : Ebury has encrypted C2 traffic using the client IP address, then encoded it as a hexadecimal string.", "S0081": " Elise  : Elise encrypts exfiltrated data with RC4.", "S0082": " Emissary  : The C2 server response to a beacon sent by a variant of Emissary contains a 36-character GUID value that is used as an encryption key for subsequent network communications. Some variants of Emissary use various XOR operations to encrypt C2 data.", "S0091": " Epic  : Epic encrypts commands from the C2 server using a hardcoded key.", "S0569": " Explosive  : Explosive has encrypted communications with the RC4 method. ", "S0076": " FakeM  : The original variant of FakeM encrypts C2 traffic using a custom encryption cipher that uses an XOR key of \"YHCRA\" and bit rotation between each XOR operation. Some variants of FakeM use RC4 to encrypt C2 traffic.", "S0181": " FALLCHILL  : FALLCHILL encrypts C2 data with RC4 encryption.", "S0512": " FatDuke  : FatDuke can AES encrypt C2 communications.", "S0171": " Felismus  : Some Felismus samples use a custom encryption method for C2 traffic that utilizes AES and multiple keys.", "S0381": " FlawedAmmyy  : FlawedAmmyy has used SEAL encryption during the initial C2 handshake.", "G0101": " Frankenstein  : Frankenstein has communicated with a C2 via an encrypted RC4 byte stream and AES-CBC.", "S0168": " Gazer  : Gazer uses custom encryption for C2 that uses 3DES.", "S0032": " gh0st RAT  : gh0st RAT uses RC4 and XOR to encrypt C2 traffic.", "S0342": " GreyEnergy  : GreyEnergy encrypts communications using AES256.", "S0632": " GrimAgent  : GrimAgent can use an AES key to encrypt C2 communications.", "S0132": " H1N1  : H1N1 encrypts C2 traffic using an RC4 key.", "S0037": " HAMMERTOSS  : Before being appended to image files, HAMMERTOSS commands are encrypted with a key composed of both a hard-coded value and a string contained on that day's tweet. To decrypt the commands, an investigator would need access to the intended malware sample, the day's tweet, and the image file containing the command.", "S0170": " Helminth  : Helminth encrypts data sent to its C2 server over HTTP with RC4.", "S0087": " Hi-Zor  : Hi-Zor encrypts C2 traffic with a double XOR using two distinct single-byte keys.", "S0394": " HiddenWasp  : HiddenWasp uses an RC4-like algorithm with an already computed PRGA generated key-stream for network communication.", "G0126": " Higaisa  : Higaisa used AES-128 to encrypt C2 traffic.", "S0009": " Hikit  : Hikit performs XOR encryption.", "S0431": " HotCroissant  : HotCroissant has compressed network communications and encrypted them with a custom stream cipher.", "S0068": " httpclient  : httpclient encrypts C2 content with XOR using a single byte, 0x12.", "S0203": " Hydraq  : Hydraq C2 traffic is encrypted using bitwise NOT and XOR operations.", "S0537": " HyperStack  : HyperStack has used RSA encryption for C2 communications.", "G0100": " Inception  : Inception has encrypted network communications with AES.", "S0260": " InvisiMole  : InvisiMole uses variations of a simple XOR encryption routine for C&C communications.", "S0271": " KEYMARBLE  : KEYMARBLE uses a customized XOR algorithm to encrypt C2 communications.", "S0641": " Kobalos  : Kobalos's post-authentication communication channel uses a 32-byte-long password with RC4 for inbound and outbound traffic. ", "S0162": " Komplex  : The Komplex C2 channel uses an 11-byte XOR algorithm to hide data.", "G0032": " Lazarus Group  : Several Lazarus Group malware families encrypt C2 traffic using custom code that uses XOR with an ADD operation and XOR with a SUB operation. Another Lazarus Group malware sample XORs C2 traffic. Other Lazarus Group malware uses Caracachs encryption to encrypt C2 payloads.", "S0395": " LightNeuron  : LightNeuron uses AES to encrypt C2 traffic.", "S0582": " LookBack  : LookBack uses a modified version of RC4 for data transfer.", "S0532": " Lucifer  : Lucifer can perform a decremental-xor encryption on the initial C2 request before sending it over the wire.", "S0010": " Lurid  : Lurid performs XOR encryption.", "S0409": " Machete  : Machete has used AES to exfiltrate documents.", "S0455": " Metamorfo  : Metamorfo has encrypted C2 commands with AES-256. ", "S0149": " MoonWind  : MoonWind encrypts C2 traffic using RC4 with a static key.", "S0284": " More_eggs  : More_eggs has used an RC4-based encryption method for its C2 communications.", "S0256": " Mosquito  : Mosquito uses a custom encryption algorithm, which consists of XOR and a stream that is similar to the Blum Blum Shub algorithm.", "G0129": " Mustang Panda  : Mustang Panda has encrypted C2 communications with RC4.", "S0336": " NanoCore  : NanoCore uses DES to encrypt the C2 traffic.", "S0272": " NDiskMonitor  : NDiskMonitor uses AES to encrypt certain information sent over its C2 channel.", "S0630": " Nebulae  : Nebulae can use RC4 and XOR to encrypt C2 communications.", "S0034": " NETEAGLE  : NETEAGLE will decrypt resources it downloads with HTTP requests by using RC4 with the key \"ScoutEagle.\"", "S0198": " NETWIRE  : NETWIRE can use AES encryption for C2 data transferred.", "S0439": " Okrum  : Okrum uses AES to encrypt network traffic. The key can be hardcoded or negotiated with the C2 server in the registration phase. ", "S0501": " PipeMon  : PipeMon communications are RC4 encrypted.", "S0254": " PLAINTEE  : PLAINTEE encodes C2 beacons using XOR.", "S0435": " PLEAD  : PLEAD has used RC4 encryption to download modules.", "S0012": " PoisonIvy  : PoisonIvy uses the Camellia cipher to encrypt communications.", "S0371": " POWERTON  : POWERTON has used AES for encrypting C2 traffic.", "S0113": " Prikormka  : Prikormka encrypts some C2 traffic with the Blowfish cipher.", "S0650": " QakBot  : QakBot can RC4 encrypt strings in C2 communication.", "S0262": " QuasarRAT  : QuasarRAT uses AES to encrypt network communication.", "S0629": " RainyDay  : RainyDay can use RC4 to encrypt C2 communications.", "S0495": " RDAT  : RDAT has used AES ciphertext to encode C2 communications.", "S0153": " RedLeaves  : RedLeaves has encrypted C2 traffic with RC4, previously using keys of 88888888 and babybear.", "S0433": " Rifdoor  : Rifdoor has encrypted command and control (C2) communications with a stream cipher.", "S0003": " RIPTIDE  : APT12 has used the RIPTIDE RAT, which communicates over HTTP with a payload encrypted with RC4.", "S0148": " RTM  : RTM encrypts C2 traffic with a custom RC4 variant.", "S0074": " Sakula  : Sakula encodes C2 traffic with single-byte XOR keys.", "S0053": " SeaDuke  : SeaDuke C2 traffic has been encrypted with RC4 and AES.", "S0610": " SideTwist  : SideTwist can encrypt C2 communications with a randomly generated key.", "S0633": " Sliver  : Sliver can use AES-GCM-256 to encrypt a session key for C2 message exchange.", "S0649": " SMOKEDHAM  : SMOKEDHAM has encrypted its C2 traffic with RC4.", "S0159": " SNUGRIDE  : SNUGRIDE encrypts C2 traffic using AES with a static key.", "S0627": " SodaMaster  : SodaMaster can use RC4 to encrypt C2 communications.", "G0038": " Stealth Falcon  : Stealth Falcon malware encrypts C2 traffic using RC4 with a hard-coded key.", "S0603": " Stuxnet  : Stuxnet encodes the payload of system information sent to the command and control servers using a one byte 0xFF XOR key. Stuxnet also uses a 31-byte long static byte string to XOR data sent to command and control servers. The servers use a different static key to encrypt replies to the implant. ", "S0559": " SUNBURST  : SUNBURST encrypted C2 traffic using a single-byte-XOR cipher.", "S0060": " Sys10  : Sys10 uses an XOR 0x1 loop to encrypt its C2 domain.", "S0011": " Taidoor  : Taidoor uses RC4 to encrypt the message body of HTTP content.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE uses a Linear Feedback Shift Register (LFSR) algorithm for network encryption.", "S0266": " TrickBot  : TrickBot uses a custom crypter leveraging Microsoft\u2019s CryptoAPI to encrypt C2 traffic.Newer versions of TrickBot have been known to use  to encrypt and digitally sign responses to their C2 server. ", "S0436": " TSCookie  : TSCookie has encrypted network communications with RC4.", "S0275": " UPPERCUT  : Some versions of UPPERCUT have used the hard-coded string \"this is the encrypt key\" for Blowfish encryption when communicating with a C2. Later versions have hard-coded keys uniquely for each C2 address.", "S0180": " Volgmer  : Volgmer uses a simple XOR cipher to encrypt traffic and files.", "S0514": " WellMess  : WellMess can encrypt HTTP POST data using RC6 and a dynamically generated AES key encrypted with a hard coded RSA public key.", "S0430": " Winnti for Linux  : Winnti for Linux has used a custom TCP protocol with four-byte XOR for command and control (C2).", "S0653": " xCaon  : xCaon has encrypted data sent to the C2 server using a XOR key. ", "S0658": " XCSSET  : XCSSET uses RC4 encryption over TCP to communicate with its C2 server.  ", "S0230": " ZeroT  : ZeroT has used RC4 to encrypt C2 traffic.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used AES encrypted communications in C2."}, "id": "T1573.001", "subtechniqueof": "T1573", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "16 March 2020", "lastmodified": "26 March 2020"}, {"techniquename": "Fast Flux DNS", "detection": "In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.", "description": "Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.The simplest, \"single-flux\" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.In contrast, the \"double-flux\" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.", "procedureexamples": {"S0032": " gh0st RAT  : gh0st RAT    operators have used dynamic DNS to mask the true location of their C2 behind rapidly changing IP addresses.", "G0045": " menuPass  : menuPass has used dynamic DNS service providers to host malicious domains.", "S0385": " njRAT  : njRAT has used a fast flux DNS for C2 IP resolution.", "G0092": " TA505  : TA505 has used fast flux to mask botnets by distributing payloads across multiple IPs."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1568.001", "subtechniqueof": "T1568", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "11 March 2020", "lastmodified": "27 March 2020"}, {"techniquename": "DNS Calculation", "detection": "Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.", "description": "Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.One implementation of DNS Calculation is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.", "procedureexamples": {"G0005": " APT12  : APT12 has used multiple variants of DNS Calculation including multiplying the first two octets of an IP address and adding the third octet to that value in order to get a resulting command and control port."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1568.003", "subtechniqueof": "T1568", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "11 March 2020", "lastmodified": "27 March 2020"}, {"techniquename": "Dynamic Resolution", "detection": "Detecting dynamically generated C2 can be challenging due to the number of different algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are multiple approaches to detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more . CDN domains may trigger these detections due to the format of their domain names. In addition to detecting algorithm generated domains based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.", "description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.Adversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Malware researchers can reverse engineer malware variants that use dynamic resolution and determine future C2 infrastructure that the malware will attempt to contact, but this is a time and resource intensive effort.", "M1021": " Restrict Web-Based Content  : In some cases a local DNS sinkhole may be used to help prevent behaviors associated with dynamic resolution."}, "procedureexamples": {"G0016": " APT29  : APT29 used dynamic DNS resolution to construct and resolve to randomly-generated subdomains for C2.", "S0449": " Maze  : Maze has forged POST strings with a random choice from a list of possibilities including \"forum\", \"php\", \"view\", etc. while making connection with the C2, hindering detection efforts.", "S0034": " NETEAGLE  : NETEAGLE can use HTTP to download resources that contain an IP address and port number pair to connect to for C2.", "S0148": " RTM  : RTM has resolved Pony C2 server IP addresses by either converting Bitcoin blockchain transaction data to specific octets, or accessing IP addresses directly within the Namecoin blockchain.", "S0559": " SUNBURST  : SUNBURST dynamically resolved C2 infrastructure for randomly-generated subdomains within a parent domain.", "G0134": " Transparent Tribe  : Transparent Tribe has used dynamic DNS services to set up C2."}, "id": "T1568", "subtechniques": ["T1568.001", "T1568.002", "T1568.003"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Chris Roffe"], "version": "1.0", "created": "10 March 2020", "lastmodified": "02 October 2020"}, {"techniquename": "Junk Data", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.", "description": "Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters. ", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate some obfuscation activity at the network level. "}, "procedureexamples": {"G0007": " APT28  : APT28 added \"junk data\" to each encoded string, preventing trivial decoding without knowledge of the junk removal algorithm. Each implant was given a \"junk length\" value when created, tracked by the controller software to allow seamless communication but prevent analysis of the command protocol on the wire.", "S0574": " BendyBear  : BendyBear has used byte randomization to obscure its behavior.", "S0134": " Downdelph  : Downdelph inserts pseudo-random characters between each original character during encoding of C2 network requests, making it difficult to write signatures on them.", "S0588": " GoldMax  : GoldMax has used decoy traffic to surround its malicious network traffic to avoid detection.", "S0632": " GrimAgent  : GrimAgent  can pad C2 messages with random generated values.", "S0016": " P2P ZeuS  : P2P ZeuS added junk data to outgoing UDP packets to peer implants.", "S0626": " P8RAT  : P8RAT can send randomly-generated data as part of its C2 communication.", "S0435": " PLEAD  : PLEAD samples were found to be highly obfuscated with junk code.", "S0559": " SUNBURST  : SUNBURST added junk bytes to its C2 over HTTP.", "S0647": " Turian  : Turian can insert pseudo-random characters into its network encryption setup.", "S0514": " WellMess  : WellMess can use junk data in the Base64 string for additional obfuscation."}, "id": "T1001.001", "subtechniqueof": "T1001", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "15 March 2020", "lastmodified": "15 March 2020"}, {"techniquename": "Steganography", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.", "description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control. ", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate some obfuscation activity at the network level. "}, "procedureexamples": {"G0016": " APT29  : APT29 has used steganography to hide C2 communications in images.", "G0001": " Axiom  : Some malware that has been used by Axiom also uses steganography to hide communication in PNG image files.", "S0187": " Daserf  : Daserf can use steganography to hide malicious code downloaded to the victim.", "S0038": " Duqu  : When the Duqu command and control is operating over HTTP or HTTPS, Duqu uploads data to its controller by appending it to a blank JPG file.", "S0037": " HAMMERTOSS  : HAMMERTOSS is controlled via commands that are appended to image files.", "S0395": " LightNeuron  : LightNeuron is controlled via commands that are embedded into PDFs and JPGs using steganographic methods.", "S0495": " RDAT  : RDAT can process steganographic images attached to email messages to send and receive C2 commands. RDAT can also embed additional messages within BMP images to communicate with the RDAT operator.   ", "S0633": " Sliver  : Sliver can encode binary data into a .PNG file for C2 communication.", "S0559": " SUNBURST  : SUNBURST C2 data attempted to appear as benign XML related to .NET assemblies or as a faux JSON blob.", "S0230": " ZeroT  : ZeroT has retrieved stage 2 payloads as Bitmap images that use Least Significant Bit (LSB) steganography."}, "id": "T1001.002", "subtechniqueof": "T1001", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "15 March 2020", "lastmodified": "15 March 2020"}, {"techniquename": "Protocol Impersonation", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.", "description": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  Adversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity. ", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate some obfuscation activity at the network level."}, "procedureexamples": {"S0245": " BADCALL  : BADCALL uses a FakeTLS method during C2.", "S0239": " Bankshot  : Bankshot generates a false TLS handshake using a public certificate to disguise C2 network communications.", "S0154": " Cobalt Strike  : Cobalt Strike can mimic the HTTP protocol for C2 communication, while hiding the actual data in either an HTTP header, URI parameter, the transaction body, or appending it to the URI.", "S0076": " FakeM  : FakeM C2 traffic attempts to evade detection by resembling data generated by legitimate messenger applications, such as MSN and Yahoo! messengers. Additionally, some variants of FakeM use modified SSL code for communications back to C2 servers, making SSL decryption ineffective.", "S0181": " FALLCHILL  : FALLCHILL uses fake Transport Layer Security (TLS) to communicate with its C2 server.", "S0246": " HARDRAIN  : HARDRAIN uses FakeTLS to communicate with its C2 server.", "G0126": " Higaisa  : Higaisa used a FakeTLS session for C2 communications.", "S0260": " InvisiMole  : InvisiMole can mimic HTTP protocol with custom HTTP \"verbs\" HIDE, ZVVP, and NOP.", "S0387": " KeyBoy  : KeyBoy uses custom SSL libraries to impersonate SSL in C2 traffic.", "G0032": " Lazarus Group  : Lazarus Group malware also uses a unique form of communication encryption known as FakeTLS that mimics TLS but uses a different encryption method, potentially evading SSL traffic inspection/decryption.", "S0439": " Okrum  : Okrum mimics HTTP protocol for C2 communication, while hiding the actual messages in the Cookie and Set-Cookie headers of the HTTP requests.", "S0559": " SUNBURST  : SUNBURST masqueraded its network traffic as the Orion Improvement Program (OIP) protocol.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE has used FakeTLS for session authentication."}, "id": "T1001.003", "subtechniqueof": "T1001", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "15 March 2020", "lastmodified": "15 March 2020"}, {"techniquename": "Data Obfuscation", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. ", "description": "Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols. ", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate some obfuscation activity at the network level."}, "procedureexamples": {"G0001": " Axiom  : The Axiom group has used other forms of obfuscation, include commingling legitimate traffic with communications traffic so that network streams appear legitimate.", "S0381": " FlawedAmmyy  : FlawedAmmyy may obfuscate portions of the initial C2 handshake.", "G0116": " Operation Wocao  : Operation Wocao has encrypted IP addresses used for \"Agent\" proxy hops with RC4.", "S0495": " RDAT  : RDAT has used encoded data within subdomains as AES ciphertext to communicate from the host to the C2.", "S0610": " SideTwist  : SideTwist can embed C2 responses in the source code of a fake Flickr webpage.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has hashed a string containing system information prior to exfiltration via POST requests."}, "id": "T1001", "subtechniques": ["T1001.001", "T1001.002", "T1001.003"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "version": "1.1", "created": "31 May 2017", "lastmodified": "15 March 2020"}, {"techniquename": "Domain Generation Algorithms", "detection": "Detecting dynamically generated domains can be challenging due to the number of different DGA algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There is a myriad of approaches for detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more. CDN domains may trigger these detections due to the format of their domain names. In addition to detecting a DGA domain based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.Machine learning approaches to detecting DGA domains have been developed and have seen success in applications. One approach is to use N-Gram methods to determine a randomness score for strings used in the domain name. If the randomness score is high, and the domains are not whitelisted (CDN, etc), then it may be determined if a domain is related to a legitimate host or DGA. Another approach is to use deep learning to classify domains as DGA-generated.", "description": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.DGAs can take the form of apparently random or \"gibberish\" strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.Adversaries may use DGAs for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Malware researchers can reverse engineer malware variants that use DGAs and determine future domains that the malware will attempt to contact, but this is a time and resource intensive effort. Malware is also increasingly incorporating seed values that can be unique for each instance, which would then need to be determined to extract future generated domains. In some cases, the seed that a particular sample uses can be extracted from DNS traffic. Even so, there can be thousands of possible domains generated per day; this makes it impractical for defenders to preemptively register all possible C2 domains due to the cost.", "M1021": " Restrict Web-Based Content  : In some cases a local DNS sinkhole may be used to help prevent DGA-based command and control at a reduced cost."}, "procedureexamples": {"G0096": " APT41  : APT41 has used DGAs to change their C2 servers monthly.", "S0456": " Aria-body  : Aria-body has the ability to use a DGA for C2 communications.", "S0373": " Astaroth  : Astaroth has used a DGA in C2 communications.", "S0534": " Bazar  : Bazar can implement DGA using the current date as a seed variable.", "S0360": " BONDUPDATER  : BONDUPDATER uses a DGA to communicate with command and control servers.", "S0222": " CCBkdr  : CCBkdr can use a DGA for Fallback Channels if communications with the primary command and control server are lost.", "S0023": " CHOPSTICK  : CHOPSTICK can use a DGA for Fallback Channels, domains are generated by concatenating words from lists.", "S0608": " Conficker  : Conficker has used a DGA that seeds with the current UTC victim system date to generate domains.", "S0600": " Doki  : Doki has used the DynDNS service and a DGA based on the Dogecoin blockchain to generate C2 domains.", "S0377": " Ebury  : Ebury has used a DGA to generate a domain name for C2.", "S0531": " Grandoreiro  : Grandoreiro can use a DGA for hiding C2 addresses, including use of an algorithm with a user-specific key that changes daily.", "S0051": " MiniDuke  : MiniDuke can use DGA to generate new Twitter URLs for C2.", "S0508": " Ngrok  : Ngrok can provide DGA for C2 servers through the use of random URL strings that change every 12 hours.", "S0150": " POSHSPY  : POSHSPY uses a DGA to derive command and control URLs from a word list.", "S0650": " QakBot  : QakBot can use domain generation algorithms in C2 communication.", "S0596": " ShadowPad  : ShadowPad uses a DGA that is based on the day of the month for C2 servers.", "S0615": " SombRAT  : SombRAT can use a custom DGA to generate a subdomain for C2.", "G0127": " TA551  : TA551 has used a DGA to generate URLs from executed macros.", "S0386": " Ursnif  : Ursnif has used a DGA to generate domain names for C2."}, "id": "T1568.002", "subtechniqueof": "T1568", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Barry Shteiman, Exabeam; Ryan Benson, Exabeam; Sylvain Gil, Exabeam"], "version": "1.0", "created": "10 March 2020", "lastmodified": "10 November 2020"}, {"techniquename": "Data Encoding", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. ", "description": "Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.  Some data encoding systems may also result in data compression, such as gzip.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. "}, "procedureexamples": {"S0128": " BADNEWS  : After encrypting C2 data, BADNEWS converts it into a hexadecimal representation and then encodes it into base64.", "S0132": " H1N1  : H1N1 obfuscates C2 traffic with an altered version of base64.", "S0362": " Linux Rabbit  : Linux Rabbit sends the payload from the C2 server as an encoded URL parameter. ", "S0386": " Ursnif  : Ursnif has used encoded data in HTTP URLs for C2.  "}, "id": "T1132", "subtechniques": ["T1132.001", "T1132.002"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "requiresnetwork": ["Yes"], "contributors": ["Itzik Kotler, SafeBreach"], "version": "1.1", "created": "31 May 2017", "lastmodified": "14 March 2020"}, {"techniquename": "DNS", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.Monitor for DNS traffic to/from known-bad or suspicious domains.", "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. The DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ", "mitigations": {"M1037": " Filter Network Traffic  : Consider filtering DNS requests to unknown, untrusted, or known bad domains and resources. Resolving DNS requests with on-premise/proxy servers may also disrupt adversary attempts to conceal data within DNS packets. ", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. "}, "procedureexamples": {"S0504": " Anchor  : Variants of Anchor can use DNS tunneling to communicate with C2.", "G0026": " APT18  : APT18 uses DNS for C2 communications.", "G0087": " APT39  : APT39 has used remote access tools that leverage DNS in communications with C2.", "G0096": " APT41  : APT41 used DNS for C2 communications. ", "S0360": " BONDUPDATER  : BONDUPDATER can use DNS and TXT records within its DNS tunneling protocol for command and control.", "G0114": " Chimera  : Chimera has used Cobalt Strike to encapsulate C2 in DNS traffic.", "G0080": " Cobalt Group  : Cobalt Group has used DNS tunneling for C2.", "S0154": " Cobalt Strike  : Cobalt Strike can use a custom command and control protocol that can be encapsulated in DNS. All protocols use their standard assigned ports. ", "S0338": " Cobian RAT  : Cobian RAT uses DNS for C2.", "S0354": " Denis  : Denis has used DNS tunneling for C2 communications.", "S0377": " Ebury  : Ebury has used DNS requests over UDP port 53 for C2.  ", "G0046": " FIN7  : FIN7 has performed C2 using DNS via A, OPT, and TXT records.", "S0477": " Goopy  : Goopy has the ability to communicate with its C2 over DNS.   ", "S0170": " Helminth  : Helminth can use DNS for C2.", "S0070": " HTTPBrowser  : HTTPBrowser has used DNS for command and control.", "S0260": " InvisiMole  : InvisiMole has used a custom implementation of DNS tunneling to embed C2 communications in DNS requests and replies.", "G0004": " Ke3chang  : Ke3chang malware RoyalDNS has used DNS for C2.", "S0167": " Matryoshka  : Matryoshka uses DNS for C2.", "S0228": " NanHaiShu  : NanHaiShu uses DNS for the C2 communications.", "G0049": " OilRig  : OilRig has used DNS for C2 including the publicly available  tunneling service.", "S0124": " Pisloader  : Pisloader uses DNS as its C2 protocol.", "S0013": " PlugX  : PlugX can be configured to use DNS for command and control.", "S0145": " POWERSOURCE  : POWERSOURCE uses DNS TXT records for C2.", "S0184": " POWRUNER  : POWRUNER can use DNS for C2 communications.", "S0269": " QUADAGENT  : QUADAGENT uses DNS for C2 communications.", "S0495": " RDAT  : RDAT has used DNS to communicate with the C2.   ", "S0125": " Remsec  : Remsec is capable of using DNS for C2.", "S0596": " ShadowPad  : ShadowPad has used DNS tunneling for C2 communications.", "S0633": " Sliver  : Sliver can support C2 communications over DNS.", "S0615": " SombRAT  : SombRAT can communicate over DNS with the C2 server.", "S0157": " SOUNDBITE  : SOUNDBITE communicates via DNS for C2.", "S0559": " SUNBURST  : SUNBURST used DNS for C2 traffic designed to mimic normal SolarWinds API communications.", "S0146": " TEXTMATE  : TEXTMATE uses DNS TXT records for C2.", "G0081": " Tropic Trooper  : Tropic Trooper's backdoor has communicated to the C2 over the DNS protocol.  ", "S0514": " WellMess  : WellMess has the ability to use DNS tunneling for C2 communications."}, "id": "T1071.004", "subtechniqueof": "T1071", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "contributors": ["Jan Petrov, Citi"], "version": "1.0", "created": "15 March 2020", "lastmodified": "21 October 2020"}, {"techniquename": "Communication Through Removable Media", "detection": "Monitor file access on removable media. Detect processes that execute when removable media is mounted.", "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable Autoruns if it is unnecessary.", "M1028": " Operating System Configuration  : Disallow or restrict removable media at an organizational policy level if they are not required for business operations."}, "procedureexamples": {"G0007": " APT28  : APT28 uses a tool that captures information from air-gapped computers via an infected USB and transfers it to network-connected computer when the USB is inserted.", "S0023": " CHOPSTICK  : Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines, using files written to USB sticks to transfer data and command traffic.", "S0136": " USBStealer  : USBStealer drops commands for a second victim onto a removable media drive inserted into the first victim, and commands are executed when the drive is inserted into the second victim."}, "id": "T1092", "subtechniques": ["No sub-techniques"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "31 May 2017", "lastmodified": "14 July 2020"}, {"techniquename": "Non-Standard Encoding", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.", "description": "Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.  ", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."}, "procedureexamples": {"S0031": " BACKSPACE  : Newer variants of BACKSPACE will encode C2 communications with a custom system.", "S0239": " Bankshot  : Bankshot encodes commands from the control server using a range of characters and gzip.", "S0260": " InvisiMole  : InvisiMole can use a modified base32 encoding to encode data within the subdomain of C2 requests.", "S0346": " OceanSalt  : OceanSalt can encode data with a NOT operation before sending the data to the control server.", "S0495": " RDAT  : RDAT can communicate with the C2 via subdomains that utilize base64 with character substitutions.   ", "S0596": " ShadowPad  : ShadowPad has encoded data as readable Latin characters."}, "id": "T1132.002", "subtechniqueof": "T1132", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "14 March 2020", "lastmodified": "14 March 2020"}, {"techniquename": "File Transfer Protocols", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.", "description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. "}, "procedureexamples": {"G0096": " APT41  : APT41 used exploit payloads that initiate download via FTP.", "S0438": " Attor  : Attor has used FTP protocol for C2 communication.", "S0465": " CARROTBALL  : CARROTBALL has the ability to use FTP in C2 communications.", "G0072": " Honeybee  : Honeybee uses FTP for command and control.", "S0201": " JPIN  : JPIN can communicate over FTP.", "S0265": " Kazuar  : Kazuar uses FTP and FTPS to communicate with the C2 server.", "G0094": " Kimsuky  : Kimsuky has used FTP to download additional malware to the target machine.", "S0409": " Machete  : Machete uses FTP for Command & Control.", "S0353": " NOKKI  : NOKKI has used FTP for C2 communications.", "S0428": " PoetRAT  : PoetRAT has used FTP for C2 communications.", "S0596": " ShadowPad  : ShadowPad has used FTP for C2 communications.", "G0083": " SilverTerrier  : SilverTerrier uses FTP for C2 communications. ", "S0464": " SYSCON  : SYSCON has the ability to use FTP in C2 communications.", "S0161": " XAgentOSX  : XAgentOSX contains the ftpUpload function to use the FTPManager:uploadFile method to upload files from the target system.", "S0412": " ZxShell  : ZxShell has used FTP for C2 connections. "}, "id": "T1071.002", "subtechniqueof": "T1071", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "15 March 2020", "lastmodified": "21 August 2020"}, {"techniquename": "Mail Protocols", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.", "description": "Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. "}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has used SMTP for C2 communications.", "G0007": " APT28  : APT28 has used IMAP, POP3, and SMTP for a communication channel in various implants, including using self-registered Google Mail accounts and later compromised email servers of its victims.", "G0050": " APT32  : APT32 has used email for C2 via an Office macro.", "S0337": " BadPatch  : BadPatch uses SMTP for C2.", "S0351": " Cannon  : Cannon uses SMTP/S and POP3/S for C2 communications by sending and receiving emails.", "S0023": " CHOPSTICK  : Various implementations of CHOPSTICK communicate with C2 over SMTP and POP3.", "S0126": " ComRAT  : ComRAT can use email attachments for command and control.", "S0137": " CORESHELL  : CORESHELL can communicate over SMTP and POP3 for C2.", "S0477": " Goopy  : Goopy has the ability to use a Microsoft Outlook backdoor macro to communicate with its C2.  ", "S0201": " JPIN  : JPIN can send email over SMTP.", "G0094": " Kimsuky  : Kimsuky has used e-mail to send exfiltrated data to C2 servers.", "S0395": " LightNeuron  : LightNeuron uses SMTP for C2.", "S0247": " NavRAT  : NavRAT uses the email platform, Naver, for C2 communications, leveraging SMTP.", "S0138": " OLDBAIT  : OLDBAIT can use SMTP for C2.", "S0495": " RDAT  : RDAT can use email attachments for C2 communications.", "S0125": " Remsec  : Remsec is capable of using SMTP for C2.", "G0083": " SilverTerrier  : SilverTerrier uses SMTP for C2 communications.", "G0010": " Turla  : Turla has used multiple backdoors which communicate with a C2 server via email attachments.", "S0251": " Zebrocy  : Zebrocy uses SMTP and POP3 for C2."}, "id": "T1071.003", "subtechniqueof": "T1071", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "15 March 2020", "lastmodified": "21 October 2020"}, {"techniquename": "Video Capture", "detection": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the video camera, recording devices, or recording software, and a process periodically writing files to disk that contain video or camera image data.", "description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. ", "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla can access the victim\u2019s webcam and record video.", "S0234": " Bandook  : Bandook has modules that are capable of capturing video from a victim's webcam.", "S0338": " Cobian RAT  : Cobian RAT has a feature to access the webcam on the victim\u2019s machine.", "S0591": " ConnectWise  : ConnectWise can record video on remote hosts.", "S0115": " Crimson  : Crimson can capture webcam video on targeted systems.", "S0334": " DarkComet  : DarkComet can access the victim\u2019s webcam to take pictures.", "S0021": " Derusbi  : Derusbi is capable of capturing video.", "S0363": " Empire  : Empire can capture webcam data on Windows and macOS systems.", "S0152": " EvilGrab  : EvilGrab has the capability to capture video from a victim machine.", "G0046": " FIN7  : FIN7 created a custom video recording capability that could be used to monitor operations in the victim's environment.", "S0434": " Imminent Monitor  : Imminent Monitor has a remote webcam monitoring capability.", "S0260": " InvisiMole  : InvisiMole can remotely activate the victim\u2019s webcam to capture content.", "S0283": " jRAT  : jRAT has the capability to capture video from a webcam.", "S0265": " Kazuar  : Kazuar captures images from the webcam.", "S0409": " Machete  : Machete takes photos from the computer\u2019s web camera.", "S0336": " NanoCore  : NanoCore can access the victim's webcam and capture data.", "S0385": " njRAT  : njRAT can access the victim's webcam.", "S0644": " ObliqueRAT  : ObliqueRAT can capture images from webcams on compromised hosts.", "S0428": " PoetRAT  : PoetRAT has used a Python tool named Bewmac to record the webcam on compromised hosts.", "S0192": " Pupy  : Pupy can access a connected webcam and capture pictures.", "S0262": " QuasarRAT  : QuasarRAT can perform webcam viewing.", "S0332": " Remcos  : Remcos can access a system\u2019s webcam and take pictures.", "S0379": " Revenge RAT  : Revenge RAT has the ability to access the webcam.", "S0461": " SDBbot  : SDBbot has the ability to record video on a compromised host.", "G0091": " Silence  : Silence has been observed making videos of victims to observe bank employees day to day activities.", "S0098": " T9000  : T9000 uses the Skype API to record audio and video calls. It writes encrypted data to .", "S0467": " TajMahal  : TajMahal has the ability to capture webcam video.", "S0412": " ZxShell  : ZxShell has a command to perform video device spying. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1125", "subtechniques": ["No sub-techniques"], "tactics": ["Collection"], "platforms": ["Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-634"], "contributors": ["Praetorian"], "version": "1.0", "created": "31 May 2017", "lastmodified": "14 July 2020"}, {"techniquename": "Standard Encoding", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.", "description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.  Some data encoding systems may also result in data compression, such as gzip.", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."}, "procedureexamples": {"S0045": " ADVSTORESHELL  : C2 traffic from ADVSTORESHELL is encrypted, then encoded with Base64 encoding.", "G0073": " APT19  : An APT19 HTTP malware variant used Base64 to encode communications to the C2 server.", "G0064": " APT33  : APT33 has used base64 to encode command and control traffic.", "S0373": " Astaroth  : Astaroth encodes data using Base64 before sending it to the C2 server. ", "S0129": " AutoIt backdoor  : AutoIt backdoor has sent a C2 response that was base64-encoded.", "S0414": " BabyShark  : BabyShark has encoded data using certutil before exfiltration.", "S0093": " Backdoor.Oldrea  : Some Backdoor.Oldrea samples use standard Base64 + bzip2, and some use standard Base64 + reverse XOR + RSA-2048 to decrypt data received from C2 servers.", "S0128": " BADNEWS  : BADNEWS encodes C2 traffic with base64.", "S0268": " Bisonal  : Bisonal has encoded binary data with Base64.", "S0520": " BLINDINGCAN  : BLINDINGCAN has encoded its C2 traffic with Base64.", "G0060": " BRONZE BUTLER  : Several BRONZE BUTLER tools encode data with base64 when posting it to a C2 server.", "S0014": " BS2005  : BS2005 uses Base64 encoding for communication in the message body of an HTTP request.", "S0030": " Carbanak  : Carbanak encodes the message body of HTTP traffic with Base64.", "S0631": " Chaes  : Chaes has used Base64 to encode C2 communications. ", "S0144": " ChChes  : ChChes can encode C2 data with a custom technique that utilizes Base64. ", "S0154": " Cobalt Strike  : Cobalt Strike can use Base64, URL-safe Base64, or NetBIOS encoding in its C2 traffic.", "S0338": " Cobian RAT  : Cobian RAT obfuscates communications with the C2 server using Base64 encoding.", "S0137": " CORESHELL  : CORESHELL C2 messages are Base64-encoded.", "S0187": " Daserf  : Daserf uses custom base64 encoding to obfuscate HTTP traffic.", "S0354": " Denis  : Denis encodes the data sent to the server in Base64.", "S0200": " Dipsind  : Dipsind encodes C2 traffic with base64.", "S0472": " down_new  : down_new has the ability to base64 encode C2 communications.", "S0377": " Ebury  : Ebury has encoded C2 traffic in hexadecimal format.   ", "S0081": " Elise  : Elise exfiltrates data using cookie values that are Base64-encoded.", "S0171": " Felismus  : Some Felismus samples use a custom method for C2 traffic that utilizes Base64.", "S0410": " Fysbis  : Fysbis can use Base64 to encode its C2 traffic.", "S0032": " gh0st RAT  : gh0st RAT has used Zlib to compress C2 communications data before encrypting it.", "S0632": " GrimAgent  : GrimAgent can base64 encode C2 replies.", "G0125": " HAFNIUM  : HAFNIUM has used ASCII encoding for C2 traffic.", "S0170": " Helminth  : For C2 over HTTP, Helminth encodes data with base64 and sends it via the \"Cookie\" field of HTTP requests. For C2 over DNS, Helminth converts ASCII characters into their hexadecimal values and sends the data in cleartext.", "S0376": " HOPLIGHT  : HOPLIGHT has utilized Zlib compression to obfuscate the communications payload.     ", "S0015": " Ixeshe  : Ixeshe uses custom Base64 encoding schemes to obfuscate command and control traffic in the message body of HTTP requests.", "S0044": " JHUHUGIT  : A JHUHUGIT variant encodes C2 POST data base64.", "S0265": " Kazuar  : Kazuar encodes communications to the C2 server in Base64.", "S0487": " Kessel  : Kessel has exfiltrated data via hexadecimal-encoded subdomain fields of DNS queries.", "S0356": " KONNI  : KONNI has used a custom base64 key to encode stolen data before exfiltration.", "G0032": " Lazarus Group  : A Lazarus Group malware sample encodes data with base64.", "S0409": " Machete  : Machete has used base64 encoding.", "S0459": " MechaFlounder  : MechaFlounder has the ability to use base16 encoded strings in C2.", "S0084": " Mis-Type  : Mis-Type uses Base64 encoding for C2 traffic.", "S0083": " Misdat  : Misdat network traffic is Base64-encoded plaintext.", "S0284": " More_eggs  : More_eggs has used basE91 encoding, along with encryption, for C2 communication.", "G0069": " MuddyWater  : MuddyWater has used tools to encode C2 communications including Base64 encoding.", "S0385": " njRAT  : njRAT uses Base64 encoding for C2 traffic.", "S0340": " Octopus  : Octopus encodes C2 communications in Base64.", "S0439": " Okrum  : Okrum has used base64 to encode C2 communication.", "S0264": " OopsIE  : OopsIE encodes data in hexadecimal format over the C2 channel.", "G0040": " Patchwork  : Patchwork used Base64 to encode C2 traffic.", "S0124": " Pisloader  : Responses from the Pisloader C2 server are base32-encoded.", "S0441": " PowerShower  : PowerShower has the ability to encode C2 communications with base64 encoding.", "S0223": " POWERSTATS  : POWERSTATS encoded C2 traffic with base64.", "S0184": " POWRUNER  : POWRUNER can use base64 encoded C2 communications.", "S0113": " Prikormka  : Prikormka encodes C2 traffic with Base64.", "S0650": " QakBot  : QakBot can Base64 encode system information sent to C2.", "S0269": " QUADAGENT  : QUADAGENT encodes C2 communications with base64.", "S0458": " Ramsay  : Ramsay has used base64 to encode its C2 traffic.", "S0495": " RDAT  : RDAT can communicate with the C2 via base32-encoded subdomains. ", "S0379": " Revenge RAT  : Revenge RAT uses Base64 to encode information sent to the C2 server.", "S0270": " RogueRobin  : RogueRobin base64 encodes strings that are sent to the C2 over its DNS tunnel.", "S0085": " S-Type  : S-Type uses Base64 encoding for C2 traffic.", "G0034": " Sandworm Team  : Sandworm Team's BCS-server tool uses base64 encoding and HTML tags for the communication traffic between the C2 server.  ", "S0053": " SeaDuke  : SeaDuke C2 traffic is base64-encoded.", "S0610": " SideTwist  : SideTwist has used Base64 for encoded C2 traffic.", "S0633": " Sliver  : Sliver can use standard encoding techniques like gzip and hex to ASCII to encode the C2 communication payload.", "S0649": " SMOKEDHAM  : SMOKEDHAM has encoded its C2 traffic with Base64.", "S0543": " Spark  : Spark has encoded communications with the C2 server with base64. ", "S0374": " SpeakUp  : SpeakUp encodes C&C communication using Base64. ", "S0603": " Stuxnet  : Stuxnet transforms encrypted binary data into an ASCII string in order to use it as a URL parameter value.", "S0559": " SUNBURST  : SUNBURST used Base64 encoding in its C2 traffic.", "G0127": " TA551  : TA551 has used encoded ASCII text for initial C2 communications.", "S0266": " TrickBot  : TrickBot can Base64-encode C2 commands.", "G0081": " Tropic Trooper  : Tropic Trooper has used base64 encoding to hide command strings delivered from the C2.", "S0476": " Valak  : Valak has returned C2 data as encoded ASCII.", "S0514": " WellMess  : WellMess has used Base64 encoding to uniquely identify communication to and from the C2.", "S0653": " xCaon  : xCaon has used Base64 to encode its C2 traffic.", "S0251": " Zebrocy  : Zebrocy has used URL/Percent Encoding on data exfiltrated via HTTP POST requests."}, "id": "T1132.001", "subtechniqueof": "T1132", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "14 March 2020", "lastmodified": "14 March 2020"}, {"techniquename": "Email Forwarding Rule", "detection": "Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values.Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include  set to true,  and . The  parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the  header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.", "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u2019s organization to use as part of further exploits or operations. Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators. Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.Any user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.", "mitigations": {"M1047": " Audit  : Enterprise email solutions have monitoring mechanisms that may include the ability to audit auto-forwarding rules on a regular basis.In an Exchange environment, Administrators can use Get-InboxRule to discover and remove potentially malicious auto-forwarding rules.. In addition to this, a MAPI Editor can be utilized to examine the underlying database structure and discover any modifications/tampering of the properties of auto-forwarding rules.", "M1042": " Disable or Remove Feature or Program  : Consider disabling external email forwarding.", "M1041": " Encrypt Sensitive Information  : Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages."}, "procedureexamples": {"G0094": " Kimsuky  : Kimsuky has set auto-forward rules on victim's e-mail accounts.", "G0122": " Silent Librarian  : Silent Librarian has set up auto forwarding rules on compromised e-mail accounts."}, "id": "T1114.003", "subtechniqueof": "T1114", "tactics": ["Collection"], "platforms": ["Google Workspace, Linux, Office 365, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Microsoft Security; Swetha Prabakaran, Microsoft Threat Intelligence Center (MSTIC)"], "version": "1.2", "created": "19 February 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Application Layer Protocol", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."}, "procedureexamples": {"S0154": " Cobalt Strike  : Cobalt Strike can conduct peer-to-peer communication over Windows named pipes encapsulated in the SMB protocol. All protocols use their standard assigned ports.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used SMB for C2.", "S0038": " Duqu  : Duqu uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.", "S0601": " Hildegard  : Hildegard has used an IRC channel for C2 communications.", "S0532": " Lucifer  : Lucifer can use the Stratum protocol on port 10001 for communication between the cryptojacking bot and the mining server.", "G0059": " Magic Hound  : Magic Hound malware has used IRC for C2.", "S0034": " NETEAGLE  : Adversaries can also use NETEAGLE to establish an RDP connection with a controller over TCP/7519.", "S0019": " Regin  : The Regin malware platform supports many standard protocols, including SMB.", "G0106": " Rocke  : Rocke issued wget requests from infected systems to the C2.", "S0623": " Siloscape  : Siloscape connects to an IRC server for C2.", "G0139": " TeamTNT  : TeamTNT has used an IRC bot for C2 communications."}, "id": "T1071", "subtechniques": ["T1071.001", "T1071.002", "T1071.003", "T1071.004"], "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "requiresnetwork": ["Yes"], "version": "2.0", "created": "31 May 2017", "lastmodified": "21 October 2020"}, {"techniquename": "Web Protocols", "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.Monitor for web traffic to/from known-bad or suspicious domains. ", "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP and HTTPS that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ", "mitigations": {"M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. "}, "procedureexamples": {"S0066": " 3PARA RAT  : 3PARA RAT uses HTTP for command and control.", "S0065": " 4H RAT  : 4H RAT uses HTTP for command and control.", "S0469": " ABK  : ABK has the ability to use HTTP in communications with C2.", "S0045": " ADVSTORESHELL  : ADVSTORESHELL connects to port 80 of a C2 server using Wininet API. Data is exchanged via HTTP POSTs.", "S0331": " Agent Tesla  : Agent Tesla has used HTTP for C2 communications.", "S0504": " Anchor  : Anchor has used HTTP and HTTPS in C2 communications.", "S0584": " AppleJeus  : AppleJeus has sent data to its C2 server via  requests.", "S0622": " AppleSeed  : AppleSeed has the ability to communicate with C2 over HTTP.", "G0026": " APT18  : APT18 uses HTTP for C2 communications.", "G0073": " APT19  : APT19 used HTTP for C2 communications. APT19 also used an HTTP malware variant to communicate over HTTP for C2.", "G0007": " APT28  : Later implants used by APT28, such as CHOPSTICK, use a blend of HTTP, HTTPS, and other legitimate channels for C2, depending on module configuration.", "G0016": " APT29  : APT29 has used HTTP for C2 and data exfiltration.", "G0050": " APT32  : APT32 has used JavaScript that communicates over HTTP or HTTPS to attacker controlled domains to download additional frameworks. The group has also used downloaded encrypted payloads over HTTP.", "G0064": " APT33  : APT33 has used HTTP for command and control.", "G0067": " APT37  : APT37 uses HTTPS to conceal C2 communications.", "G0082": " APT38  : APT38 used a backdoor, QUICKRIDE, to communicate to the C2 server over HTTP and HTTPS.", "G0087": " APT39  : APT39 has used HTTP in communications with C2.", "G0096": " APT41  : APT41 used HTTP to download payloads for CVE-2019-19781 and CVE-2020-10189 exploits. ", "S0456": " Aria-body  : Aria-body has used HTTP in C2 communications.", "S0473": " Avenger  : Avenger has the ability to use HTTP in communication with C2.", "S0475": " BackConfig  : BackConfig has the ability to use HTTPS for C2 communiations.", "S0031": " BACKSPACE  : BACKSPACE uses HTTP as a transport to communicate with its command server.", "S0128": " BADNEWS  : BADNEWS establishes a backdoor over HTTP.", "S0337": " BadPatch  : BadPatch uses HTTP for C2.", "S0239": " Bankshot  : Bankshot uses HTTP for command and control communication.", "S0534": " Bazar  : Bazar can use HTTP and HTTPS over ports 80 and 443 in C2 communications.", "S0470": " BBK  : BBK has the ability to use HTTP in communications with C2.", "S0127": " BBSRAT  : BBSRAT uses GET and POST requests over HTTP or HTTPS for command and control to obtain commands and send ZLIB compressed data back to the C2 server.", "S0268": " Bisonal  : Bisonal uses HTTP for C2 communications.", "S0089": " BlackEnergy  : BlackEnergy communicates with its C2 server over HTTP.", "S0564": " BlackMould  : BlackMould can send commands to C2 in the body of HTTP POST requests.", "S0520": " BLINDINGCAN  : BLINDINGCAN has used HTTPS over port 443 for command and control.", "S0657": " BLUELIGHT  : BLUELIGHT can use HTTP/S for C2 using the Microsoft Graph API. ", "S0635": " BoomBox  : BoomBox has used HTTP POST requests for C2.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER malware has used HTTP for C2.", "S0043": " BUBBLEWRAP  : BUBBLEWRAP can communicate using HTTP or HTTPS.", "S0482": " Bundlore  : Bundlore uses HTTP requests for C2.", "S0030": " Carbanak  : The Carbanak malware communicates to its command server using HTTP with an encrypted payload.", "S0484": " Carberp  : Carberp has connected to C2 servers via HTTP.", "S0335": " Carbon  : Carbon can use HTTP in C2 communications.", "S0348": " Cardinal RAT  : Cardinal RAT is downloaded using HTTP over port 443.", "S0631": " Chaes  : Chaes has used HTTP for C2 communications.", "S0144": " ChChes  : ChChes communicates to its C2 server over HTTP and embeds data within the Cookie HTTP header.", "G0114": " Chimera  : Chimera has used HTTPS for C2 communications.", "S0020": " China Chopper  : China Chopper's server component executes code sent via HTTP POST commands.", "S0023": " CHOPSTICK  : Various implementations of CHOPSTICK communicate with C2 over HTTP.", "S0054": " CloudDuke  : One variant of CloudDuke uses HTTP and HTTPS for C2.", "G0080": " Cobalt Group  : Cobalt Group has used HTTPS for C2.", "S0154": " Cobalt Strike  : Cobalt Strike can use a custom command and control protocol that can be encapsulated in HTTP or HTTPS. All protocols use their standard assigned ports.", "S0244": " Comnie  : Comnie uses HTTP for C2 communication.", "S0126": " ComRAT  : ComRAT has used HTTP requests for command and control.", "S0137": " CORESHELL  : CORESHELL can communicate over HTTP for C2.", "S0050": " CosmicDuke  : CosmicDuke can use HTTP or HTTPS for command and control to hard-coded C2 servers.", "S0046": " CozyCar  : CozyCar's main method of communicating with its C2 servers is using HTTP or HTTPS.", "S0115": " Crimson  : Crimson can use a HTTP GET request to download its final payload.", "S0538": " Crutch  : Crutch has conducted C2 communications with a Dropbox account using the HTTP API.", "S0527": " CSPY Downloader  : CSPY Downloader can use GET requests to download additional payloads from C2.", "S0497": " Dacls  : Dacls can use HTTPS in C2 communications.", "G0070": " Dark Caracal  : Dark Caracal's version of Bandook communicates with their server over a TCP port using HTTP payloads Base64 encoded and suffixed with the string \"&&&\".", "S0334": " DarkComet  : DarkComet can use HTTP for C2 communications.", "S0187": " Daserf  : Daserf uses HTTP for C2.", "S0243": " DealersChoice  : DealersChoice uses HTTP for communication with the C2 server.", "S0616": " DEATHRANSOM  : DEATHRANSOM can use HTTPS to download files.", "S0200": " Dipsind  : Dipsind uses HTTP for C2.", "S0600": " Doki  : Doki has communicated with C2 over HTTPS.", "S0472": " down_new  : down_new has the ability to use HTTP in C2 communications.", "S0186": " DownPaper  : DownPaper communicates to its C2 server over HTTP.", "S0384": " Dridex  : Dridex has used POST requests and HTTPS for C2 communications.", "S0502": " Drovorub  : Drovorub can use the WebSocket protocol and has initiated communication with C2 servers with an HTTP Upgrade request.", "S0062": " DustySky  : DustySky has used both HTTP and HTTPS for C2.", "S0024": " Dyre  : Dyre uses HTTPS for C2 communications.    ", "S0554": " Egregor  : Egregor has communicated with its C2 servers via HTTPS protocol.", "S0081": " Elise  : Elise communicates over HTTP or HTTPS for C2.", "S0064": " ELMER  : ELMER uses HTTP for command and control.", "S0082": " Emissary  : Emissary uses HTTP or HTTPS for C2.", "S0363": " Empire  : Empire can conduct command and control over protocols like HTTP and HTTPS.", "S0091": " Epic  : Epic uses HTTP and HTTPS for C2 communications.", "S0396": " EvilBunny  : EvilBunny has executed C2 commands directly via HTTP.", "S0401": " Exaramel for Linux  : Exaramel for Linux uses HTTPS for C2 communications.", "S0569": " Explosive  : Explosive has used HTTP for communication.", "S0512": " FatDuke  : FatDuke can be controlled via a custom C2 protocol over HTTP.", "S0171": " Felismus  : Felismus uses HTTP for C2.", "S0267": " FELIXROOT  : FELIXROOT uses HTTP and HTTPS to communicate with the C2 server.", "G0085": " FIN4  : FIN4 has used HTTP POST requests to transmit data.", "G0061": " FIN8  : FIN8 has used HTTPS for command and control.", "S0355": " Final1stspy  : Final1stspy uses HTTP for C2.", "S0381": " FlawedAmmyy  : FlawedAmmyy has used HTTP for C2.", "G0047": " Gamaredon Group  : A Gamaredon Group file stealer can communicate over HTTP for C2.", "S0168": " Gazer  : Gazer communicates with its C2 servers over HTTP.", "S0049": " GeminiDuke  : GeminiDuke uses HTTP and HTTPS for command and control.", "S0460": " Get2  : Get2 has the ability to use HTTP to send information collected from an infected host to C2.", "S0249": " Gold Dragon  : Gold Dragon uses HTTP for communication to the control servers.", "S0493": " GoldenSpy  : GoldenSpy has used the Ryeol HTTP Client to facilitate HTTP internet communication.", "S0597": " GoldFinder  : GoldFinder has used HTTP for C2.", "S0588": " GoldMax  : GoldMax has used HTTPS and HTTP GET requests with custom HTTP cookies for C2.", "S0477": " Goopy  : Goopy has the ability to communicate with its C2 over HTTP.  ", "S0531": " Grandoreiro  : Grandoreiro has the ability to use HTTP in C2 communications.", "S0237": " GravityRAT  : GravityRAT uses HTTP for C2.", "S0342": " GreyEnergy  : GreyEnergy uses HTTP and HTTPS for C2 communications.", "S0632": " GrimAgent  : GrimAgent has the ability to use HTTP for C2 communications.", "S0561": " GuLoader  : GuLoader can use HTTP to retrieve additional binaries.", "G0125": " HAFNIUM  : HAFNIUM has used open-source C2 frameworks, including Covenant.", "S0037": " HAMMERTOSS  : The \"Uploader\" variant of HAMMERTOSS visits a hard-coded server over HTTP/S to download the images HAMMERTOSS uses to receive commands.", "S0391": " HAWKBALL  : HAWKBALL has used HTTP to communicate with a single hard-coded C2 server.", "S0170": " Helminth  : Helminth can use HTTP for C2.", "S0087": " Hi-Zor  : Hi-Zor communicates with its C2 server over HTTPS.", "G0126": " Higaisa  : Higaisa used HTTP and HTTPS to send data back to its C2 server.", "S0009": " Hikit  : Hikit has used HTTP for C2.", "S0070": " HTTPBrowser  : HTTPBrowser has used HTTP and HTTPS for command and control.", "S0068": " httpclient  : httpclient uses HTTP for command and control.", "S0398": " HyperBro  : HyperBro has used HTTPS for C2 communications.", "S0483": " IcedID  : IcedID has used HTTPS in communications with C2.", "G0100": " Inception  : Inception has used HTTP, HTTPS, and WebDav in network communications.", "S0604": " Industroyer  : Industroyer\u2019s main backdoor connected to a remote C2 server using HTTPS.", "S0260": " InvisiMole  : InvisiMole uses HTTP for C2 communications.", "S0015": " Ixeshe  : Ixeshe uses HTTP for command and control.", "S0044": " JHUHUGIT  : JHUHUGIT variants have communicated with C2 servers over HTTP and HTTPS.", "S0265": " Kazuar  : Kazuar uses HTTP and HTTPS to communicate with the C2 server. Kazuar can also act as a webserver and listen for inbound HTTP requests through an exposed API.", "G0004": " Ke3chang  : Ke3chang malware RoyalCli and BS2005 have communicated over HTTP with the C2 server through Internet Explorer (IE) by using the COM interface IWebBrowser2.", "S0276": " Keydnap  : Keydnap uses HTTPS for command and control.", "S0526": " KGH_SPY  : KGH_SPY can send data to C2 with HTTP POST requests.", "S0599": " Kinsing  : Kinsing has communicated with C2 over HTTP.", "S0162": " Komplex  : The Komplex C2 channel uses HTTP POST requests.", "S0356": " KONNI  : KONNI has used HTTP for C2.", "G0032": " Lazarus Group  : Lazarus Group malware has conducted C2 over HTTP and HTTPS.", "S0513": " LiteDuke  : LiteDuke can use HTTP GET requests in C2 communications.", "S0447": " Lokibot  : Lokibot has used HTTP for C2 communications. ", "S0582": " LookBack  : LookBack\u2019s C2 proxy tool sends data to a C2 server over HTTP.", "S0042": " LOWBALL  : LOWBALL command and control occurs via HTTPS over port 443.", "S0409": " Machete  : Machete uses HTTP for Command & Control.", "S0282": " MacSpy  : MacSpy uses HTTP for command and control.", "G0059": " Magic Hound  : Magic Hound malware has used HTTP for C2.", "S0652": " MarkiRAT  : MarkiRAT can initiate communication over HTTP/HTTPS for its C2 server.", "S0449": " Maze  : Maze has communicated to hard-coded IP addresses via HTTP.", "S0500": " MCMD  : MCMD can use HTTPS in communication with C2 web servers.", "S0459": " MechaFlounder  : MechaFlounder has the ability to use HTTP in communication with C2.", "S0455": " Metamorfo  : Metamorfo has used HTTP for C2. ", "S0339": " Micropsia  : Micropsia uses HTTP and HTTPS for C2 network communications.", "S0051": " MiniDuke  : MiniDuke uses HTTP and HTTPS for command and control.", "S0084": " Mis-Type  : Mis-Type network traffic can communicate over HTTP.", "S0284": " More_eggs  : More_eggs uses HTTPS for C2.", "G0069": " MuddyWater  : MuddyWater has used HTTP for C2 communications.", "G0129": " Mustang Panda  : Mustang Panda has communicated with its C2 via HTTP POST requests.", "S0034": " NETEAGLE  : NETEAGLE will attempt to detect if the infected host is configured to a proxy. If so, NETEAGLE will send beacons via an HTTP POST request. NETEAGLE will also use HTTP to download resources that contain an IP address and Port Number pair to connect to for further C2.", "S0198": " NETWIRE  : NETWIRE has the ability to communicate over HTTP.", "G0014": " Night Dragon  : Night Dragon has used HTTP for C2.", "S0385": " njRAT  : njRAT has used HTTP for C2 communications.", "S0353": " NOKKI  : NOKKI has used HTTP for C2 communications.", "S0340": " Octopus  : Octopus has used HTTP GET and POST requests for C2 communications.", "G0049": " OilRig  : OilRig has used HTTP for C2.", "S0439": " Okrum  : Okrum uses HTTP for communication with its C2.", "S0138": " OLDBAIT  : OLDBAIT can use HTTP for C2.", "S0052": " OnionDuke  : OnionDuke uses HTTP and HTTPS for C2.", "S0264": " OopsIE  : OopsIE uses HTTP for C2 communications.", "G0071": " Orangeworm  : Orangeworm has used HTTP for C2.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D can use HTTP POST and GET requests to send and receive C2 information.", "S0594": " Out1  : Out1 can use HTTP and HTTPS in communications with remote hosts.", "S0072": " OwaAuth  : OwaAuth uses incoming HTTP requests with a username keyword and commands and handles them as instructions to perform actions.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell can issue commands via HTTP POST.", "S0643": " Peppy  : Peppy can use HTTP to communicate with C2.", "S0048": " PinchDuke  : PinchDuke transfers files from the compromised host via HTTP or HTTPS to a C2 server.", "S0435": " PLEAD  : PLEAD has used HTTP for communications with command and control (C2) servers.", "S0013": " PlugX  : PlugX can be configured to use HTTP for command and control.", "S0067": " pngdowner  : pngdowner uses HTTP for command and control.", "S0428": " PoetRAT  : PoetRAT has used HTTP and HTTPs for C2 communications.", "S0518": " PolyglotDuke  : PolyglotDuke has has used HTTP GET requests in C2 communications.", "S0453": " Pony  : Pony has sent collected information to the C2 via HTTP POST request. ", "S0378": " PoshC2  : PoshC2 can use protocols like HTTP/HTTPS for command and control traffic.", "S0441": " PowerShower  : PowerShower has sent HTTP GET and POST requests to C2 servers to send information and receive instructions.", "S0371": " POWERTON  : POWERTON has used HTTP/HTTPS for C2 traffic.", "S0184": " POWRUNER  : POWRUNER can use HTTP for C2 communications.", "S0238": " Proxysvc  : Proxysvc uses HTTP over SSL to communicate commands with the control server.", "S0078": " Psylo  : Psylo uses HTTPS for C2.", "S0147": " Pteranodon  : Pteranodon can use HTTP for C2.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY enables remote interaction and can obtain additional code over HTTPS GET and POST requests.", "S0192": " Pupy  : Pupy can communicate over HTTP for C2.", "S0650": " QakBot  : QakBot has the ability to use HTTP and HTTPS in communication with C2 servers.", "S0269": " QUADAGENT  : QUADAGENT uses HTTPS and HTTP for C2 communications.", "S0629": " RainyDay  : RainyDay can use HTTP in C2 communications.", "S0458": " Ramsay  : Ramsay has used HTTP for C2.", "G0075": " Rancor  : Rancor has used HTTP for C2.", "S0241": " RATANKBA  : RATANKBA uses HTTP/HTTPS for command and control communication.", "S0495": " RDAT  : RDAT can use HTTP communications for C2, as well as using the WinHTTP library to make requests to the Exchange Web Services API.", "S0172": " Reaver  : Some Reaver variants use HTTP for C2.", "S0153": " RedLeaves  : RedLeaves can communicate to its C2 over HTTP and HTTPS if directed.", "S0019": " Regin  : The Regin malware platform supports many standard protocols, including HTTP and HTTPS.", "S0375": " Remexi  : Remexi uses BITSAdmin to communicate with the C2 server over HTTP.", "S0125": " Remsec  : Remsec is capable of using HTTP and HTTPS for C2.", "S0496": " REvil  : REvil has used HTTP and HTTPS in communication with C2.", "S0258": " RGDoor  : RGDoor uses HTTP for C2 communications.", "S0003": " RIPTIDE  : APT12 has used RIPTIDE, a RAT that uses HTTP to communicate.", "S0448": " Rising Sun  : Rising Sun has used HTTP for command and control.", "G0106": " Rocke  : Rocke has executed wget and curl commands to Pastebin over the HTTPS protocol.", "S0240": " ROKRAT  : ROKRAT use HTTPS for all command and control communication methods.", "S0148": " RTM  : RTM has initiated connections to external domains using HTTPS.    ", "S0085": " S-Type  : S-Type uses HTTP for C2.", "S0074": " Sakula  : Sakula uses HTTP for C2.", "G0034": " Sandworm Team  : Sandworm Team's BCS-server tool connects to the designated C2 server via HTTP.   ", "S0053": " SeaDuke  : SeaDuke uses HTTP and HTTPS for C2.", "S0345": " Seasalt  : Seasalt uses HTTP for C2 communications.", "S0382": " ServHelper  : ServHelper uses HTTP for C2.", "S0596": " ShadowPad  : ShadowPad communicates over HTTP to retrieve a string that is decoded into a C2 server URL.", "S0140": " Shamoon  : Shamoon has used HTTP for C2.", "S0444": " ShimRat  : ShimRat communicated over HTTP and HTTPS with C2 servers.", "S0445": " ShimRatReporter  : ShimRatReporter communicated over HTTP with preconfigured C2 servers.", "S0589": " Sibot  : Sibot communicated with its C2 server via HTTP GET requests.", "S0610": " SideTwist  : SideTwist has used HTTP GET and POST requests over port 443 for C2.", "G0121": " Sidewinder  : Sidewinder has used HTTP in C2 communications.", "G0083": " SilverTerrier  : SilverTerrier uses HTTP for C2 communications.    ", "S0633": " Sliver  : Sliver has the ability to support C2 communications over HTTP/S.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has used HTTP and HTTPS for C2 communications.", "S0226": " Smoke Loader  : Smoke Loader uses HTTP for C2.", "S0649": " SMOKEDHAM  : SMOKEDHAM has communicated with its C2 servers via HTTPS and HTTP POST requests.", "S0159": " SNUGRIDE  : SNUGRIDE communicates with its C2 server over HTTP.", "S0516": " SoreFang  : SoreFang can use HTTP in C2 communications.", "S0543": " Spark  : Spark has used HTTP POST requests to communicate with its C2 server to receive commands. ", "S0374": " SpeakUp  : SpeakUp uses POST and GET requests over HTTP to communicate with its main C&C server. ", "G0038": " Stealth Falcon  : Stealth Falcon malware communicates with its C2 server via HTTPS.", "S0491": " StrongPity  : StrongPity can use HTTP and HTTPS in C2 communications.", "S0603": " Stuxnet  : Stuxnet uses HTTP to communicate with a command and control server. ", "S0559": " SUNBURST  : SUNBURST communicated via HTTP GET or HTTP POST requests to third party servers for C2.", "S0578": " SUPERNOVA  : SUPERNOVA had to receive an HTTP GET request containing a specific set of parameters in order to execute.", "S0060": " Sys10  : Sys10 uses HTTP for C2.", "G0092": " TA505  : TA505 has used HTTP to communiate with C2 nodes.", "G0127": " TA551  : TA551 has used HTTP for C2 communications.", "S0011": " Taidoor  : Taidoor has used HTTP GET and POST requests for C2.", "G0139": " TeamTNT  : TeamTNT has the curl command to send credentials over HTTP and download new software. TeamTNT has also used a custom user agent HTTP header in shell scripts.", "S0595": " ThiefQuest  : ThiefQuest uploads files via unencrypted HTTP. ", "G0027": " Threat Group-3390  : Threat Group-3390 malware has used HTTP for C2.", "S0266": " TrickBot  : TrickBot uses HTTPS to communicate with its C2 servers, to get malware updates, modules that perform most of the malware logic and various configuration files.", "S0094": " Trojan.Karagany  : Trojan.Karagany can communicate with C2 via HTTP POST requests.", "G0081": " Tropic Trooper  : Tropic Trooper has used HTTP in communication with the C2.", "S0436": " TSCookie  : TSCookie can multiple protocols including HTTP and HTTPS in communication with command and control (C2) servers.", "S0647": " Turian  : Turian has the ability to use HTTP for its C2.", "G0010": " Turla  : Turla has used HTTP and HTTPS for C2 communications.", "S0333": " UBoatRAT  : UBoatRAT has used HTTP for C2 communications.", "S0275": " UPPERCUT  : UPPERCUT has used HTTP for C2, including sending error codes in Cookie headers.", "S0386": " Ursnif  : Ursnif has used HTTPS for C2.", "S0476": " Valak  : Valak has used HTTP in communications with C2.", "S0636": " VaporRage  : VaporRage can use HTTP to download shellcode from compromised websites.", "S0207": " Vasport  : Vasport creates a backdoor by making a connection using a HTTP POST.", "S0442": " VBShower  : VBShower has attempted to obtain a VBS script from command and control (C2) nodes over HTTP.", "S0257": " VERMIN  : VERMIN uses HTTP for C2 communications.", "S0514": " WellMess  : WellMess can use HTTP and HTTPS in C2 communications.", "G0112": " Windshift  : Windshift has used tools that communicate with C2 over HTTP.", "S0466": " WindTail  : WindTail has the ability to use HTTP for C2 communications.", "S0059": " WinMM  : WinMM uses HTTP for C2.", "S0430": " Winnti for Linux  : Winnti for Linux has used HTTP in outbound communications.", "G0090": " WIRTE  : WIRTE has used HTTP for network communication. ", "G0102": " Wizard Spider  : Wizard Spider has used HTTP for network communications.", "S0341": " Xbash  : Xbash uses HTTP for C2 communications.", "S0653": " xCaon  : xCaon has communicated with the C2 server by sending POST requests over HTTP. ", "S0388": " YAHOYAH  : YAHOYAH uses HTTP for C2.", "S0251": " Zebrocy  : Zebrocy uses HTTP for C2.", "S0230": " ZeroT  : ZeroT has used HTTP for C2.", "S0330": " Zeus Panda  : Zeus Panda uses HTTP for C2 communications.", "S0086": " ZLib  : ZLib communicates over HTTP for C2.", "S0412": " ZxShell  : ZxShell has used HTTP for C2 connections. "}, "id": "T1071.001", "subtechniqueof": "T1071", "tactics": ["Command and Control"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "15 March 2020", "lastmodified": "26 March 2020"}, {"techniquename": "Local Email Collection", "detection": "Monitor processes and command-line arguments for actions that could be taken to gather local email files. Monitor for unusual processes accessing local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user\u2019s local system, such as Outlook storage or cache files.Outlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB. IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in  or .", "mitigations": {"M1041": " Encrypt Sensitive Information  : Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages."}, "procedureexamples": {"G0006": " APT1  : APT1 uses two utilities, GETMAIL and MAPIGET, to steal email. GETMAIL extracts emails from archived Outlook .pst files.", "S0030": " Carbanak  : Carbanak searches recursively for Outlook personal storage tables (PST) files within user directories and sends them back to the C2 server.", "G0114": " Chimera  : Chimera has harvested data from victim's e-mail including through execution of .", "S0050": " CosmicDuke  : CosmicDuke searches for Microsoft Outlook data files with extensions .pst and .ost for collection and exfiltration.", "S0115": " Crimson  : Crimson contains a command to collect and exfiltrate emails from Outlook.", "S0367": " Emotet  : Emotet has been observed leveraging a module that scrapes email data from Outlook.", "S0363": " Empire  : Empire has the ability to collect emails on a target system.", "S0526": " KGH_SPY  : KGH_SPY can harvest data from mail clients.", "G0059": " Magic Hound  : Magic Hound has collected .PST archives.", "S0594": " Out1  : Out1 can parse e-mails on a target machine.", "S0192": " Pupy  : Pupy can interact with a victim\u2019s Outlook session and look through folders and emails.", "S0650": " QakBot  : QakBot can target and steal locally stored emails to support thread hijacking phishing campaigns.", "S0226": " Smoke Loader  : Smoke Loader searches through Outlook files and directories (e.g., inbox, sent, templates, drafts, archives, etc.)."}, "id": "T1114.001", "subtechniqueof": "T1114", "tactics": ["Collection"], "platforms": ["Windows"], "permissionsrequired": ["User"], "version": "1.0", "created": "19 February 2020", "lastmodified": "24 March 2020"}, {"techniquename": "Remote Email Collection", "detection": "Monitor for unusual login activity from unknown or abnormal locations, especially for privileged accounts (ex: Exchange administrator account).", "description": "Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such as MailSniper can be used to automate searches for specific keywords.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages.", "M1032": " Multi-factor Authentication  : Use of multi-factor authentication for public-facing webmail servers is a recommended best practice to minimize the usefulness of usernames and passwords to adversaries."}, "procedureexamples": {"G0006": " APT1  : APT1 uses two utilities, GETMAIL and MAPIGET, to steal email. MAPIGET steals email still on Exchange servers that has not yet been archived.", "G0007": " APT28  : APT28 has collected emails from victim Microsoft Exchange servers.", "G0016": " APT29  : APT29 collected emails from specific individuals, such as executives and IT staff, using  followed by .", "G0114": " Chimera  : Chimera has harvested data from remote mailboxes including through execution of .", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 accessed email accounts using Outlook Web Access.", "G0085": " FIN4  : FIN4 has accessed and hijacked online email communications using stolen credentials.", "G0125": " HAFNIUM  : HAFNIUM has used web shells to export mailbox data.", "G0004": " Ke3chang  : Ke3chang used a .NET tool to dump data from Microsoft Exchange mailboxes.", "G0077": " Leafminer  : Leafminer used a tool called MailSniper to search through the Exchange server mailboxes for keywords.", "S0395": " LightNeuron  : LightNeuron collects Exchange emails matching rules specified in its configuration.", "S0413": " MailSniper  : MailSniper can be used for searching through email in Exchange and Office 365 environments.", "S0053": " SeaDuke  : Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials.", "S0476": " Valak  : Valak can collect sensitive mailing information from Exchange servers, including credentials and the domain certificate of an enterprise."}, "id": "T1114.002", "subtechniqueof": "T1114", "tactics": ["Collection"], "platforms": ["Google Workspace, Office 365, Windows"], "version": "1.1", "created": "19 February 2020", "lastmodified": "25 March 2021"}, {"techniquename": "Data Staged", "detection": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as  and .", "description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.", "procedureexamples": {"S0641": " Kobalos  : Kobalos can write captured SSH connection credentials to a file under the  directory with a  extension for exfiltration. ", "G0102": " Wizard Spider  : Wizard Spider has collected and staged credentials and network enumeration information, using  the networkdll and psfin TrickBot modules."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1074", "subtechniques": ["T1074.001", "T1074.002"], "tactics": ["Collection"], "platforms": ["IaaS, Linux, Windows, macOS"], "contributors": ["Praetorian; Shane Tully, @securitygypsy"], "version": "1.3", "created": "31 May 2017", "lastmodified": "08 March 2021"}, {"techniquename": "Screen Capture", "detection": "Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.", "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as , , or .", "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla can capture screenshots of the victim\u2019s desktop.", "S0622": " AppleSeed  : AppleSeed can take screenshots on a compromised host by calling a series of APIs.", "G0007": " APT28  : APT28 has used tools to take screenshots from victims.", "G0087": " APT39  : APT39 has used a screen capture utility to take screenshots on a compromised host.", "S0456": " Aria-body  : Aria-body has the ability to capture screenshots on compromised hosts.", "S0438": " Attor  : Attor's has a plugin that captures screenshots of the target applications.", "S0344": " Azorult  : Azorult can capture screenshots of the victim\u2019s machines.", "S0128": " BADNEWS  : BADNEWS has a command to take a screenshot and send it to the C2 server.", "S0337": " BadPatch  : BadPatch captures screenshots in .jpg format and then exfiltrates them.", "S0234": " Bandook  : Bandook is capable of taking an image of and uploading the current desktop.", "S0017": " BISCUIT  : BISCUIT has a command to periodically take screenshots of the system.", "S0089": " BlackEnergy  : BlackEnergy is capable of taking screenshots.", "S0657": " BLUELIGHT  : BLUELIGHT has captured a screenshot of the display every 30 seconds for the first 5 minutes after initiating a C2 loop, and then once every five minutes thereafter.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used a tool to capture screenshots.", "S0454": " Cadelspy  : Cadelspy has the ability to capture screenshots and webcam photos.", "S0351": " Cannon  : Cannon can take a screenshot of the desktop.", "S0030": " Carbanak  : Carbanak performs desktop video recording and captures screenshots of the desktop and sends it to the C2 server.", "S0484": " Carberp  : Carberp can capture display screenshots with the screens_dll.dll plugin.", "S0348": " Cardinal RAT  : Cardinal RAT can capture screenshots.", "S0261": " Catchamas  : Catchamas captures screenshots based on specific keywords in the window\u2019s title.", "S0631": " Chaes  : Chaes can capture screenshots of the infected machine.", "S0023": " CHOPSTICK  : CHOPSTICK has the capability to capture screenshots.", "S0154": " Cobalt Strike  : Cobalt Strike's Beacon payload is capable of capturing screenshots.", "S0338": " Cobian RAT  : Cobian RAT has a feature to perform screen capture.", "S0591": " ConnectWise  : ConnectWise can take screenshots on remote hosts.", "S0050": " CosmicDuke  : CosmicDuke takes periodic screenshots and exfiltrates them.", "S0115": " Crimson  : Crimson contains a command to perform screen captures.", "S0235": " CrossRAT  : CrossRAT is capable of taking screen captures.", "G0070": " Dark Caracal  : Dark Caracal took screenshots using their Windows malware.", "S0187": " Daserf  : Daserf can take screenshots.", "S0021": " Derusbi  : Derusbi is capable of performing screen captures.", "S0213": " DOGCALL  : DOGCALL is capable of capturing screenshots of the victim's machine.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 has performed screen captures of victims, including by using a tool, scr.exe (which matched the hash of ScreenUtil).", "S0062": " DustySky  : DustySky captures PNG screenshots of the main screen.", "S0593": " ECCENTRICBANDWAGON  : ECCENTRICBANDWAGON can capture screenshots and store them locally.", "S0363": " Empire  : Empire is capable of capturing screenshots on Windows and macOS systems.", "S0152": " EvilGrab  : EvilGrab has the capability to capture screenshots.", "G0046": " FIN7  : FIN7 captured screenshots and desktop video recordings.", "S0182": " FinFisher  : FinFisher takes a screenshot of the screen and displays it on top of all other windows for few seconds in an apparent attempt to hide some messages showed by the system during the setup process.", "S0143": " Flame  : Flame can take regular screenshots when certain applications are open that are sent to the command and control server.", "S0277": " FruitFly  : FruitFly takes screenshots of the user's desktop.", "G0047": " Gamaredon Group  : Gamaredon Group's malware can take screenshots of the compromised computer every minute.   ", "S0032": " gh0st RAT  : gh0st RAT can capture the victim\u2019s screen remotely.", "G0115": " GOLD SOUTHFIELD  : GOLD SOUTHFIELD has used the remote monitoring and management tool ConnectWise to obtain screen captures from victim's machines.", "S0417": " GRIFFON  : GRIFFON has used a screenshot module that can be used to take a screenshot of the remote system.", "G0043": " Group5  : Malware used by Group5 is capable of watching the victim's screen.", "S0151": " HALFBAKED  : HALFBAKED can obtain screenshots from the victim.", "S0431": " HotCroissant  : HotCroissant has the ability to do real time screen viewing on an infected host.", "S0203": " Hydraq  : Hydraq includes a component based on the code of VNC that can stream a live feed of the desktop of an infected host.", "S0398": " HyperBro  : HyperBro has the ability to take screenshots.", "S0260": " InvisiMole  : InvisiMole can capture screenshots of not only the entire screen, but of each separate window open, in case they are overlapping.", "S0163": " Janicab  : Janicab captured screenshots and sent them out to a C2 server.", "S0044": " JHUHUGIT  : A JHUHUGIT variant takes screenshots by simulating the user pressing the \"Take Screenshot\" key (VK_SCREENSHOT), accessing the screenshot saved in the clipboard, and converting it to a JPG image.", "S0283": " jRAT  : jRAT has the capability to take screenshots of the victim\u2019s machine.", "S0088": " Kasidet  : Kasidet has the ability to initiate keylogging and screen captures.", "S0265": " Kazuar  : Kazuar captures screenshots of the victim\u2019s screen.", "S0387": " KeyBoy  : KeyBoy has a command to perform screen grabbing.", "S0271": " KEYMARBLE  : KEYMARBLE can capture screenshots of the victim\u2019s machine.", "S0437": " Kivars  : Kivars has the ability to capture screenshots on the infected host.", "S0356": " KONNI  : KONNI can take screenshots of the victim\u2019s machine.", "S0582": " LookBack  : LookBack can take desktop screenshots.", "S0409": " Machete  : Machete captures screenshots.", "S0282": " MacSpy  : MacSpy can capture screenshots of the desktop over multiple monitors.", "G0059": " Magic Hound  : Magic Hound malware can take a screenshot and upload the file to its C2 server.", "S0652": " MarkiRAT  : MarkiRAT can capture screenshots that are initially saved as \u2018scr.jpg\u2019.", "S0167": " Matryoshka  : Matryoshka is capable of performing screen captures.", "S0455": " Metamorfo  : Metamorfo can collect screenshots of the victim\u2019s machine. ", "S0339": " Micropsia  : Micropsia takes screenshots every 90 seconds by calling the Gdi32.BitBlt API.", "G0069": " MuddyWater  : MuddyWater has used malware that can capture screenshots of the victim\u2019s machine.", "S0198": " NETWIRE  : NETWIRE can capture the victim's screen.", "S0385": " njRAT  : njRAT can capture screenshots of the victim\u2019s machines.", "S0644": " ObliqueRAT  : ObliqueRAT can capture a screenshot of the current screen.", "S0340": " Octopus  : Octopus can capture screenshots of the victims\u2019 machine.", "G0049": " OilRig  : OilRig has a tool called CANDYKING to capture a screenshot of user's desktop.", "S0643": " Peppy  : Peppy can take screenshots on targeted systems.", "S0013": " PlugX  : PlugX allows the operator to capture screenshots.", "S0428": " PoetRAT  : PoetRAT has the ability to take screen captures.", "S0216": " POORAIM  : POORAIM can perform screen capturing.", "S0194": " PowerSploit  : PowerSploit's  Exfiltration module can take screenshots at regular intervals.", "S0223": " POWERSTATS  : POWERSTATS can retrieve screenshots from compromised hosts.", "S0184": " POWRUNER  : POWRUNER can capture a screenshot from a victim.", "S0113": " Prikormka  : Prikormka contains a module that captures screenshots of the victim's desktop.", "S0279": " Proton  : Proton captures the content of the desktop with the screencapture binary.", "S0147": " Pteranodon  : Pteranodon can capture screenshots at a configurable interval.", "S0192": " Pupy  : Pupy can drop a mouse-logger that will take small screenshots around at each click and then send back to the server.", "S0629": " RainyDay  : RainyDay has the ability to capture screenshots.", "S0458": " Ramsay  : Ramsay can take screenshots every 30 seconds as well as when an external removable storage device is connected.", "S0495": " RDAT  : RDAT can take a screenshot on the infected system.  ", "S0153": " RedLeaves  : RedLeaves can capture screenshots.", "S0332": " Remcos  : Remcos takes automated screenshots of the infected machine.", "S0375": " Remexi  : Remexi takes screenshots of windows of interest.", "S0592": " RemoteUtilities  : RemoteUtilities can take screenshots on a compromised host.", "S0379": " Revenge RAT  : Revenge RAT has a plugin for screen capture.", "S0270": " RogueRobin  : RogueRobin has a command named  that may be responsible for taking screenshots of the victim machine.", "S0240": " ROKRAT  : ROKRAT captures screenshots of the infected system using the gdi32 library.", "S0090": " Rover  : Rover takes screenshots of the compromised system's desktop and saves them to  for exfiltration every 60 minutes.", "S0148": " RTM  : RTM can capture screenshots.", "S0546": " SharpStage  : SharpStage has the ability to capture the victim's screen.", "S0217": " SHUTTERSPEED  : SHUTTERSPEED can capture screenshots.", "G0091": " Silence  : Silence can capture victim screen activity.", "S0633": " Sliver  : Sliver can take screenshots of the victim\u2019s active display.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has taken a screenshot of a victim's desktop, named it \"Filter3.jpg\", and stored it in the local directory.", "S0649": " SMOKEDHAM  : SMOKEDHAM can capture screenshots of the victim\u2019s desktop.", "S0273": " Socksbot  : Socksbot can take screenshots.", "S0380": " StoneDrill  : StoneDrill can take screenshots.    ", "S0098": " T9000  : T9000 can take screenshots of the desktop and target application windows, saving them to user directories as one byte XOR encrypted .dat files.", "S0467": " TajMahal  : TajMahal has the ability to take screenshots on an infected host including capturing content from windows of instant messaging applications.", "S0004": " TinyZBot  : TinyZBot contains screen capture functionality.", "S0094": " Trojan.Karagany  : Trojan.Karagany can take a desktop screenshot and save the file into .", "S0647": " Turian  : Turian has the ability to take screenshots.", "S0199": " TURNEDUP  : TURNEDUP is capable of taking screenshots.", "S0275": " UPPERCUT  : UPPERCUT can capture desktop screenshots in the PNG format and send them to the C2 server.", "S0386": " Ursnif  : Ursnif has used hooked APIs to take screenshots.", "S0476": " Valak  : Valak has the ability to take screenshots on a compromised host.     ", "S0257": " VERMIN  : VERMIN can perform screen captures of the victim\u2019s machine.", "S0161": " XAgentOSX  : XAgentOSX contains the takeScreenShot (along with startTakeScreenShot and stopTakeScreenShot) functions to take screenshots using the CGGetActiveDisplayList, CGDisplayCreateImage, and NSImage:initWithCGImage methods.", "S0658": " XCSSET  : XCSSET saves a screen capture of the victim's system with a numbered filename and  extension. Screen captures are taken at specified intervals based on the system. ", "S0248": " yty  : yty collects screenshots of the victim machine.", "S0251": " Zebrocy  : A variant of Zebrocy captures screenshots of the victim\u2019s machine in JPEG and BMP format.", "S0330": " Zeus Panda  : Zeus Panda can take screenshots of the victim\u2019s machine.", "S0086": " ZLib  : ZLib has the ability to obtain screenshots of the compromised system.", "S0412": " ZxShell  : ZxShell can capture screenshots."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1113", "subtechniques": ["No sub-techniques"], "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "capecid": ["CAPEC-648"], "version": "1.1", "created": "31 May 2017", "lastmodified": "24 March 2020"}, {"techniquename": "Data from Local System", "detection": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration.Adversaries may do this using a Command and Scripting Interpreter, such as cmd, which has functionality to interact with the file system to gather information. Some adversaries may also use Automated Collection on the local system.", "mitigations": {"M1057": " Data Loss Prevention  : Data loss prevention can restrict access to sensitive data and detect sensitive data that is unencrypted."}, "procedureexamples": {"G0138": " Andariel  : Andariel has collected large numbers of files from compromised network systems for later extraction.", "S0622": " AppleSeed  : AppleSeed can collect data on a compromised host.", "G0006": " APT1  : APT1 has collected files from a local victim.", "G0007": " APT28  : APT28 has retrieved internal documents from machines inside victim environments, including by using Forfiles to stage documents before exfiltration.", "G0016": " APT29  : APT29 has extracted files from compromised networks. ", "G0022": " APT3  : APT3 will identify Microsoft Office documents on the victim's computer.", "G0067": " APT37  : APT37 has collected data from victims' local systems.", "G0082": " APT38  : APT38 has collected data from a compromised host.", "G0087": " APT39  : APT39 has used various tools to steal files from the compromised host.", "G0096": " APT41  : APT41 has uploaded files and data from a compromised host.", "S0642": " BADFLICK  : BADFLICK has uploaded files from victims' machines.", "S0128": " BADNEWS  : When it first starts, BADNEWS crawls the victim's local drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.", "S0337": " BadPatch  : BadPatch collects files from the local system that have the following extensions, then prepares them for exfiltration: .xls, .xlsx, .pdf, .mdb, .rar, .zip, .doc, .docx.", "S0234": " Bandook  : Bandook can collect local files from the system . ", "S0239": " Bankshot  : Bankshot collects files from the local system.", "S0534": " Bazar  : Bazar can retrieve information from the infected machine.", "S0564": " BlackMould  : BlackMould can copy files on a compromised host.", "S0520": " BLINDINGCAN  : BLINDINGCAN has uploaded files from victim machines.", "S0651": " BoxCaon  : BoxCaon can upload files from a compromised host.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has exfiltrated files stolen from local systems.", "S0274": " Calisto  : Calisto can collect data from user directories.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell has a module to collect information from the local database. ", "S0020": " China Chopper  : China Chopper's server component can upload local files.", "S0154": " Cobalt Strike  : Cobalt Strike can collect data from a local system.", "S0492": " CookieMiner  : CookieMiner has retrieved iPhone text messages from iTunes phone backup files.", "S0050": " CosmicDuke  : CosmicDuke steals user files from local hard drives with file extensions that match a predefined list.", "S0538": " Crutch  : Crutch can exfiltrate files from compromised systems.", "S0498": " Cryptoistic  : Cryptoistic can retrieve files from the local file system.", "G0070": " Dark Caracal  : Dark Caracal collected complete contents of the 'Pictures' folder from compromised Windows systems.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 collected data from local victim systems.", "S0502": " Drovorub  : Drovorub can transfer files from the victim machine.", "S0567": " Dtrack  : Dtrack can collect a variety of information from victim machines.", "G0031": " Dust Storm  : Dust Storm has used Android backdoors capable of exfiltrating specific files directly from the infected devices.", "S0634": " EnvyScout  : EnvyScout can collect sensitive NTLM material from a compromised host.", "S0404": " esentutl  : esentutl can be used to collect data from local file systems.", "S0512": " FatDuke  : FatDuke can copy files and directories from a compromised host.", "G0037": " FIN6  : FIN6 has collected and exfiltrated payment card data from compromised systems.", "G0046": " FIN7  : FIN7 has collected files and other sensitive information from a compromised network.", "S0036": " FLASHFLOOD  : FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on the local system. FLASHFLOOD will scan the My Recent Documents, Desktop, Temporary Internet Files, and TEMP directories. FLASHFLOOD also collects information stored in the Windows Address Book.", "S0193": " Forfiles  : Forfiles can be used to act on (ex: copy, move, etc.) files/directories in a system during (ex: copy files into a staging area before).", "G0117": " Fox Kitten  : Fox Kitten has searched local system resources to access sensitive documents.", "S0503": " FrameworkPOS  : FrameworkPOS can collect elements related to credit card data from process memory.", "G0101": " Frankenstein  : Frankenstein has enumerated hosts via Empire, gathering various local system information.", "G0093": " GALLIUM  : GALLIUM collected data from the victim's local system, including password hashes from the SAM hive in the Registry.", "G0047": " Gamaredon Group  : Gamaredon Group has collected files from infected systems and uploaded them to a C2 server.", "S0477": " Goopy  : Goopy has the ability to exfiltrate documents from infected systems. ", "S0237": " GravityRAT  : GravityRAT steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.", "S0632": " GrimAgent  : GrimAgent can collect data and files from a compromised host.", "G0072": " Honeybee  : Honeybee collects data from the local victim system.", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can read data from files.", "G0100": " Inception  : Inception used a file hunting plugin to collect .txt, .pdf, .xls or .doc files from the infected host.", "S0260": " InvisiMole  : InvisiMole can collect data from the system, and can monitor changes in specified directories.", "S0015": " Ixeshe  : Ixeshe can collect data from a local system.", "S0265": " Kazuar  : Kazuar uploads files from a specified directory to the C2 server.", "G0004": " Ke3chang  : Ke3chang gathered information and files from local directories for exfiltration.", "S0526": " KGH_SPY  : KGH_SPY can send a file containing victim system information to C2.", "G0094": " Kimsuky  : Kimsuky has collected Office, PDF, and HWP documents from its victims.", "S0250": " Koadic  : Koadic can download files off the target system to send back to the server.", "G0032": " Lazarus Group  : Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is uploaded to one of its 10 C2 servers. Lazarus Group malware RomeoDelta copies specified directories from the victim's machine, then archives and encrypts the directories before uploading to its C2 server.", "S0395": " LightNeuron  : LightNeuron can collect files from a local system.", "S0211": " Linfo  : Linfo creates a backdoor through which remote attackers can obtain data from local systems.", "S0409": " Machete  : Machete searches the File system for files of interest. ", "S0652": " MarkiRAT  : MarkiRAT can upload data from the victim's machine to the C2 server.", "S0500": " MCMD  : MCMD has the ability to upload files from an infected device.", "G0045": " menuPass  : menuPass has collected various files from the compromised computers.", "S0079": " MobileOrder  : MobileOrder exfiltrates data collected from the victim mobile device.", "S0630": " Nebulae  : Nebulae has the capability to upload collected files to C2.", "S0385": " njRAT  : njRAT can collect data from a local system.", "S0340": " Octopus  : Octopus can exfiltrate files from the system using a documents collector tool.", "G0116": " Operation Wocao  : Operation Wocao has exfiltrated files and directories of interest from the targeted system.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D has the ability to upload files from a compromised host.", "S0594": " Out1  : Out1 can copy files and Registry data from compromised hosts.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell has the ability to copy files on a compromised host.", "S0208": " Pasam  : Pasam creates a backdoor through which remote attackers can retrieve files.", "G0040": " Patchwork  : Patchwork collected and exfiltrated files from the infected system.", "S0517": " Pillowmint  : Pillowmint has collected credit card data using native API functions.", "S0048": " PinchDuke  : PinchDuke collects user files from the compromised host based on predefined file extensions.", "S0012": " PoisonIvy  : PoisonIvy creates a backdoor through which remote attackers can steal system information.", "S0194": " PowerSploit  : PowerSploit contains a collection of Exfiltration modules that can access data from local files, volumes, and processes.", "S0223": " POWERSTATS  : POWERSTATS can upload files from compromised hosts.", "S0238": " Proxysvc  : Proxysvc searches the local system and gathers data.", "S0197": " PUNCHTRACK  : PUNCHTRACK scrapes memory for properly formatted payment card data.", "S0650": " QakBot  : QakBot can use a variety of commands, including esentutl.exe to steal sensitive data from Internet Explorer and Microsoft Edge, to acquire information that is subsequently exfiltrated.", "S0629": " RainyDay  : RainyDay can use a file exfiltration tool to collect recently changed files on a compromised host.", "S0458": " Ramsay  : Ramsay can collect Microsoft Word documents from the target's file system, as well as , , and  files from the Internet Explorer cache.    ", "S0169": " RawPOS  : RawPOS dumps memory from specific processes on a victim system, parses the dumped files, and scrapes them for credit card data.", "S0240": " ROKRAT  : ROKRAT can request to upload collected host data and additional files.", "S0090": " Rover  : Rover searches for files on local drives based on a predefined list of file extensions.", "G0034": " Sandworm Team  : Sandworm Team has exfiltrated internal documents, files, and other data from compromised hosts.", "S0461": " SDBbot  : SDBbot has the ability to access the file system on a compromised host.", "S0444": " ShimRat  : ShimRat has the capability to upload collected files to a C2.  ", "S0610": " SideTwist  : SideTwist has the ability to upload files from a compromised host.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has uploaded files and information from victim machines.", "S0615": " SombRAT  : SombRAT has collected data and files from a compromised host.", "S0646": " SpicyOmelette  : SpicyOmelette has collected data and other information from a compromised host.", "G0038": " Stealth Falcon  : Stealth Falcon malware gathers data from the local victim system.", "S0559": " SUNBURST  : SUNBURST collected information from a compromised host.", "S0011": " Taidoor  : Taidoor can upload data and files from a victim's machine.", "S0467": " TajMahal  : TajMahal has the ability to steal documents from the local system including the print spooler queue.", "G0027": " Threat Group-3390  : Threat Group-3390 ran a command to compile an archive of file types of interest from the victim user's directories.", "S0266": " TrickBot  : TrickBot collects local files and information from the victim\u2019s local machine.", "G0010": " Turla  : Turla RPC backdoors can upload files from victim machines.", "S0386": " Ursnif  : Ursnif has collected files from victim machines, including certificates and cookies.", "S0452": " USBferry  : USBferry can collect information from an air-gapped host machine.  ", "S0515": " WellMail  : WellMail can exfiltrate files from the victim machine.", "S0514": " WellMess  : WellMess can send files from the victim machine to C2.", "S0645": " Wevtutil  : Wevtutil can be used to export events from a specific log.", "G0124": " Windigo  : Windigo has used a script to gather credentials in files left on disk by OpenSSH backdoors.", "S0653": " xCaon  : xCaon has uploaded files from victims' machines.", "S0658": " XCSSET  : XCSSET collects contacts and application data from files in Desktop, Documents, Downloads, Dropbox, and WeChat folders.", "S0248": " yty  : yty collects files with the following extensions: .ppt, .pptx, .pdf, .doc, .docx, .xls, .xlsx, .docm, .rtf, .inp, .xlsm, .csv, .odt, .pps, .vcf and sends them back to the C2 server."}, "id": "T1005", "subtechniques": ["No sub-techniques"], "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Privileges to access certain files and directories"], "contributors": ["William Cain"], "version": "1.3", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Data from Removable Media", "detection": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. Some adversaries may also use Automated Collection on removable media.", "mitigations": {"M1057": " Data Loss Prevention  : Data loss prevention can restrict access to sensitive data and detect sensitive data that is unencrypted."}, "procedureexamples": {"S0622": " AppleSeed  : AppleSeed can find and collect data from removable media devices.", "G0007": " APT28  : An APT28 backdoor may collect the entire contents of an inserted USB device.", "S0456": " Aria-body  : Aria-body has the ability to collect data from USB devices.", "S0128": " BADNEWS  : BADNEWS copies files with certain extensions from USB devices toa predefined directory.", "S0050": " CosmicDuke  : CosmicDuke steals user files from removable media with file extensions and keywords that match a predefined list.", "S0115": " Crimson  : Crimson contains a module to collect data from removable drives.", "S0538": " Crutch  : Crutch can monitor removable drives and exfiltrate files matching a given extension list.", "S0569": " Explosive  : Explosive can scan all .exe files located in the USB drive. ", "S0036": " FLASHFLOOD  : FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on removable media and copies them to a staging area. The default file types copied would include data copied to the drive by SPACESHIP.", "G0047": " Gamaredon Group  : A Gamaredon Group file stealer has the capability to steal data from newly connected logical volumes on a system, including USB drives.", "S0237": " GravityRAT  : GravityRAT steals files based on an extension list if a USB drive is connected to the system.", "S0260": " InvisiMole  : InvisiMole can collect jpeg files from connected MTP devices.", "S0409": " Machete  : Machete can find, encrypt, and upload files from fixed and removable drives. ", "S0644": " ObliqueRAT  : ObliqueRAT has the ability to extract data from removable devices connected to the endpoint.", "S0113": " Prikormka  : Prikormka contains a module that collects documents with certain extensions from removable media or fixed drives connected via USB.", "S0458": " Ramsay  : Ramsay can collect data from removable media and stage it for exfiltration.  ", "S0125": " Remsec  : Remsec has a package that collects documents from any inserted USB sticks.", "S0090": " Rover  : Rover searches for files on attached removable drives based on a predefined list of file extensions every five seconds.", "S0467": " TajMahal  : TajMahal has the ability to steal written CD images and files of interest from previously connected removable drives when they become available again.", "G0010": " Turla  : Turla RPC backdoors can collect files from USB thumb drives.", "S0136": " USBStealer  : Once a removable media device is inserted back into the first victim, USBStealer collects data from it that was exfiltrated from a second victim."}, "id": "T1025", "subtechniques": ["No sub-techniques"], "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Privileges to access removable media drive and files"], "contributors": ["William Cain"], "version": "1.2", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Local Data Staging", "detection": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as  and .", "description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.", "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL stores output from command execution in a .dat file in the %TEMP% directory.", "S0622": " AppleSeed  : AppleSeed can stage files in a central location prior to exfiltration.", "G0007": " APT28  : APT28 has stored captured credential information in a file named pi.log.", "G0022": " APT3  : APT3 has been known to stage files for exfiltration in a single location.", "G0087": " APT39  : APT39 has utilized tools to aggregate data prior to exfiltration.", "S0373": " Astaroth  : Astaroth collects data in a plaintext file named r1.log before exfiltration. ", "S0438": " Attor  : Attor has staged collected data in a central upload directory prior to exfiltration.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has copied files of interest to the main drive's recycle bin.", "S0128": " BADNEWS  : BADNEWS copies documents under 15MB found on the victim system to is the user's  folder. It also copies files from USB devices to a predefined directory.", "S0337": " BadPatch  : BadPatch stores collected data in log files before exfiltration.", "S0651": " BoxCaon  : BoxCaon has created a working folder for collected files that it sends to the C2 server. ", "S0274": " Calisto  : Calisto uses a hidden directory named .calisto to store data from the victim\u2019s machine before exfiltration.", "S0335": " Carbon  : Carbon creates a base directory that contains the files and folders that are collected.", "S0261": " Catchamas  : Catchamas stores the gathered data from the machine in .db files and .bmp files under four separate locations.", "G0114": " Chimera  : Chimera has staged stolen data locally on compromised hosts.", "S0538": " Crutch  : Crutch has staged stolen files in the  directory.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 created a directory named \"out\" in the user's %AppData% folder and copied files to it.", "S0567": " Dtrack  : Dtrack can save collected data to disk, different file formats, and network shares.", "S0038": " Duqu  : Modules can be pushed to and executed by Duqu that copy data to a staging area, compress it, and XOR encrypt it.", "S0062": " DustySky  : DustySky created folders in temp directories to host collected files before exfiltration.", "S0024": " Dyre  : Dyre has the ability to create files in a TEMP folder to act as a database to store information.", "S0593": " ECCENTRICBANDWAGON  : ECCENTRICBANDWAGON has stored keystrokes and screenshots within the , , and  directories.", "S0081": " Elise  : Elise creates a file in  and stores all harvested data in that file.", "S0343": " Exaramel for Windows  : Exaramel for Windows specifies a path to store files scheduled for exfiltration. ", "G0053": " FIN5  : FIN5 scripts save memory dump data into a specific directory on hosts in the victim environment.", "S0036": " FLASHFLOOD  : FLASHFLOOD stages data it copies from the local system or removable drives in the \"%WINDIR%\\$NtUninstallKB885884$\\\" directory.", "S0503": " FrameworkPOS  : FrameworkPOS can identifiy payment card track data on the victim and copy it to a local file in a subdirectory of C:\\Windows.", "G0093": " GALLIUM  : GALLIUM compressed and staged files in multi-part archives in the Recycle Bin prior to exfiltration.", "S0249": " Gold Dragon  : Gold Dragon stores information gathered from the endpoint in a file named 1.hwp.", "S0170": " Helminth  : Helminth creates folders to store output from batch scripts prior to sending the information to its C2 server.", "G0072": " Honeybee  : Honeybee adds collected files to a temp.zip file saved in the %temp% folder, then base64 encodes it and uploads it to control server.", "G0119": " Indrik Spider  : Indrik Spider has stored collected date in a .tmp file.", "S0260": " InvisiMole  : InvisiMole determines a working directory where it stores all the gathered data about the compromised machine.", "S0265": " Kazuar  : Kazuar stages command output and collected data in files before exfiltration.", "S0526": " KGH_SPY  : KGH_SPY can save collected system information to a file named \"info\" before exfiltration.", "G0094": " Kimsuky  : Kimsuky has staged collected data files under .", "G0032": " Lazarus Group  : Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is saved in the %TEMP% directory, then compressed, encrypted, and uploaded to a C2 server.", "G0065": " Leviathan  : Leviathan has used C:\\Windows\\Debug and C:\\Perflogs as staging directories.", "S0395": " LightNeuron  : LightNeuron can store email data in files and directories specified in its configuration, such as .", "S0409": " Machete  : Machete stores files and logs in a folder on the local drive.", "S0652": " MarkiRAT  : MarkiRAT can store collected data locally in a created .nfo file.", "G0045": " menuPass  : menuPass stages data prior to exfiltration in multi-part archives, often saved in the Recycle Bin.", "S0443": " MESSAGETAP  : MESSAGETAP stored targeted SMS messages that matched its target list in CSV files on the compromised system.", "S0149": " MoonWind  : MoonWind saves information from its keylogging routine as a .zip file in the present working directory.", "G0129": " Mustang Panda  : Mustang Panda has stored collected credential files in  prior to exfiltration. Mustang Panda has also stored documents for exfiltration in a hidden folder on USB drives.", "S0247": " NavRAT  : NavRAT writes multiple outputs to a TMP file using the >> method.", "S0198": " NETWIRE  : NETWIRE has the ability to write collected data to a file created in the  directory.", "S0353": " NOKKI  : NOKKI can collect data from the victim and stage it in .", "S0644": " ObliqueRAT  : ObliqueRAT can copy specific files, webcam captures, and screenshots to local directories.", "S0340": " Octopus  : Octopus has stored collected information in the Application Data directory on a compromised host.", "S0264": " OopsIE  : OopsIE stages the output from command execution and collected files in specific folders before exfiltration.", "G0116": " Operation Wocao  : Operation Wocao has staged archived files in a temporary directory prior to exfiltration. ", "G0040": " Patchwork  : Patchwork copied all targeted files to a directory called index that was eventually uploaded to the C&C server.", "S0012": " PoisonIvy  : PoisonIvy stages collected data in a text file.", "S0113": " Prikormka  : Prikormka creates a directory, , which is used to store collected log files.", "S0147": " Pteranodon  : Pteranodon creates various subdirectories under  and copies files to those subdirectories. It also creates a folder at  to store screenshot JPEG files.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY has saved information to a random temp file before exfil.", "S0197": " PUNCHTRACK  : PUNCHTRACK aggregates collected data in a tmp file.", "S0650": " QakBot  : QakBot has stored stolen emails and other data into new folders prior to exfiltration.", "S0629": " RainyDay  : RainyDay can use a file exfiltration tool to copy files to  prior to exfiltration.", "S0458": " Ramsay  : Ramsay can stage data prior to exfiltration in  and . ", "S0169": " RawPOS  : Data captured by RawPOS is placed in a temporary file under a directory named \"memdump\".", "S0090": " Rover  : Rover copies files from removable drives to .", "G0121": " Sidewinder  : Sidewinder has collected stolen files in a temporary folder in preparation for exfiltration.", "S0615": " SombRAT  : SombRAT can store harvested data in a custom database under the %TEMP% directory.", "S0035": " SPACESHIP  : SPACESHIP identifies files with certain extensions and copies them to a directory in the user's profile.", "G0088": " TEMP.Veles  : TEMP.Veles has created staging folders in directories that were infrequently used by legitimate users or processes.", "G0027": " Threat Group-3390  : Threat Group-3390 has locally staged encrypted archives for later exfiltration efforts.", "S0094": " Trojan.Karagany  : Trojan.Karagany can create directories to store plugin output and stage data for exfiltration.", "S0647": " Turian  : Turian can store copied files in a specific directory prior to exfiltration.", "S0386": " Ursnif  : Ursnif has used tmp files to stage gathered information.", "S0136": " USBStealer  : USBStealer collects files matching certain criteria from the victim and stores them in a local directory for later exfiltration.", "S0251": " Zebrocy  : Zebrocy stores all collected information in a single file before exfiltration."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1074.001", "subtechniqueof": "T1074", "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "13 March 2020", "lastmodified": "26 May 2020"}, {"techniquename": "Data from Network Shared Drive", "detection": "Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.", "procedureexamples": {"G0007": " APT28  : APT28 has collected files from network shared drives.", "S0128": " BADNEWS  : When it first starts, BADNEWS crawls the victim's mapped drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has exfiltrated files stolen from file shares.", "G0114": " Chimera  : Chimera has collected data of interest from network shares.", "S0050": " CosmicDuke  : CosmicDuke steals user files from network shared drives with file extensions and keywords that match a predefined list.", "S0554": " Egregor  : Egregor can collect any files found in the enumerated drivers before sending it to its C2 channel. ", "G0117": " Fox Kitten  : Fox Kitten has searched network shares to access sensitive documents.", "G0047": " Gamaredon Group  : Gamaredon Group malware has collected Microsoft Office documents from mapped network drives.", "G0045": " menuPass  : menuPass has collected data from remote systems by mounting network shares with  and using Robocopy to transfer data.", "S0458": " Ramsay  : Ramsay can collect data from network drives and stage it for exfiltration.   ", "G0054": " Sowbug  : Sowbug extracted Word documents from a file server on a victim network."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1039", "subtechniques": ["No sub-techniques"], "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Privileges to access network shared drive"], "capecid": ["CAPEC-639"], "version": "1.2", "created": "31 May 2017", "lastmodified": "24 March 2020"}, {"techniquename": "Remote Data Staging", "detection": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as  and .", "description": "Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.By staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.", "procedureexamples": {"G0007": " APT28  : APT28 has staged archives of collected data on a target's Outlook Web Access (OWA) server.", "G0016": " APT29  : APT29 staged data and files in password-protected archives on a victim's OWA server.", "G0114": " Chimera  : Chimera has staged stolen data on designated servers in the target environment.", "G0037": " FIN6  : FIN6 actors have compressed data from remote systems and moved it to another staging system before exfiltration.", "G0061": " FIN8  : FIN8 aggregates staged data from a network into a single location.", "G0065": " Leviathan  : Leviathan has staged data remotely prior to exfiltration.", "G0045": " menuPass  : menuPass has staged data on remote MSP systems or other victim networks prior to exfiltration.", "G0014": " Night Dragon  : Night Dragon has copied files to company web servers and subsequently downloaded them.", "G0027": " Threat Group-3390  : Threat Group-3390 has moved staged encrypted archives to Internet-facing servers that had previously been compromised with China Chopper prior to exfiltration."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1074.002", "subtechniqueof": "T1074", "tactics": ["Collection"], "platforms": ["IaaS, Linux, Windows, macOS"], "contributors": ["Praetorian"], "version": "1.1", "created": "13 March 2020", "lastmodified": "08 March 2021"}, {"techniquename": "Email Collection", "detection": "There are likely a variety of ways an adversary could collect email from a target, each with a different mechanism for detection.File access of local system email files for Exfiltration, unusual processes connecting to an email server within a network, or unusual access patterns or authentication attempts on a public-facing webmail server may all be indicators of malicious activity.Monitor processes and command-line arguments for actions that could be taken to gather local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account.Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include  set to true,  and . The  parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the  header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.", "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients. ", "mitigations": {"M1047": " Audit  : Enterprise email solutions have monitoring mechanisms that may include the ability to audit auto-forwarding rules on a regular basis.In an Exchange environment, Administrators can use Get-InboxRule to discover and remove potentially malicious auto-forwarding rules. ", "M1041": " Encrypt Sensitive Information  : Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages.", "M1032": " Multi-factor Authentication  : Use of multi-factor authentication for public-facing webmail servers is a recommended best practice to minimize the usefulness of usernames and passwords to adversaries."}, "procedureexamples": {"G0059": " Magic Hound  : Magic Hound has compromised email credentials in order to steal sensitive data.", "G0122": " Silent Librarian  : Silent Librarian has exfiltrated entire mailboxes from compromised accounts."}, "id": "T1114", "subtechniques": ["T1114.001", "T1114.002", "T1114.003"], "tactics": ["Collection"], "platforms": ["Google Workspace, Linux, Office 365, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Swetha Prabakaran, Microsoft Threat Intelligence Center (MSTIC)"], "version": "2.3", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Code Repositories", "detection": "Monitor access to code repositories, especially performed by privileged users such as Active Directory Domain or Enterprise Administrators as these types of accounts should generally not be used to access code repositories. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user-based anomalies.", "description": "Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.Once adversaries gain access to a victim network or a private code repository, they may collect sensitive information such as proprietary source code or credentials contained within software's source code.  Having access to software's source code may allow adversaries to develop Exploits, while credentials may provide access to additional resources using Valid Accounts.", "mitigations": {"M1047": " Audit  : Consider periodic reviews of accounts and privileges for critical and sensitive code repositories. Scan code repositories for exposed credentials or other sensitive information.", "M1032": " Multi-factor Authentication  : Use multi-factor authentication for logons to code repositories.", "M1018": " User Account Management  : Enforce the principle of least-privilege. Consider implementing access control mechanisms that include both authentication and authorization for code repositories.", "M1017": " User Training  : Develop and publish policies that define acceptable information to be stored in code repositories."}, "procedureexamples": {"G0016": " APT29  : APT29 has downloaded source code from code repositories."}, "id": "T1213.003", "subtechniqueof": "T1213", "tactics": ["Collection"], "platforms": ["SaaS"], "permissionsrequired": ["User"], "contributors": ["Itamar Mizrahi, Cymptom; Josh Liburdi, @jshlbrd; Toby Kohlenberg"], "version": "1.0", "created": "11 May 2021", "lastmodified": "16 October 2021"}, {"techniquename": "Confluence", "detection": "Monitor access to Confluence repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.User access logging within Atlassian's Confluence can be configured to report access to certain pages and documents through AccessLogFilter.  Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities.", "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:", "mitigations": {"M1047": " Audit  : Consider periodic review of accounts and privileges for critical and sensitive Confluence repositories.", "M1018": " User Account Management  : Enforce the principle of least-privilege. Consider implementing access control mechanisms that include both authentication and authorization.", "M1017": " User Training  : Develop and publish policies that define acceptable information to be stored in Confluence repositories."}, "id": "T1213.001", "subtechniqueof": "T1213", "tactics": ["Collection"], "platforms": ["SaaS"], "permissionsrequired": ["User"], "version": "1.0", "created": "14 February 2020", "lastmodified": "08 June 2021"}, {"techniquename": "Sharepoint", "detection": "The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. . As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies. ", "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:", "mitigations": {"M1047": " Audit  : Consider periodic review of accounts and privileges for critical and sensitive SharePoint repositories.", "M1018": " User Account Management  : Enforce the principle of least-privilege. Consider implementing access control mechanisms that include both authentication and authorization.", "M1017": " User Training  : Develop and publish policies that define acceptable information to be stored in SharePoint repositories."}, "procedureexamples": {"G0007": " APT28  : APT28 has collected information from Microsoft SharePoint services within target networks.", "G0114": " Chimera  : Chimera has collected documents from the victim's SharePoint.", "G0004": " Ke3chang  : Ke3chang used a SharePoint enumeration and data dumping tool known as spwebmember.", "S0227": " spwebmember  : spwebmember is used to enumerate and dump information from Microsoft SharePoint."}, "id": "T1213.002", "subtechniqueof": "T1213", "tactics": ["Collection"], "platforms": ["Office 365, Windows"], "permissionsrequired": ["User"], "version": "1.0", "created": "14 February 2020", "lastmodified": "08 June 2021"}, {"techniquename": "Data from Information Repositories", "detection": "As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents.  Sharepoint audit logging can also be configured to report when a user shares a resource.  The user access logging within Atlassian's Confluence can also be configured to report access to certain pages and documents through AccessLogFilter.  Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities. ", "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:Information stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as Sharepoint and Confluence, specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server.", "mitigations": {"M1047": " Audit  : Consider periodic review of accounts and privileges for critical and sensitive repositories.", "M1018": " User Account Management  : Enforce the principle of least-privilege. Consider implementing access control mechanisms that include both authentication and authorization.", "M1017": " User Training  : Develop and publish policies that define acceptable information to be stored in repositories."}, "procedureexamples": {"G0007": " APT28  : APT28 has collected files from various information repositories.", "G0037": " FIN6  : FIN6 has collected schemas and user accounts from systems running SQL Server.", "G0117": " Fox Kitten  : Fox Kitten has accessed victim security and IT environments and Microsoft Teams to mine valuable information.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell has the ability to list and extract data from SQL databases.", "G0010": " Turla  : Turla has used a custom .NET tool to collect documents from an organization's internal central database."}, "id": "T1213", "subtechniques": ["T1213.001", "T1213.002", "T1213.003"], "tactics": ["Collection"], "platforms": ["Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Isif Ibrahima; Milos Stojadinovic; Naveen Vijayaraghavan, Nilesh Dherange (Gurucul); Praetorian; Regina Elwell"], "version": "3.2", "created": "18 April 2018", "lastmodified": "16 October 2021"}, {"techniquename": "Network Device Configuration Dump", "detection": "Identify network traffic sent or received by untrusted hosts or networks. Configure signatures to identify strings that may be found in a network device configuration. ", "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.Adversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files.   These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis. ", "mitigations": {"M1041": " Encrypt Sensitive Information  : Configure SNMPv3 to use the highest level of security (authPriv) available.  ", "M1037": " Filter Network Traffic  : Apply extended ACLs to block unauthorized protocols outside the trusted network. ", "M1031": " Network Intrusion Prevention  : onfigure intrusion prevention devices to detect SNMP queries and commands from unauthorized sources. Create signatures to detect Smart Install (SMI) usage from sources other than trusted director. ", "M1030": " Network Segmentation  : Segregate SNMP traffic on a separate management network  ", "M1054": " Software Configuration  : Allowlist MIB objects and implement SNMP views. Disable Smart Install (SMI) if not used.   ", "M1051": " Update Software  : Keep system images and software updated and migrate to SNMPv3. "}, "id": "T1602.002", "subtechniqueof": "T1602", "tactics": ["Collection"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "20 October 2020", "lastmodified": "22 October 2020"}, {"techniquename": "Clipboard Data", "detection": "Access to the clipboard is a legitimate function of many applications on an operating system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.", "description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. In Windows, Applications can access clipboard data by using the Windows API. OSX provides a native command, , to grab clipboard contents.", "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla can steal data from the victim\u2019s clipboard.", "G0082": " APT38  : APT38 used a Trojan called KEYLIME to collect data from the clipboard.", "G0087": " APT39  : APT39 has used tools capable of stealing contents of the clipboard.", "S0373": " Astaroth  : Astaroth collects information from the clipboard by using the OpenClipboard() and GetClipboardData() libraries. ", "S0438": " Attor  : Attor has a plugin that collects data stored in the Windows clipboard by using the OpenClipboard and GetClipboardData APIs.", "S0454": " Cadelspy  : Cadelspy has the ability to steal data from the clipboard.", "S0261": " Catchamas  : Catchamas steals data stored in the clipboard.", "S0050": " CosmicDuke  : CosmicDuke copies and exfiltrates the clipboard contents every 30 seconds.", "S0334": " DarkComet  : DarkComet can steal data from the clipboard.", "S0363": " Empire  : Empire can harvest clipboard data on both Windows and macOS systems.", "S0569": " Explosive  : Explosive has a function to use the OpenClipboard wrapper. ", "S0531": " Grandoreiro  : Grandoreiro can capture clipboard data from a compromised host.", "S0170": " Helminth  : The executable version of Helminth has a module to log clipboard contents.", "S0044": " JHUHUGIT  : A JHUHUGIT variant accesses a screenshot saved in the clipboard and converts it to a JPG image.", "S0283": " jRAT  : jRAT can capture clipboard data.", "S0250": " Koadic  : Koadic can retrieve the current content of the user clipboard.", "S0356": " KONNI  : KONNI had a feature to steal data from the clipboard.", "S0409": " Machete  : Machete hijacks the clipboard data by creating an overlapped window that listens to keyboard events. ", "S0282": " MacSpy  : MacSpy can steal clipboard contents.", "S0652": " MarkiRAT  : MarkiRAT can capture clipboard content.", "S0530": " Melcoz  : Melcoz can monitor content saved to the clipboard.", "S0455": " Metamorfo  : Metamorfo has a function to hijack data from the clipboard by monitoring the contents of the clipboard and replacing the cryptocurrency wallet with the attacker's.", "G0116": " Operation Wocao  : Operation Wocao has collected clipboard data in plaintext.", "S0332": " Remcos  : Remcos steals and modifies data from the clipboard.", "S0375": " Remexi  : Remexi collects text from the clipboard.", "S0148": " RTM  : RTM collects data from the clipboard.", "S0253": " RunningRAT  : RunningRAT contains code to open and copy data from the clipboard.", "S0467": " TajMahal  : TajMahal has the ability to steal data from the clipboard of an infected host.", "S0004": " TinyZBot  : TinyZBot contains functionality to collect information from the clipboard.", "S0257": " VERMIN  : VERMIN collects data stored in the clipboard.", "S0330": " Zeus Panda  : Zeus Panda can hook GetClipboardData function to watch for clipboard pastes to collect."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1115", "subtechniques": ["No sub-techniques"], "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "capecid": ["CAPEC-637"], "version": "1.1", "created": "31 May 2017", "lastmodified": "23 April 2020"}, {"techniquename": "Automated Collection", "detection": "Depending on the method used, actions could include common file system commands and parameters on the command-line interface within batch files or scripts. A sequence of actions like this may be unusual, depending on the system and network environment. Automated collection may occur along with other techniques such as . As such, file access monitoring that shows an unusual process performing sequential file opens and potentially copy actions to another location on the file system for many files at once may indicate automated collection behavior. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as  and .", "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. This technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Encryption and off-system storage of sensitive information may be one way to mitigate collection of files, but may not stop an adversary from acquiring the information if an intrusion persists over a long period of time and the adversary is able to discover and access the data through other means. Strong passwords should be used on certain encrypted documents that use them to prevent offline cracking through Brute Force techniques.", "M1029": " Remote Data Storage  : Encryption and off-system storage of sensitive information may be one way to mitigate collection of files, but may not stop an adversary from acquiring the information if an intrusion persists over a long period of time and the adversary is able to discover and access the data through other means."}, "procedureexamples": {"G0006": " APT1  : APT1 used a batch script to perform a series of discovery techniques and saves it to a text file.", "G0007": " APT28  : APT28 used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.", "S0438": " Attor  : Attor has automatically collected data about the compromised system.", "S0128": " BADNEWS  : BADNEWS monitors USB devices and copies files with certain extensions to a predefined directory.", "S0239": " Bankshot  : Bankshot recursively generates a list of files within a directory and sends them back to the control server.", "G0114": " Chimera  : Chimera has used custom DLLs for continuous retrieval of data from memory.", "S0244": " Comnie  : Comnie executes a batch script to store discovery information in %TEMP%\\info.dat and then uploads the temporarily file to the remote C2 server.", "S0538": " Crutch  : Crutch can automatically monitor removable drives in a loop and copy interesting files.", "G0053": " FIN5  : FIN5 scans processes on all victim systems in the environment and uses automated scripts to pull back the results.", "G0037": " FIN6  : FIN6 has used a script to iterate through a list of compromised PoS systems, copy and remove data to a log file, and to bind to events from the submit payment button.", "G0101": " Frankenstein  : Frankenstein has enumerated hosts via Empire, gathering the username, domain name, machine name, and other system information.", "G0047": " Gamaredon Group  : Gamaredon Group has deployed scripts on compromised systems that automatically scan for interesting documents.", "S0597": " GoldFinder  : GoldFinder logged and stored information related to the route or hops a packet took from a compromised machine to a hardcoded C2 server, including the target C2 URL, HTTP response/status code, HTTP response headers and values, and data received from the C2 node.  ", "S0170": " Helminth  : A Helminth VBScript receives a batch script to execute a set of commands in a command prompt.", "S0260": " InvisiMole  : InvisiMole can sort and collect specific documents as well as generate a list of all files on a newly inserted drive and store them in an encrypted file.", "S0395": " LightNeuron  : LightNeuron can be configured to automatically collect files under a specified directory.", "G0045": " menuPass  : menuPass has used the Csvde tool to collect Active Directory files and data.", "S0443": " MESSAGETAP  : MESSAGETAP checks two files, keyword_parm.txt and parm.txt, for instructions on how to target and save data parsed and extracted from SMS message data from the network traffic. If an SMS message contained either a phone number, IMSI number, or keyword that matched the predefined list, it is saved to a CSV file for later theft by the threat actor.", "S0455": " Metamorfo  : Metamorfo has automatically collected mouse clicks, continuous screenshots on the machine, and set timers to collect the contents of the clipboard and website browsing. ", "S0339": " Micropsia  : Micropsia executes an RAR tool to recursively archive files based on a predefined list of file extensions (.xlsx, .odt, .docx, .pptx, .mdb, .accde, *.txt).", "G0129": " Mustang Panda  : Mustang Panda used custom batch scripts to collect files automatically from a targeted system.", "S0198": " NETWIRE  : NETWIRE can automatically archive collected data.", "G0049": " OilRig  : OilRig has used automated collection.", "G0116": " Operation Wocao  : Operation Wocao has used a script to collect information about the infected system.", "G0040": " Patchwork  : Patchwork developed a file stealer to search C:\\ and collect files with certain extensions. Patchwork also executed a script to enumerate all drives, store them as a list, and upload generated files to the C2 server.", "S0428": " PoetRAT  : PoetRAT used file system monitoring to track modification and enable automatic exfiltration.", "S0378": " PoshC2  : PoshC2 contains a module for recursively parsing through files and directories to gather valid credit card numbers.", "S0238": " Proxysvc  : Proxysvc automatically collects data about the victim and sends it to the control server.", "S0458": " Ramsay  : Ramsay can conduct an initial scan for Microsoft Word documents on the local system, removable media, and connected network drives, before tagging and collecting them. It can continue tagging documents to collect with follow up scans.   ", "S0090": " Rover  : Rover automatically collects files from the local system and removable drives based on a predefined list of file extensions on a regular timeframe.", "S0148": " RTM  : RTM monitors browsing activity and automatically captures screenshots if a victim browses to a URL matching one of a list of strings.", "S0445": " ShimRatReporter  : ShimRatReporter gathered information automatically, without instruction from a C2, related to the user and host machine that is compiled into a report and sent to the operators.", "G0121": " Sidewinder  : Sidewinder has used tools to automatically collect system and network configuration information.", "S0491": " StrongPity  : StrongPity has a file searcher component that can automatically collect and archive files based on a predefined list of file extensions.", "S0098": " T9000  : T9000 searches removable storage devices for files with a pre-defined list of file extensions (e.g. * .doc, .xls, .pptx, *.xlsx). Any matching files are encrypted and written to a local user directory.", "S0467": " TajMahal  : TajMahal has the ability to index and compress files into a send queue for exfiltration.", "G0027": " Threat Group-3390  : Threat Group-3390 ran a command to compile an archive of file types of interest from the victim user's directories.", "G0081": " Tropic Trooper  : Tropic Trooper has collected information automatically using the adversary's USBferry attack. ", "S0136": " USBStealer  : For all non-removable drives on a victim, USBStealer executes automated collection of certain files for later exfiltration.", "S0476": " Valak  : Valak can download a module to search for and build a report of harvested credential data.", "S0257": " VERMIN  : VERMIN saves each collected file with the automatically generated format {{0:dd-MM-yyyy}}.txt .", "S0466": " WindTail  : WindTail can identify and add files that possess specific file extensions to an array for archiving.", "S0251": " Zebrocy  : Zebrocy scans the system and automatically collects files with the following extensions: .doc, .docx, ,.xls, .xlsx, .pdf, .pptx, .rar, .zip, .jpg, .jpeg, .bmp, .tiff, .kum, .tlg, .sbx, .cr, .hse, .hsf, and .lhz."}, "id": "T1119", "subtechniques": ["No sub-techniques"], "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Permissions to access directories and files that store information of interest."], "permissionsrequired": ["User"], "version": "1.0", "created": "31 May 2017", "lastmodified": "31 March 2020"}, {"techniquename": "Data from Cloud Storage Object", "detection": "Monitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set that is allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity.", "description": "Adversaries may access data objects from improperly secured cloud storage.Many cloud service providers offer solutions for online data storage such as Amazon S3, Azure Storage, and Google Cloud Storage. These solutions differ from other storage solutions (such as SQL or Elasticsearch) in that there is no overarching application. Data from these solutions can be retrieved directly using the cloud provider's APIs. Solution providers typically offer security guides to help end users configure systems.Misconfiguration by end users is a common problem. There have been numerous incidents where cloud storage has been improperly secured (typically by unintentionally allowing public access by unauthenticated users or overly-broad access by all users), allowing open access to credit cards, personally identifiable information, medical records, and other sensitive information. Adversaries may also obtain leaked credentials in source repositories, logs, or other means as a way to gain access to cloud storage objects that have access permission controls.", "mitigations": {"M1047": " Audit  : Frequently check permissions on cloud storage to ensure proper permissions are set to deny open or unprivileged access to resources.", "M1041": " Encrypt Sensitive Information  : Encrypt data stored at rest in cloud storage. Managed encryption keys can be rotated by most providers. At a minimum, ensure an incident response plan to storage breach includes rotating the keys and test for impact on client applications.", "M1037": " Filter Network Traffic  : Cloud service providers support IP-based restrictions when accessing cloud resources. Consider using IP allowlisting along with user account management to ensure that data access is restricted not only to valid users but only from expected IP ranges to mitigate the use of stolen credentials to access data.", "M1032": " Multi-factor Authentication  : Consider using multi-factor authentication to restrict access to resources and cloud storage APIs.", "M1022": " Restrict File and Directory Permissions  : Use access control lists on storage systems and objects.", "M1018": " User Account Management  : Configure user permissions groups and roles for access to cloud storage. Implement strict Identity and Access Management (IAM) controls to prevent access to storage solutions except for the applications, users, and services that require access. Ensure that temporary access tokens are issued rather than permanent credentials, especially when access is being granted to entities outside of the internal security boundary."}, "procedureexamples": {"G0117": " Fox Kitten  : Fox Kitten has obtained files from the victim's cloud storage instances."}, "id": "T1530", "subtechniques": ["No sub-techniques"], "tactics": ["Collection"], "platforms": ["IaaS"], "permissionsrequired": ["User"], "contributors": ["Netskope; Praetorian"], "version": "1.1", "created": "30 August 2019", "lastmodified": "08 March 2021"}, {"techniquename": "Data from Configuration Repository", "detection": "Identify network traffic sent or received by untrusted hosts or networks that solicits and obtains the configuration information of the queried device.", "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.Adversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Configure SNMPv3 to use the highest level of security (authPriv) available.", "M1037": " Filter Network Traffic  : Apply extended ACLs to block unauthorized protocols outside the trusted network.", "M1031": " Network Intrusion Prevention  : Configure intrusion prevention devices to detect SNMP queries and commands from unauthorized sources.", "M1030": " Network Segmentation  : Segregate SNMP traffic on a separate management network.", "M1054": " Software Configuration  : Allowlist MIB objects and implement SNMP views.", "M1051": " Update Software  : Keep system images and software updated and migrate to SNMPv3."}, "id": "T1602", "subtechniques": ["T1602.001", "T1602.002"], "tactics": ["Collection"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "19 October 2020", "lastmodified": "22 October 2020"}, {"techniquename": "SNMP (MIB Dump)", "detection": "Identify network traffic sent or received by untrusted hosts or networks that expose MIB content or use unauthorized protocols.", "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).The MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages. The MIB may also contain device operational information, including running configuration, routing table, and interface details.Adversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation. ", "mitigations": {"M1041": " Encrypt Sensitive Information  : Configure SNMPv3 to use the highest level of security (authPriv) available.", "M1037": " Filter Network Traffic  : Apply extended ACLs to block unauthorized protocols outside the trusted network.", "M1031": " Network Intrusion Prevention  : Configure intrusion prevention devices to detect SNMP queries and commands from unauthorized sources.", "M1030": " Network Segmentation  : Segregate SNMP traffic on a separate management network.", "M1054": " Software Configuration  : Allowlist MIB objects and implement SNMP views.", "M1051": " Update Software  : Keep system images and software updated and migrate to SNMPv3."}, "id": "T1602.001", "subtechniqueof": "T1602", "tactics": ["Collection"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "19 October 2020", "lastmodified": "22 October 2020"}, {"techniquename": "Browser Session Hijacking", "detection": "This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. New processes may not be created and no additional software dropped to disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for  against browser applications.", "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.A specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as  and/or high-integrity/administrator rights.Another example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.", "mitigations": {"M1018": " User Account Management  : Since browser pivoting requires a high integrity process to launch from, restricting user permissions and addressing Privilege Escalation and Bypass User Account Control opportunities can limit the exposure to this technique.", "M1017": " User Training  : Close all browser sessions regularly and when they are no longer needed."}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has the ability to use form-grabbing to extract data from web data forms.", "S0484": " Carberp  : Carberp has captured credentials when a user performs login through a SSL session.", "S0631": " Chaes  : Chaes has used the Puppeteer module to hook and monitor the Chrome web browser to collect user information from infected hosts.", "S0154": " Cobalt Strike  : Cobalt Strike can perform browser pivoting and inject into a user's browser to inherit cookies, authenticated HTTP sessions, and client SSL certificates.", "S0384": " Dridex  : Dridex can perform browser attacks via web injects to steal information such as credentials, certificates, and cookies.", "S0531": " Grandoreiro  : Grandoreiro can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields.", "S0483": " IcedID  : IcedID has used web injection attacks to redirect victims to spoofed sites designed to harvest banking and other credentials.  IcedID can use a self signed TLS certificate in connection with the spoofed site and simultaneously maintains a live connection with the legitimate site to display the correct URL and certificates in the browser.", "S0530": " Melcoz  : Melcoz can monitor the victim's browser for online banking sessions and display an overlay window to manipulate the session in the background.", "S0650": " QakBot  : QakBot can use advanced web injects to steal web banking credentials.", "S0266": " TrickBot  : TrickBot uses web injects and browser redirection to trick the user into providing their login credentials on a fake or modified web page.", "S0386": " Ursnif  : Ursnif has injected HTML codes into banking sites to steal sensitive online banking information (ex: usernames and passwords)."}, "id": "T1185", "subtechniques": ["No sub-techniques"], "tactics": ["Collection"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["Justin Warner, ICEBRG"], "version": "2.0", "created": "16 January 2018", "lastmodified": "18 October 2021"}, {"techniquename": "Archive Collected Data", "detection": "Archival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.A process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures.Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.", "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.", "mitigations": {"M1047": " Audit  : System scans can be performed to identify unauthorized archival utilities."}, "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL encrypts with the 3DES algorithm and a hardcoded key prior to exfiltration.", "S0331": " Agent Tesla  : Agent Tesla can encrypt data with 3DES before sending it over to a C2 server.", "G0007": " APT28  : APT28 used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.", "G0050": " APT32  : APT32's backdoor has used LZMA compression and RC4 encryption before exfiltration.", "S0456": " Aria-body  : Aria-body has used ZIP to compress data gathered on a compromised host.", "S0093": " Backdoor.Oldrea  : Backdoor.Oldrea writes collected data to a temporary file in an encrypted form before exfiltration to a C2 server.", "S0521": " BloodHound  : BloodHound can compress data collected by its SharpHound ingestor into a ZIP file to be written to disk.", "S0657": " BLUELIGHT  : BLUELIGHT can zip files before exfiltration.", "S0454": " Cadelspy  : Cadelspy has the ability to compress stolen data into a .cab file.", "S0187": " Daserf  : Daserf hides collected data in password-protected .rar archives.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 compressed data into .zip files prior to exfiltrating it.", "S0567": " Dtrack  : Dtrack packs collected data into a password protected archive.", "S0367": " Emotet  : Emotet has been observed encrypting the data it collects before sending it to the C2 server. ", "S0363": " Empire  : Empire can ZIP directories on the target system.", "S0091": " Epic  : Epic encrypts collected data using a public key framework before sending it over the C2 channel. Some variants encrypt the collected data with AES and encode it with base64 before transmitting it to the C2 server.", "S0343": " Exaramel for Windows  : Exaramel for Windows automatically encrypts files before sending them to the C2 server. ", "S0267": " FELIXROOT  : FELIXROOT encrypts collected data with AES and Base64 and then sends it to the C2 server.", "G0037": " FIN6  : Following data collection, FIN6 has compressed log files into a ZIP archive prior to staging and exfiltration.", "S0249": " Gold Dragon  : Gold Dragon encrypts data using Base64 before being sent to the command and control server.", "G0072": " Honeybee  : Honeybee adds collected files to a temp.zip file saved in the %temp% folder, then base64 encodes it and uploads it to control server.", "G0004": " Ke3chang  : The Ke3chang group has been known to compress data before exfiltration.", "S0487": " Kessel  : Kessel can RC4-encrypt credentials before sending to the C2.   ", "G0032": " Lazarus Group  : Lazarus Group malware RomeoDelta archives specified directories in .zip format, encrypts the .zip file, and uploads it to its C2 server. ", "G0065": " Leviathan  : Leviathan has archived victim's data prior to exfiltration.", "S0395": " LightNeuron  : LightNeuron contains a function to encrypt and store emails that it collects.", "S0010": " Lurid  : Lurid can compress data before sending it.", "S0409": " Machete  : Machete stores zipped files with profile data from installed web browsers. ", "G0045": " menuPass  : menuPass has encrypted files and information before exfiltration.", "S0198": " NETWIRE  : NETWIRE has the ability to compress archived screenshots.", "G0040": " Patchwork  : Patchwork encrypted the collected files' path with AES and then encoded them with base64.", "S0517": " Pillowmint  : Pillowmint has encrypted stolen credit card information with AES and further encoded it with Base64.   ", "S0113": " Prikormka  : After collecting documents from removable media, Prikormka compresses the collected files, and encrypts it with Blowfish.", "S0279": " Proton  : Proton zips up files before exfiltrating them.", "S0375": " Remexi  : Remexi encrypts and adds all gathered browser data into files for upload to C2.", "S0253": " RunningRAT  : RunningRAT contains code to compress files.", "S0445": " ShimRatReporter  : ShimRatReporter used LZ compression to compress initial reconnaissance reports before sending to the C2.   ", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE has used  to compress a file and send to C2.", "S0257": " VERMIN  : VERMIN encrypts the collected files using 3-DES.", "S0515": " WellMail  : WellMail can archive files on the compromised host.", "S0658": " XCSSET  : XCSSET will compress entire  folders excluding all  folders, but only if the total data size is under 200MB.", "S0251": " Zebrocy  : Zebrocy  has used a method similar to RC4 as well as AES for encryption and hexadecimal for encoding data before exfiltration.  "}, "id": "T1560", "subtechniques": ["T1560.001", "T1560.002", "T1560.003"], "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "20 February 2020", "lastmodified": "21 October 2020"}, {"techniquename": "Archive via Utility", "detection": "Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.", "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip, WinRAR, and WinZip. Most utilities include functionality to encrypt and/or compress data.Some 3rd party utilities may be preinstalled, such as  on Linux and macOS or  on Windows systems.", "mitigations": {"M1047": " Audit  : System scans can be performed to identify unauthorized archival utilities."}, "procedureexamples": {"S0622": " AppleSeed  : AppleSeed can zip and encrypt data collected on a target system.", "G0006": " APT1  : APT1 has used RAR to compress files before moving them outside of the victim network.", "G0007": " APT28  : APT28 has used a variety of utilities, including WinRAR, to archive collected data with password protection.", "G0016": " APT29  : APT29 used 7-Zip to compress stolen emails into password-protected archives prior to exfiltration.", "G0022": " APT3  : APT3 has used tools to compress data before exfilling it.", "G0064": " APT33  : APT33 has used WinRAR to compress data prior to exfil.  ", "G0087": " APT39  : APT39 has used WinRAR and 7-Zip to compress an archive stolen data.", "G0096": " APT41  : APT41 created a RAR archive of targeted files for exfiltration.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has compressed data into password-protected RAR archives prior to exfiltration.", "S0274": " Calisto  : Calisto uses the  command to compress the data collected on the local system.", "G0114": " Chimera  : Chimera has used gzip for Linux OS and a modified RAR software to archive data on Windows hosts.", "G0052": " CopyKittens  : CopyKittens uses ZPP, a .NET console program, to compress files with ZIP.", "S0212": " CORALDECK  : CORALDECK has created password-protected RAR, WinImage, and zip archives to be exfiltrated.", "S0538": " Crutch  : Crutch has used the WinRAR utility to compress and encrypt stolen files.", "S0187": " Daserf  : Daserf hides collected data in password-protected .rar archives.", "S0062": " DustySky  : DustySky can compress files via RAR while staging data to be exfiltrated.", "G0061": " FIN8  : FIN8 has used RAR to compress collected data before exfiltration.", "G0117": " Fox Kitten  : Fox Kitten has used 7-Zip to archive data.", "G0093": " GALLIUM  : GALLIUM used WinRAR to compress and encrypt stolen data prior to exfiltration.", "G0084": " Gallmaker  : Gallmaker has used WinZip, likely to archive data prior to exfiltration.", "G0125": " HAFNIUM  : HAFNIUM has used 7-Zip and WinRAR to compress stolen files for exfiltration.", "S0278": " iKitten  : iKitten will zip up the /Library/Keychains directory before exfiltrating it.", "S0260": " InvisiMole  : InvisiMole uses WinRAR to compress data that is intended to be exfiltrated.", "G0004": " Ke3chang  : Ke3chang is known to use RAR with passwords to encrypt data prior to exfiltration.", "G0059": " Magic Hound  : Magic Hound has used RAR to stage and compress local folders.", "G0045": " menuPass  : menuPass has compressed files before exfiltration using TAR and RAR.", "S0339": " Micropsia  : Micropsia creates a RAR archive based on collected files on the victim's machine.", "G0069": " MuddyWater  : MuddyWater has used the native Windows cabinet creation tool, makecab.exe, likely to compress stolen data to be uploaded.", "G0129": " Mustang Panda  : Mustang Panda has used RAR to create password-protected archives of collected documents prior to exfiltration.", "S0340": " Octopus  : Octopus has compressed data before exfiltrating it using a tool called Abbrevia. ", "S0439": " Okrum  : Okrum was seen using a RAR archiver tool to compress/decompress data.", "S0264": " OopsIE  : OopsIE compresses collected files with GZipStream before sending them to its C2 server.", "G0116": " Operation Wocao  : Operation Wocao has archived collected files with WinRAR, prior to exfiltration.", "S0428": " PoetRAT  : PoetRAT has the ability to compress files with zip.", "S0378": " PoshC2  : PoshC2 contains a module for compressing data using ZIP.", "S0441": " PowerShower  : PowerShower has used 7Zip to compress .txt, .pdf, .xls or .doc files prior to exfiltration.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY has Gzipped information and saved it to a random temp file before exfil.  ", "S0192": " Pupy  : Pupy can compress data with Zip before sending it over C2.", "S0458": " Ramsay  : Ramsay can compress and archive collected files using WinRAR.", "G0054": " Sowbug  : Sowbug extracted documents and bundled them into a RAR archive.", "S0647": " Turian  : Turian can use WinRAR to create a password-protected archive for files of interest.", "G0010": " Turla  : Turla has encrypted files stolen from connected USB drives into a RAR file before exfiltration.", "S0466": " WindTail  : WindTail has the ability to use the macOS built-in zip utility to archive files."}, "id": "T1560.001", "subtechniqueof": "T1560", "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "20 February 2020", "lastmodified": "25 March 2020"}, {"techniquename": "Archive via Library", "detection": "Monitor processes for accesses to known archival libraries. This may yield a significant number of benign events, depending on how systems in the environment are typically used.Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.", "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data.Some archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.", "procedureexamples": {"S0642": " BADFLICK  : BADFLICK has compressed data using the aPLib compression library.", "S0127": " BBSRAT  : BBSRAT can compress data with ZLIB prior to sending it back to the C2 server.", "S0348": " Cardinal RAT  : Cardinal RAT applies compression to C2 traffic using the ZLIB library.", "S0354": " Denis  : Denis compressed collected data using zlib.", "S0091": " Epic  : Epic compresses the collected data with bzip2 before sending it to the C2 server.", "S0260": " InvisiMole  : InvisiMole can use zlib to compress and decompress data.", "G0032": " Lazarus Group  : Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is compressed with Zlib, encrypted, and uploaded to a C2 server.", "S0053": " SeaDuke  : SeaDuke compressed data with zlib prior to sending it over C2.", "S0467": " TajMahal  : TajMahal has the ability to use the open source libraries XZip/Xunzip and zlib to compress files.", "G0027": " Threat Group-3390  : Threat Group-3390 has used RAR to compress, encrypt, and password-protect files prior to exfiltration.", "S0086": " ZLib  : The ZLib backdoor compresses communications using the standard Zlib compression library."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1560.002", "subtechniqueof": "T1560", "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "20 February 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Archive via Custom Method", "detection": "Custom archival methods can be very difficult to detect, since many of them use standard programming language concepts, such as bitwise operations.", "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.", "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL compresses output data generated by command execution with a custom implementation of the Lempel\u2013Ziv\u2013Welch (LZW) algorithm.", "S0092": " Agent.btz  : Agent.btz saves system information into an XML file that is then XOR-encoded.", "S0438": " Attor  : Attor encrypts collected data with a custom implementation of Blowfish and RSA ciphers.", "S0657": " BLUELIGHT  : BLUELIGHT has encoded data into a binary blob using XOR.", "G0052": " CopyKittens  : CopyKittens encrypts data with a substitute cipher prior to exfiltration.", "S0038": " Duqu  : Modules can be pushed to and executed by Duqu that copy data to a staging area, compress it, and XOR encrypt it.", "G0037": " FIN6  : FIN6 has encoded data gathered from the victim with a simple substitution cipher and single-byte XOR using the 0xAA key, and Base64 with character permutation.", "S0036": " FLASHFLOOD  : FLASHFLOOD employs the same encoding scheme as SPACESHIP for data it stages. Data is compressed with zlib, and bytes are rotated four times before being XOR'ed with 0x23.", "S0503": " FrameworkPOS  : FrameworkPOS can XOR credit card information before exfiltration.", "S0391": " HAWKBALL  : HAWKBALL has encrypted data with XOR before sending it over the C2 channel.", "S0260": " InvisiMole  : InvisiMole uses a variation of the XOR cipher to encrypt files before exfiltration.", "G0094": " Kimsuky  : Kimsuky has used RC4 encryption before exfil.", "G0032": " Lazarus Group  : A Lazarus Group malware sample encrypts data using a simple byte based XOR operation prior to exfiltration.", "S0409": " Machete  : Machete's collected data is encrypted with AES before exfiltration. ", "S0443": " MESSAGETAP  : MESSAGETAP has XOR-encrypted and stored contents of SMS messages that matched its target list. ", "G0129": " Mustang Panda  : Mustang Panda has encrypted documents with RC4 prior to exfiltration.", "S0198": " NETWIRE  : NETWIRE has used a custom encryption algorithm to encrypt collected data.", "S0439": " Okrum  : Okrum has used a custom implementation of AES encryption to encrypt collected data.", "S0264": " OopsIE  : OopsIE compresses collected files with a simple character replacement scheme before sending them to its C2 server.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D scrambles and encrypts data using AES256 before sending it to the C2 server.", "S0072": " OwaAuth  : OwaAuth DES-encrypts captured credentials using the key 12345678 before writing the credentials to a log file.", "S0458": " Ramsay  : Ramsay can store collected documents in a custom container after encrypting and compressing them using RC4 and WinRAR.", "S0169": " RawPOS  : RawPOS encodes credit card data it collected from the victim with XOR.", "S0172": " Reaver  : Reaver encrypts collected data with an incremental XOR key prior to exfiltration.", "S0258": " RGDoor  : RGDoor encrypts files with XOR before sending them back to the C2 server.", "S0448": " Rising Sun  : Rising Sun can archive data using RC4 encryption and Base64 encoding prior to exfiltration. ", "S0035": " SPACESHIP  : Data SPACESHIP copies to the staging area is compressed with zlib. Bytes are rotated by four positions and XOR'ed with 0x23.", "S0491": " StrongPity  : StrongPity can compress and encrypt archived files into multiple .sft files with a repeated xor encryption scheme.", "S0603": " Stuxnet  : Stuxnet encrypts exfiltrated data via C2 with static 31-byte long XOR keys.", "S0098": " T9000  : T9000 encrypts collected data using a single byte XOR key."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1560.003", "subtechniqueof": "T1560", "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "20 February 2020", "lastmodified": "25 March 2020"}, {"techniquename": "Audio Capture", "detection": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.", "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.", "procedureexamples": {"G0067": " APT37  : APT37 has used an audio capturing utility known as SOUNDWAVE that captures microphone input.", "S0438": " Attor  : Attor's has a plugin that is capable of recording audio using available input sound devices.", "S0234": " Bandook  : Bandook has modules that are capable of capturing audio.", "S0454": " Cadelspy  : Cadelspy has the ability to record audio from the compromised host.", "S0338": " Cobian RAT  : Cobian RAT has a feature to perform voice recording on the victim\u2019s machine.", "S0115": " Crimson  : Crimson can perform audio surveillance using microphones.", "S0334": " DarkComet  : DarkComet can listen in to victims' conversations through the system\u2019s microphone.", "S0021": " Derusbi  : Derusbi is capable of performing audio captures.", "S0213": " DOGCALL  : DOGCALL can capture microphone data from the victim's machine.", "S0152": " EvilGrab  : EvilGrab has the capability to capture audio from a victim machine.", "S0143": " Flame  : Flame can record audio using any existing hardware recording devices.", "S0434": " Imminent Monitor  : Imminent Monitor has a remote microphone monitoring capability.", "S0260": " InvisiMole  : InvisiMole can record sound using input audio devices.", "S0163": " Janicab  : Janicab captured audio and sent it out to a C2 server.", "S0283": " jRAT  : jRAT can capture microphone recordings.", "S0409": " Machete  : Machete captures audio from the computer\u2019s microphone.", "S0282": " MacSpy  : MacSpy can record the sounds from microphones on a computer.", "S0339": " Micropsia  : Micropsia can perform microphone recording.", "S0336": " NanoCore  : NanoCore can capture audio feeds from the system.", "S0194": " PowerSploit  : PowerSploit's  Exfiltration module can record system microphone audio.", "S0192": " Pupy  : Pupy can record sound with the microphone.", "S0332": " Remcos  : Remcos can capture data from the system\u2019s microphone.", "S0379": " Revenge RAT  : Revenge RAT has a plugin for microphone interception.", "S0240": " ROKRAT  : ROKRAT has a audio capture and eavesdropping module.", "S0098": " T9000  : T9000 uses the Skype API to record audio and video calls. It writes encrypted data to .", "S0467": " TajMahal  : TajMahal has the ability to capture VoiceIP application audio on an infected host.", "S0257": " VERMIN  : VERMIN can perform audio capture."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1123", "subtechniques": ["No sub-techniques"], "tactics": ["Collection"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-634"], "version": "1.0", "created": "31 May 2017", "lastmodified": "14 July 2020"}, {"techniquename": "Taint Shared Content", "detection": "Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques.Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.", "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses Shortcut Modification of directory .LNK files that use Masquerading to look like the real directories, which are hidden through Hidden Files and Directories. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. Adversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.", "mitigations": {"M1038": " Execution Prevention  : Identify potentially malicious software that may be used to taint content or may result from it and audit and/or block the unknown programs by using application control  tools, like AppLocker,   or Software Restriction Policies  where appropriate. ", "M1050": " Exploit Protection  : Use utilities that detect or mitigate common features used in exploitation, such as the Microsoft Enhanced Mitigation Experience Toolkit (EMET).", "M1022": " Restrict File and Directory Permissions  : Protect shared folders by minimizing users who have write access."}, "procedureexamples": {"G0060": " BRONZE BUTLER  : BRONZE BUTLER has placed malware on file shares and given it the same name as legitimate documents on the share.", "S0575": " Conti  : Conti can spread itself by infecting other remote machines via network shared drives. ", "G0012": " Darkhotel  : Darkhotel used a virus that propagates by infecting executables stored on shared drives.", "G0047": " Gamaredon Group  : Gamaredon Group has injected malicious macros into all Word and Excel documents on mapped network drives.", "S0132": " H1N1  : H1N1 has functionality to copy itself to network shares.", "S0260": " InvisiMole  : InvisiMole can replace legitimate software or documents in the compromised network with their trojanized versions, in an attempt to propagate itself within the network.", "S0133": " Miner-C  : Miner-C copies itself into the public folder of Network Attached Storage (NAS) devices and infects new victims who open the file.", "S0458": " Ramsay  : Ramsay can spread itself by infecting other portable executable files on networks shared drives. ", "S0603": " Stuxnet  : Stuxnet infects remote servers via network shares and by infecting WinCC database views with malicious code.", "S0386": " Ursnif  : Ursnif has copied itself to and infected files in network drives for propagation."}, "id": "T1080", "subtechniques": ["No sub-techniques"], "tactics": ["Lateral Movement"], "platforms": ["Linux, Office 365, SaaS, Windows, macOS"], "systemrequirements": ["Access to shared folders and content with write permissions"], "permissionsrequired": ["User"], "capecid": ["CAPEC-562"], "contributors": ["David Routin; Michal Dida, ESET"], "version": "1.3", "created": "31 May 2017", "lastmodified": "17 October 2021"}, {"techniquename": "Windows Remote Management", "detection": "Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior.  Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events. Also monitor for remote WMI connection attempts (typically over port 5985 when using HTTP and 5986 for HTTPS).", "description": "Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.WinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the  command or by any number of programs such as PowerShell. WinRM  can be used as a method of remotely interacting with Windows Management Instrumentation.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable the WinRM service.", "M1030": " Network Segmentation  : If the service is necessary, lock down critical enclaves with separate WinRM infrastructure and follow WinRM best practices on use of host firewalls to restrict WinRM access to allow communication only to/from specific devices.", "M1026": " Privileged Account Management  : If the service is necessary, lock down critical enclaves with separate WinRM accounts and permissions."}, "procedureexamples": {"G0016": " APT29  : APT29 has used WinRM via PowerShell to execute command and payloads on remote hosts.", "G0114": " Chimera  : Chimera has used WinRM for lateral movement.", "S0154": " Cobalt Strike  : Cobalt Strike can use  to execute a payload on a remote host.", "G0027": " Threat Group-3390  : Threat Group-3390 has used WinRM to enable remote execution.", "G0102": " Wizard Spider  : Wizard Spider has used Window Remote Management to move laterally through a victim network."}, "id": "T1021.006", "subtechniqueof": "T1021", "tactics": ["Lateral Movement"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "version": "1.1", "created": "11 February 2020", "lastmodified": "23 June 2021"}, {"techniquename": "RDP Hijacking", "detection": "Consider monitoring processes for  usage and monitor service creation that uses  or  in its arguments to detect RDP session hijacking.Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.", "description": "Adversaries may hijack a legitimate user\u2019s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).Adversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console, , an adversary can hijack a session without the need for credentials or prompts to the user. This can be done remotely or locally and with active or disconnected sessions. It can also lead to Remote System Discovery and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.", "mitigations": {"M1047": " Audit  : Audit the Remote Desktop Users group membership regularly. Remove unnecessary accounts and groups from Remote Desktop Users groups.", "M1042": " Disable or Remove Feature or Program  : Disable the RDP service if it is unnecessary.", "M1035": " Limit Access to Resource Over Network  : Use remote desktop gateways.", "M1030": " Network Segmentation  : Enable firewall rules to block RDP traffic between network security zones within a network.", "M1028": " Operating System Configuration  : Change GPOs to define shorter timeouts sessions and maximum amount of time any single session can be active. Change GPOs to specify the maximum amount of time that a disconnected session stays active on the RD session host server.", "M1026": " Privileged Account Management  : Consider removing the local Administrators group from the list of groups allowed to log in through RDP.", "M1018": " User Account Management  : Limit remote user permissions if remote access is necessary."}, "procedureexamples": {"S0366": " WannaCry  : WannaCry enumerates current remote desktop sessions and tries to execute the malware on each session."}, "id": "T1563.002", "subtechniqueof": "T1563", "tactics": ["Lateral Movement"], "platforms": ["Windows"], "permissionsrequired": ["SYSTEM"], "version": "1.0", "created": "25 February 2020", "lastmodified": "23 March 2020"}, {"techniquename": "Remote Services", "detection": "Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through Discovery techniques prior to attempting Lateral Movement. Use of applications such as ARD may be legitimate depending on the environment and how it\u2019s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior using these applications. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. In macOS, you can review logs for \"screensharingd\" and \"Authentication\" event messages. Monitor network connections regarding remote management (ports tcp:3283 and tcp:5900) and for remote login (port tcp:22).", "description": "Adversaries may use Valid Accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).Legitimate applications (such as Software Deployment Tools and other administrative programs) may utilize Remote Services to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including VNC to send the screen and control buffers and SSH for secure file transfer. Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication on remote service logons where possible.", "M1018": " User Account Management  : Limit the accounts that may use remote services. Limit the permissions for accounts that are at higher risk of compromise; for example, configure SSH so users can only run specific programs."}, "procedureexamples": {"S0437": " Kivars  : Kivars has the ability to remotely trigger keyboard input and mouse clicks. ", "S0603": " Stuxnet  : Stuxnet can propagate via peer-to-peer communication and updates using RPC."}, "id": "T1021", "subtechniques": ["T1021.001", "T1021.002", "T1021.003", "T1021.004", "T1021.005", "T1021.006"], "tactics": ["Lateral Movement"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Active remote service accepting connections and valid credentials"], "capecid": ["CAPEC-555"], "contributors": ["Dan Borges, @1njection"], "version": "1.2", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Remote Desktop Protocol", "detection": "Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.", "description": "Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features technique for Persistence.", "mitigations": {"M1047": " Audit  : Audit the Remote Desktop Users group membership regularly. Remove unnecessary accounts and groups from Remote Desktop Users groups.", "M1042": " Disable or Remove Feature or Program  : Disable the RDP service if it is unnecessary.", "M1035": " Limit Access to Resource Over Network  : Use remote desktop gateways.", "M1032": " Multi-factor Authentication  : Use multi-factor authentication for remote logins.", "M1030": " Network Segmentation  : Do not leave RDP accessible from the internet. Enable firewall rules to block RDP traffic between network security zones within a network.", "M1028": " Operating System Configuration  : Change GPOs to define shorter timeouts sessions and maximum amount of time any single session can be active. Change GPOs to specify the maximum amount of time that a disconnected session stays active on the RD session host server.", "M1026": " Privileged Account Management  : Consider removing the local Administrators group from the list of groups allowed to log in through RDP.", "M1018": " User Account Management  : Limit remote user permissions if remote access is necessary."}, "procedureexamples": {"G0006": " APT1  : The APT1 group is known to have used RDP during operations.", "G0022": " APT3  : APT3 enables the Remote Desktop Protocol for persistence. APT3 has also interacted with compromised systems to browse and copy files through RDP sessions.", "G0087": " APT39  : APT39 has been seen using RDP for lateral movement and persistence, in some cases employing the rdpwinst tool for mangement of multiple sessions.", "G0096": " APT41  : APT41 used RDP for lateral movement.", "G0001": " Axiom  : The Axiom group is known to have used RDP during operations.", "G0108": " Blue Mockingbird  : Blue Mockingbird has used Remote Desktop to log on to servers interactively and manually copy files to remote hosts.", "S0030": " Carbanak  : Carbanak enables concurrent Remote Desktop Protocol (RDP) sessions.", "G0114": " Chimera  : Chimera has used RDP to access targeted systems.", "G0080": " Cobalt Group  : Cobalt Group has used Remote Desktop Protocol to conduct lateral movement.", "S0154": " Cobalt Strike  : Cobalt Strike can start a VNC-based remote desktop server and tunnel the connection through the already established C2 channel.", "S0334": " DarkComet  : DarkComet can open an active screen of the victim\u2019s machine and take control of the mouse and keyboard.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 moved laterally via RDP.", "G0051": " FIN10  : FIN10 has used RDP to move laterally to systems in the victim environment.", "G0037": " FIN6  : FIN6 used RDP to move laterally in victim networks.", "G0046": " FIN7  : FIN7 has used RDP to move laterally in victim environments.", "G0061": " FIN8  : FIN8 has used RDP for lateral movement.", "G0117": " Fox Kitten  : Fox Kitten has used RDP to log in and move laterally in the target environment.", "S0434": " Imminent Monitor  : Imminent Monitor has a module for performing remote desktop access.", "S0283": " jRAT  : jRAT can support RDP control.", "G0094": " Kimsuky  : Kimsuky has used RDP for direct remote point-and-click access.", "S0250": " Koadic  : Koadic can enable remote desktop on the victim's machine.", "G0032": " Lazarus Group  : Lazarus Group malware SierraCharlie uses RDP for propagation.", "G0065": " Leviathan  : Leviathan has targeted RDP credentials and used it to move through the victim environment. ", "G0045": " menuPass  : menuPass has used RDP connections to move across the victim network.", "S0385": " njRAT  : njRAT has a module for performing remote desktop access.", "G0049": " OilRig  : OilRig has used Remote Desktop Protocol for lateral movement. The group has also used tunneling tools to tunnel RDP into the environment.", "G0040": " Patchwork  : Patchwork attempted to use RDP to move laterally.", "S0192": " Pupy  : Pupy can enable/disable RDP connection and can start a remote desktop session using a browser web socket client.", "S0583": " Pysa  : Pysa has laterally moved using RDP connections. ", "S0262": " QuasarRAT  : QuasarRAT has a module for performing remote desktop access.", "S0379": " Revenge RAT  : Revenge RAT has a plugin to perform RDP access.", "S0461": " SDBbot  : SDBbot has the ability to use RDP to connect to victim's machines.", "S0382": " ServHelper  : ServHelper has commands for adding a remote desktop user and sending RDP traffic to the attacker through a reverse SSH tunnel.", "G0091": " Silence  : Silence has used RDP for lateral movement.   ", "G0088": " TEMP.Veles  : TEMP.Veles utilized RDP throughout an operation.    ", "G0102": " Wizard Spider  : Wizard Spider has used RDP for lateral movement.", "S0350": " zwShell  : zwShell has used RDP for lateral movement.", "S0412": " ZxShell  : ZxShell has remote desktop functionality. "}, "id": "T1021.001", "subtechniqueof": "T1021", "tactics": ["Lateral Movement"], "platforms": ["Windows"], "systemrequirements": ["RDP service enabled, account in the Remote Desktop Users group"], "permissionsrequired": ["Remote Desktop Users, User"], "capecid": ["CAPEC-555"], "contributors": ["Matthew Demaske, Adaptforward"], "version": "1.0", "created": "11 February 2020", "lastmodified": "25 February 2020"}, {"techniquename": "SMB/Windows Admin Shares", "detection": "Ensure that proper logging of accounts used to log into systems is turned on and centrally collected. Windows logging is able to collect success/failure for accounts that may be used to move laterally and can be collected using tools such as Windows Event Forwarding.  Monitor remote login events and associated SMB activity for file transfers and remote process execution. Monitor the actions of remote users who connect to administrative shares. Monitor for use of tools and commands to connect to remote shares, such as , on the command-line interface and Discovery techniques that could be used to find remotely accessible systems.", "description": "Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.SMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include , , and . Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.", "mitigations": {"M1037": " Filter Network Traffic  : Consider using the host firewall to restrict file sharing communications such as SMB. ", "M1035": " Limit Access to Resource Over Network  : Consider disabling Windows administrative shares.", "M1027": " Password Policies  : Do not reuse local administrator account passwords across systems. Ensure password complexity and uniqueness such that the passwords cannot be cracked or guessed.", "M1026": " Privileged Account Management  : Deny remote use of local admin credentials to log into systems. Do not allow domain user accounts to be in the local Administrators group multiple systems."}, "procedureexamples": {"S0504": " Anchor  : Anchor can support windows execution via SMB shares.", "G0007": " APT28  : APT28 has mapped network drives using Net and administrator credentials.", "G0022": " APT3  : APT3 will copy files over to Windows Admin Shares (like ADMIN$) as part of lateral movement.", "G0050": " APT32  : APT32 used Net to use Windows' hidden network shares to copy their tools to remote machines for execution.", "G0087": " APT39  : APT39 has used SMB for lateral movement.", "G0096": " APT41  : APT41 has transferred implant files using Windows Admin Shares.", "S0089": " BlackEnergy  : BlackEnergy has run a plug-in on a victim to spread through the local network by using PsExec and accessing admin shares.", "G0108": " Blue Mockingbird  : Blue Mockingbird has used Windows Explorer to manually copy malicious files to remote hosts over SMB.", "G0114": " Chimera  : Chimera has used Windows admin shares to move laterally.", "S0154": " Cobalt Strike  : Cobalt Strike can use Window admin shares (C$ and ADMIN$) for lateral movement.", "S0608": " Conficker  : Conficker variants spread through NetBIOS share propagation.", "S0575": " Conti  : Conti can spread via SMB and encrypts files on different hosts, potentially compromising an entire network.", "G0009": " Deep Panda  : Deep Panda uses net.exe to connect to network shares using  commands with compromised credentials.", "S0038": " Duqu  : Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.", "S0367": " Emotet  : Emotet leverages the Admin$ share for lateral movement once the local admin password has been brute forced.  ", "G0061": " FIN8  : FIN8 has attempted to map to C$ on enumerated hosts to test the scope of their current credentials/context.", "G0117": " Fox Kitten  : Fox Kitten has used valid accounts to access SMB shares.", "G0004": " Ke3chang  : Ke3chang actors have been known to copy files to the network shares of other computers to move laterally.", "S0236": " Kwampirs  : Kwampirs copies itself over network shares to move laterally on a victim network.", "G0032": " Lazarus Group  : Lazarus Group malware SierraAlfa accesses the  share via SMB to conduct lateral movement.", "S0532": " Lucifer  : Lucifer can infect victims by brute forcing SMB.", "S0039": " Net  : Lateral movement can be done with Net through  commands to connect to the on remote systems.", "S0056": " Net Crawler  : Net Crawler uses Windows admin shares to establish authenticated sessions to remote systems over SMB as part of lateral movement.", "S0368": " NotPetya  : NotPetya can use PsExec, which interacts with the  network share to execute commands on remote systems.", "S0365": " Olympic Destroyer  : Olympic Destroyer uses PsExec to interact with the  network share to execute commands on remote systems.", "G0116": " Operation Wocao  : Operation Wocao has used Impacket's smbexec.py as well as accessing the C$ and IPC$ shares to move laterally.", "G0071": " Orangeworm  : Orangeworm has copied its backdoor across open network shares, including ADMIN$, C$WINDOWS, D$WINDOWS, and E$WINDOWS.", "S0029": " PsExec  : PsExec, a tool that has been used by adversaries, writes programs to the  network share to execute commands on remote systems.", "S0019": " Regin  : The Regin malware platform can use Windows admin shares to move laterally.", "S0446": " Ryuk  : Ryuk has used the C$ network share for lateral movement.", "G0034": " Sandworm Team  : Sandworm Team has run  to connect to network shares. ", "S0140": " Shamoon  : Shamoon accesses network share(s), enables share access to the target device, copies an executable payload to the target system, and uses a Scheduled Task/Job to execute the malware.", "S0603": " Stuxnet  : Stuxnet propagates to available network shares.", "G0028": " Threat Group-1314  : Threat Group-1314 actors mapped network drives using .", "G0010": " Turla  : Turla used  commands to connect to lateral systems within a network.", "G0102": " Wizard Spider  : Wizard Spider has used SMB to drop Cobalt Strike Beacon on a domain controller for lateral movement.", "S0350": " zwShell  : zwShell has been copied over network shares to move laterally."}, "id": "T1021.002", "subtechniqueof": "T1021", "tactics": ["Lateral Movement"], "platforms": ["Windows"], "systemrequirements": ["SMB enabled; Host/network firewalls not blocking SMB ports between source and destination; Use of domain account in administrator group on remote system or default system admin account."], "permissionsrequired": ["Administrator, User"], "capecid": ["CAPEC-561"], "version": "1.0", "created": "11 February 2020", "lastmodified": "23 March 2020"}, {"techniquename": "Distributed Component Object Model", "detection": "Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via  or , may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on.Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).", "description": "Adversaries may use Valid Accounts to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.The Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. By default, only Administrators may remotely activate and launch COM objects through DCOM.Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications as well as other Windows objects that contain insecure methods. DCOM can also execute macros in existing documents and may also invoke Dynamic Data Exchange (DDE) execution directly through a COM created instance of a Microsoft Office application, bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with Windows Management Instrumentation. ", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Ensure all COM alerts and Protected View are enabled.", "M1042": " Disable or Remove Feature or Program  : Consider disabling DCOM through Dcomcnfg.exe.", "M1030": " Network Segmentation  : Enable Windows firewall, which prevents DCOM instantiation by default.", "M1026": " Privileged Account Management  : Modify Registry settings (directly or using Dcomcnfg.exe) in  associated with the process-wide security of individual COM applications.Modify Registry settings (directly or using Dcomcnfg.exe) in  associated with system-wide security defaults for all COM applications that do not set their own process-wide security. "}, "procedureexamples": {"S0154": " Cobalt Strike  : Cobalt Strike can deliver Beacon payloads for lateral movement by leveraging remote COM execution.", "S0363": " Empire  : Empire can utilize  to leverage remote COM execution for lateral movement."}, "id": "T1021.003", "subtechniqueof": "T1021", "tactics": ["Lateral Movement"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "version": "1.1", "created": "11 February 2020", "lastmodified": "23 June 2021"}, {"techniquename": "SSH", "detection": "Use of SSH may be legitimate depending on the environment and how it\u2019s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.On macOS systems  can be used to review incoming SSH connection attempts for suspicious activity. The command  can be used to review outgoing SSH connection activity.On Linux systems SSH activity can be found in the logs located in  or  depending on the distro you are using.", "description": "Adversaries may use Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.SSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable the SSH daemon on systems that do not require it. For macOS ensure Remote Login is disabled under Sharing Preferences.", "M1032": " Multi-factor Authentication  : Require multi-factor authentication for SSH connections wherever possible, such as password protected SSH keys.", "M1018": " User Account Management  : Limit which user accounts are allowed to login via SSH."}, "procedureexamples": {"G0087": " APT39  : APT39 used secure shell (SSH) to move laterally among their targets.", "S0154": " Cobalt Strike  : Cobalt Strike can SSH to a remote service.", "S0363": " Empire  : Empire contains modules for executing commands over SSH as well as in-memory VNC agent injection.", "G0046": " FIN7  : FIN7 has used SSH to move laterally through victim environments.", "G0117": " Fox Kitten  : Fox Kitten has used the PuTTY and Plink tools for lateral movement.", "G0036": " GCMAN  : GCMAN uses Putty for lateral movement.", "S0599": " Kinsing  : Kinsing has used SSH for lateral movement.", "G0065": " Leviathan  : Leviathan used ssh for internal reconnaissance.", "G0045": " menuPass  : menuPass has used Putty Secure Copy Client (PSCP) to transfer data.", "G0049": " OilRig  : OilRig has used Putty to access compromised systems.", "G0106": " Rocke  : Rocke has spread its coinminer via SSH.    ", "G0139": " TeamTNT  : TeamTNT has used SSH to connect back to victim machines.", "G0088": " TEMP.Veles  : TEMP.Veles has relied on encrypted SSH-based tunnels to transfer tools and for remote command/program execution."}, "id": "T1021.004", "subtechniqueof": "T1021", "tactics": ["Lateral Movement"], "platforms": ["Linux, macOS"], "systemrequirements": ["An SSH server is configured and running."], "capecid": ["CAPEC-555"], "version": "1.1", "created": "11 February 2020", "lastmodified": "15 October 2021"}, {"techniquename": "VNC", "detection": "Use of VNC may be legitimate depending on the environment and how it\u2019s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior using VNC.On macOS systems  can be used to review incoming VNC connection attempts for suspicious activity.Monitor for use of built-in debugging environment variables (such as those containing credentials or other sensitive information) as well as test/default users on VNC servers, as these can leave openings for adversaries to abuse.", "description": "Adversaries may use Valid Accounts to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\"remote framebuffer\") protocol to enable users to remotely control another computer\u2019s display by relaying the screen, mouse, and keyboard inputs over the network.VNC differs from Remote Desktop Protocol as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.Adversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.", "mitigations": {"M1047": " Audit  : Inventory workstations for unauthorized VNC server software.", "M1042": " Disable or Remove Feature or Program  : Uninstall any VNC server software where not required.", "M1037": " Filter Network Traffic  : VNC defaults to TCP ports 5900 for the server, 5800 for browser access, and 5500 for a viewer in listening mode. Filtering or blocking these ports will inhibit VNC traffic utilizing default ports.", "M1033": " Limit Software Installation  : Restrict software installation to user groups that require it. A VNC server must be manually installed by the user or adversary."}, "procedureexamples": {"S0484": " Carberp  : Carberp can start a remote VNC session by downloading a new plugin.", "G0046": " FIN7  : FIN7 has used TightVNC to control compromised hosts.", "G0117": " Fox Kitten  : Fox Kitten has installed TightVNC server and client on compromised servers and endpoints for lateral movement.", "G0036": " GCMAN  : GCMAN uses VNC for lateral movement.", "S0279": " Proton  : Proton uses VNC to connect into systems.", "S0266": " TrickBot  : TrickBot has used a VNC module to monitor the victim and collect information to pivot to valuable systems on the network ", "S0412": " ZxShell  : ZxShell supports functionality for VNC sessions. "}, "id": "T1021.005", "subtechniqueof": "T1021", "tactics": ["Lateral Movement"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["VNC server installed and listening for connections."], "capecid": ["CAPEC-555"], "version": "1.1", "created": "11 February 2020", "lastmodified": "07 October 2021"}, {"techniquename": "SSH Hijacking", "detection": "Use of SSH may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. Also monitor user SSH-agent socket files being used by different users.", "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.SSH Hijacking differs from use of SSH because it hijacks an existing SSH session rather than creating a new session using Valid Accounts.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Ensure that agent forwarding is disabled on systems that do not explicitly require this feature to prevent misuse. ", "M1027": " Password Policies  : Ensure SSH key pairs have strong passwords and refrain from using key-store technologies such as ssh-agent unless they are properly protected.", "M1026": " Privileged Account Management  : Do not allow remote access via SSH as root or other privileged accounts.", "M1022": " Restrict File and Directory Permissions  : Ensure proper file permissions are set and harden system to prevent root privilege escalation opportunities."}, "id": "T1563.001", "subtechniqueof": "T1563", "tactics": ["Lateral Movement"], "platforms": ["Linux, macOS"], "systemrequirements": ["SSH service enabled, trust relationships configured, established connections"], "permissionsrequired": ["root"], "contributors": ["Anastasios Pingios"], "version": "1.0", "created": "25 February 2020", "lastmodified": "23 March 2020"}, {"techniquename": "System Owner/User Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Various utilities and commands may acquire this information, including . In macOS and Linux, the currently logged in user can be identified with  and . On macOS the  command can also be used to enumerate user accounts. Environment variables, such as  and , may also be used to access this information.", "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla can collect the username from the victim\u2019s machine.", "S0092": " Agent.btz  : Agent.btz obtains the victim username and saves it to a file.", "G0073": " APT19  : APT19 used an HTTP malware variant and a Port 22 malware variant to collect the victim\u2019s username.", "G0022": " APT3  : An APT3 downloader uses the Windows command  to verify that it is running with the elevated privileges of \"System.\"", "G0050": " APT32  : APT32 collected the victim's username and executed the  command on the victim's machine. APT32 executed shellcode to collect the username on the victim's machine. ", "G0067": " APT37  : APT37 identifies the victim username.", "G0082": " APT38  : APT38 has identified primary users, currently logged in users, sets of users that commonly use a system, or inactive users.", "G0087": " APT39  : APT39 used Remexi to collect usernames from the system.", "G0096": " APT41  : APT41 used the WMIEXEC utility to execute  commands on remote machines.", "S0456": " Aria-body  : Aria-body has the ability to identify the username on a compromised host.", "S0344": " Azorult  : Azorult can collect the username from the victim\u2019s machine.", "S0414": " BabyShark  : BabyShark has executed the  command.", "S0093": " Backdoor.Oldrea  : Backdoor.Oldrea collects the current username from the victim.", "S0534": " Bazar  : Bazar can identify the username of the infected user.", "S0017": " BISCUIT  : BISCUIT has a command to gather the username from the system.", "S0521": " BloodHound  : BloodHound can collect information on user sessions.", "S0657": " BLUELIGHT  : BLUELIGHT can collect the username on a compromised host.", "S0486": " Bonadan  : Bonadan has discovered the username of the user running the backdoor.", "S0635": " BoomBox  : BoomBox can enumerate the username on a compromised host.", "S0351": " Cannon  : Cannon can gather the username from the system.", "S0348": " Cardinal RAT  : Cardinal RAT can collect the username from a victim machine.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell can obtain a list of user accounts from a victim's machine.", "S0631": " Chaes  : Chaes has collected the username and UID from the infected machine.", "G0114": " Chimera  : Chimera has used the  command to show currently logged on users. ", "S0115": " Crimson  : Crimson can identify the user on a targeted system.", "S0498": " Cryptoistic  : Cryptoistic can gather data on the user of a compromised host.", "S0334": " DarkComet  : DarkComet gathers the username from the victim\u2019s machine.", "S0354": " Denis  : Denis enumerates and collects the username from the victim\u2019s machine.", "S0021": " Derusbi  : A Linux version of Derusbi checks if the victim user ID is anything other than zero (normally used for root), and the malware will not execute if it does not have root privileges. Derusbi also gathers the username of the victim.", "S0186": " DownPaper  : DownPaper collects the victim username and sends it to the C2 server.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used the command  on victim hosts.", "S0024": " Dyre  : Dyre has the ability to identify the users on a compromised host.", "S0554": " Egregor  : Egregor has used tools to gather information about users.", "S0091": " Epic  : Epic collects the user name from the victim\u2019s machine.", "S0568": " EVILNUM  : EVILNUM can obtain the username from the victim's machine.", "S0401": " Exaramel for Linux  : Exaramel for Linux can run  to identify the system owner.", "S0569": " Explosive  : Explosive has collected the username from the infected host. ", "S0171": " Felismus  : Felismus collects the current username and sends it to the C2 server.", "S0267": " FELIXROOT  : FELIXROOT collects the username from the victim\u2019s machine.", "G0051": " FIN10  : FIN10 has used Meterpreter to enumerate users on remote systems.", "S0381": " FlawedAmmyy  : FlawedAmmyy enumerates the current user during the initial infection.", "G0101": " Frankenstein  : Frankenstein has enumerated hosts, gathering username, machine name, and administrative permissions information.", "G0093": " GALLIUM  : GALLIUM used  and  to obtain information about the victim user.", "G0047": " Gamaredon Group  : A Gamaredon Group file stealer can gather the victim's username to send to a C2 server.", "S0168": " Gazer  : Gazer obtains the current user's security identifier.", "S0460": " Get2  : Get2 has the ability to identify the current username of an infected host.", "S0249": " Gold Dragon  : Gold Dragon collects the endpoint victim's username and uses it as a basis for downloading additional components from the C2 server.", "S0477": " Goopy  : Goopy has the ability to enumerate the infected system's user name.", "S0531": " Grandoreiro  : Grandoreiro can collect the username from the victim's machine.", "S0237": " GravityRAT  : GravityRAT collects the victim username along with other account information (account type, description, full name, SID and status).", "S0632": " GrimAgent  : GrimAgent can identify the user id on a target machine.", "S0214": " HAPPYWORK  : can collect the victim user name.", "S0391": " HAWKBALL  : HAWKBALL can collect the user name of the system.", "S0431": " HotCroissant  : HotCroissant has the ability to collect the username on the infected host.", "S0260": " InvisiMole  : InvisiMole lists local users and session information.", "S0015": " Ixeshe  : Ixeshe collects the username from the victim\u2019s machine.", "S0201": " JPIN  : JPIN can obtain the victim user name.", "S0265": " Kazuar  : Kazuar gathers information on users.", "S0250": " Koadic  : Koadic can identify logged in users across the domain and views user sessions.", "S0162": " Komplex  : The OsInfo function in Komplex collects the current running username.", "S0356": " KONNI  : KONNI can collect the username from the victim\u2019s machine.", "S0236": " Kwampirs  : Kwampirs collects registered owner details by using the commands  and .", "G0032": " Lazarus Group  : Various Lazarus Group malware enumerates logged-on users.", "S0362": " Linux Rabbit  : Linux Rabbit opens a socket on port 22 and if it receives a response it attempts to obtain the machine's hostname and Top-Level Domain. ", "S0513": " LiteDuke  : LiteDuke can enumerate the account name on a targeted system.", "S0447": " Lokibot  : Lokibot has the ability to discover the username on the infected host.", "S0532": " Lucifer  : Lucifer has the ability to identify the username on a compromised host.", "G0059": " Magic Hound  : Magic Hound malware has obtained the victim username and sent it to the C2 server.", "S0652": " MarkiRAT  : MarkiRAT can retrieve the victim\u2019s username.", "S0459": " MechaFlounder  : MechaFlounder has the ability to identify the username and hostname on a compromised host.", "S0455": " Metamorfo  : Metamorfo has collected the username from the victim's machine. ", "S0339": " Micropsia  : Micropsia collects the username from the victim\u2019s machine.", "S0280": " MirageFox  : MirageFox can gather the username from the victim\u2019s machine.", "S0084": " Mis-Type  : Mis-Type runs tests to determine the privilege level of the compromised user.", "S0149": " MoonWind  : MoonWind obtains the victim username.", "S0284": " More_eggs  : More_eggs has the capability to gather the username from the victim's machine.", "S0256": " Mosquito  : Mosquito runs  on the victim\u2019s machine.", "G0069": " MuddyWater  : MuddyWater has used malware that can collect the victim\u2019s username.", "S0228": " NanHaiShu  : NanHaiShu collects the username from the victim.", "S0590": " NBTscan  : NBTscan can list active users on the system.    ", "S0272": " NDiskMonitor  : NDiskMonitor obtains the victim username and encrypts the information to send over its C2 channel.", "S0385": " njRAT  : njRAT enumerates the current user during the initial infection.", "S0353": " NOKKI  : NOKKI can collect the username from the victim\u2019s machine.", "S0644": " ObliqueRAT  : ObliqueRAT can check for blocklisted usernames on infected endpoints.", "S0340": " Octopus  : Octopus can collect the username from the victim\u2019s machine.", "G0049": " OilRig  : OilRig has run  on a victim.", "S0439": " Okrum  : Okrum can collect the victim username.", "G0116": " Operation Wocao  : Operation Wocao has enumerated sessions and users on a remote host, and identified privileged users logged into a targeted system.", "G0040": " Patchwork  : Patchwork collected the victim username and whether it was running as admin, then sent the information to its C2 server.", "S0428": " PoetRAT  : PoetRAT sent username, computer name, and the previously generated UUID in reply to a \"who\" command from C2.", "S0139": " PowerDuke  : PowerDuke has commands to get the current user's name and SID.", "S0441": " PowerShower  : PowerShower has the ability to identify the current user on the infected host.", "S0223": " POWERSTATS  : POWERSTATS has the ability to identify the username on the compromised host.", "S0184": " POWRUNER  : POWRUNER may collect information about the currently logged in user by running  on a victim.", "S0113": " Prikormka  : A module in Prikormka collects information from the victim about the current user name.", "S0192": " Pupy  : Pupy can enumerate local information for Linux hosts and find currently logged on users for Windows hosts.", "S0650": " QakBot  : QakBot can identify the user name on a compromised system.", "S0269": " QUADAGENT  : QUADAGENT gathers the victim username.", "S0241": " RATANKBA  : RATANKBA runs the  and  commands.", "S0172": " Reaver  : Reaver collects the victim's username.", "S0153": " RedLeaves  : RedLeaves can obtain information about the logged on user both locally and for Remote Desktop sessions.", "S0125": " Remsec  : Remsec can obtain information about the current user.", "S0379": " Revenge RAT  : Revenge RAT gathers the username from the system.", "S0258": " RGDoor  : RGDoor executes the  on the victim\u2019s machine.", "S0433": " Rifdoor  : Rifdoor has the ability to identify the username on the compromised host.", "S0448": " Rising Sun  : Rising Sun can detect the username of the infected host.    ", "S0270": " RogueRobin  : RogueRobin collects the victim\u2019s username and whether that user is an admin.", "S0148": " RTM  : RTM can obtain the victim username and permissions.", "G0034": " Sandworm Team  : Sandworm Team has collected the username from a compromised host.", "S0461": " SDBbot  : SDBbot has the ability to identify the user on a compromised host.", "S0382": " ServHelper  : ServHelper will attempt to enumerate the username of the victim.", "S0596": " ShadowPad  : ShadowPad has collected the username of the victim system.", "S0450": " SHARPSTATS  : SHARPSTATS has the ability to identify the username on the compromised host.", "S0610": " SideTwist  : SideTwist can collect the username on a targeted system.", "G0121": " Sidewinder  : Sidewinder has used tools to identify the user of a compromised host.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has collected the username from a victim machine.", "S0649": " SMOKEDHAM  : SMOKEDHAM has used  commands to identify system owners.", "S0627": " SodaMaster  : SodaMaster can identify the username on a compromised host.", "S0615": " SombRAT  : SombRAT can execute   to identify the username on a compromised host.", "S0543": " Spark  : Spark has run the whoami command and has a built-in command to identify the user logged in. ", "S0374": " SpeakUp  : SpeakUp uses the  command. ", "S0058": " SslMM  : SslMM sends the logged-on username to its hard-coded C2.", "G0038": " Stealth Falcon  : Stealth Falcon malware gathers the registered user and primary owner name via WMI.", "S0559": " SUNBURST  : SUNBURST collected the username from a compromised host.", "S0242": " SynAck  : SynAck gathers user names from infected hosts.", "S0060": " Sys10  : Sys10 collects the account name of the logged-in user and sends it to the C2.", "S0098": " T9000  : T9000 gathers and beacons the username of the logged in account during installation. It will also gather the username of running processes to determine if it is running as SYSTEM.", "S0266": " TrickBot  : TrickBot can identify the user and groups the user belongs to on a compromised host.", "S0094": " Trojan.Karagany  : Trojan.Karagany can gather information about the user on a compromised host.", "G0081": " Tropic Trooper  : Tropic Trooper used  to scan for saved usernames on the target system.", "S0647": " Turian  : Turian can retrieve usernames.", "S0130": " Unknown Logger  : Unknown Logger can obtain information about the victim usernames.", "S0275": " UPPERCUT  : UPPERCUT has the capability to collect the current logged on user\u2019s username from a machine.", "S0476": " Valak  : Valak can gather information regarding the user.", "S0257": " VERMIN  : VERMIN gathers the username from the victim\u2019s machine.", "S0515": " WellMail  : WellMail can identify the current username on the victim system.", "S0514": " WellMess  : WellMess can collect the username on the victim machine to send to C2.", "S0155": " WINDSHIELD  : WINDSHIELD can gather the victim user name.", "G0112": " Windshift  : Windshift has used malware to identify the username on a compromised host.", "S0219": " WINERACK  : WINERACK can gather information on the victim username.", "S0059": " WinMM  : WinMM uses NetUser-GetInfo to identify that it is running under an \"Admin\" account on the local system.", "G0102": " Wizard Spider  : Wizard Spider has used \"whoami\" to identify the local user and their privileges.", "S0161": " XAgentOSX  : XAgentOSX contains the getInfoOSX function to return the OS X version as well as the current user.", "S0248": " yty  : yty collects the victim\u2019s username.", "S0251": " Zebrocy  : Zebrocy gets the username from the system.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used a tool to capture the username on a compromised host in order to register it with C2.", "S0350": " zwShell  : zwShell can obtain the name of the logged-in user on the victim.", "S0412": " ZxShell  : ZxShell can collect the owner and organization information from the target workstation. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1033", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "capecid": ["CAPEC-577"], "version": "1.3", "created": "31 May 2017", "lastmodified": "12 August 2021"}, {"techniquename": "System Service Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system information related to services. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \"sc,\" \"tasklist /svc\" using Tasklist, and \"net start\" using Net, but adversaries may also use other tools as well. Adversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "procedureexamples": {"G0018": " admin@338  : admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to obtain information about services: ", "G0006": " APT1  : APT1 used the commands  and  to get a listing of the services on the system.", "S0638": " Babuk  : Babuk can enumerate all services running on a compromised host.", "S0127": " BBSRAT  : BBSRAT can query service configuration information.", "S0570": " BitPaymer  : BitPaymer can enumerate existing Windows services on the host that are configured to run as LocalSystem.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used TROJ_GETVERSION to discover system services.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell can obtain a list of the services from a system. ", "G0114": " Chimera  : Chimera has used  and  for system service discovery.", "S0154": " Cobalt Strike  : Cobalt Strike can enumerate services on compromised hosts.", "S0244": " Comnie  : Comnie runs the command:  on a victim.", "S0625": " Cuba  : Cuba can query service status using  function.", "S0024": " Dyre  : Dyre has the ability to identify running services on a compromised host.", "S0081": " Elise  : Elise executes  after initial communication is made to the remote server.", "S0082": " Emissary  : Emissary has the capability to execute the command  to interact with services.", "S0091": " Epic  : Epic uses the  command to list the services on the system.", "S0049": " GeminiDuke  : GeminiDuke collects information on programs and services on the victim that are configured to automatically run at startup.", "S0237": " GravityRAT  : GravityRAT has a feature to list the available services on the system.", "S0342": " GreyEnergy  : GreyEnergy enumerates all Windows services.", "S0431": " HotCroissant  : HotCroissant has the ability to retrieve a list of services on the infected host.", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can monitor services.", "S0398": " HyperBro  : HyperBro can list all services and their configurations.", "G0119": " Indrik Spider  : Indrik Spider has used the win32_service WMI class to retrieve a list of services from the system. ", "S0260": " InvisiMole  : InvisiMole can obtain running services on the victim.", "S0015": " Ixeshe  : Ixeshe can list running services.", "S0201": " JPIN  : JPIN can list running services.", "S0283": " jRAT  : jRAT can list local services.", "G0004": " Ke3chang  : Ke3chang performs service discovery using  commands.", "S0236": " Kwampirs  : Kwampirs collects a list of running services with the command .", "S0582": " LookBack  : LookBack can enumerate services on the victim machine.", "S0039": " Net  : The  command can be used in Net to find information about Windows services.", "G0049": " OilRig  : OilRig has used  on a victim to gather information about services.", "G0116": " Operation Wocao  : Operation Wocao has used the  command to search for one of its backdoors.", "G0033": " Poseidon Group  : After compromising a victim, Poseidon Group discovers all running services.", "S0378": " PoshC2  : PoshC2 can enumerate service and service permission information.", "S0629": " RainyDay  : RainyDay can create and register a service for execution.", "S0241": " RATANKBA  : RATANKBA uses  to display running tasks.", "S0496": " REvil  : REvil can enumerate active services.", "S0085": " S-Type  : S-Type runs the command  on a victim.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has the capability to enumerate services.", "S0615": " SombRAT  : SombRAT can enumerate services on a victim machine.", "S0559": " SUNBURST  : SUNBURST collected a list of service names that were hashed using a FNV-1a + XOR algorithm to check against similarly-hashed hardcoded blocklists.", "S0018": " Sykipot  : Sykipot may use  to display running services.", "S0242": " SynAck  : SynAck enumerates all running services.", "S0057": " Tasklist  : Tasklist can be used to discover services running on a system.", "S0266": " TrickBot  : TrickBot collects a list of install programs and services on the system\u2019s machine.", "G0010": " Turla  : Turla surveys a system upon check-in to discover running services and associated processes using the  command.", "S0386": " Ursnif  : Ursnif has gathered information about running services.", "S0180": " Volgmer  : Volgmer queries the system to identify existing services.", "S0219": " WINERACK  : WINERACK can enumerate services.", "S0086": " ZLib  : ZLib has the ability to discover and manipulate Windows services.", "S0412": " ZxShell  : ZxShell can check the services on the system. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1007", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "capecid": ["CAPEC-574"], "version": "1.2", "created": "31 May 2017", "lastmodified": "17 October 2021"}, {"techniquename": "System Time Discovery", "detection": "Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software.", "description": "An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.  System time information may be gathered in a number of ways, such as with Net on Windows by performing  to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using . This information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job , or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.", "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla can collect the timestamp from the victim\u2019s machine.", "S0622": " AppleSeed  : AppleSeed can pull a timestamp from the victim's machine.", "S0373": " Astaroth  : Astaroth collects the timestamp from the infected machine. ", "S0344": " Azorult  : Azorult can collect the time zone information from the system.", "S0534": " Bazar  : Bazar can collect the time on the compromised host.", "S0574": " BendyBear  : BendyBear has the ability to determine local time on a compromised host. ", "S0268": " Bisonal  : Bisonal can check the system time set on the infected host.", "S0657": " BLUELIGHT  : BLUELIGHT can collect the local time on a compromised host.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used  to check the local time on a target system.", "S0471": " build_downer  : build_downer has the ability to determine the local time to ensure malware installation only happens during the hours that the infected system is active.", "S0351": " Cannon  : Cannon can collect the current time zone information from the victim\u2019s machine.", "S0335": " Carbon  : Carbon uses the command  to get information the system\u2019s time.", "G0114": " Chimera  : Chimera has used  and  for system time discovery.", "S0126": " ComRAT  : ComRAT has checked the victim system's date and time to perform tasks during business hours (9 to 5, Monday to Friday). ", "S0608": " Conficker  : Conficker uses the current UTC victim system date for domain generation and connects to time servers to determine the current date.", "S0115": " Crimson  : Crimson has the ability to determine the date and time on a compromised host.", "G0012": " Darkhotel  : Darkhotel malware can obtain system time from a compromised host.", "S0554": " Egregor  : Egregor contains functionality to query the local/system time.", "S0091": " Epic  : Epic uses the  command  to get the system time from the machine and collect the current date and time zone information.", "S0396": " EvilBunny  : EvilBunny has used the API calls NtQuerySystemTime, GetSystemTimeAsFileTime, and GetTickCount to gather time metrics as part of its checks to see if the malware is running in a sandbox.", "S0267": " FELIXROOT  : FELIXROOT gathers the time zone information from the victim\u2019s machine.", "S0588": " GoldMax  : GoldMax can check the current date-time value of the compromised system, comparing it to the hardcoded execution trigger and can send the current timestamp to the C2 server. ", "S0531": " Grandoreiro  : Grandoreiro can determine the time on the victim machine via IPinfo.", "S0237": " GravityRAT  : GravityRAT can obtain the date and time of a system.", "S0417": " GRIFFON  : GRIFFON has used a reconnaissance module that can be used to retrieve the date and time of the system.    ", "G0126": " Higaisa  : Higaisa used a function to gather the current time.", "S0376": " HOPLIGHT  : HOPLIGHT has been observed collecting system time from victim machines.", "S0260": " InvisiMole  : InvisiMole gathers the local system time from the victim\u2019s machine.", "G0032": " Lazarus Group  : A Destover-like implant used by Lazarus Group can obtain the current system time and send it to the C2 server.", "S0455": " Metamorfo  : Metamorfo uses JavaScript to get the system time. ", "S0149": " MoonWind  : MoonWind obtains the victim's current time.", "S0039": " Net  : The  command can be used in Net to determine the local or remote system time.", "S0353": " NOKKI  : NOKKI can collect the current timestamp of the victim's machine.", "S0439": " Okrum  : Okrum can obtain the date and time of the compromised system.", "S0264": " OopsIE  : OopsIE checks to see if the system is configured with \"Daylight\" time and checks for a specific region to be set for the timezone.", "G0116": " Operation Wocao  : Operation Wocao has used the  command to retrieve the current time of a compromised system.", "S0501": " PipeMon  : PipeMon can send time zone information from a compromised host to C2.", "S0139": " PowerDuke  : PowerDuke has commands to get the time the machine was built, the time, and the time zone.", "S0238": " Proxysvc  : As part of the data reconnaissance phase, Proxysvc grabs the system time to send back to the control server.", "S0650": " QakBot  : QakBot can identify the system time on a targeted host.", "S0148": " RTM  : RTM can obtain the victim time zone.", "S0596": " ShadowPad  : ShadowPad has collected the current date and time of the victim system.", "S0140": " Shamoon  : Shamoon obtains the system time and will only activate if it is greater than a preset date.", "S0450": " SHARPSTATS  : SHARPSTATS has the ability to identify the current date and time on the compromised host.", "G0121": " Sidewinder  : Sidewinder has used tools to obtain the current system time.", "S0615": " SombRAT  : SombRAT can execute   to discover the current time on a compromised host.", "S0380": " StoneDrill  : StoneDrill can obtain the current date and time of the victim machine.  ", "S0603": " Stuxnet  : Stuxnet collects the time and date of a system when it is infected.", "S0098": " T9000  : T9000 gathers and beacons the system time during installation.", "S0011": " Taidoor  : Taidoor can use  and  to collect system time.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE can execute  for time discovery.", "S0467": " TajMahal  : TajMahal has the ability to determine local time on a compromised host.", "G0089": " The White Company  : The White Company has checked the current date on the victim system.", "G0010": " Turla  : Turla surveys a system upon check-in to discover the system time by using the  command.", "S0275": " UPPERCUT  : UPPERCUT has the capability to obtain the time zone information and current timestamp of the victim\u2019s machine.", "S0466": " WindTail  : WindTail has the ability to generate the current date and time.", "S0251": " Zebrocy  : Zebrocy gathers the current time zone and date information from the system.", "S0330": " Zeus Panda  : Zeus Panda collects the current system time (UTC) and sends it back to the C2 server.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used a tool to capture the time on a compromised host in order to register it with C2."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1124", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Windows"], "permissionsrequired": ["User"], "capecid": ["CAPEC-295"], "contributors": ["FIRST.ORG's Cyber Threat Intelligence SIG"], "version": "1.2", "created": "31 May 2017", "lastmodified": "22 April 2021"}, {"techniquename": "Exploitation of Remote Services", "detection": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of  for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.", "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.An adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Scanning or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.There are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services. Depending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist. ", "M1042": " Disable or Remove Feature or Program  : Minimize available services to only those that are necessary.", "M1050": " Exploit Protection  : Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring.  Many of these protections depend on the architecture and target application binary for compatibility and may not work for all software or services targeted.", "M1030": " Network Segmentation  : Segment networks and systems appropriately to reduce access to critical systems and services to controlled methods.", "M1026": " Privileged Account Management  : Minimize permissions and access for service accounts to limit impact of exploitation.", "M1019": " Threat Intelligence Program  : Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization.", "M1051": " Update Software  : Update software regularly by employing patch management for internal enterprise endpoints and servers.", "M1016": " Vulnerability Scanning  : Regularly scan the internal network for available services to identify new and potentially vulnerable services."}, "procedureexamples": {"G0007": " APT28  : APT28 exploited a Windows SMB Remote Code Execution Vulnerability to conduct lateral movement.", "S0606": " Bad Rabbit  : Bad Rabbit used the EternalRomance SMB exploit to spread through victim networks.", "S0608": " Conficker  : Conficker exploited the MS08-067 Windows vulnerability for remote code execution through a crafted RPC request.", "S0367": " Emotet  : Emotet has been seen exploiting SMB via a vulnerability exploit like EternalBlue (MS17-010) to achieve lateral movement and propagation.  ", "S0363": " Empire  : Empire has a limited number of built-in modules for exploiting remote SMB, JBoss, and Jenkins servers.", "G0046": " FIN7  : FIN7 has exploited ZeroLogon (CVE-2020-1472) against vulnerable domain controllers.", "S0143": " Flame  : Flame can use MS10-061 to exploit a print spooler vulnerability in a remote system with a shared printer in order to move laterally.", "G0117": " Fox Kitten  : Fox Kitten has exploited known vulnerabilities in remote services including RDP.", "S0260": " InvisiMole  : InvisiMole can spread within a network via the BlueKeep (CVE-2019-0708) and EternalBlue (CVE-2017-0144) vulnerabilities in RDP and SMB respectively.", "S0532": " Lucifer  : Lucifer can exploit multiple vulnerabilities including EternalBlue (CVE-2017-0144) and EternalRomance (CVE-2017-0144).", "G0045": " menuPass  : menuPass has used tools to exploit the ZeroLogon vulnerability (CVE-2020-1472).", "S0368": " NotPetya  : NotPetya can use two exploits in SMBv1, EternalBlue and EternalRomance, to spread itself to other remote systems on the network.", "S0378": " PoshC2  : PoshC2 contains a module for exploiting SMB via EternalBlue.", "S0650": " QakBot  : QakBot can move laterally using worm-like functionality through exploitation of SMB.", "S0603": " Stuxnet  : Stuxnet propagates using the MS10-061 Print Spooler and MS08-067 Windows Server Service vulnerabilities.", "G0027": " Threat Group-3390  : Threat Group-3390 has exploited MS17-010 to move laterally to other systems on the network.  ", "G0131": " Tonto Team  : Tonto Team has used EternalBlue exploits for lateral movement.", "S0266": " TrickBot  : TrickBot utilizes EternalBlue and EternalRomance exploits for lateral movement in the modules wormwinDll, wormDll, mwormDll, nwormDll, tabDll.", "S0366": " WannaCry  : WannaCry uses an exploit in SMBv1 to spread itself to other remote systems on a network.", "G0102": " Wizard Spider  : Wizard Spider has exploited or attempted to exploit Zerologon (CVE-2020-1472) and EternalBlue (MS17-010) vulnerabilities."}, "id": "T1210", "subtechniques": ["No sub-techniques"], "tactics": ["Lateral Movement"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Unpatched software or otherwise vulnerable target. Depending on the target and goal, the system and exploitable service may need to be remotely accessible from the internal network."], "permissionsrequired": ["User"], "contributors": ["ExtraHop"], "version": "1.1", "created": "18 April 2018", "lastmodified": "22 April 2021"}, {"techniquename": "Internal Spearphishing", "detection": "Network intrusion detection systems and email gateways usually do not scan internal email, but an organization can leverage the journaling-based solution which sends a copy of emails to a security service for offline analysis or incorporate service-integrated solutions using on-premise or API-based integrations to help detect internal spearphishing attacks.", "description": "Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment. Internal spearphishing is multi-staged attack where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user. Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt.Adversaries may leverage Spearphishing Attachment or Spearphishing Link as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through Input Capture on sites that mimic email login interfaces.There have been notable incidents where internal spearphishing has been used. The Eye Pyramid campaign used phishing emails with malicious attachments for lateral movement between victims, compromising nearly 18,000 email accounts in the process. The Syrian Electronic Army (SEA) compromised email accounts at the Financial Times (FT) to steal additional account credentials. Once FT learned of the attack and began warning employees of the threat, the SEA sent phishing emails mimicking the Financial Times IT department and were able to compromise even more users.", "procedureexamples": {"G0047": " Gamaredon Group  : Gamaredon Group has used an Outlook VBA module on infected systems to send phishing emails with malicious attachments to other employees within the organization.", "G0065": " Leviathan  : Leviathan has conducted internal spearphishing within the victim's environment for lateral movement."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1534", "subtechniques": ["No sub-techniques"], "tactics": ["Lateral Movement"], "platforms": ["Google Workspace, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Swetha Prabakaran, Microsoft Threat Intelligence Center (MSTIC); Tim MalcomVetter"], "version": "1.1", "created": "04 September 2019", "lastmodified": "14 April 2021"}, {"techniquename": "Lateral Tool Transfer", "detection": "Monitor for file creation and files transferred within a network using protocols such as SMB. Unusual processes with internal network connections creating files on-system may be suspicious. Consider monitoring for abnormal usage of utilities and command-line arguments that may be used in support of remote transfer of files. Considering monitoring for alike file hashes or characteristics (ex: filename) that are created on multiple hosts.", "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with SMB/Windows Admin Shares or Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.", "mitigations": {"M1037": " Filter Network Traffic  : Consider using the host firewall to restrict file sharing communications such as SMB. ", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. "}, "procedureexamples": {"G0050": " APT32  : APT32 has deployed tools after moving laterally using administrative accounts. ", "S0190": " BITSAdmin  : BITSAdmin can be used to create BITS Jobs to upload and/or download files from SMB file servers.", "G0114": " Chimera  : Chimera has copied tools between compromised hosts using SMB.", "S0106": " cmd  : cmd can be used to copy files to/from a remotely connected internal system.", "S0062": " DustySky  : DustySky searches for network drives and removable media and duplicates itself onto them.", "S0404": " esentutl  : esentutl can be used to copy files to/from a remote share.", "S0361": " Expand  : Expand can be used to download or upload a file over a network share.", "G0051": " FIN10  : FIN10 has deployed Meterpreter stagers and SplinterRAT instances in the victim network after moving laterally.", "G0093": " GALLIUM  : GALLIUM has used PsExec to move laterally between hosts in the target network.", "S0372": " LockerGoga  : LockerGoga has been observed moving around the victim network via SMB, indicating the actors behind this ransomware are manually copying files form computer to computer instead of self-propagating.", "S0532": " Lucifer  : Lucifer can use certutil for propagation on Windows hosts within intranets.", "S0457": " Netwalker  : Operators deploying Netwalker have used psexec to copy the Netwalker payload across accessible systems.", "S0365": " Olympic Destroyer  : Olympic Destroyer attempts to copy itself to remote machines on the network.", "G0116": " Operation Wocao  : Operation Wocao has used SMB to copy files to and from target systems.", "S0029": " PsExec  : PsExec can be used to download or upload a file over a network share.", "G0034": " Sandworm Team  : Sandworm Team has used  to transfer files to a network share. ", "S0140": " Shamoon  : Shamoon attempts to copy itself to remote machines on the network.", "S0603": " Stuxnet  : Stuxnet uses an RPC server that contains a file dropping routine and support for payload version updates for P2P communications within a victim network.", "G0010": " Turla  : Turla RPC backdoors can be used to transfer files to/from victim machines on the local network.", "S0366": " WannaCry  : WannaCry attempts to copy itself to remote computers after gaining access via an SMB exploit.", "G0102": " Wizard Spider  : Wizard Spider has used stolen credentials to copy tools into the  directory of domain controllers."}, "id": "T1570", "subtechniques": ["No sub-techniques"], "tactics": ["Lateral Movement"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.1", "created": "11 March 2020", "lastmodified": "28 September 2021"}, {"techniquename": "Remote Service Session Hijacking", "detection": "Use of these services may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with that service. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.Monitor for processes and command-line arguments associated with hijacking service sessions.", "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.Adversaries may commandeer these sessions to carry out actions on remote systems. Remote Service Session Hijacking differs from use of Remote Services because it hijacks an existing session rather than creating a new session using Valid Accounts.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable the remote service (ex: SSH, RDP, etc.) if it is unnecessary.", "M1030": " Network Segmentation  : Enable firewall rules to block unnecessary traffic between network security zones within a network.", "M1026": " Privileged Account Management  : Do not allow remote access to services as a privileged account unless necessary.", "M1018": " User Account Management  : Limit remote user permissions if remote access is necessary."}, "id": "T1563", "subtechniques": ["T1563.001", "T1563.002"], "tactics": ["Lateral Movement"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["SYSTEM, root"], "version": "1.0", "created": "25 February 2020", "lastmodified": "23 March 2020"}, {"techniquename": "System Network Connections Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.Utilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and  can be used to list current connections.  and  can be used to show which users are currently logged in, similar to \"net session\".", "procedureexamples": {"G0018": " admin@338  : admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to display network connections: ", "G0138": " Andariel  : Andariel has used the  command to display TCP connections on a victim's machine.", "G0006": " APT1  : APT1 used the  command to get a listing on network connections.", "G0022": " APT3  : APT3 has a tool that can enumerate current network connections.", "G0050": " APT32  : APT32 used the  command to display TCP connections on the victim's machine.", "G0082": " APT38  : APT38 installed a port monitoring tool, MAPMAKER, to print the active TCP connections on the local system.", "G0096": " APT41  : APT41 has enumerated IP addresses of network resources and used the  command as part of network reconnaissance. The group has also used a malware variant, HIGHNOON, to enumerate active RDP sessions.", "S0456": " Aria-body  : Aria-body has the ability to gather TCP and UDP table status listings.", "S0638": " Babuk  : Babuk can use \"WNetOpenEnumW\" and \"WNetEnumResourceW\" to enumerate files in network resources for encryption.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has used NetCat and PortQry  to enumerate network connections and display the status of related TCP and UDP ports.", "S0089": " BlackEnergy  : BlackEnergy has gathered information about local network connections using netstat.", "S0335": " Carbon  : Carbon uses the  and  commands.", "G0114": " Chimera  : Chimera has used  to discover network connections.", "S0154": " Cobalt Strike  : Cobalt Strike can produce a sessions report from compromised hosts.", "S0244": " Comnie  : Comnie executes the  command.", "S0575": " Conti  : Conti can enumerate routine network connections from a compromised host.", "S0488": " CrackMapExec  : CrackMapExec can discover active sessions for a targeted system.", "S0625": " Cuba  : Cuba can use the function  to recover the last connections to the victim's machine. ", "S0567": " Dtrack  : Dtrack can collect network and active connection information.", "S0038": " Duqu  : The discovery modules used with Duqu can collect information on network connections.", "S0554": " Egregor  : Egregor can enumerate all connected drives.", "S0363": " Empire  : Empire can enumerate the current network connections of a host.", "S0091": " Epic  : Epic uses the , , and  commands to gather information on network connections.", "G0093": " GALLIUM  : GALLIUM used  to obtain information about the victim network connections.", "S0237": " GravityRAT  : GravityRAT uses the  command to find open ports on the victim\u2019s machine.", "S0283": " jRAT  : jRAT can list network connections.", "G0004": " Ke3chang  : Ke3chang performs local network connection discovery using .", "S0236": " Kwampirs  : Kwampirs collects a list of active and listening connections by using the command  as well as a list of available network mappings with .", "S0532": " Lucifer  : Lucifer can identify the IP and port numbers for all remote connections from the compromised host.", "S0409": " Machete  : Machete uses the  and  commands to list all nearby WiFi networks and connected interfaces. ", "S0449": " Maze  : Maze has used the \"WNetOpenEnumW\", \"WNetEnumResourceW\", \"WNetCloseEnum\" and \"WNetAddConnection2W\" functions to enumerate the network resources on the infected machine.", "G0045": " menuPass  : menuPass has used  to conduct connectivity checks to machines.", "S0443": " MESSAGETAP  : After loading the keyword and phone data files, MESSAGETAP begins monitoring all network connections to and from the victim server. ", "G0069": " MuddyWater  : MuddyWater has used a PowerShell backdoor to check for Skype connections on the target machine.", "G0129": " Mustang Panda  : Mustang Panda has used  to determine network connection information.", "S0102": " nbtstat  : nbtstat can be used to discover current NetBIOS sessions.", "S0039": " Net  : Commands such as  and  can be used in Net to gather information about network connections from a particular host.", "S0104": " netstat  : netstat can be used to enumerate local network connections, including active TCP connections and other network statistics.", "S0198": " NETWIRE  : NETWIRE can capture session logon details from a compromised host.", "G0049": " OilRig  : OilRig has used  on a victim to get a listing of network connections.", "S0439": " Okrum  : Okrum was seen using NetSess to discover NetBIOS sessions.", "G0116": " Operation Wocao  : Operation Wocao has collected a list of open connections on the infected system using netstat and checks whether it has an internet connection.", "S0165": " OSInfo  : OSInfo enumerates the current network connections similar to .", "S0013": " PlugX  : PlugX has a module for enumerating TCP and UDP network connections and associated processes using the  command.", "G0033": " Poseidon Group  : Poseidon Group obtains and saves information about victim network interfaces and addresses.", "S0378": " PoshC2  : PoshC2 contains an implementation of netstat to enumerate TCP and UDP connections.", "S0184": " POWRUNER  : POWRUNER may collect active network connections by running  on a victim.", "S0192": " Pupy  : Pupy has a built-in utility command for , can do net session through PowerView, and has an interactive shell which can be used to discover additional information.", "S0650": " QakBot  : QakBot can use  to enumerate current network connections.", "S0458": " Ramsay  : Ramsay can use  to enumerate network connections.", "S0241": " RATANKBA  : RATANKBA uses  to search for specific IP address ranges.", "S0153": " RedLeaves  : RedLeaves can enumerate drives and Remote Desktop sessions.", "S0125": " Remsec  : Remsec can obtain a list of active connections and open ports.", "G0034": " Sandworm Team  : Sandworm Team had gathered user, IP address, and server data related to RDP sessions on a compromised host. It has also accessed network diagram files useful for understanding how a host's network was configured. ", "S0445": " ShimRatReporter  : ShimRatReporter used the Windows function  to detect connected UDP endpoints.", "S0063": " SHOTPUT  : SHOTPUT uses netstat to list TCP connection status.", "S0589": " Sibot  : Sibot has retrieved a GUID associated with a present LAN connection on a compromised machine.", "S0633": " Sliver  : Sliver can collect network connection information.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA can enumerate open ports on a victim machine.", "S0374": " SpeakUp  : SpeakUp uses the  command. ", "S0018": " Sykipot  : Sykipot may use  to display active network connections.", "G0139": " TeamTNT  : TeamTNT runs  to search for rival malware connections. TeamTNT has also used libprocesshider to modify .", "G0027": " Threat Group-3390  : Threat Group-3390 has used  to conduct internal discovery of systems. The group has also used quser.exe to identify existing RDP sessions on a victim.", "S0094": " Trojan.Karagany  : Trojan.Karagany can use netstat to collect a list of network connections.", "G0081": " Tropic Trooper  : Tropic Trooper has tested if the localhost network is available and other connection capability on an infected system using command scripts. ", "G0010": " Turla  : Turla surveys a system upon check-in to discover active local network connections using the , , , and  commands. Turla RPC backdoors have also enumerated the IPv4 TCP connection table via the  API call.", "S0452": " USBferry  : USBferry can use  and  to detect active network connections.   ", "S0180": " Volgmer  : Volgmer can gather information about TCP connection state.", "S0579": " Waterbear  : Waterbear can use API hooks on \"GetExtendedTcpTable\" to retrieve a table containing a list of TCP endpoints available to the application. ", "S0251": " Zebrocy  : Zebrocy uses  to gather network connection information."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1049", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["IaaS, Linux, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "contributors": ["Praetorian"], "version": "2.2", "created": "31 May 2017", "lastmodified": "08 March 2021"}, {"techniquename": "Internet Connection Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Command and Control, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to check Internet connectivity.", "description": "Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, , and GET requests to websites.Adversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.", "procedureexamples": {"G0016": " APT29  : APT29 has used GoldFinder to perform HTTP GET requests to check internet connectivity and identify HTTP proxy servers and other redirectors that an HTTP request travels through.", "S0597": " GoldFinder  : GoldFinder performed HTTP GET requests to check internet connectivity and identify HTTP proxy servers and other redirectors that an HTTP request traveled through.", "S0284": " More_eggs  : More_eggs has used HTTP GET requests to check internet connectivity.", "S0650": " QakBot  : QakBot can measure the download speed on a targeted host.", "G0010": " Turla  : Turla has used  to check internet connectivity."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1016.001", "subtechniqueof": "T1016", "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "17 March 2021", "lastmodified": "25 March 2021"}, {"techniquename": "System Language Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system language information. This may include calls to various API functions and interaction with system configuration settings such as the Windows Registry.", "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.There are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. For example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key  or parsing the outputs of Windows API functions , ,  and .On a macOS or Linux system, adversaries may query  to retrieve the value of the  environment variable.", "procedureexamples": {"S0640": " Avaddon  : Avaddon checks for specific keyboard layouts and OS languages to avoid targeting Commonwealth of Independent States (CIS) entities.", "S0534": " Bazar  : Bazar can perform a check to ensure that the operating system's keyboard and language settings are not set to Russian.", "S0611": " Clop  : Clop has checked the keyboard language using the GetKeyboardLayout() function to avoid installation on Russian-language or other Commonwealth of Independent States-language machines; it will also check the  function. ", "S0625": " Cuba  : Cuba can check if Russian language is installed on the infected machine by using the function . ", "S0616": " DEATHRANSOM  : Some versions of DEATHRANSOM have performed language ID and keyboard layout checks; if either of these matched Russian, Kazakh, Belarusian, Ukrainian or Tatar DEATHRANSOM would exit.", "S0547": " DropBook  : DropBook has checked for the presence of Arabic language in the infected machine's settings.", "S0632": " GrimAgent  : GrimAgent has used  to identify hosts in the United Kingdom, United States, France, and Spain. ", "S0652": " MarkiRAT  : MarkiRAT can use the  API to check if a compromised host's keyboard is set to Persian.", "S0449": " Maze  : Maze has checked the language of the machine with function  and terminated execution if the language matches with an entry in the predefined list.", "S0496": " REvil  : REvil can check the system language using  and . If the language is found in the list, the process terminates.", "S0446": " Ryuk  : Ryuk has been observed to query the registry key  and the value . If the machine has the value 0x419 (Russian), 0x422 (Ukrainian), or 0x423 (Belarusian), it stops execution.", "S0546": " SharpStage  : SharpStage  has been used to target Arabic-speaking users and used code that checks if the compromised machine has the Arabic language installed.", "S0543": " Spark  : Spark has checked the results of the  and the language name returned by  to make sure they contain the word \"Arabic\" before executing.", "S0242": " SynAck  : SynAck lists all the keyboard layouts installed on the victim\u2019s system using  API and checks against a hardcoded language code list. If a match if found, SynAck sleeps for 300 seconds and then exits without encrypting files. ", "S0658": " XCSSET  : XCSSET uses AppleScript to check the host's language and location with the command .", "S0330": " Zeus Panda  : Zeus Panda queries the system's keyboard mapping to determine the language used on the system. It will terminate execution if it detects LANG_RUSSIAN, LANG_BELARUSIAN, LANG_KAZAK, or LANG_UKRAINIAN."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1614.001", "subtechniqueof": "T1614", "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Harshal Tupsamudre, Qualys"], "version": "1.0", "created": "18 August 2021", "lastmodified": "15 October 2021"}, {"techniquename": "System Network Configuration Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.Adversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ", "procedureexamples": {"S0552": " AdFind  : AdFind can extract subnet information from Active Directory.", "G0018": " admin@338  : admin@338 actors used the following command after exploiting a machine with LOWBALL malware to acquire information about local networks: ", "S0331": " Agent Tesla  : Agent Tesla can collect the IP address of the victim machine and spawn instances of netsh.exe to enumerate wireless settings. ", "S0092": " Agent.btz  : Agent.btz collects the network adapter\u2019s IP and MAC address as well as IP addresses of the network adapter\u2019s default gateway, primary/secondary WINS, DHCP, and DNS servers, and saves them into a log file.", "S0504": " Anchor  : Anchor can determine the public IP and location of a compromised host.", "S0622": " AppleSeed  : AppleSeed can identify the IP of a targeted system.", "G0006": " APT1  : APT1 used the  command to gather network configuration information.", "G0073": " APT19  : APT19 used an HTTP malware variant and a Port 22 malware variant to collect the MAC address and IP address from the victim\u2019s machine.", "G0022": " APT3  : A keylogging tool used by APT3 gathers network information from the victim, including the MAC address, IP address, WINS, DHCP server, and gateway.", "G0050": " APT32  : APT32 used the  command to gather the IP address from the system.", "G0096": " APT41  : APT41 collected MAC addresses from victim machines. ", "S0456": " Aria-body  : Aria-body has the ability to identify the location, public IP address, and domain name on a compromised host.", "S0099": " Arp  : Arp can be used to display ARP configuration information on the host.", "S0373": " Astaroth  : Astaroth collects the external IP address from the system. ", "S0640": " Avaddon  : Avaddon can collect the external IP address of the victim.", "S0473": " Avenger  : Avenger can identify the domain of the compromised host.", "S0344": " Azorult  : Azorult can collect host IP information from the victim\u2019s machine.", "S0414": " BabyShark  : BabyShark has executed the  command.  ", "S0093": " Backdoor.Oldrea  : Backdoor.Oldrea collects information about the Internet adapter configuration.", "S0245": " BADCALL  : BADCALL collects the network adapter information.", "S0642": " BADFLICK  : BADFLICK has captured victim IP address details.", "S0234": " Bandook  : Bandook has a command to get the public IP address from a system. ", "S0534": " Bazar  : Bazar can collect the IP address and NetBIOS name of an infected machine.", "S0268": " Bisonal  : Bisonal can execute  on the victim\u2019s machine.", "S0089": " BlackEnergy  : BlackEnergy has gathered information about network IP configurations using ipconfig.exe and about routing tables using route.exe.", "S0520": " BLINDINGCAN  : BLINDINGCAN has collected the victim machine's local IP address information and MAC address.", "S0657": " BLUELIGHT  : BLUELIGHT can collect IP information from the victim\u2019s machine.", "S0486": " Bonadan  : Bonadan can find the external IP address of the infected host.", "S0651": " BoxCaon  : BoxCaon can collect the victim's MAC address by using the  API.", "S0252": " Brave Prince  : Brave Prince gathers network configuration information as well as the ARP cache.", "S0274": " Calisto  : Calisto runs the  command to obtain the IP address from the victim\u2019s machine.", "S0335": " Carbon  : Carbon can collect the IP address of the victims and other computers on the network using the commands:  , and .", "S0261": " Catchamas  : Catchamas gathers the Mac address, IP address, and the network adapter information from the victim\u2019s machine.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell can gather the IP address from the victim's machine using the IP config command. ", "G0114": " Chimera  : Chimera has used ipconfig, Ping, and  to enumerate the IP address and network environment and settings of the local host.", "S0154": " Cobalt Strike  : Cobalt Strike can determine the NetBios name and  the IP addresses of targets machines including domain controllers.", "S0244": " Comnie  : Comnie uses  and  to identify network adapter and interface information.", "S0575": " Conti  : Conti can retrieve the ARP cache from the local system by using the  API call and check to ensure IP addresses it connects to are for local, non-Internet, systems. ", "S0488": " CrackMapExec  : CrackMapExec can collect DNS information from the targeted system.", "S0115": " Crimson  : Crimson contains a command to collect the victim MAC address and LAN IP.", "S0625": " Cuba  : Cuba can retrieve the ARP cache from the local system by using . ", "G0012": " Darkhotel  : Darkhotel has collected the IP address and network adapter information from the victim\u2019s machine.", "S0354": " Denis  : Denis uses  to gather the IP address from the system.", "S0472": " down_new  : down_new has the ability to identify the MAC address of a compromised host.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used batch scripts to enumerate network information, including information about trusts, zones, and the domain.", "S0567": " Dtrack  : Dtrack can collect the host's IP addresses using the  command.", "S0038": " Duqu  : The reconnaissance modules used with Duqu can collect information on network configuration.", "S0024": " Dyre  : Dyre has the ability to identify network settings on a compromised host.", "S0605": " EKANS  : EKANS can determine the domain of a compromised host.", "S0081": " Elise  : Elise executes  after initial communication is made to the remote server.", "S0082": " Emissary  : Emissary has the capability to execute the command .", "S0363": " Empire  : Empire can acquire network configuration information like DNS servers and network proxies used by a host.", "S0091": " Epic  : Epic uses the  and  commands on the victim\u2019s machine.", "S0569": " Explosive  : Explosive has collected the MAC address from the victim's machine. ", "S0181": " FALLCHILL  : FALLCHILL collects MAC address and local IP address information from the victim.", "S0512": " FatDuke  : FatDuke can identify the MAC address on the target computer.", "S0171": " Felismus  : Felismus collects the victim LAN IP address and sends it to the C2 server.", "S0267": " FELIXROOT  : FELIXROOT collects information about the network including the IP address and DHCP server.", "G0101": " Frankenstein  : Frankenstein has enumerated hosts, looking for the public IP address of the system.", "G0093": " GALLIUM  : GALLIUM used  to obtain information about the victim network configuration. The group also ran a modified version of NBTscan to identify available NetBIOS name servers.", "S0049": " GeminiDuke  : GeminiDuke collects information on network settings and Internet proxy settings from the victim.", "S0588": " GoldMax  : GoldMax retrieved a list of the system's network interface after execution.", "S0531": " Grandoreiro  : Grandoreiro can determine the IP and physical location of the compromised host via IPinfo.", "S0237": " GravityRAT  : GravityRAT collects the victim IP address, MAC address, as well as the victim account domain name.", "S0632": " GrimAgent  : GrimAgent can enumerate the IP and domain of a target system.", "G0126": " Higaisa  : Higaisa used  to gather network configuration information.", "S0431": " HotCroissant  : HotCroissant has the ability to identify the IP address of the compromised machine.", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can retrieve IP addresses of compromised machines.", "S0101": " ifconfig  : ifconfig can be used to display adapter configuration on Unix systems, including information for TCP/IP, DNS, and DHCP.", "S0278": " iKitten  : iKitten will look for the current IP address.", "S0604": " Industroyer  : Industroyer\u2019s 61850 payload component enumerates connected network adapters and their corresponding IP addresses.", "S0260": " InvisiMole  : InvisiMole gathers information on the IP forwarding table, MAC address, configured proxy, and network SSID.", "S0100": " ipconfig  : ipconfig can be used to display adapter configuration on Windows systems, including information for TCP/IP, DNS, and DHCP.", "S0015": " Ixeshe  : Ixeshe enumerates the IP address, network proxy settings, and domain name from a victim's system.", "S0044": " JHUHUGIT  : A JHUHUGIT variant gathers network interface card information.", "S0201": " JPIN  : JPIN can obtain network information, including DNS, IP, and proxies.", "S0283": " jRAT  : jRAT can gather victim internal and external IPs.", "S0265": " Kazuar  : Kazuar gathers information about network adapters.", "G0004": " Ke3chang  : Ke3chang performs local network configuration discovery using .", "S0487": " Kessel  : Kessel has collected the DNS address of the infected host.", "S0387": " KeyBoy  : KeyBoy can determine the public or WAN IP address for the system.", "S0271": " KEYMARBLE  : KEYMARBLE gathers the MAC address of the victim\u2019s machine.", "S0250": " Koadic  : Koadic can retrieve information about the Windows domain.", "S0641": " Kobalos  : Kobalos can record the IP address of the target machine.", "S0356": " KONNI  : KONNI can collect the IP address from the victim\u2019s machine.", "S0236": " Kwampirs  : Kwampirs collects network adapter and interface information by using the commands ,  and . It also collects the system's MAC address with  and domain configuration with .", "G0032": " Lazarus Group  : Lazarus Group malware IndiaIndia obtains and sends to its C2 server information about the first network interface card\u2019s configuration, including IP address, gateways, subnet mask, DHCP information, and whether WINS is available.", "S0395": " LightNeuron  : LightNeuron gathers information about network adapters using the Win32 API call .", "S0513": " LiteDuke  : LiteDuke has the ability to discover the proxy configuration of Firefox and/or Opera.", "S0447": " Lokibot  : Lokibot has the ability to discover the domain name of the infected host.", "S0451": " LoudMiner  : LoudMiner used a script to gather the IP address of the infected machine before sending to the C2.", "S0532": " Lucifer  : Lucifer can collect the IP address of a compromised host.", "S0409": " Machete  : Machete collects the MAC address of the target computer and other network configuration information.", "G0059": " Magic Hound  : Magic Hound malware gathers the victim's local IP address, MAC address, and external IP address.", "G0045": " menuPass  : menuPass has used several tools to scan for open NetBIOS nameservers and enumerate NetBIOS sessions.", "S0084": " Mis-Type  : Mis-Type may create a file containing the results of the command .", "S0149": " MoonWind  : MoonWind obtains the victim IP address.", "S0284": " More_eggs  : More_eggs has the capability to gather the IP address from the victim's machine.", "S0256": " Mosquito  : Mosquito uses the  command.", "G0069": " MuddyWater  : MuddyWater has used malware to collect the victim\u2019s IP address and domain name.", "G0129": " Mustang Panda  : Mustang Panda has used  and  to determine network configuration information.", "S0205": " Naid  : Naid collects the domain name from a compromised host.", "G0019": " Naikon  : Naikon uses commands such as  to discover network interface settings.", "S0228": " NanHaiShu  : NanHaiShu can gather information about the victim proxy server.", "S0336": " NanoCore  : NanoCore gathers the IP address from the victim\u2019s machine.", "S0590": " NBTscan  : NBTscan can be used to collect MAC addresses.   ", "S0102": " nbtstat  : nbtstat can be used to discover local NetBIOS domain names.", "S0198": " NETWIRE  : NETWIRE can collect the IP address of a compromised host.", "S0359": " Nltest  : Nltest may be used to enumerate the parent domain of a local machine using .", "S0353": " NOKKI  : NOKKI can gather information on the victim IP address.", "S0346": " OceanSalt  : OceanSalt can collect the victim\u2019s IP address.", "S0340": " Octopus  : Octopus can collect the host IP address from the victim\u2019s machine.", "G0049": " OilRig  : OilRig has run  on a victim.", "S0439": " Okrum  : Okrum can collect network information, including the host IP address, DNS, and proxy information.", "S0365": " Olympic Destroyer  : Olympic Destroyer uses API calls to enumerate the infected system's ARP table.", "G0116": " Operation Wocao  : Operation Wocao has discovered the local network configuration with ipconfig.", "S0229": " Orz  : Orz can gather victim proxy information.", "S0165": " OSInfo  : OSInfo discovers the current domain information.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D can collect the network interface MAC address on the infected host.", "S0556": " Pay2Key  : Pay2Key can identify the IP and MAC addresses of the compromised host.", "S0587": " Penquin  : Penquin can report the IP of the compromised host to attacker controlled infrastructure.", "S0501": " PipeMon  : PipeMon can collect and send the local IP address, RDP information, and the network adapter physical address as a part of its C2 beacon.", "S0124": " Pisloader  : Pisloader has a command to collect the victim's IP address.", "S0254": " PLAINTEE  : PLAINTEE uses the  command to gather the victim\u2019s IP address.", "S0378": " PoshC2  : PoshC2 can enumerate network adapter information.", "S0139": " PowerDuke  : PowerDuke has a command to get the victim's domain and NetBIOS name.", "S0441": " PowerShower  : PowerShower has the ability to identify the current Windows domain of the infected host.", "S0223": " POWERSTATS  : POWERSTATS can retrieve IP, network adapter configuration information, and domain from compromised hosts.", "S0184": " POWRUNER  : POWRUNER may collect network configuration data by running  on a victim.", "S0113": " Prikormka  : A module in Prikormka collects information from the victim about its IP addresses and MAC addresses.", "S0238": " Proxysvc  : Proxysvc collects the network adapter information and domain/username information based on current remote sessions.", "S0192": " Pupy  : Pupy has built in commands to identify a host\u2019s IP address and find out other network configuration settings by viewing connected sessions.", "S0583": " Pysa  : Pysa can perform network reconnaissance using the Advanced IP Scanner tool.", "S0650": " QakBot  : QakBot can use , , and  to gather network configuration information.", "S0269": " QUADAGENT  : QUADAGENT gathers the current domain the victim system belongs to.", "S0458": " Ramsay  : Ramsay can use ipconfig and Arp to collect network configuration information, including routing information and ARP tables.", "S0241": " RATANKBA  : RATANKBA gathers the victim\u2019s IP address via the  command.", "S0172": " Reaver  : Reaver collects the victim's IP address.", "S0153": " RedLeaves  : RedLeaves can obtain information about network parameters.", "S0125": " Remsec  : Remsec can obtain information about network configuration, including the routing table, ARP cache, and DNS cache.", "S0379": " Revenge RAT  : Revenge RAT collects the IP address and MAC address from the system.", "S0433": " Rifdoor  : Rifdoor has the ability to identify the IP address of the compromised host.", "S0448": " Rising Sun  : Rising Sun can detect network adapter and IP address information.   ", "S0270": " RogueRobin  : RogueRobin gathers the IP address and domain from the victim\u2019s machine.", "S0103": " route  : route can be used to discover routing configuration information.", "S0446": " Ryuk  : Ryuk has called  in attempt to identify all mounted drives and hosts that have Address Resolution Protocol (ARP) entries. ", "G0034": " Sandworm Team  : Sandworm Team checks for connectivity to other resources in the network. ", "S0461": " SDBbot  : SDBbot has the ability to determine the domain name and whether a proxy is configured on a compromised host.", "S0596": " ShadowPad  : ShadowPad has collected the domain name of the victim system.", "S0140": " Shamoon  : Shamoon obtains the target's IP address and local network segment.", "S0450": " SHARPSTATS  : SHARPSTATS has the ability to identify the domain of the compromised host.", "S0445": " ShimRatReporter  : ShimRatReporter gathered the local proxy, domain, IP, routing tables, mac address, gateway, DNS servers, and DHCP status information from an infected host.", "S0589": " Sibot  : Sibot checked if the compromised system is configured to use proxies.", "S0610": " SideTwist  : SideTwist has the ability to collect the domain name on a compromised host.", "G0121": " Sidewinder  : Sidewinder has used malware to collect information on network interfaces, including the MAC address.", "S0633": " Sliver  : Sliver has the ability to gather network configuration information.", "S0516": " SoreFang  : SoreFang can collect the TCP/IP, DNS, DHCP, and network adapter configuration on a compromised host via .", "S0374": " SpeakUp  : SpeakUp uses the  command. ", "S0646": " SpicyOmelette  : SpicyOmelette can identify the IP of a compromised system.", "G0038": " Stealth Falcon  : Stealth Falcon malware gathers the Address Resolution Protocol (ARP) table from the victim.", "S0491": " StrongPity  : StrongPity can identify the IP address of a compromised host.", "S0603": " Stuxnet  : Stuxnet collects the IP address of a compromised system.", "S0559": " SUNBURST  : SUNBURST collected all network interface MAC addresses that are up and not loopback devices, as well as IP address, DHCP configuration, and domain information.", "S0018": " Sykipot  : Sykipot may use  to gather system network configuration details.", "S0060": " Sys10  : Sys10 collects the local IP address of the victim and sends it to the C2.", "S0098": " T9000  : T9000 gathers and beacons the MAC and IP addresses during installation.", "S0011": " Taidoor  : Taidoor has collected the MAC address of a compromised host; it can also use  to identify network adapters.", "S0467": " TajMahal  : TajMahal has the ability to identify the MAC address on an infected host.", "G0139": " TeamTNT  : TeamTNT looks for the host machine\u2019s IP address.", "G0027": " Threat Group-3390  : Threat Group-3390 actors use NBTscan to discover vulnerable systems.", "S0266": " TrickBot  : TrickBot obtains the IP address, location, and other relevant network information from the victim\u2019s machine.", "S0094": " Trojan.Karagany  : Trojan.Karagany can gather information on the network configuration of a compromised host.", "G0081": " Tropic Trooper  : Tropic Trooper has used scripts to collect the host's network topology.  ", "S0436": " TSCookie  : TSCookie has the ability to identify the IP of the infected host.", "S0647": " Turian  : Turian can retrieve the internal IP address of a compromised host.", "G0010": " Turla  : Turla surveys a system upon check-in to discover network configuration details using the , , , , and  commands, as well as NBTscan. Turla RPC backdoors have also retrieved registered RPC interface information from process memory.", "S0130": " Unknown Logger  : Unknown Logger can obtain information about the victim's IP address.", "S0275": " UPPERCUT  : UPPERCUT has the capability to gather the victim's proxy information.", "S0452": " USBferry  : USBferry can detect the infected machine's network topology using  and .  ", "S0476": " Valak  : Valak has the ability to identify the domain and the MAC and IP addresses of an infected machine.", "S0257": " VERMIN  : VERMIN gathers the local IP address.", "S0180": " Volgmer  : Volgmer can gather the IP address from the victim's machine.", "S0366": " WannaCry  : WannaCry will attempt to determine the local network segment it is a part of.", "S0515": " WellMail  : WellMail can identify the IP address of the victim system.", "S0514": " WellMess  : WellMess can identify the IP address and user domain on the target machine.", "G0102": " Wizard Spider  : Wizard Spider has used \"ipconfig\" to identify the network configuration of a victim machine.", "S0341": " Xbash  : Xbash can collect IP addresses and local intranet information from a victim\u2019s machine.", "S0653": " xCaon  : xCaon has used the GetAdaptersInfo() API call to get the victim's MAC address.", "S0248": " yty  : yty runs  and collects the domain name.", "S0251": " Zebrocy  : Zebrocy runs the  command.", "S0230": " ZeroT  : ZeroT gathers the victim's IP address and domain information, and then sends it to its C2 server.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used a tool to enumerate proxy settings in the target environment.", "S0350": " zwShell  : zwShell can obtain the victim IP address."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1016", "subtechniques": ["T1016.001"], "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-309"], "version": "1.3", "created": "31 May 2017", "lastmodified": "08 October 2021"}, {"techniquename": "Software Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.", "procedureexamples": {"S0534": " Bazar  : Bazar can query the Registry for installed applications.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used tools to enumerate software installed on an infected host.", "S0482": " Bundlore  : Bundlore has the ability to enumerate what browser is being used as well as version information for Safari.", "S0154": " Cobalt Strike  : The Cobalt Strike System Profiler can discover applications through the browser and identify the version of Java the target has.", "S0126": " ComRAT  : ComRAT can check the victim's default browser to determine which process to inject its communications module into.", "S0472": " down_new  : down_new has the ability to gather information on installed applications.", "S0384": " Dridex  : Dridex has collected a list of installed software on the system.", "S0062": " DustySky  : DustySky lists all installed software for the infected machine.", "S0024": " Dyre  : Dyre has the ability to identify installed programs on a compromised host.", "S0431": " HotCroissant  : HotCroissant can retrieve a list of applications from the  registry key.", "G0100": " Inception  : Inception has enumerated installed software on compromised systems.", "S0260": " InvisiMole  : InvisiMole can collect information about installed software used by specific users, software executed on user login, and software executed by each system.", "S0526": " KGH_SPY  : KGH_SPY can collect information on installed applications.", "S0652": " MarkiRAT  : MarkiRAT can check for the Telegram installation directory by enumerating the files on disk.", "S0455": " Metamorfo  : Metamorfo has searched the compromised system for banking applications.", "G0069": " MuddyWater  : MuddyWater has used a PowerShell backdoor to check for Skype connectivity on the target machine.", "G0129": " Mustang Panda  : Mustang Panda has searched the victim system for the  program and its version.", "G0116": " Operation Wocao  : Operation Wocao has collected a list of installed software on the infected system.", "S0229": " Orz  : Orz can gather the victim's Internet Explorer version.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell can list PHP server configuration details.", "S0650": " QakBot  : QakBot can enumerate a list of installed programs.", "S0148": " RTM  : RTM can scan victim drives to look for specific banking software on the machine to determine next actions.", "S0445": " ShimRatReporter  : ShimRatReporter gathered a list of installed software on the infected host.", "G0121": " Sidewinder  : Sidewinder has used tools to enumerate software installed on an infected host.", "S0623": " Siloscape  : Siloscape searches for the kubectl binary.", "S0646": " SpicyOmelette  : SpicyOmelette can enumerate running software on a targeted system.", "S0467": " TajMahal  : TajMahal has the ability to identify the Internet Explorer (IE) version on an infected host.", "G0081": " Tropic Trooper  : Tropic Trooper's backdoor could list the infected system's installed software.", "G0124": " Windigo  : Windigo has used a script to detect installed software on targeted systems.", "G0112": " Windshift  : Windshift has used malware to identify installed software.", "S0658": " XCSSET  : XCSSET uses  with the  command to enumerate common browsers and system processes potentially impacting XCSSET's exfiltration capabilities."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1518", "subtechniques": ["T1518.001"], "tactics": ["Discovery"], "platforms": ["Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "capecid": ["CAPEC-580"], "version": "1.3", "created": "16 September 2019", "lastmodified": "29 March 2021"}, {"techniquename": "Security Software Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .In cloud environments, additionally monitor logs for the usage of APIs that may be used to gather information about security software configurations within the environment.", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Example commands that can be used to obtain security software information are netsh,  with Reg,  with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.Adversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "procedureexamples": {"S0469": " ABK  : ABK has the ability to identify the installed anti-virus product on the compromised host.", "G0082": " APT38  : APT38 has identified security software, configurations, defensive tools, and sensors installed on a compromised system.", "S0373": " Astaroth  : Astaroth checks for the presence of Avast antivirus in the  folder. ", "S0473": " Avenger  : Avenger has the ability to identify installed anti-virus products on a compromised host.", "S0337": " BadPatch  : BadPatch uses WMI to enumerate installed security products in the victim\u2019s environment.", "S0534": " Bazar  : Bazar can identify the installed antivirus engine.", "S0657": " BLUELIGHT  : BLUELIGHT can collect a list of anti-virus products installed on a machine.", "S0471": " build_downer  : build_downer has the ability to detect if the infected host is running an anti-virus process.", "S0484": " Carberp  : Carberp has queried the infected system's registry searching for specific registry keys associated with antivirus products.", "S0023": " CHOPSTICK  : CHOPSTICK checks for antivirus and forensics software.", "S0611": " Clop  : Clop can search for processes with antivirus and antimalware product names.", "G0080": " Cobalt Group  : Cobalt Group used a JavaScript backdoor that is capable of collecting a list of the security solutions installed on the victim's machine.", "S0244": " Comnie  : Comnie attempts to detect several anti-virus products.", "S0492": " CookieMiner  : CookieMiner has checked for the presence of \"Little Snitch\", macOS network monitoring and application firewall software, stopping and exiting if it is found.", "S0046": " CozyCar  : The main CozyCar dropper checks whether the victim has an anti-virus product installed. If the installed product is on a predetermined list, the dropper will exit.", "S0115": " Crimson  : Crimson contains a command to collect information about anti-virus software on the victim.", "G0012": " Darkhotel  : Darkhotel has searched for anti-malware strings and anti-virus processes running on the system. ", "S0472": " down_new  : down_new has the ability to detect anti-virus products and processes on a compromised host.", "S0062": " DustySky  : DustySky checks for the existence of anti-virus.", "S0363": " Empire  : Empire can enumerate antivirus software on the target.", "S0091": " Epic  : Epic searches for anti-malware services running on the victim\u2019s machine and terminates itself if it finds them.", "S0396": " EvilBunny  : EvilBunny has been observed querying installed antivirus software.", "S0568": " EVILNUM  : EVILNUM can search for anti-virus products on the system.", "S0171": " Felismus  : Felismus checks for processes associated with anti-virus vendors.", "S0267": " FELIXROOT  : FELIXROOT checks for installed security software like antivirus and firewall.", "G0061": " FIN8  : FIN8 has used Registry keys to detect and avoid executing in potential sandboxes.", "S0182": " FinFisher  : FinFisher probes the system to check for antimalware processes.", "S0143": " Flame  : Flame identifies security software such as antivirus through the Security module.", "S0381": " FlawedAmmyy  : FlawedAmmyy will attempt to detect anti-virus products during the initial infection.", "G0101": " Frankenstein  : Frankenstein has used WMI queries to detect if virtualization environments or analysis tools were running on the system.", "S0249": " Gold Dragon  : Gold Dragon checks for anti-malware products and processes.", "S0531": " Grandoreiro  : Grandoreiro can list installed security products including the Trusteer and Diebold Warsaw GAS Tecnologia online banking protections.", "S0260": " InvisiMole  : InvisiMole can check for the presence of network sniffers, AV, and BitDefender firewall.", "S0201": " JPIN  : JPIN checks for the presence of certain security-related processes and deletes its installer/uninstaller component if it identifies any of them.", "S0283": " jRAT  : jRAT can list security software, such as by using WMIC to identify anti-virus products installed on the victim\u2019s machine and to obtain firewall details.", "S0088": " Kasidet  : Kasidet has the ability to identify any anti-virus installed on the infected system.", "S0513": " LiteDuke  : LiteDuke has the ability to check for the presence of Kaspersky security software.", "S0652": " MarkiRAT  : MarkiRAT can check for running processes on the victim\u2019s machine to look for Kaspersky and Bitdefender antivirus products.", "S0455": " Metamorfo  : Metamorfo collects a list of installed antivirus software from the victim\u2019s system. ", "S0339": " Micropsia  : Micropsia searches for anti-virus software and firewall products installed on the victim\u2019s machine using WMI.", "S0553": " MoleNet  : MoleNet can use WMI commands to check the system for firewall and antivirus software.", "S0284": " More_eggs  : More_eggs can obtain information on installed anti-malware programs.", "S0256": " Mosquito  : Mosquito's installer searches the Registry and system to see if specific antivirus tools are installed on the system.", "G0069": " MuddyWater  : MuddyWater has used malware to check running processes against a hard-coded list of security tools often used by malware researchers.", "G0019": " Naikon  : Naikon uses commands such as  to discover local firewall settings.", "S0108": " netsh  : netsh can be used to discover system firewall settings.", "S0457": " Netwalker  : Netwalker can detect and terminate active security software-related processes on infected systems.  ", "S0368": " NotPetya  : NotPetya determines if specific antivirus programs are running on an infected host machine.", "G0116": " Operation Wocao  : Operation Wocao has used scripts to detect security software.", "G0040": " Patchwork  : Patchwork scanned the \"Program Files\" directories for a directory with the string \"Total Security\" (the installation path of the \"360 Total Security\" antivirus tool).", "S0501": " PipeMon  : PipeMon can check for the presence of ESET and Kaspersky security software.", "S0223": " POWERSTATS  : POWERSTATS has detected security tools.", "S0184": " POWRUNER  : POWRUNER may collect information on the victim's anti-virus software.", "S0113": " Prikormka  : A module in Prikormka collects information from the victim about installed anti-virus software.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY can gather AVs registered in the system.  ", "S0650": " QakBot  : QakBot can identify the installed antivirus product on a targeted system.", "S0125": " Remsec  : Remsec has a plugin to detect active drivers of some security products.", "G0106": " Rocke  : Rocke used scripts which detected and uninstalled antivirus software.", "S0270": " RogueRobin  : RogueRobin enumerates running processes to search for Wireshark and Windows Sysinternals suite.", "S0240": " ROKRAT  : ROKRAT checks for debugging tools.", "S0148": " RTM  : RTM can obtain information about security software on the victim.", "G0121": " Sidewinder  : Sidewinder has used the Windows service  to check installed antivirus products.", "S0468": " Skidmap  : Skidmap has the ability to check if  exists. This file controls what mode SELinux is in. ", "S0646": " SpicyOmelette  : SpicyOmelette can check for the presence of 29 different antivirus tools.", "S0380": " StoneDrill  : StoneDrill can check for antivirus and antimalware programs.    ", "S0142": " StreamEx  : StreamEx has the ability to scan for security tools such as firewalls and antivirus tools.", "S0491": " StrongPity  : StrongPity can identify if ESET or BitDefender antivirus are installed before dropping its payload.", "S0603": " Stuxnet  : Stuxnet enumerates the currently running processes related to a variety of security products.", "S0559": " SUNBURST  : SUNBURST checked for a variety of antivirus/endpoint detection agents prior to execution.", "S0098": " T9000  : T9000 performs checks for various antivirus and security products during installation.", "S0467": " TajMahal  : TajMahal has the ability to identify which anti-virus products, firewalls, and anti-spyware products are in use.", "S0057": " Tasklist  : Tasklist can be used to enumerate security software currently running on a system by process name of known products.", "G0139": " TeamTNT  : TeamTNT has searched for security products on infected machines.", "G0089": " The White Company  : The White Company has checked for specific antivirus products on the target\u2019s computer, including Kaspersky, Quick Heal, AVG, BitDefender, Avira, Sophos, Avast!, and ESET.", "S0595": " ThiefQuest  : ThiefQuest uses the  function to get a list of running processes, compares each process with an encrypted list of \"unwanted\" security related programs, and kills the processes for security related programs.", "G0081": " Tropic Trooper  : Tropic Trooper can search for anti-virus software running on the system.", "G0010": " Turla  : Turla has obtained information on security software, including security logging information that may indicate whether their malware has been detected.", "S0476": " Valak  : Valak can determine if a compromised host has security products installed.", "S0257": " VERMIN  : VERMIN uses WMI to check for anti-virus software installed on the system.", "S0579": " Waterbear  : Waterbear can find the presence of a specific security software.", "G0112": " Windshift  : Windshift has used malware to identify installed AV and commonly used forensic and malware analysis tools.", "S0176": " Wingbird  : Wingbird checks for the presence of Bitdefender security software.", "G0102": " Wizard Spider  : Wizard Spider has used WMI to identify anti-virus products installed on a victim's machine.", "S0653": " xCaon  : xCaon has checked for the existence of Kaspersky antivirus software on the system.", "S0658": " XCSSET  : XCSSET searches firewall configuration files located in  and uses  to determine if System Integrity Protection is enabled.", "S0388": " YAHOYAH  : YAHOYAH checks for antimalware solution processes on the system.", "S0330": " Zeus Panda  : Zeus Panda checks to see if anti-virus, anti-spyware, or firewall products are installed in the victim\u2019s environment."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1518.001", "subtechniqueof": "T1518", "tactics": ["Discovery"], "platforms": ["Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-581"], "version": "1.2", "created": "21 February 2020", "lastmodified": "29 March 2021"}, {"techniquename": "System Location Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system location information. Remote access tools with built-in features may interact directly with the Windows API, such as calling  to gather information.Monitor traffic flows to geo-location service provider sites, such as ip-api and ipinfo.", "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings. Windows API functions such as  can also be used to determine the locale of the host. In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.Adversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.", "procedureexamples": {"S0115": " Crimson  : Crimson can identify the geographical location of a victim host.   ", "S0632": " GrimAgent  : GrimAgent can identify the country code on a compromised host.", "S0481": " Ragnar Locker  : Before executing malicious code, Ragnar Locker checks the Windows API  and doesn't encrypt files if it finds a former Soviet country."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1614", "subtechniques": ["T1614.001"], "tactics": ["Discovery"], "platforms": ["IaaS, Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Hiroki Nagahama, NEC Corporation; Katie Nickels, Red Canary; Manikantan Srinivasan, NEC Corporation India; Pooja Natarajan, NEC Corporation India; Wes Hurd"], "version": "1.0", "created": "01 April 2021", "lastmodified": "15 October 2021"}, {"techniquename": "Remote System Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .Monitor for processes that can be used to discover remote systems, such as  and , especially when executed in quick succession.", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or  using Net. Adversaries may also use local host files (ex:  or ) in order to discover the hostname to IP address mappings of remote systems. ", "procedureexamples": {"S0552": " AdFind  : AdFind has the ability to query Active Directory for computers.", "G0016": " APT29  : APT29 has used AdFind to enumerate remote systems.", "G0022": " APT3  : APT3 has a tool that can detect the existence of remote systems.", "G0050": " APT32  : APT32 has enumerated DC servers using the command . The group has also used the  command.", "G0087": " APT39  : APT39 has used NBTscan and custom tools to discover remote systems.", "S0534": " Bazar  : Bazar can enumerate remote systems using .", "S0570": " BitPaymer  : BitPaymer can use  to discover remote systems.", "S0521": " BloodHound  : BloodHound can enumerate and collect the properties of domain computers, including domain controllers.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER typically use  and Net to enumerate systems.", "S0335": " Carbon  : Carbon uses the  command.", "G0114": " Chimera  : Chimera has utilized various scans and queries to find domain controllers and remote services in the target environment.", "S0154": " Cobalt Strike  : Cobalt Strike uses the native Windows Network Enumeration APIs to interrogate and discover targets in a Windows Active Directory network.", "S0244": " Comnie  : Comnie runs the  command", "S0575": " Conti  : Conti has the ability to discover hosts on a target network.", "S0488": " CrackMapExec  : CrackMapExec can discover active IP addresses, along with the machine name, within a targeted network.", "G0009": " Deep Panda  : Deep Panda has used ping to identify other machines of interest.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 likely obtained a list of hosts in the victim environment.", "S0091": " Epic  : Epic uses the  command on the victim\u2019s machine.", "G0053": " FIN5  : FIN5 has used the open source tool Essential NetTools to map the network and build a list of targets.", "G0037": " FIN6  : FIN6 used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.", "G0061": " FIN8  : FIN8 has used dsquery and other Active Directory utilities to enumerate hosts; they have also used  to retrieve a list of domain controllers.", "G0117": " Fox Kitten  : Fox Kitten has used Angry IP Scanner to detect remote systems.", "G0093": " GALLIUM  : GALLIUM used a modified version of NBTscan to identify available NetBIOS name servers over the network as well as  to identify remote systems.", "G0119": " Indrik Spider  : Indrik Spider has used PowerView to enumerate all Windows Server, Windows Server 2003, and Windows 7 instances in the Active Directory database.", "S0604": " Industroyer  : Industroyer can enumerate remote computers in the compromised network.", "G0004": " Ke3chang  : Ke3chang has used network scanning and enumeration tools, including Ping.", "S0599": " Kinsing  : Kinsing has used a script to parse files like  and SSH  to discover remote systems.", "S0236": " Kwampirs  : Kwampirs collects a list of available servers with the command .", "G0077": " Leafminer  : Leafminer used Microsoft\u2019s Sysinternals tools to gather detailed information about remote systems.", "G0045": " menuPass  : menuPass uses scripts to enumerate IP ranges on the victim network. menuPass has also issued the command  to a PlugX implant to gather information about remote systems on the network.", "S0233": " MURKYTOP  : MURKYTOP has the capability to identify remote hosts on connected networks.", "G0019": " Naikon  : Naikon has used a netbios scanner for remote machine identification.", "S0590": " NBTscan  : NBTscan can list NetBIOS computer names.    ", "S0039": " Net  : Commands such as  can be used in Net to gather information about available remote systems.", "S0385": " njRAT  : njRAT can identify remote hosts on connected networks.", "S0359": " Nltest  : Nltest may be used to enumerate remote domain controllers using options such as  and .", "S0365": " Olympic Destroyer  : Olympic Destroyer uses Windows Management Instrumentation to enumerate all systems in the network.", "G0116": " Operation Wocao  : Operation Wocao can use the  command to discover remote systems.", "S0165": " OSInfo  : OSInfo performs a connection test to discover remote systems in the network", "S0097": " Ping  : Ping can be used to identify remote systems within a network.", "S0428": " PoetRAT  : PoetRAT used Nmap for remote system discovery.", "S0650": " QakBot  : QakBot can identify remote systems through the  command.", "S0241": " RATANKBA  : RATANKBA runs the  and  commands.", "S0125": " Remsec  : Remsec can ping or traceroute a remote host.", "G0106": " Rocke  : Rocke has looked for IP addresses in the known_hosts file on the infected system and attempted to SSH into them.    ", "G0034": " Sandworm Team  : Sandworm Team has used a tool to query Active Directory using LDAP, discovering information about computers listed in AD. ", "S0140": " Shamoon  : Shamoon scans the C-class subnet of the IPs on the victim's interfaces.", "S0063": " SHOTPUT  : SHOTPUT has a command to list all servers in the domain, as well as one to locate domain controllers on a domain.", "G0091": " Silence  : Silence has used Nmap to scan the corporate network, build a network topology, and identify vulnerable hosts.    ", "S0646": " SpicyOmelette  : SpicyOmelette can identify payment systems, payment gateways, and ATM systems in compromised environments.", "S0018": " Sykipot  : Sykipot may use  to display hostnames of available systems on a network.", "S0586": " TAINTEDSCRIBE  : The TAINTEDSCRIBE command and execution module can perform target system enumeration.", "G0027": " Threat Group-3390  : Threat Group-3390 has used the  command.", "S0266": " TrickBot  : TrickBot can enumerate computers and network devices.", "S0609": " TRITON  : TRITON\u2019s TsLow python module pings controllers over the TriStation protocol. ", "G0010": " Turla  : Turla surveys a system upon check-in to discover remote systems on a local network using the  and  commands. Turla has also used , , and  to enumerate domain computers, including the organization's DC and Exchange Server.", "S0452": " USBferry  : USBferry can use  to gather information about remote systems.", "S0366": " WannaCry  : WannaCry scans its local network segment for remote systems to try to exploit and copy itself to.", "G0102": " Wizard Spider  : Wizard Spider has used networkdll for network discovery and psfin specifically for financial and point of sale indicators. Wizard Spider has also used AdFind and  to enumerate domain computers, including the domain controller.", "S0248": " yty  : yty uses the  command for discovery."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1018", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "capecid": ["CAPEC-292"], "contributors": ["Daniel Stepanic, Elastic; RedHuntLabs, @redhuntlabs"], "version": "3.2", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Query Registry", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Interaction with the Windows Registry may come from the command line using utilities such as  or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.The Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL can enumerate registry keys.", "G0050": " APT32  : APT32's backdoor can query the Windows Registry to gather system information. ", "G0087": " APT39  : APT39 has used various strains of malware to query the Registry.", "S0438": " Attor  : Attor has opened the registry and performed query searches.", "S0344": " Azorult  : Azorult can check for installed software on the system under the Registry key .", "S0414": " BabyShark  : BabyShark has executed the  command for . ", "S0031": " BACKSPACE  : BACKSPACE is capable of enumerating and making modifications to an infected system's Registry.", "S0239": " Bankshot  : Bankshot searches for certain Registry keys to be configured before executing the payload.", "S0534": " Bazar  : Bazar can query  for installed applications.", "S0574": " BendyBear  : BendyBear can query the host's Registry key at  to retrieve data.", "S0570": " BitPaymer  : BitPaymer can use the RegEnumKeyW to iterate through Registry keys. ", "S0252": " Brave Prince  : Brave Prince gathers information about the Registry.", "S0030": " Carbanak  : Carbanak checks the Registry key  for proxy configurations information.", "S0484": " Carberp  : Carberp has searched the Image File Execution Options registry key for \"Debugger\" within every subkey.", "S0335": " Carbon  : Carbon enumerates values in the Registry.", "S0348": " Cardinal RAT  : Cardinal RAT contains watchdog functionality that periodically ensures  is set to point to its executable.", "G0114": " Chimera  : Chimera has queried Registry keys using  and .", "S0023": " CHOPSTICK  : CHOPSTICK provides access to the Windows Registry, which can be used to gather information.", "S0154": " Cobalt Strike  : Cobalt Strike can query   to determine if the security setting for restricting default programmatic access is enabled.", "S0126": " ComRAT  : ComRAT can check the default browser by querying .", "S0115": " Crimson  : Crimson can check the Registry for the presence of  to determine how long it has been installed on a host.", "S0354": " Denis  : Denis queries the Registry for keys and values.", "S0021": " Derusbi  : Derusbi is capable of enumerating Registry keys and values.", "S0186": " DownPaper  : DownPaper searches and reads the value of the Windows Update Registry Run key.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 queried the Registry to identify victim information.", "S0567": " Dtrack  : Dtrack can collect the RegisteredOwner, RegisteredOrganization, and InstallDate registry values.", "S0091": " Epic  : Epic uses the  command to obtain values from Registry keys.", "S0512": " FatDuke  : FatDuke can get user agent strings for the default browser from .", "S0267": " FELIXROOT  : FELIXROOT queries the Registry for specific keys for potential privilege escalation and proxy information. FELIXROOT has also used WMI to query the Windows Registry.", "S0182": " FinFisher  : FinFisher queries Registry values as part of its anti-sandbox checks.", "G0117": " Fox Kitten  : Fox Kitten has accessed Registry hives ntuser.dat and UserClass.dat.", "S0032": " gh0st RAT  : gh0st RAT has checked for the existence of a Service key to determine if it has already been installed on the system.", "S0249": " Gold Dragon  : Gold Dragon enumerates registry keys with the command  and obtains information for the Registry key .", "S0376": " HOPLIGHT  : A variant of HOPLIGHT hooks lsass.exe, and lsass.exe then checks the Registry for the data value 'rdpproto' under the key .", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can retrieve system information, such as CPU speed, from Registry keys.", "S0604": " Industroyer  : Industroyer has a data wiper component that enumerates keys in the Registry .", "S0260": " InvisiMole  : InvisiMole can enumerate Registry values, keys, and data.", "S0201": " JPIN  : JPIN can enumerate Registry keys.", "G0032": " Lazarus Group  : Lazarus Group malware IndiaIndia checks Registry keys within HKCU and HKLM to determine if certain applications are present, including SecureCRT, Terminal Services, RealVNC, TightVNC, UltraVNC, Radmin, mRemote, TeamViewer, FileZilla, pcAnyware, and Remote Desktop. Another Lazarus Group malware sample checks for the presence of the following Registry key:.", "S0513": " LiteDuke  : LiteDuke can query the Registry to check for the presence of .", "S0532": " Lucifer  : Lucifer can check for existing stratum cryptomining information in .", "S0385": " njRAT  : njRAT can read specific registry values.", "G0049": " OilRig  : OilRig has used  on a victim to query the Registry.", "G0116": " Operation Wocao  : Operation Wocao has queried the registry to detect recent PuTTY sessions.", "S0165": " OSInfo  : OSInfo queries the registry to look for information about Terminal Services.", "S0517": " Pillowmint  : Pillowmint has used shellcode which reads code stored in the registry keys  using the native Windows API as well as read  as part of its C2. ", "S0013": " PlugX  : PlugX can enumerate and query for information contained within the Windows Registry.", "S0145": " POWERSOURCE  : POWERSOURCE queries Registry keys in preparation for setting Run keys to achieve persistence.", "S0194": " PowerSploit  : PowerSploit contains a collection of Privesc-PowerUp modules that can query Registry keys for potential opportunities.", "S0184": " POWRUNER  : POWRUNER may query the Registry by running  on a victim.", "S0238": " Proxysvc  : Proxysvc gathers product names from the Registry key:  and the processor description from the Registry key .", "S0269": " QUADAGENT  : QUADAGENT checks if a value exists within a Registry key in the HKCU hive whose name is the same as the scheduled task it has created.", "S0241": " RATANKBA  : RATANKBA uses the command .", "S0172": " Reaver  : Reaver queries the Registry to determine the correct Startup path to use for persistence.", "S0075": " Reg  : Reg may be used to gather details from the Windows Registry of a local or remote system at the command-line interface.", "S0496": " REvil  : REvil can query the Registry to get random file extensions to append to encrypted files.", "S0240": " ROKRAT  : ROKRAT accesses the  Registry key to obtain the System manufacturer value to identify the machine type.", "S0140": " Shamoon  : Shamoon queries several Registry keys to identify hard disk partitions to overwrite.", "S0589": " Sibot  : Sibot has queried the registry for proxy server information.", "S0627": " SodaMaster  : SodaMaster has the ability to query the Registry to detect a key specific to VMware.", "G0038": " Stealth Falcon  : Stealth Falcon malware attempts to determine the installed version of .NET by querying the Registry.", "S0380": " StoneDrill  : StoneDrill has looked in the registry to find the default browser path.", "S0603": " Stuxnet  : Stuxnet searches the Registry for indicators of security programs.", "S0559": " SUNBURST  : SUNBURST collected the registry value  from compromised hosts.", "S0242": " SynAck  : SynAck enumerates Registry keys associated with event logs.", "S0011": " Taidoor  : Taidoor can query the Registry on compromised hosts using .", "S0560": " TEARDROP  : TEARDROP checked that  existed before decoding its embedded payload. ", "G0027": " Threat Group-3390  : A Threat Group-3390 tool can read and decrypt stored Registry values.", "G0010": " Turla  : Turla surveys a system upon check-in to discover information in the Windows Registry with the  command. Turla has also retrieved PowerShell payloads hidden in Registry keys as well as checking keys associated with null session named pipes .", "S0386": " Ursnif  : Ursnif has used Reg to query the Registry for installed programs.", "S0476": " Valak  : Valak can use the Registry for code updates and to collect credentials.", "S0180": " Volgmer  : Volgmer checks the system for certain Registry keys.", "S0612": " WastedLocker  : WastedLocker checks for specific registry keys related to the  and  interfaces.", "S0579": " Waterbear  : Waterbear can query the Registry to retrieve data.", "S0155": " WINDSHIELD  : WINDSHIELD can gather Registry values.", "S0251": " Zebrocy  : Zebrocy executes the  command to obtain information in the Registry.", "S0330": " Zeus Panda  : Zeus Panda checks for the existence of a Registry key and if it contains certain values.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used a tool to query the Registry for proxy settings.", "S0412": " ZxShell  : ZxShell can query the netsvc group value data located in the svchost group Registry key. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1012", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM, User"], "capecid": ["CAPEC-647"], "version": "1.2", "created": "31 May 2017", "lastmodified": "26 March 2020"}, {"techniquename": "System Information Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .In cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be useful due to benign use during normal operations.", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the  configuration tool on macOS. As an example, adversaries with user-level access can execute the  command to obtain currently mounted disks and associated freely available space. System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "procedureexamples": {"S0065": " 4H RAT  : 4H RAT sends an OS version identifier in its beacons.", "G0018": " admin@338  : admin@338 actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about the OS:  ", "S0045": " ADVSTORESHELL  : ADVSTORESHELL can run Systeminfo to gather information about the victim.", "S0331": " Agent Tesla  : Agent Tesla can collect the system's computer name and also has the capability to collect information on the processor, memory, OS, and video card from the system.", "S0504": " Anchor  : Anchor can determine the hostname and linux version on a compromised host.", "S0584": " AppleJeus  : AppleJeus has collected the victim host information after infection.", "S0622": " AppleSeed  : AppleSeed can identify the OS version of a targeted system.", "G0026": " APT18  : APT18 can collect system information from the victim\u2019s machine.", "G0073": " APT19  : APT19 collected system architecture information. APT19 used an HTTP malware variant and a Port 22 malware variant to gather the hostname and CPU information from the victim\u2019s machine.", "G0016": " APT29  : APT29 used  to check available free space before executing actions that might create large files on disk.", "G0022": " APT3  : APT3 has a tool that can obtain information about the local system.", "G0050": " APT32  : APT32 has collected the OS version and computer name from victims. One of the group's backdoors can also query the Windows Registry to gather system information, and another macOS backdoor performs a fingerprint of the machine on its first connection to the C&C server. APT32 executed shellcode to identify the name of the infected host.", "G0067": " APT37  : APT37 collects the computer name, the BIOS model, and execution path.", "G0082": " APT38  : APT38 has attempted to get detailed information about a compromised host, including the operating system, version, patches, hotfixes, and service packs.", "S0456": " Aria-body  : Aria-body has the ability to identify the hostname, computer name, Windows version, processor speed, machine GUID, and disk information on a compromised host.", "S0373": " Astaroth  : Astaroth collects the machine name and keyboard language from the system. ", "S0438": " Attor  : Attor monitors the free disk space on the system.", "S0473": " Avenger  : Avenger has the ability to identify the host volume ID and the OS architecture on a compromised host.", "S0344": " Azorult  : Azorult can collect the machine information, system architecture, the OS version, computer name, Windows product name, the number of CPU cores, video card information, and the system language.", "S0638": " Babuk  : Babuk can enumerate disk volumes, get disk information, and query service status.", "S0414": " BabyShark  : BabyShark has executed the  command.    ", "S0475": " BackConfig  : BackConfig has the ability to gather the victim's computer name.", "S0093": " Backdoor.Oldrea  : Backdoor.Oldrea collects information about the OS and computer name.", "S0031": " BACKSPACE  : During its initial execution, BACKSPACE extracts operating system information from the infected host.", "S0245": " BADCALL  : BADCALL collects the computer name and host name on the compromised system.", "S0642": " BADFLICK  : BADFLICK has captured victim computer name, memory space, and CPU details.", "S0337": " BadPatch  : BadPatch collects the OS system, OS version, MAC address, and the computer name from the victim\u2019s machine.", "S0234": " Bandook  : Bandook can collect information about the drives available on the system. ", "S0239": " Bankshot  : Bankshot gathers system information, network addresses, disk type, disk free space, and the operation system version.", "S0534": " Bazar  : Bazar can fingerprint architecture, computer name, and OS version on the compromised host. Bazar can also check if the Russian language is installed on the infected machine and terminate if it is found.", "S0017": " BISCUIT  : BISCUIT has a command to collect the processor type, operation system, computer name, uptime, and whether the system is a laptop or PC.", "S0268": " Bisonal  : Bisonal has a command to gather system information from the victim\u2019s machine.", "S0089": " BlackEnergy  : BlackEnergy has used Systeminfo to gather the OS version, as well as information on the system configuration, BIOS, the motherboard, and the processor.", "S0564": " BlackMould  : BlackMould can enumerate local drives on a compromised host.", "S0520": " BLINDINGCAN  : BLINDINGCAN has collected from a victim machine the system name, processor information, OS version, and disk information, including type and free space available.", "G0108": " Blue Mockingbird  : Blue Mockingbird has collected hardware details for the victim's system, including CPU and memory information.", "S0657": " BLUELIGHT  : BLUELIGHT has collected the computer name and OS version from victim machines.", "S0486": " Bonadan  : Bonadan has discovered the OS version, CPU model, and RAM size of the system it has been installed on.", "S0635": " BoomBox  : BoomBox can enumerate the hostname, domain, and IP of a compromised host.", "S0252": " Brave Prince  : Brave Prince collects hard drive content and system configuration information.", "S0043": " BUBBLEWRAP  : BUBBLEWRAP collects system information, including the operating system version and hostname.", "S0471": " build_downer  : build_downer has the ability to send system volume information to C2.", "S0482": " Bundlore  : Bundlore will enumerate the macOS version to determine which follow-on behaviors to execute using .", "S0454": " Cadelspy  : Cadelspy has the ability to discover information about the compromised host.", "S0351": " Cannon  : Cannon can gather system information from the victim\u2019s machine such as the OS version, machine name, and drive information.", "S0484": " Carberp  : Carberp has collected the operating system version from the infected system.", "S0348": " Cardinal RAT  : Cardinal RAT can collect the hostname, Microsoft Windows version, and processor architecture from a victim machine.", "S0462": " CARROTBAT  : CARROTBAT has the ability to determine the operating system of the compromised host and whether Windows is being run with x86 or x64 architecture.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell has a module to gather information from the compromrised asset, including the computer version, computer name, IIS version, and more. ", "S0631": " Chaes  : Chaes has collected system information, including the machine name and OS version.", "S0144": " ChChes  : ChChes collects the victim hostname, window resolution, and Microsoft Windows version.", "G0114": " Chimera  : Chimera has used , , and  for sytesm information including shadow volumes and drive information.", "S0106": " cmd  : cmd can be used to find information about the operating system.", "S0244": " Comnie  : Comnie collects the hostname of the victim machine.", "S0137": " CORESHELL  : CORESHELL collects hostname, volume serial number and OS version data from the victim and sends the information to its C2 server.", "S0046": " CozyCar  : A system info module in CozyCar gathers information on the victim host\u2019s configuration.", "S0488": " CrackMapExec  : CrackMapExec can enumerate the system drives and associated system name.", "S0115": " Crimson  : Crimson contains a command to collect the victim PC name, disk drive information, and operating system.", "S0625": " Cuba  : Cuba can enumerate local drives, disk type, and disk free space.", "S0334": " DarkComet  : DarkComet can collect the computer name, RAM used, and operating system version from the victim\u2019s machine.", "G0012": " Darkhotel  : Darkhotel has collected the hostname, OS version, service pack version, and the processor architecture from the victim\u2019s machine.", "S0616": " DEATHRANSOM  : DEATHRANSOM can enumerate logical drives on a target system.", "S0354": " Denis  : Denis collects OS information and the computer name from the victim\u2019s machine.", "S0021": " Derusbi  : Derusbi gathers the name of the local host, version of GNU Compiler Collection (GCC), and the system information about the CPU, machine, and operating system.", "S0472": " down_new  : down_new has the ability to identify the system volume information of a compromised host.", "S0186": " DownPaper  : DownPaper collects the victim host name and serial number, and then sends the information to the C2 server.", "S0384": " Dridex  : Dridex has collected the computer name and OS architecture information from the system.", "S0547": " DropBook  : DropBook has checked for the presence of Arabic language in the infected machine's settings. ", "S0567": " Dtrack  : Dtrack can collect the victim's computer name, hostname and adapter information to create a unique identifier.", "S0062": " DustySky  : DustySky extracts basic information about the operating system.", "S0024": " Dyre  : Dyre has the ability to identify the computer name, OS version, and hardware configuration on a compromised host.", "S0554": " Egregor  : Egregor can perform a language check of the infected system and can query the CPU information (cupid).", "S0081": " Elise  : Elise executes  after initial communication is made to the remote server.", "S0082": " Emissary  : Emissary has the capability to execute ver and systeminfo commands.", "S0363": " Empire  : Empire can enumerate host system information like OS, architecture, applied patches, and more.", "S0634": " EnvyScout  : EnvyScout can determine whether the ISO payload was received by a Windows or iOS device.", "S0091": " Epic  : Epic collects the OS version, hardware information, computer name, available system memory status, disk space information, and system and user language settings.", "S0568": " EVILNUM  : EVILNUM can obtain the computer name from the victim's system.", "S0569": " Explosive  : Explosive has collected the computer name from the infected host. ", "S0181": " FALLCHILL  : FALLCHILL can collect operating system (OS) version information, processor information, system name, and information about installed disks from the victim.", "S0512": " FatDuke  : FatDuke can collect the user name, Windows version, computer name, and available space on discs from a compromised host.", "S0171": " Felismus  : Felismus collects the system information, including hostname and OS version, and sends it to the C2 server.", "S0267": " FELIXROOT  : FELIXROOT collects the victim\u2019s computer name, processor architecture, OS version, volume serial number, and system type.", "S0355": " Final1stspy  : Final1stspy obtains victim Microsoft Windows version information and CPU architecture.", "S0182": " FinFisher  : FinFisher checks if the victim OS is 32 or 64-bit.", "S0381": " FlawedAmmyy  : FlawedAmmyy beacons out the victim operating system and computer name during the initial infection.", "G0101": " Frankenstein  : Frankenstein has enumerated hosts, looking for the system's machine name.", "S0410": " Fysbis  : Fysbis has used the command  to determine which Linux OS version is running.", "G0047": " Gamaredon Group  : A Gamaredon Group file stealer can gather the victim's computer name and drive serial numbers to send to a C2 server.", "S0460": " Get2  : Get2 has the ability to identify the computer name and Windows version of an infected host.", "S0032": " gh0st RAT  : gh0st RAT has gathered system architecture, processor, OS configuration, and installed hardware information.", "S0249": " Gold Dragon  : Gold Dragon collects endpoint information using the  command.", "S0493": " GoldenSpy  : GoldenSpy has gathered operating system information.    ", "S0531": " Grandoreiro  : Grandoreiro can collect the computer name and OS version from a compromised host.", "S0237": " GravityRAT  : GravityRAT collects the MAC address, computer name, and CPU information.", "S0417": " GRIFFON  : GRIFFON has used a reconnaissance module that can be used to retrieve information about a victim's computer, including the resolution of the workstation .", "S0632": " GrimAgent  : GrimAgent can collect the OS, and build version on a compromised host.", "S0151": " HALFBAKED  : HALFBAKED can obtain information about the OS, processor, and BIOS.", "S0214": " HAPPYWORK  : can collect system information, including computer name, system manufacturer, IsDebuggerPresent state, and execution path.", "S0391": " HAWKBALL  : HAWKBALL can collect the OS version, architecture information, and computer name.", "S0617": " HELLOKITTY  : HELLOKITTY can enumerate logical drives on a target system.", "G0126": " Higaisa  : Higaisa collected the system volume serial number, GUID, and computer name.", "S0601": " Hildegard  : Hildegard has collected the host's OS, CPU, and memory information.", "G0072": " Honeybee  : Honeybee gathers computer name and information using the  command.", "S0376": " HOPLIGHT  : HOPLIGHT has been observed collecting victim machine information like OS version, drivers, volume information and more.", "S0431": " HotCroissant  : HotCroissant has the ability to determine if the current user is an administrator, Windows product name, processor name, screen resolution, and physical RAM of the infected host.", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can retrieve information such as computer name, OS version, processor speed, memory size, and CPU speed.", "S0483": " IcedID  : IcedID has the ability to identify the computer name and OS version on a compromised host.", "G0100": " Inception  : Inception has used a reconnaissance module to gather information about the operating system and hardware on the infected host.", "S0604": " Industroyer  : Industroyer collects the victim machine\u2019s Windows GUID.", "S0259": " InnaputRAT  : InnaputRAT gathers volume drive information and system information.", "S0260": " InvisiMole  : InvisiMole can gather information on the mapped drives, OS version, computer name, DEP policy, memory size, and system volume serial number.", "S0015": " Ixeshe  : Ixeshe collects the computer name of the victim's system during the initial infection.", "S0044": " JHUHUGIT  : JHUHUGIT obtains a build identifier as well as victim hard drive information from Windows registry key . Another JHUHUGIT variant gathers the victim storage volume serial number and the storage device name.", "S0201": " JPIN  : JPIN can obtain system information such as OS version and disk space.", "S0283": " jRAT  : jRAT collects information about the OS (version, build type, install date) as well as system up-time upon receiving a connection from a backdoor.", "S0215": " KARAE  : KARAE can collect system information.", "S0088": " Kasidet  : Kasidet has the ability to obtain a victim's system name and operating system version.", "S0265": " Kazuar  : Kazuar gathers information on the system and local drives.", "G0004": " Ke3chang  : Ke3chang performs operating system information discovery using .", "S0585": " Kerrdown  : Kerrdown has the ability to determine if the compromised host is running a 32 or 64 bit OS architecture.", "S0487": " Kessel  : Kessel has collected the system architecture, OS version, and MAC address information.", "S0387": " KeyBoy  : KeyBoy can gather extended system information, such as information about the operating system, disks, and memory.", "S0271": " KEYMARBLE  : KEYMARBLE has the capability to collect the computer name, language settings, the OS version, CPU information, disk devices, and time elapsed since system start.", "S0526": " KGH_SPY  : KGH_SPY can collect drive information from a compromised host.", "S0607": " KillDisk  : KillDisk retrieves the hard disk name by calling the  API.", "G0094": " Kimsuky  : Kimsuky has gathered information about the infected computer.", "S0641": " Kobalos  : Kobalos can record the hostname and kernel version of the target machine.", "S0156": " KOMPROGO  : KOMPROGO is capable of retrieving information about the infected system.", "S0356": " KONNI  : KONNI can gather the OS version, architecture information, connected drives, hostname, and computer name from the victim\u2019s machine and has used systeminfo.exe to get a snapshot of the current system state of the target machine.", "S0236": " Kwampirs  : Kwampirs collects OS version information such as registered owner details, manufacturer details, processor type, available storage, installed patches, hostname, version info, system date, and other system information by using the commands , , , , , and .", "G0032": " Lazarus Group  : Several Lazarus Group malware families collect information on the type and version of the victim OS, as well as the victim computer name and CPU information. A Destover-like variant used by Lazarus Group also collects disk space information and sends it to its C2 server..", "S0395": " LightNeuron  : LightNeuron gathers the victim computer name using the Win32 API call .", "S0211": " Linfo  : Linfo creates a backdoor through which remote attackers can retrieve system information.", "S0513": " LiteDuke  : LiteDuke can enumerate the CPUID and BIOS version on a compromised system.", "S0447": " Lokibot  : Lokibot has the ability to discover the computer name and Windows product name/version.", "S0451": " LoudMiner  : LoudMiner has monitored CPU usage.   ", "S0532": " Lucifer  : Lucifer can collect the computer name, system architecture, default language, and processor frequency of a compromised host.", "S0409": " Machete  : Machete collects the hostname of the target computer. ", "G0059": " Magic Hound  : Magic Hound malware has used a PowerShell command to check the victim system architecture to determine if it is an x64 machine. Other malware has obtained the OS version, UUID, and computer/host name to send to the C2 server.", "S0652": " MarkiRAT  : MarkiRAT can obtain the computer name from a compromised host.", "S0449": " Maze  : Maze has checked the language of the infected system using the \"GetUSerDefaultUILanguage\" function.", "S0455": " Metamorfo  : Metamorfo has collected the hostname and operating system version from the compromised host.", "S0339": " Micropsia  : Micropsia gathers the hostname and OS version from the victim\u2019s machine.", "S0051": " MiniDuke  : MiniDuke can gather the hostname on a compromised machine.", "S0280": " MirageFox  : MirageFox can collect CPU and architecture information from the victim\u2019s machine.", "S0084": " Mis-Type  : The initial beacon packet for Mis-Type contains the operating system version and file system of the victim.", "S0083": " Misdat  : The initial beacon packet for Misdat contains the operating system version of the victim.", "S0079": " MobileOrder  : MobileOrder has a command to upload to its C2 server victim mobile device information, including IMEI, IMSI, SIM card serial number, phone number, Android version, and other information.", "S0553": " MoleNet  : MoleNet can collect information about the about the system.", "S0149": " MoonWind  : MoonWind can obtain the victim hostname, Windows version, RAM amount, number of drives, and screen resolution.", "S0284": " More_eggs  : More_eggs has the capability to gather the OS version and computer name.", "G0069": " MuddyWater  : MuddyWater has used malware that can collect the victim\u2019s OS version and machine name.", "S0233": " MURKYTOP  : MURKYTOP has the capability to retrieve information about the OS.", "G0129": " Mustang Panda  : Mustang Panda has gathered system information using .", "S0205": " Naid  : Naid collects a unique identifier (UID) from a compromised host.", "S0228": " NanHaiShu  : NanHaiShu can gather the victim computer name and serial number.", "S0247": " NavRAT  : NavRAT uses  on a victim\u2019s machine.", "S0272": " NDiskMonitor  : NDiskMonitor obtains the victim computer name and encrypts the information to send over its C2 channel.", "S0630": " Nebulae  : Nebulae can discover logical drive information including the drive type, free space, and volume information.", "S0457": " Netwalker  : Netwalker can determine the system architecture it is running on to choose which version of the DLL to use.", "S0198": " NETWIRE  : NETWIRE can discover and collect victim system information.", "S0385": " njRAT  : njRAT enumerates the victim operating system and computer name during the initial infection.", "S0353": " NOKKI  : NOKKI can gather information on drives and the operating system on the victim\u2019s machine.", "S0644": " ObliqueRAT  : ObliqueRAT has the ability to check for blocklisted computer names on infected endpoints.", "S0346": " OceanSalt  : OceanSalt can collect the computer name from the system.", "S0340": " Octopus  : Octopus can collect system drive information, the computer name, and the size of the disk.", "G0049": " OilRig  : OilRig has run  and  on a victim. ", "S0439": " Okrum  : Okrum can collect computer name, locale information, and information about the OS and architecture.", "S0264": " OopsIE  : OopsIE checks for information on the CPU fan, temperature, mouse, hard disk, and motherboard as part of its anti-VM checks.", "G0116": " Operation Wocao  : Operation Wocao has discovered the local disks attached to the system and their hardware information including manufacturer and model, as well as the OS versions of systems connected to a targeted network.", "S0229": " Orz  : Orz can gather the victim OS version and whether it is 64 or 32 bit.", "S0165": " OSInfo  : OSInfo discovers information about the infected machine.", "S0402": " OSX/Shlayer  : OSX/Shlayer collects the IOPlatformUUID, session UID, and the OS version using the command .", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D collects processor information, memory information, computer name, hardware UUID, serial number, and operating system version. OSX_OCEANLOTUS.D has used the  command to gather some of this information.", "S0208": " Pasam  : Pasam creates a backdoor through which remote attackers can retrieve information such as hostname and free disk space.", "G0040": " Patchwork  : Patchwork collected the victim computer name, OS version, and architecture type and sent the information to its C2 server. Patchwork also enumerated all available drives on the victim's machine.", "S0556": " Pay2Key  : Pay2Key has the ability to gather the hostname of the victim machine.", "S0587": " Penquin  : Penquin can report the file system type and disk space of a compromised host to C2.", "S0048": " PinchDuke  : PinchDuke gathers system configuration information.", "S0501": " PipeMon  : PipeMon can collect and send OS version and computer name as a part of its C2 beacon.", "S0124": " Pisloader  : Pisloader has a command to collect victim system information, including the system name and OS version.", "S0254": " PLAINTEE  : PLAINTEE collects general system enumeration data about the infected machine and checks the OS version.", "S0428": " PoetRAT  : PoetRAT has the ability to gather information about the compromised host.", "S0453": " Pony  : Pony has collected the Service Pack, language, and region information to send to the C2. ", "S0216": " POORAIM  : POORAIM can identify system information, including battery status.", "S0378": " PoshC2  : PoshC2 contains modules, such as , for enumerating common system information.", "S0139": " PowerDuke  : PowerDuke has commands to get information about the victim's name, build, version, serial number, and memory usage.", "S0441": " PowerShower  : PowerShower has collected system information on the infected host.", "S0223": " POWERSTATS  : POWERSTATS can retrieve OS name/architecture and computer/domain name information from compromised hosts.", "S0184": " POWRUNER  : POWRUNER may collect information about the system by running  and  on a victim.", "S0113": " Prikormka  : A module in Prikormka collects information from the victim about Windows OS version, computer name, battery info, and physical memory.", "S0238": " Proxysvc  : Proxysvc collects the OS version, country name, MAC address, computer name, physical memory statistics, and volume information for all drives on the system.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY can gather system information such as computer names. ", "S0192": " Pupy  : Pupy can grab a system\u2019s information including the OS version, architecture, etc.", "S0650": " QakBot  : QakBot can collect system information including the OS version and domain on a compromised host.", "S0262": " QuasarRAT  : QuasarRAT has a command to gather system information from the victim\u2019s machine.", "S0458": " Ramsay  : Ramsay can detect system information--including disk names, total space, and remaining space--to create a hardware profile GUID which acts as a system identifier for operators. ", "S0241": " RATANKBA  : RATANKBA gathers information about the OS architecture, OS name, and OS version/Service pack.", "S0172": " Reaver  : Reaver collects system information from the victim, including CPU speed, computer name, volume serial number, ANSI code page, OEM code page identifier for the OS, Microsoft Windows version, and memory information.", "S0153": " RedLeaves  : RedLeaves can gather extended system information including the hostname, OS version number, platform, memory information, time elapsed since system startup, and CPU information.", "S0125": " Remsec  : Remsec can obtain the OS version information, computer name, processor architecture, machine role, and OS edition.", "S0379": " Revenge RAT  : Revenge RAT collects the CPU information, OS information, and system language.", "S0496": " REvil  : REvil can identify the username, machine name, system language, keyboard layout, OS version, and system drive information on a compromised host.", "S0433": " Rifdoor  : Rifdoor has the ability to identify the Windows version on the compromised host.", "S0448": " Rising Sun  : Rising Sun can detect the computer name, operating system, and other native system information. ", "G0106": " Rocke  : Rocke has used uname -m to collect the name and information about the infected system's kernel.", "S0270": " RogueRobin  : RogueRobin gathers BIOS versions and manufacturers, the number of CPU cores, the total physical memory, and the computer name.", "S0240": " ROKRAT  : ROKRAT gathers the computer name and checks the OS version to ensure it doesn\u2019t run on a Windows XP or Windows Server 2003 systems.", "S0148": " RTM  : RTM can obtain the computer name, OS version, and default language identifier.", "S0253": " RunningRAT  : RunningRAT gathers the OS version, logical drives information, processor information, and volume information.", "S0085": " S-Type  : The initial beacon packet for S-Type contains the operating system version and file system of the victim.", "G0034": " Sandworm Team  : Sandworm Team used a backdoor to enumerate information about the infected system's operating system.    ", "S0461": " SDBbot  : SDBbot has the ability to identify the OS version, country code, and computer name.", "S0382": " ServHelper  : ServHelper will attempt to enumerate Windows version and system architecture.", "S0596": " ShadowPad  : ShadowPad has discovered system information including memory status, CPU frequency, OS versions, and volume serial numbers.", "S0140": " Shamoon  : Shamoon obtains the victim's operating system version and keyboard layout and sends the information to the C2 server.", "S0546": " SharpStage  : SharpStage has checked the system settings to see if Arabic is the configured language.", "S0450": " SHARPSTATS  : SHARPSTATS has the ability to identify the IP address, machine name, and OS of the compromised host.", "S0445": " ShimRatReporter  : ShimRatReporter gathered the operating system name and specific Windows version of an infected machine.", "S0217": " SHUTTERSPEED  : SHUTTERSPEED can collect system information.", "S0610": " SideTwist  : SideTwist can collect the computer name of a targeted system.", "G0121": " Sidewinder  : Sidewinder has used tools to collect the computer name, OS version, installed hotfixes, as well as information regarding the memory and processor on a compromised host.", "S0468": " Skidmap  : Skidmap has the ability to check whether the infected system\u2019s OS is Debian or RHEL/CentOS to determine which cryptocurrency miner it should use.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has collected system name, OS version, adapter information, memory usage, and disk information from a victim machine.", "S0218": " SLOWDRIFT  : SLOWDRIFT collects and sends system information to its C2.", "S0649": " SMOKEDHAM  : SMOKEDHAM has used the  command on a compromised host.", "S0627": " SodaMaster  : SodaMaster can enumerate the host name and OS version on a target system.", "S0615": " SombRAT  : SombRAT can execute  to enumerate the computer name and OS version of a compromised system.", "S0516": " SoreFang  : SoreFang can collect the hostname, operating system configuration, product ID, and disk space on victim machines by executing Systeminfo.", "S0157": " SOUNDBITE  : SOUNDBITE is capable of gathering system information.", "G0054": " Sowbug  : Sowbug obtained OS version and hardware configuration from a victim.", "S0543": " Spark  : Spark can collect the hostname, keyboard layout, and language from the system. ", "S0374": " SpeakUp  : SpeakUp uses the  command to gather system information. ", "S0646": " SpicyOmelette  : SpicyOmelette can identify the system name of a compromised host.", "S0058": " SslMM  : SslMM sends information to its hard-coded C2, including OS version, service pack information, processor speed, system name, and OS install date.", "G0038": " Stealth Falcon  : Stealth Falcon malware gathers system information via WMI, including the system directory, build number, serial number, version, manufacturer, model, and total physical memory.", "S0380": " StoneDrill  : StoneDrill has the capability to discover the system OS, Windows version, architecture and environment. ", "S0142": " StreamEx  : StreamEx has the ability to enumerate system information.", "S0491": " StrongPity  : StrongPity can identify the hard disk volume serial number on a compromised host.", "S0603": " Stuxnet  : Stuxnet collects system information including computer and domain names, OS version, and S7P paths.", "S0559": " SUNBURST  : SUNBURST collected hostname, OS version, and device uptime.", "S0242": " SynAck  : SynAck gathers computer names, OS version info, and also checks installed keyboard layouts to estimate if it has been launched from a certain list of countries.", "S0060": " Sys10  : Sys10 collects the computer name, OS versioning information, and OS install date and sends the information to the C2.", "S0464": " SYSCON  : SYSCON has the ability to use Systeminfo to identify system information.", "S0096": " Systeminfo  : Systeminfo can be used to gather information about the operating system.", "S0098": " T9000  : T9000 gathers and beacons the operating system build number and CPU Architecture (32-bit/64-bit) during installation.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE can use  to retrieve drive information.", "S0467": " TajMahal  : TajMahal has the ability to identify hardware information, the computer name, and OS information on an infected host.", "G0139": " TeamTNT  : TeamTNT has searched for system version and architecture information.", "S0266": " TrickBot  : TrickBot gathers the OS version, machine name, CPU type, amount of RAM available, and UEFI/BIOS firmware information from the victim\u2019s machine.", "S0094": " Trojan.Karagany  : Trojan.Karagany can capture information regarding the victim's OS, security, and hardware configuration.", "G0081": " Tropic Trooper  : Tropic Trooper has detected a target system\u2019s OS version and system volume information.", "S0647": " Turian  : Turian can retrieve system information including OS version, memory usage, local hostname, and system adapter information.", "G0010": " Turla  : Turla surveys a system upon check-in to discover operating system configuration details using the  and  commands.", "S0199": " TURNEDUP  : TURNEDUP is capable of gathering system information.", "S0263": " TYPEFRAME  : TYPEFRAME can gather the disk volume information.", "S0130": " Unknown Logger  : Unknown Logger can obtain information about the victim computer name, physical memory, country, and date.", "S0275": " UPPERCUT  : UPPERCUT has the capability to gather the system\u2019s hostname and OS version.", "S0386": " Ursnif  : Ursnif has used Systeminfo to gather system information.", "S0476": " Valak  : Valak can determine the Windows version and computer name on a compromised host.", "S0257": " VERMIN  : VERMIN collects the OS name, machine name, and architecture information.", "S0180": " Volgmer  : Volgmer can gather system information, the computer name, OS version, drive and serial information from the victim's machine.", "S0514": " WellMess  : WellMess can identify the computer name of a compromised host.", "G0124": " Windigo  : Windigo has used a script to detect which Linux distribution and version is currently installed on the system.", "S0155": " WINDSHIELD  : WINDSHIELD can gather the victim computer name.", "G0112": " Windshift  : Windshift has used malware to identify the computer name of a compromised host.", "S0219": " WINERACK  : WINERACK can gather information about the host.", "S0176": " Wingbird  : Wingbird checks the victim OS version after executing to determine where to drop files based on whether the victim is 32-bit or 64-bit.", "S0059": " WinMM  : WinMM collects the system name, OS version including service pack, and system install date and sends the information to the C2 server.", "G0102": " Wizard Spider  : Wizard Spider has used \"systeminfo\" and similar commands to acquire detailed configuration information of a victim machine.", "S0161": " XAgentOSX  : XAgentOSX contains the getInstalledAPP function to run  to gather what applications are installed.", "S0658": " XCSSET  : XCSSET identifies the macOS version and uses  to determine serial number.", "S0388": " YAHOYAH  : YAHOYAH checks for the system\u2019s Windows OS version and hostname.", "S0248": " yty  : yty gathers the computer name, the serial number of the main disk volume, CPU information, Microsoft Windows version, and runs the command .", "S0251": " Zebrocy  : Zebrocy collects the OS version, computer name and serial number for the storage volume C:. Zebrocy also runs the  command to gather system information. ", "S0230": " ZeroT  : ZeroT gathers the victim's computer name, Windows version, and system language, and then sends it to its C2 server.", "S0330": " Zeus Panda  : Zeus Panda collects the OS version, system architecture, computer name, product ID, install date, and information on the keyboard mapping to determine the language used on the system.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used a tool to capture the processor architecture of a compromised host in order to register it with C2.", "S0086": " ZLib  : ZLib has the ability to enumerate system information.", "S0350": " zwShell  : zwShell can obtain the victim PC name and OS version.", "S0412": " ZxShell  : ZxShell can collect the local hostname, operating system details, CPU speed, and total physical memory. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1082", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["IaaS, Linux, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-312"], "contributors": ["Maril Vernon @shewhohacks; Praetorian"], "version": "2.3", "created": "31 May 2017", "lastmodified": "13 October 2021"}, {"techniquename": "Cloud Groups", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Activity and account logs for the cloud services can also be monitored for suspicious commands that are anomalous compared to a baseline of normal activity.", "description": "Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.With authenticated access there are several tools that can be used to find permissions groups. The  PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts .Azure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces to obtain permissions groups. The command  will list groups associated to a user account for Azure while the API endpoint  lists group resources available to a user for Google .Adversaries may attempt to list ACLs for objects to determine the owner and other accounts with access to the object, for example, via the AWS  API . Using this information an adversary can target accounts with permissions to a given object or leverage accounts they have already compromised to access the object.", "id": "T1069.003", "subtechniqueof": "T1069", "tactics": ["Discovery"], "platforms": ["Azure AD, Google Workspace, IaaS, Office 365, SaaS"], "permissionsrequired": ["User"], "contributors": ["Isif Ibrahima; Regina Elwell"], "version": "1.3", "created": "21 February 2020", "lastmodified": "25 June 2021"}, {"techniquename": "Domain Groups", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.Commands such as  of the Net utility,   on macOS, and  on Linux can list domain-level groups.", "procedureexamples": {"S0552": " AdFind  : AdFind can enumerate domain groups.", "S0521": " BloodHound  : BloodHound can collect information about domain groups and members.", "S0154": " Cobalt Strike  : Cobalt Strike can identify targets by querying account groups on a domain contoller.", "S0488": " CrackMapExec  : CrackMapExec can gather the user accounts within domain groups.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used batch scripts to enumerate administrators and users in the domain.", "S0105": " dsquery  : dsquery can be used to gather information on permission groups within a domain.", "S0554": " Egregor  : Egregor can conduct Active Directory reconnaissance using tools such as Sharphound or AdFind.", "S0417": " GRIFFON  : GRIFFON has used a reconnaissance module that can be used to retrieve Windows domain membership information.", "S0170": " Helminth  : Helminth has checked for the domain admin group and Exchange Trusted Subsystem groups using the commands  and .", "G0100": " Inception  : Inception has used specific malware modules to gather domain membership.", "G0004": " Ke3chang  : Ke3chang performs discovery of permission groups .", "S0236": " Kwampirs  : Kwampirs collects a list of domain groups with the command .", "S0039": " Net  : Commands such as  can be used in Net to gather information about and manipulate groups.", "G0049": " OilRig  : OilRig has used , , and  to find domain group permission settings.", "S0165": " OSInfo  : OSInfo specifically looks for Domain Admins and power users within the domain. ", "S0184": " POWRUNER  : POWRUNER may collect domain group information by running  or a series of other commands on a victim.", "S0496": " REvil  : REvil can identify the domain membership of a compromised host.", "S0516": " SoreFang  : SoreFang can enumerate domain groups by executing .", "G0010": " Turla  : Turla has used  to identify domain administrators.", "S0514": " WellMess  : WellMess can identify domain group membership for the current user."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1069.002", "subtechniqueof": "T1069", "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "21 February 2020", "lastmodified": "12 March 2020"}, {"techniquename": "Peripheral Device Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.", "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL can list connected devices.", "G0007": " APT28  : APT28 uses a module to receive a notification every time a USB mass storage device is inserted into a victim.", "G0067": " APT37  : APT37 has a Bluetooth device harvester, which uses Windows Bluetooth APIs to find information on connected Bluetooth devices. ", "S0438": " Attor  : Attor has a plugin that collects information about inserted storage devices, modems, and phone devices.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has used an executable to detect removable media, such as USB flash drives.", "S0128": " BADNEWS  : BADNEWS checks for new hard drives on the victim, such as USB devices, by listening for the WM_DEVICECHANGE window message.", "S0234": " Bandook  : Bandook can detect USB devices.", "S0089": " BlackEnergy  : BlackEnergy can gather very specific information about attached USB devices, to include device instance ID and drive geometry.", "S0454": " Cadelspy  : Cadelspy has the ability to steal information about printers and the documents sent to printers.", "S0115": " Crimson  : Crimson has the ability to discover pluggable/removable drives to extract files from.", "S0538": " Crutch  : Crutch can monitor for removable drives being plugged into the compromised machine.", "S0062": " DustySky  : DustySky can detect connected USB devices.", "G0020": " Equation  : Equation has used tools with the functionality to search for specific information about the attached hard drive that could be used to identify and overwrite the firmware.", "S0381": " FlawedAmmyy  : FlawedAmmyy will attempt to detect if a usable smart card is current inserted into a card reader.", "G0047": " Gamaredon Group  : Gamaredon Group tools have contained an application to check performance of USB flash drives. Gamaredon Group has also used malware to scan for removable drives.", "S0283": " jRAT  : jRAT can map UPnP ports.", "S0409": " Machete  : Machete detects the insertion of new devices by listening for the WM_DEVICECHANGE window message.  ", "S0149": " MoonWind  : MoonWind obtains the number of removable drives from the victim.", "S0385": " njRAT  : njRAT will attempt to detect if the victim system has a camera during the initial infection. njRAT can also detect any removable drives connected to the system.", "S0644": " ObliqueRAT  : ObliqueRAT can discover pluggable/removable drives to extract files from.", "G0049": " OilRig  : OilRig has used tools to identify if a mouse is connected to a targeted system.", "G0116": " Operation Wocao  : Operation Wocao has discovered removable disks attached to a system.", "S0113": " Prikormka  : A module in Prikormka collects information on available printers and disk drives.", "S0650": " QakBot  : QakBot can identify peripheral devices on targeted systems.", "S0481": " Ragnar Locker  : Ragnar Locker may attempt to connect to removable drives and mapped network drives.", "S0458": " Ramsay  : Ramsay can scan for removable media which may contain documents for collection.  ", "S0148": " RTM  : RTM can obtain a list of smart card readers attached to the victim.", "S0603": " Stuxnet  : Stuxnet enumerates removable drives for infection.", "S0098": " T9000  : T9000 searches through connected drives for removable storage devices.", "S0467": " TajMahal  : TajMahal has the ability to identify connected Apple devices.", "S0647": " Turian  : Turian can scan for removable media to collect data.", "G0010": " Turla  : Turla has used  to list connected drives.", "S0452": " USBferry  : USBferry can check for connected USB devices.", "S0136": " USBStealer  : USBStealer monitors victims for insertion of removable drives. When dropped onto a second victim, it also enumerates drives connected to the system.", "S0366": " WannaCry  : WannaCry contains a thread that will attempt to scan for new attached drives every few seconds. If one is identified, it will encrypt the files on the attached device.", "S0612": " WastedLocker  : WastedLocker can enumerate removable drives prior to the encryption process.", "S0251": " Zebrocy  : Zebrocy enumerates information about connected storage devices."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1120", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "capecid": ["CAPEC-646"], "version": "1.2", "created": "31 May 2017", "lastmodified": "26 March 2020"}, {"techniquename": "Process Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or  via PowerShell. Information about processes can also be extracted from the output of Native API calls such as . In Mac and Linux, this is accomplished with the  command. Adversaries may also opt to enumerate processes via /proc.", "procedureexamples": {"S0065": " 4H RAT  : 4H RAT has the capability to obtain a listing of running processes (including loaded modules).", "S0045": " ADVSTORESHELL  : ADVSTORESHELL can list running processes.", "S0331": " Agent Tesla  : Agent Tesla can list the current running processes on the system.", "G0138": " Andariel  : Andariel has used  to enumerate processes and find a specific string.", "S0622": " AppleSeed  : AppleSeed can enumerate the current process on a compromised host.", "G0006": " APT1  : APT1 gathered a list of running processes on the system using .", "G0007": " APT28  : An APT28 loader Trojan will enumerate the victim's processes searching for explorer.exe if its current process does not have necessary permissions.", "G0016": " APT29  : APT29 has used multiple command-line utilities to enumerate running processes.", "G0022": " APT3  : APT3 has a tool that can list out currently running processes.", "G0067": " APT37  : APT37's Freenki malware lists running processes using the Microsoft Windows API.", "G0082": " APT38  : APT38 leveraged Sysmon to understand the processes, services in the organization.", "S0456": " Aria-body  : Aria-body has the ability to enumerate loaded modules for a process..", "S0373": " Astaroth  : Astaroth searches for different processes on the system.", "S0640": " Avaddon  : Avaddon has collected information about running processes.", "S0473": " Avenger  : Avenger has the ability to use Tasklist to identify running processes.", "S0344": " Azorult  : Azorult can collect a list of running processes by calling CreateToolhelp32Snapshot.", "S0638": " Babuk  : Babuk has the ability to check running processes on a targeted system.", "S0414": " BabyShark  : BabyShark has executed the  command.   ", "S0093": " Backdoor.Oldrea  : Backdoor.Oldrea collects information about running processes.", "S0031": " BACKSPACE  : BACKSPACE may collect information about running processes.", "S0606": " Bad Rabbit  : Bad Rabbit can enumerate all running processes to compare hashes.", "S0239": " Bankshot  : Bankshot identifies processes and collects the process ids.", "S0534": " Bazar  : Bazar can identity the current process on a compromised host.", "S0127": " BBSRAT  : BBSRAT can list running processes.", "S0017": " BISCUIT  : BISCUIT has a command to enumerate running processes and identify their owners.", "S0268": " Bisonal  : Bisonal can obtain a list of running processes on the victim\u2019s machine.", "S0069": " BLACKCOFFEE  : BLACKCOFFEE has the capability to discover processes.", "S0089": " BlackEnergy  : BlackEnergy has gathered a process list by using Tasklist.exe.", "S0657": " BLUELIGHT  : BLUELIGHT can collect process filenames and SID authority level.", "S0486": " Bonadan  : Bonadan can use the  command to discover other cryptocurrency miners active on the system.", "S0252": " Brave Prince  : Brave Prince lists the running processes.", "S0482": " Bundlore  : Bundlore has used the  command to list processes.", "S0351": " Cannon  : Cannon can obtain a list of processes running on the system.", "S0030": " Carbanak  : Carbanak lists running processes.", "S0484": " Carberp  : Carberp has collected a list of running processes.", "S0335": " Carbon  : Carbon can list the processes on the victim\u2019s machine.", "S0348": " Cardinal RAT  : Cardinal RAT contains watchdog functionality that ensures its process is always running, else spawns a new instance.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell can gather a list of processes running on the machine. ", "S0144": " ChChes  : ChChes collects its process identifier (PID) on the victim.", "G0114": " Chimera  : Chimera has used  to enumerate processes.", "S0611": " Clop  : Clop can enumerate all processes on the victim's machine.", "S0154": " Cobalt Strike  : Cobalt Strike's Beacon payload can collect information on process details.", "S0244": " Comnie  : Comnie uses the  to view running processes on the victim\u2019s machine.", "S0575": " Conti  : Conti can enumerate through all open processes to search for any that have the string \"sql\" in their process name.", "S0115": " Crimson  : Crimson contains a command to list processes.     ", "S0625": " Cuba  : Cuba can enumerate processes running on a victim's machine.", "S0497": " Dacls  : Dacls can collect data on running and parent processes.", "S0334": " DarkComet  : DarkComet can list active processes running on the victim\u2019s machine.", "G0012": " Darkhotel  : Darkhotel malware can collect a list of running processes on a system.", "G0009": " Deep Panda  : Deep Panda uses the Microsoft Tasklist utility to list processes running on systems.", "S0021": " Derusbi  : Derusbi collects current and parent process IDs.", "S0600": " Doki  : Doki has searched for the current process\u2019s PID.", "S0472": " down_new  : down_new has the ability to list running processes on a compromised host.", "S0567": " Dtrack  : Dtrack\u2019s dropper can list all running processes.", "S0038": " Duqu  : The discovery modules used with Duqu can collect information on process details.", "S0062": " DustySky  : DustySky collects information about running processes from victims.", "S0605": " EKANS  : EKANS looks for processes from a hard-coded list.", "S0081": " Elise  : Elise enumerates processes via the  command.", "S0064": " ELMER  : ELMER is capable of performing process listings.", "S0367": " Emotet  : Emotet has been observed enumerating local processes.", "S0363": " Empire  : Empire can find information about processes running on local and remote systems.", "S0091": " Epic  : Epic uses the  command to obtain a list of processes.", "S0396": " EvilBunny  : EvilBunny has used EnumProcesses() to identify how many process are running in the environment.", "S0512": " FatDuke  : FatDuke can list running processes on the localhost.", "S0267": " FELIXROOT  : FELIXROOT collects a list of running processes.", "S0355": " Final1stspy  : Final1stspy obtains a list of running processes.", "S0182": " FinFisher  : FinFisher checks its parent process for indications that it is running in a sandbox setup.", "S0503": " FrameworkPOS  : FrameworkPOS can enumerate and exclude selected processes on a compromised host to speed execution of memory scraping.", "G0101": " Frankenstein  : Frankenstein has enumerated hosts, looking to obtain a list of all currently running processes.", "S0277": " FruitFly  : FruitFly has the ability to list processes on the system.", "S0410": " Fysbis  : Fysbis can collect information about running processes. ", "S0049": " GeminiDuke  : GeminiDuke collects information on running processes and environment variables from the victim.", "S0460": " Get2  : Get2 has the ability to identify running processes on an infected host.", "S0032": " gh0st RAT  : gh0st RAT has the capability to list processes.", "S0249": " Gold Dragon  : Gold Dragon checks the running processes on the victim\u2019s machine.", "S0477": " Goopy  : Goopy has checked for the Google Updater process to ensure Goopy was loaded properly.", "S0531": " Grandoreiro  : Grandoreiro can identify installed security tools based on process names.", "S0237": " GravityRAT  : GravityRAT lists the running processes on the system.", "S0151": " HALFBAKED  : HALFBAKED can obtain information about running processes on the victim.", "S0617": " HELLOKITTY  : HELLOKITTY can search for specific processes to terminate.", "S0170": " Helminth  : Helminth has used Tasklist to get information on processes.", "G0126": " Higaisa  : Higaisa\u2019s shellcode attempted to find the process ID of the current process.", "G0072": " Honeybee  : Honeybee gathers a list of processes using the  command and then is sent back to the control server.", "S0431": " HotCroissant  : HotCroissant has the ability to list running processes on the infected host.", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can monitor processes.", "S0278": " iKitten  : iKitten lists the current processes running.", "S0434": " Imminent Monitor  : Imminent Monitor has a \"Process Watcher\" feature to monitor processes in case the client ever crashes or gets closed.", "G0100": " Inception  : Inception has used a reconnaissance module to identify active processes and other associated loaded modules.", "S0260": " InvisiMole  : InvisiMole can obtain a list of running processes.", "S0581": " IronNetInjector  : IronNetInjector can identify processes via C# methods such as  and running Tasklist with the Python  function.", "S0015": " Ixeshe  : Ixeshe can list running processes.", "S0528": " Javali  : Javali can monitor processes for open browsers and custom banking applications.", "S0044": " JHUHUGIT  : JHUHUGIT obtains a list of running processes on the victim.", "S0201": " JPIN  : JPIN can list running processes.", "S0283": " jRAT  : jRAT can query and kill system processes.", "S0088": " Kasidet  : Kasidet has the ability to search for a given process name in processes currently running in the system.", "S0265": " Kazuar  : Kazuar obtains a list of running processes through WMI querying and the  command.", "G0004": " Ke3chang  : Ke3chang performs process discovery using  commands.", "S0271": " KEYMARBLE  : KEYMARBLE can obtain a list of running processes on the system.", "S0607": " KillDisk  : KillDisk has called .", "S0599": " Kinsing  : Kinsing has used ps to list processes.", "S0162": " Komplex  : The OsInfo function in Komplex collects a running process list.", "S0356": " KONNI  : KONNI has used tasklist.exe to get a snapshot of the current processes\u2019 state of the target machine.", "S0236": " Kwampirs  : Kwampirs collects a list of running services with the command .", "G0032": " Lazarus Group  : Several Lazarus Group malware families gather a list of running processes on a victim system and send it to their C2 server. A Destover-like variant used by Lazarus Group also gathers process times.", "S0211": " Linfo  : Linfo creates a backdoor through which remote attackers can retrieve a list of running processes.", "S0582": " LookBack  : LookBack can list running processes.", "S0451": " LoudMiner  : LoudMiner used the  command to monitor the running processes on the system.   ", "S0532": " Lucifer  : Lucifer can identify the process that owns remote connections.", "S0409": " Machete  : Machete has a component to check for running processes to look for web browsers. ", "G0059": " Magic Hound  : Magic Hound malware can list running processes.", "S0652": " MarkiRAT  : MarkiRAT can search for different processes on a system.", "S0449": " Maze  : Maze has gathered all of the running system processes. ", "S0455": " Metamorfo  : Metamorfo has performed process name checks and has monitored applications. ", "S0079": " MobileOrder  : MobileOrder has a command to upload information about all running processes to its C2 server.", "G0021": " Molerats  : Molerats actors obtained a list of active processes on the victim and sent them to C2 servers.", "S0149": " MoonWind  : MoonWind has a command to return a list of running processes.", "S0256": " Mosquito  : Mosquito runs  to obtain running processes.", "G0069": " MuddyWater  : MuddyWater has used malware to obtain a list of running processes on the system.", "G0129": " Mustang Panda  : Mustang Panda has used  to determine active process information.   ", "S0247": " NavRAT  : NavRAT uses  to check running processes.", "S0630": " Nebulae  : Nebulae can enumerate processes on a target system.", "S0034": " NETEAGLE  : NETEAGLE can send process listings over the C2 channel.", "S0198": " NETWIRE  : NETWIRE can discover processes on compromised hosts.", "S0385": " njRAT  : njRAT can search a list of running processes for Tr.exe.", "S0644": " ObliqueRAT  : ObliqueRAT can check for blocklisted process names on a compromised host.", "S0346": " OceanSalt  : OceanSalt can collect the name and ID for every process running on the system.", "G0049": " OilRig  : OilRig has run  on a victim's machine.", "G0116": " Operation Wocao  : Operation Wocao has collected a list of running processes on the infected system.", "S0229": " Orz  : Orz can gather a process list from the victim.", "S0626": " P8RAT  : P8RAT can check for specific processes associated with virtual environments.", "S0208": " Pasam  : Pasam creates a backdoor through which remote attackers can retrieve lists of running processes.", "S0517": " Pillowmint  : Pillowmint can iterate through running processes every six seconds collecting a list of processes to capture from later.   ", "S0501": " PipeMon  : PipeMon can iterate over the running processes to find a suitable injection target.", "S0254": " PLAINTEE  : PLAINTEE performs the  command to list running processes.", "S0435": " PLEAD  : PLEAD has the ability to list processes on the compromised host.", "S0013": " PlugX  : PlugX has a module to list the processes running on a machine.", "S0428": " PoetRAT  : PoetRAT has the ability to list all running processes.", "S0216": " POORAIM  : POORAIM can enumerate processes.", "G0033": " Poseidon Group  : After compromising a victim, Poseidon Group lists all running processes.", "S0139": " PowerDuke  : PowerDuke has a command to list the victim's processes.", "S0441": " PowerShower  : PowerShower has the ability to deploy a reconnaissance module to retrieve a list of the active processes.", "S0194": " PowerSploit  : PowerSploit's  Privesc-PowerUp module can enumerate privileges for a given process.", "S0393": " PowerStallion  : PowerStallion has been used to monitor process lists.", "S0223": " POWERSTATS  : POWERSTATS has used  to discover processes on the compromised host.", "S0184": " POWRUNER  : POWRUNER may collect process information by running  on a victim.", "S0238": " Proxysvc  : Proxysvc lists processes running on the system.", "S0192": " Pupy  : Pupy can list the running processes and get the process ID and parent process\u2019s ID.", "S0650": " QakBot  : QakBot has the ability to check running processes.", "S0629": " RainyDay  : RainyDay can enumerate processes on a target system.", "S0458": " Ramsay  : Ramsay can gather a list of running processes by using Tasklist.", "S0241": " RATANKBA  : RATANKBA lists the system\u2019s processes.", "S0125": " Remsec  : Remsec can obtain a process list from the victim.", "S0448": " Rising Sun  : Rising Sun can enumerate all running processes and process information on an infected machine.  ", "G0106": " Rocke  : Rocke can detect a running process's PID on the infected machine.  ", "S0270": " RogueRobin  : RogueRobin checks the running processes for evidence it may be running in a sandbox environment. It specifically enumerates processes for Wireshark and Sysinternals.", "S0240": " ROKRAT  : ROKRAT lists the current running processes on the system.", "S0148": " RTM  : RTM can obtain information about process integrity levels.", "S0446": " Ryuk  : Ryuk has called  to enumerate all running processes.", "S0345": " Seasalt  : Seasalt has a command to perform a process listing.", "S0596": " ShadowPad  : ShadowPad has collected the PID of a malicious process.", "S0445": " ShimRatReporter  : ShimRatReporter listed all running processes on the machine.", "S0063": " SHOTPUT  : SHOTPUT has a command to obtain a process listing.", "G0121": " Sidewinder  : Sidewinder has used tools to identify running processes on the victim's machine.", "S0468": " Skidmap  : Skidmap has monitored critical processes to ensure resiliency. ", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has enumerated processes by ID, name, or privileges. ", "S0273": " Socksbot  : Socksbot can list all running processes.", "S0627": " SodaMaster  : SodaMaster can search a list of running processes.", "S0615": " SombRAT  : SombRAT can use the  command to enumerate processes on a compromised host.", "S0516": " SoreFang  : SoreFang can enumerate processes on a victim machine through use of Tasklist.", "G0038": " Stealth Falcon  : Stealth Falcon malware gathers a list of running processes.", "S0142": " StreamEx  : StreamEx has the ability to enumerate processes.", "S0491": " StrongPity  : StrongPity can determine if a user is logged in by checking to see if explorer.exe is running.", "S0559": " SUNBURST  : SUNBURST collected a list of process names that were hashed using a FNV-1a + XOR algorithm to check against similarly-hashed hardcoded blocklists.", "S0562": " SUNSPOT  : SUNSPOT monitored running processes for instances of  by hashing the name of each running process and comparing it to the corresponding value . It also extracted command-line arguments and individual arguments from the running  process to identify the directory path of the Orion software Visual Studio solution.", "S0018": " Sykipot  : Sykipot may gather a list of running processes by running .", "S0242": " SynAck  : SynAck enumerates all running processes.", "S0464": " SYSCON  : SYSCON has the ability to use Tasklist to list running processes.", "S0011": " Taidoor  : Taidoor can use  for process discovery.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE can execute  for process discovery.", "S0467": " TajMahal  : TajMahal has the ability to identify running processes and associated plugins on an infected host.", "S0057": " Tasklist  : Tasklist can be used to discover processes running on a system.", "G0139": " TeamTNT  : TeamTNT searches for rival malware and removes them if found.", "S0595": " ThiefQuest  : ThiefQuest obtains a list of running processes using the function .", "S0266": " TrickBot  : TrickBot uses module networkDll for process list discovery.", "S0094": " Trojan.Karagany  : Trojan.Karagany can use Tasklist to collect a list of running tasks.", "G0081": " Tropic Trooper  : Tropic Trooper is capable of enumerating the running processes on the system using .", "S0436": " TSCookie  : TSCookie has the ability to list processes on the infected host.", "G0010": " Turla  : Turla surveys a system upon check-in to discover running processes using the  command. Turla RPC backdoors have also enumerated processes associated with specific open ports or named pipes.", "S0333": " UBoatRAT  : UBoatRAT can list running processes on the system.", "S0386": " Ursnif  : Ursnif has gathered information about running processes.", "S0452": " USBferry  : USBferry can use  to gather information about the process running on the infected system. ", "S0476": " Valak  : Valak has the ability to enumerate running processes on a compromised host.", "S0257": " VERMIN  : VERMIN can get a list of the processes and running tasks on the system.", "S0180": " Volgmer  : Volgmer can gather a list of processes.", "S0579": " Waterbear  : Waterbear can identify the process for a specific security product.", "G0112": " Windshift  : Windshift has used malware to enumerate active processes.", "S0219": " WINERACK  : WINERACK can enumerate processes.", "S0059": " WinMM  : WinMM sets a WH_CBT Windows hook to collect information on process creation.", "G0044": " Winnti Group  : Winnti Group looked for a specific process running on infected servers.", "S0161": " XAgentOSX  : XAgentOSX contains the getProcessList function to run  to get running processes.", "S0248": " yty  : yty gets an output of running processes using the  command.", "S0251": " Zebrocy  : Zebrocy uses the  and  commands to gather the processes running on the system.", "S0330": " Zeus Panda  : Zeus Panda checks for running processes on the victim\u2019s machine.", "S0412": " ZxShell  : ZxShell has a command, ps, to obtain a listing of processes on the system. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1057", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Administrator, SYSTEM may provide better process ownership details"], "permissionsrequired": ["Administrator, SYSTEM, User"], "capecid": ["CAPEC-573"], "version": "1.2", "created": "31 May 2017", "lastmodified": "26 March 2020"}, {"techniquename": "Local Groups", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.Commands such as  of the Net utility,  on macOS, and  on Linux can list local groups.", "procedureexamples": {"G0018": " admin@338  : admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to list local groups: ", "S0521": " BloodHound  : BloodHound can collect information about local groups and members.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell can obtain a list of local groups of users from a system.", "G0114": " Chimera  : Chimera has used  to identify  accounts with local administrative rights.", "S0154": " Cobalt Strike  : Cobalt Strike can use  to list local groups on a system.", "S0082": " Emissary  : Emissary has the capability to execute the command .", "S0091": " Epic  : Epic gathers information on local group names.", "S0381": " FlawedAmmyy  : FlawedAmmyy enumerates the privilege level of the victim during the initial infection.", "S0170": " Helminth  : Helminth has checked the local administrators group.", "S0201": " JPIN  : JPIN can obtain the permissions of the victim user.", "S0265": " Kazuar  : Kazuar gathers information about local groups and members.", "S0236": " Kwampirs  : Kwampirs collects a list of users belonging to the local users and administrators groups with the commands  and .", "S0039": " Net  : Commands such as  and  can be used in Net to gather information about and manipulate groups.", "G0049": " OilRig  : OilRig has used  to find local administrators on compromised systems.", "G0116": " Operation Wocao  : Operation Wocao has used the command  to list all administrators part of a local group.", "S0165": " OSInfo  : OSInfo has enumerated the local administrators group.", "S0378": " PoshC2  : PoshC2 contains modules, such as  for enumerating permission groups.", "S0184": " POWRUNER  : POWRUNER may collect local group information by running  or a series of other commands on a victim.", "S0650": " QakBot  : QakBot can use  to enable discovery of local groups.", "S0060": " Sys10  : Sys10 collects the group name of the logged-in user and sends it to the C2.", "G0131": " Tonto Team  : Tonto Team has used the  command to identify administrator, user, and guest accounts on a compromised host.", "G0010": " Turla  : Turla has used  and  to enumerate group information, including members of the local administrators group."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1069.001", "subtechniqueof": "T1069", "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "12 March 2020", "lastmodified": "26 March 2020"}, {"techniquename": "Group Policy Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor for suspicious use of . Monitor for the use of PowerShell functions such as  and  and processes spawning with command-line arguments containing .Monitor for abnormal LDAP queries with filters for  and high volumes of LDAP traffic to domain controllers. Windows Event ID 4661 can also be used to detect when a directory service has been accessed.", "description": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predicable network path .Adversaries may use commands such as  or various publicly available PowerShell functions, such as  and , to gather information on Group Policy settings. Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. Domain Policy Modification) for their benefit.", "procedureexamples": {"S0521": " BloodHound  : BloodHound has the ability to collect local admin information via GPO.", "S0082": " Emissary  : Emissary has the capability to execute .", "S0363": " Empire  : Empire includes various modules for enumerating Group Policy.", "G0010": " Turla  : Turla surveys a system upon check-in to discover Group Policy details using the  command."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1615", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Windows"], "permissionsrequired": ["User"], "contributors": ["Jonhnathan Ribeiro, 3CORESec, @_w0rk3r; Ted Samuels, Rapid7"], "version": "1.0", "created": "06 August 2021", "lastmodified": "15 October 2021"}, {"techniquename": "Network Share Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. File sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the  command. It can also be used to query shared drives on the local system using . For macOS, the  command lists all shared points used for smb services.", "mitigations": {"M1028": " Operating System Configuration  : Enable Windows Group Policy \"Do Not Allow Anonymous Enumeration of SAM Accounts and Shares\" security setting to limit users who can enumerate network shares."}, "procedureexamples": {"G0006": " APT1  : APT1 listed connected network shares.", "G0050": " APT32  : APT32 used the  command to show all shares available, including the administrative shares such as  and .", "G0082": " APT38  : APT38 has enumerated network shares on a compromised host.", "G0087": " APT39  : APT39 has used the post exploitation tool CrackMapExec to enumerate network shares.", "G0096": " APT41  : APT41 used the  command as part of network reconnaissance.", "S0640": " Avaddon  : Avaddon has enumerated shared folders and mapped volumes.", "S0638": " Babuk  : Babuk has the ability to enumerate network shares.", "S0606": " Bad Rabbit  : Bad Rabbit enumerates open SMB shares on internal victim networks.", "S0534": " Bazar  : Bazar can enumerate shared drives on the domain.", "S0570": " BitPaymer  : BitPaymer can search for network shares on the domain or workgroup using .", "G0114": " Chimera  : Chimera has used  and  to identify network shares of interest.", "S0611": " Clop  : Clop can enumerate network shares.", "S0154": " Cobalt Strike  : Cobalt Strike can query shared drives on the local system.", "S0575": " Conti  : Conti can enumerate remote open SMB network shares using .", "S0488": " CrackMapExec  : CrackMapExec can enumerate the shared folders and associated permissions for a targeted network.", "S0625": " Cuba  : Cuba can discover shared resources using the  API call. ", "G0105": " DarkVishnya  : DarkVishnya scanned the network for public shared folders.", "S0616": " DEATHRANSOM  : DEATHRANSOM has the ability to use loop operations to enumerate network resources.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 identified and browsed file servers in the victim network, sometimes , viewing files pertaining to ICS or Supervisory Control and Data Acquisition (SCADA) systems.", "S0363": " Empire  : Empire can find shared drives on the local system.", "S0618": " FIVEHANDS  : FIVEHANDS can enumerate network shares and mounted drives on a network.", "S0617": " HELLOKITTY  : HELLOKITTY has the ability to enumerate network resources.", "S0260": " InvisiMole  : InvisiMole can gather network share information.", "S0250": " Koadic  : Koadic can scan local network for open SMB.", "S0236": " Kwampirs  : Kwampirs collects a list of network shares with the command .", "S0233": " MURKYTOP  : MURKYTOP has the capability to retrieve information about shares on remote hosts.", "S0039": " Net  : The  and  commands in Net can be used to find shared drives and directories on remote and local systems respectively.", "S0365": " Olympic Destroyer  : Olympic Destroyer will attempt to enumerate mapped network shares to later attempt to wipe all files on those shares.", "G0116": " Operation Wocao  : Operation Wocao has discovered network disks mounted to the system using netstat.", "S0165": " OSInfo  : OSInfo discovers shares on the network", "S0013": " PlugX  : PlugX has a module to enumerate network shares.", "S0192": " Pupy  : Pupy can list local and remote shared drives and folders over SMB.", "S0650": " QakBot  : QakBot can use  to identify network shares for use in lateral movement.", "S0458": " Ramsay  : Ramsay can scan for network drives which may contain documents for collection.   ", "S0444": " ShimRat  : ShimRat can enumerate connected drives for infected host machines.", "G0054": " Sowbug  : Sowbug listed remote shared drives that were accessible from a victim.", "S0603": " Stuxnet  : Stuxnet enumerates the directories of a network resource.", "G0131": " Tonto Team  : Tonto Team has used tools such as NBTscan to enumerate network shares.", "S0266": " TrickBot  : TrickBot module shareDll/mshareDll discovers network shares via the WNetOpenEnumA API.", "G0081": " Tropic Trooper  : Tropic Trooper used  to scan target systems for shared resources.", "S0612": " WastedLocker  : WastedLocker can identify network adjacent and accessible drives.", "G0102": " Wizard Spider  : Wizard Spider has used the \"net view\" command to locate mapped network shares.", "S0251": " Zebrocy  : Zebrocy identifies network drives when they are added to victim systems."}, "id": "T1135", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-643"], "contributors": ["Praetorian"], "version": "3.1", "created": "14 December 2017", "lastmodified": "13 October 2021"}, {"techniquename": "Password Policy Discovery", "detection": "Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.", "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as , , , , and   .Password policies can be discovered in cloud environments using available APIs such as  in AWS .", "mitigations": {"M1027": " Password Policies  : Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory ( by default) of a domain controller and/or local computer with a corresponding entry in . "}, "procedureexamples": {"S0521": " BloodHound  : BloodHound can collect password policy information on the target environment.", "G0114": " Chimera  : Chimera has used the NtdsAudit utility to collect information related to accounts and passwords.", "S0488": " CrackMapExec  : CrackMapExec can discover the password policies applied to the target system.", "S0236": " Kwampirs  : Kwampirs collects password policy information with the command .", "S0039": " Net  : The  and  commands with Net can be used to obtain password policy information.", "G0049": " OilRig  : OilRig has used net.exe in a script with  to find the password policy of a domain.", "S0378": " PoshC2  : PoshC2 can use  to enumerate the domain password policy.", "G0010": " Turla  : Turla has used  and  to acquire password policy information."}, "id": "T1201", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["IaaS, Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Isif Ibrahima; Regina Elwell; Sudhanshu Chauhan, @Sudhanshu_C"], "version": "1.3", "created": "18 April 2018", "lastmodified": "26 July 2021"}, {"techniquename": "Permission Groups Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and . Monitor container logs for commands and/or API calls related to listing permissions for pods and nodes, such as .", "description": "Adversaries may attempt to find group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.", "procedureexamples": {"G0016": " APT29  : APT29 used the  PowerShell cmdlet to enumerate Exchange management role assignments through an Exchange Management Shell.", "G0022": " APT3  : APT3 has a tool that can enumerate the permissions associated with Windows groups.", "S0335": " Carbon  : Carbon uses the  command.", "S0483": " IcedID  : IcedID has the ability to identify Workgroup membership.", "S0233": " MURKYTOP  : MURKYTOP has the capability to retrieve information about groups.", "S0445": " ShimRatReporter  : ShimRatReporter gathered the local privileges for the infected host.", "S0623": " Siloscape  : Siloscape checks for Kubernetes node permissions.", "G0092": " TA505  : TA505 has used TinyMet to enumerate members of privileged groups. TA505 has also run .", "S0266": " TrickBot  : TrickBot can identify the groups the user on a compromised host belongs to."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1069", "subtechniques": ["T1069.001", "T1069.002", "T1069.003"], "tactics": ["Discovery"], "platforms": ["Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-576"], "contributors": ["Daniel Prizmant, Palo Alto Networks; Microsoft Threat Intelligence Center (MSTIC); Yuval Avrahami, Palo Alto Networks"], "version": "2.4", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "File and Directory Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Many command shell utilities can be used to obtain this information. Examples include , , , , and . Custom tools may also be used to gather file and directory information and interact with the Native API.", "procedureexamples": {"S0066": " 3PARA RAT  : 3PARA RAT has a command to retrieve metadata for files on disk as well as a command to list the current working directory.", "S0065": " 4H RAT  : 4H RAT has the capability to obtain file and directory listings.", "G0018": " admin@338  : admin@338 actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about files and directories:    ", "S0045": " ADVSTORESHELL  : ADVSTORESHELL can list files and directories.", "S0622": " AppleSeed  : AppleSeed has the ability to search for .txt, .ppt, .hwp, .pdf, and .doc files in specified directories.", "G0026": " APT18  : APT18 can list files information for specific directories.", "G0007": " APT28  : APT28 has used Forfiles to locate PDF, Excel, and Word documents during collection. The group also searched a compromised DCCC computer for specific terms.", "G0016": " APT29  : APT29 obtained information about the configured Exchange virtual directory using .", "G0022": " APT3  : APT3 has a tool that looks for files and directories on the local file system.", "G0050": " APT32  : APT32's backdoor possesses the capability to list files and directories on a machine.  ", "G0082": " APT38  : APT38 have enumerated files and directories, or searched in specific locations within a compromised host.", "G0087": " APT39  : APT39 has used tools with the ability to search for files on a compromised host.", "G0096": " APT41  : APT41 has executed  on exploited victims, perhaps to return architecture related information.", "S0456": " Aria-body  : Aria-body has the ability to gather metadata from a file and to search for file and directory names.", "S0438": " Attor  : Attor has a plugin that enumerates files with specific extensions on all hard disk drives and stores file information in encrypted log files.", "S0347": " AuditCred  : AuditCred can search through folders and files on the system.", "S0129": " AutoIt backdoor  : AutoIt backdoor is capable of identifying documents on the victim with the following extensions: .doc; .pdf, .csv, .ppt, .docx, .pst, .xls, .xlsx, .pptx, and .jpeg.", "S0640": " Avaddon  : Avaddon has searched for specific files prior to encryption.", "S0473": " Avenger  : Avenger has the ability to browse files in directories such as Program Files and the Desktop. ", "S0344": " Azorult  : Azorult can recursively search for files in folders and collects files from the desktop with certain extensions.", "S0638": " Babuk  : Babuk has the ability to enumerate files on a targeted system.", "S0414": " BabyShark  : BabyShark has used  to search for \"programfiles\" and \"appdata\". ", "S0475": " BackConfig  : BackConfig has the ability to identify folders and files related to previous infections.  ", "S0093": " Backdoor.Oldrea  : Backdoor.Oldrea collects information about available drives, default browser, desktop file list, My Documents, Internet history, program files, and root of available drives. It also searches for ICS-related software files.", "S0031": " BACKSPACE  : BACKSPACE allows adversaries to search for files.", "S0642": " BADFLICK  : BADFLICK has searched for files on the infected host.", "S0128": " BADNEWS  : BADNEWS identifies files with certain extensions from USB devices, then copies them to a predefined directory.", "S0337": " BadPatch  : BadPatch searches for files with specific file extensions.", "S0234": " Bandook  : Bandook has a command to list files on a system.", "S0239": " Bankshot  : Bankshot searches for files on the victim's machine.", "S0534": " Bazar  : Bazar can enumerate the victim's desktop.", "S0127": " BBSRAT  : BBSRAT can list file and directory information.", "S0268": " Bisonal  : Bisonal can retrieve a file list of a specified folder.", "S0069": " BLACKCOFFEE  : BLACKCOFFEE has the capability to enumerate files.", "S0089": " BlackEnergy  : BlackEnergy gathers a list of installed apps from the uninstall program Registry. It also gathers registered mail, browser, and instant messaging clients from the Registry. BlackEnergy has searched for given file types.", "S0564": " BlackMould  : BlackMould has the ability to find files on the targeted system.", "S0520": " BLINDINGCAN  : BLINDINGCAN can search, read, write, move, and execute files.", "S0657": " BLUELIGHT  : BLUELIGHT can enumerate files and collect associated metadata.", "S0635": " BoomBox  : BoomBox can search for specific files and directories on a machine.", "S0651": " BoxCaon  : BoxCaon has searched for files on the system, such as documents located in the desktop folder.", "S0252": " Brave Prince  : Brave Prince gathers file and directory information from the victim\u2019s machine.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has collected a list of files from the victim and uploaded it to its C2 server, and then created a new list of specific files to steal.", "S0351": " Cannon  : Cannon can obtain victim drive information as well as a list of folders in C:\\Program Files.", "S0348": " Cardinal RAT  : Cardinal RAT checks its current working directory upon execution and also contains watchdog functionality that ensures its executable is located in the correct path (else it will rewrite the payload).", "S0572": " Caterpillar WebShell  : Caterpillar WebShell can search for files in directories. ", "S0144": " ChChes  : ChChes collects the victim's %TEMP% directory path and version of Internet Explorer.", "G0114": " Chimera  : Chimera has utilized multiple commands to identify data of interest in file and directory listings.", "S0020": " China Chopper  : China Chopper's server component can list directory contents.", "S0023": " CHOPSTICK  : An older version of CHOPSTICK has a module that monitors all mounted volumes for files with the extensions .doc, .docx, .pgp, .gpg, .m2f, or .m2o.", "S0611": " Clop  : Clop has searched folders and subfolders for files to encrypt.", "S0106": " cmd  : cmd can be used to find files and directories with native functionality such as  commands.", "S0154": " Cobalt Strike  : Cobalt Strike can explore files on a compromised system.", "S0575": " Conti  : Conti can discover files on a local system.", "S0492": " CookieMiner  : CookieMiner has looked for files in the user's home directory with \"wallet\" in their name using .", "S0212": " CORALDECK  : CORALDECK searches for specified files.", "S0050": " CosmicDuke  : CosmicDuke searches attached and mounted drives for file extensions and keywords that match a predefined list.", "S0488": " CrackMapExec  : CrackMapExec can discover specified filetypes and log files on a targeted system.", "S0115": " Crimson  : Crimson contains commands to list files and directories, as well as search for files matching certain extensions from a defined list.", "S0235": " CrossRAT  : CrossRAT can list all files on a system.", "S0498": " Cryptoistic  : Cryptoistic can scan a directory to identify files for deletion.", "S0625": " Cuba  : Cuba can enumerate files by using a variety of functions.", "S0497": " Dacls  : Dacls can scan directories on a compromised host.", "G0070": " Dark Caracal  : Dark Caracal collected file listings of all default Windows directories.", "G0012": " Darkhotel  : Darkhotel has used malware that searched for files with specific patterns.", "S0255": " DDKONG  : DDKONG lists files on the victim\u2019s machine.", "S0616": " DEATHRANSOM  : DEATHRANSOM can use loop operations to enumerate directories on a compromised host.", "S0354": " Denis  : Denis has several commands to search directories for files.", "S0021": " Derusbi  : Derusbi is capable of obtaining directory, file, and drive listings.", "S0600": " Doki  : Doki has resolved the path of a process PID to use as a script argument.", "S0472": " down_new  : down_new has the ability to list the directories on a compromised host.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used a batch script to gather folder and file names from victim hosts.", "S0547": " DropBook  : DropBook can collect the names of all files and folders in the Program Files directories. ", "S0567": " Dtrack  : Dtrack can list files on available disk volumes.", "G0031": " Dust Storm  : Dust Storm has used Android backdoors capable of enumerating specific files on the infected devices.", "S0062": " DustySky  : DustySky scans the victim for files that contain certain keywords and document types including PDF, DOC, DOCX, XLS, and XLSX, from a list that is obtained from the C2 as a text file. It can also identify logical drives for the infected machine.", "S0377": " Ebury  : Ebury can list directory entries. ", "S0081": " Elise  : A variant of Elise executes  when initially run.", "S0064": " ELMER  : ELMER is capable of performing directory listings.", "S0363": " Empire  : Empire includes various modules for finding files of interest on hosts and network shares.", "S0091": " Epic  : Epic recursively searches for all .doc files on the system and collects a directory listing of the Desktop, %TEMP%, and %WINDOWS%\\Temp directories.", "S0181": " FALLCHILL  : FALLCHILL can search files on a victim.", "S0512": " FatDuke  : FatDuke can enumerate directories on target machines.", "S0182": " FinFisher  : FinFisher enumerates directories and scans for certain files.", "S0618": " FIVEHANDS  : FIVEHANDS has the ability to enumerate files on a compromised host in order to encrypt files with specific extensions.", "S0036": " FLASHFLOOD  : FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on the local system and removable media.", "S0193": " Forfiles  : Forfiles can be used to locate certain types of files/directories in a system.(ex: locate all files with a specific extension, name, and/or age)", "G0117": " Fox Kitten  : Fox Kitten has used WizTree to obtain network files and directory listings.", "S0277": " FruitFly  : FruitFly looks for specific files and file types.", "S0628": " FYAnti  : FYAnti can search the  directory for files of a specified size.", "S0410": " Fysbis  : Fysbis has the ability to search for files. ", "G0047": " Gamaredon Group  : Gamaredon Group macros can scan for Microsoft Word and Excel files to inject with additional malicious macros. Gamaredon Group has also used its backdoors to automatically list interesting files (such as Office documents) found on a system.  ", "S0049": " GeminiDuke  : GeminiDuke collects information from the victim, including installed drivers, programs previously executed by users, programs and services configured to automatically run at startup, files and folders present in any user's home folder, files and folders present in any user's My Documents, programs installed to the Program Files folder, and recently accessed files, folders, and programs.", "S0249": " Gold Dragon  : Gold Dragon lists the directories for Desktop, program files, and the user\u2019s recently accessed files.", "S0493": " GoldenSpy  : GoldenSpy has included a program \"ExeProtector\", which monitors for the existence of GoldenSpy on the infected system and redownloads if necessary.  ", "S0237": " GravityRAT  : GravityRAT collects the volumes mapped on the system, and also steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.", "S0632": " GrimAgent  : GrimAgent has the ability to enumerate files and directories on a compromised host.", "G0072": " Honeybee  : Honeybee's service-based DLL implant traverses the FTP server\u2019s directories looking for files with keyword matches for computer names or certain keywords.", "S0376": " HOPLIGHT  : HOPLIGHT has been observed enumerating system drives and partitions.    ", "S0431": " HotCroissant  : HotCroissant has the ability to retrieve a list of files in a given directory as well as drives and drive types.", "S0070": " HTTPBrowser  : HTTPBrowser is capable of listing files, folders, and drives on a victim.", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can check for the existence of files, including its own components, as well as retrieve a list of logical drives.", "S0434": " Imminent Monitor  : Imminent Monitor has a dynamic debugging feature to check whether it is located in the %TEMP% directory, otherwise it copies itself there.", "G0100": " Inception  : Inception used a file listing plugin to collect information about file and directories both on local and remote drives.", "S0604": " Industroyer  : Industroyer\u2019s data wiper component enumerates specific files on all the Windows drives.", "S0259": " InnaputRAT  : InnaputRAT enumerates directories and obtains file attributes on a system.", "S0260": " InvisiMole  : InvisiMole can list information about files in a directory and recently opened or used documents. InvisiMole can also search for specific files by supplied file mask.", "S0015": " Ixeshe  : Ixeshe can list file and directory information.", "S0201": " JPIN  : JPIN can enumerate drives and their types. It can also change file permissions using cacls.exe.", "S0283": " jRAT  : jRAT can browse file systems.", "S0088": " Kasidet  : Kasidet has the ability to search for a given filename on a victim.", "S0265": " Kazuar  : Kazuar finds a specified directory, lists the files and metadata about those files.", "G0004": " Ke3chang  : Ke3chang uses command-line interaction to search files and directories.", "S0387": " KeyBoy  : KeyBoy has a command to launch a file browser or explorer on the system.", "S0271": " KEYMARBLE  : KEYMARBLE has a command to search for files on the victim\u2019s machine.", "S0526": " KGH_SPY  : KGH_SPY can enumerate files and directories on a compromised host.", "S0607": " KillDisk  : KillDisk has used the  command as part of its file deletion process.", "G0094": " Kimsuky  : Kimsuky has the ability to enumerate all the drives on an infected system.", "S0599": " Kinsing  : Kinsing has used the find command to search for specific files.", "S0437": " Kivars  : Kivars has the ability to list drives on the infected host.", "S0356": " KONNI  : A version of KONNI searches for filenames created with a previous version of the malware, suggesting different versions targeted the same victims and the versions may work together.", "S0236": " Kwampirs  : Kwampirs collects a list of files and directories in C:\\ with the command .", "G0032": " Lazarus Group  : Several Lazarus Group malware samples use a common function to identify target files by their extension. Lazarus Group malware families can also enumerate files and directories, including a Destover-like variant that lists files and gathers information for all drives.", "G0077": " Leafminer  : Leafminer used a tool called MailSniper to search for files on the desktop and another utility called Sobolsoft to extract attachments from EML files.", "S0211": " Linfo  : Linfo creates a backdoor through which remote attackers can list contents of drives and search for files.", "S0447": " Lokibot  : Lokibot can search for specific files on an infected host.", "S0582": " LookBack  : LookBack can retrieve file listings from the victim machine.", "S0409": " Machete  : Machete produces file listings in order to search for files to be exfiltrated.", "G0059": " Magic Hound  : Magic Hound malware can list a victim's logical drives and the type, as well the total/free space of the fixed devices. Other malware can list a directory's contents.", "S0652": " MarkiRAT  : MarkiRAT can look for files carrying specific extensions such as: .rtf, .doc, .docx, .xls, .xlsx, .ppt, .pptx, .pps, .ppsx, .txt, .gpg, .pkr, .kdbx, .key, and .jpb.", "S0576": " MegaCortex  : MegaCortex can parse the available drives and directories to determine which files to encrypt. ", "G0045": " menuPass  : menuPass has searched compromised systems for folders of interest including those related to HR, audit and expense, and meeting memos.", "S0443": " MESSAGETAP  : MESSAGETAP checks for the existence of two configuration files (keyword_parm.txt and parm.txt) and attempts to read the files every 30 seconds.", "S0455": " Metamorfo  : Metamorfo has searched the Program Files directories for specific folders and has searched for strings related to its mutexes. ", "S0339": " Micropsia  : Micropsia can perform a recursive directory listing for all volume drives available on the victim's machine and can also fetch specific files by their paths.", "S0051": " MiniDuke  : MiniDuke can enumerate local drives.", "S0083": " Misdat  : Misdat is capable of running commands to obtain a list of files and directories, as well as enumerating logical drives.", "S0079": " MobileOrder  : MobileOrder has a command to upload to its C2 server information about files on the victim mobile device, including SD card size, installed app list, SMS content, contacts, and calling history.", "S0149": " MoonWind  : MoonWind has a command to return a directory listing for a specified directory.", "G0069": " MuddyWater  : MuddyWater has used malware that checked if the ProgramData folder had folders or files with the keywords \"Kasper,\" \"Panda,\" or \"ESET.\"", "G0129": " Mustang Panda  : Mustang Panda has searched the entire target system for DOC, DOCX, PPT, PPTX, XLS, XLSX, and PDF files.", "S0272": " NDiskMonitor  : NDiskMonitor can obtain a list of all files and directories as well as logical drives.", "S0630": " Nebulae  : Nebulae can list files and directories on a compromised host.", "S0034": " NETEAGLE  : NETEAGLE allows adversaries to enumerate and modify the infected host's file system. It supports searching for directories, creating directories, listing directory contents, reading and writing to files, retrieving file attributes, and retrieving volume information.", "S0198": " NETWIRE  : NETWIRE has the ability to search for files on the compromised host.", "S0385": " njRAT  : njRAT can browse file systems using a file manager module.", "S0368": " NotPetya  : NotPetya searches for files ending with dozens of different file extensions prior to encryption.", "S0644": " ObliqueRAT  : ObliqueRAT has the ability to recursively enumerate files on an infected endpoint.", "S0346": " OceanSalt  : OceanSalt can extract drive information from the endpoint and search files on the system.", "S0340": " Octopus  : Octopus can collect information on the Windows directory and searches for compressed RAR files on the host.", "S0439": " Okrum  : Okrum has used DriveLetterView to enumerate drive information.", "G0116": " Operation Wocao  : Operation Wocao has gathered a recursive directory listing to find files and directories of interest.", "S0229": " Orz  : Orz can gather victim drive information.", "S0402": " OSX/Shlayer  : OSX/Shlayer uses the command  and  to construct installation paths.", "S0072": " OwaAuth  : OwaAuth has a command to list its directory and logical drives.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell has the ability to list files and file characteristics including extension, size, ownership, and permissions.", "S0208": " Pasam  : Pasam creates a backdoor through which remote attackers can retrieve lists of files.", "G0040": " Patchwork  : A Patchwork payload has searched all fixed drives on the victim for files matching a specified list of extensions.", "S0587": " Penquin  : Penquin can use the command code  to send file names, size, and status to C2.", "S0643": " Peppy  : Peppy can identify specific files for exfiltration.", "S0048": " PinchDuke  : PinchDuke searches for files created within a certain timeframe and whose file extension matches a predefined list.", "S0124": " Pisloader  : Pisloader has commands to list drives on the victim machine and to list file information for a given directory.", "S0435": " PLEAD  : PLEAD has the ability to list drives and files on the compromised host.", "S0013": " PlugX  : PlugX has a module to enumerate drives and find files recursively.", "S0428": " PoetRAT  : PoetRAT has the ability to list files upon receiving the  command from C2.", "S0216": " POORAIM  : POORAIM can conduct file browsing.", "S0378": " PoshC2  : PoshC2 can enumerate files on the local file system and includes a module for enumerating recently accessed files.", "S0139": " PowerDuke  : PowerDuke has commands to get the current directory name as well as the size of a file. It also has commands to obtain information about logical drives, drive type, and free space.", "S0184": " POWRUNER  : POWRUNER may enumerate user directories on a victim.", "S0113": " Prikormka  : A module in Prikormka collects information about the paths, size, and creation time of files with specific file extensions, but not the actual content of the file.", "S0238": " Proxysvc  : Proxysvc lists files in directories.", "S0078": " Psylo  : Psylo has commands to enumerate all storage devices and to find all files that start with a particular string.", "S0147": " Pteranodon  : Pteranodon identifies files matching certain file extension and copies them to subdirectories it created.", "S0192": " Pupy  : Pupy can walk through directories and recursively search for strings in files.", "S0650": " QakBot  : QakBot can identify whether it has been run previously on a host by checking for a specified folder.", "S0629": " RainyDay  : RainyDay can use a file exfiltration tool to collect recently changed files with specific extensions.", "S0458": " Ramsay  : Ramsay can collect directory and file lists. ", "S0055": " RARSTONE  : RARSTONE obtains installer properties from Uninstall Registry Key entries to obtain information about installed applications and how to uninstall certain applications.", "S0153": " RedLeaves  : RedLeaves can enumerate and search for files and directories.", "S0332": " Remcos  : Remcos can search for files on the infected machine.", "S0375": " Remexi  : Remexi searches for files on the system. ", "S0592": " RemoteUtilities  : RemoteUtilities can enumerate files and directories on a target machine.", "S0125": " Remsec  : Remsec is capable of listing contents of folders on the victim. Remsec also searches for custom network encryption software on victims.", "S0496": " REvil  : REvil has the ability to identify specific files and directories that are not to be encrypted.", "S0448": " Rising Sun  : Rising Sun can enumerate information about files from the infected system, including file size, attributes, creation time, last access time, and write time. Rising Sun can enumerate the compilation timestamp of Windows executable files. ", "S0240": " ROKRAT  : ROKRAT has the ability to gather a list of files and directories on the infected system.", "S0090": " Rover  : Rover automatically searches for files on local drives based on a predefined list of file extensions.", "S0148": " RTM  : RTM can check for specific files and directories associated with virtualization and malware analysis.", "S0446": " Ryuk  : Ryuk has called  to emumerate all mounted drives, and  to determine the drive type.", "G0034": " Sandworm Team  : Sandworm Team has enumerated files on a compromised host.", "S0461": " SDBbot  : SDBbot has the ability to get directory listings or drive information on a compromised host.", "S0345": " Seasalt  : Seasalt has the capability to identify the drive type on a victim.", "S0444": " ShimRat  : ShimRat can list directories.", "S0063": " SHOTPUT  : SHOTPUT has a command to obtain a directory listing.", "S0610": " SideTwist  : SideTwist has the ability to search for specific files.", "G0121": " Sidewinder  : Sidewinder has used malware to collect information on files and directories.", "S0623": " Siloscape  : Siloscape searches for the Kubernetes config file and other related files using a regular expression. ", "S0468": " Skidmap  : Skidmap has checked for the existence of specific files including  and . It also has the ability to monitor the cryptocurrency miner file and process.  ", "S0633": " Sliver  : Sliver can enumerate files on a target system.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA can enumerate files and directories.", "S0226": " Smoke Loader  : Smoke Loader recursively searches through directories for files.", "S0615": " SombRAT  : SombRAT can execute  to enumerate files in storage on a compromised system.", "S0516": " SoreFang  : SoreFang has the ability to list directories.", "S0157": " SOUNDBITE  : SOUNDBITE is capable of enumerating and manipulating files and directories.", "G0054": " Sowbug  : Sowbug identified and extracted all Word documents on a server by using a command containing * .doc and *.docx. The actors also searched for documents based on a specific date range and attempted to identify all installed software on a victim.", "S0035": " SPACESHIP  : SPACESHIP identifies files and directories for collection by searching for specific file extensions or file modification time.", "S0142": " StreamEx  : StreamEx has the ability to enumerate drive types.", "S0491": " StrongPity  : StrongPity can parse the hard drive on a compromised host to identify specific file extensions.", "S0603": " Stuxnet  : Stuxnet uses a driver to scan for specific filesystem driver objects.", "S0559": " SUNBURST  : SUNBURST had commands to enumerate files and directories.", "S0562": " SUNSPOT  : SUNSPOT enumerated the Orion software Visual Studio solution directory path.", "S0242": " SynAck  : SynAck checks its directory location in an attempt to avoid launching in a sandbox.", "S0011": " Taidoor  : Taidoor can search for specific files.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE can use  to enumerate files in a specified directory.", "S0467": " TajMahal  : TajMahal has the ability to index files from drives, user profiles, and removable drives.", "S0131": " TINYTYPHON  : TINYTYPHON searches through the drive containing the OS, then all drive letters C through to Z, for documents matching certain extensions.", "S0266": " TrickBot  : TrickBot searches the system for all of the following file extensions: .avi, .mov, .mkv, .mpeg, .mpeg4, .mp4, .mp3, .wav, .ogg, .jpeg, .jpg, .png, .bmp, .gif, .tiff, .ico, .xlsx, and .zip. It can also obtain browsing history, cookies, and plug-in information.", "S0094": " Trojan.Karagany  : Trojan.Karagany can enumerate files and directories on a compromised host.", "G0081": " Tropic Trooper  : Tropic Trooper has monitored files' modified time.   ", "S0436": " TSCookie  : TSCookie has the ability to discover drive information on the infected host.", "S0647": " Turian  : Turian can search for specific files and list directories.", "G0010": " Turla  : Turla surveys a system upon check-in to discover files in specific locations on the hard disk %TEMP% directory, the current user's desktop, the Program Files directory, and Recent. Turla RPC backdoors have also searched for files matching the  pattern.", "S0263": " TYPEFRAME  : TYPEFRAME can search directories for files on the victim\u2019s machine.", "S0275": " UPPERCUT  : UPPERCUT has the capability to gather the victim's current directory.", "S0452": " USBferry  : USBferry can detect the victim's file or folder list.  ", "S0136": " USBStealer  : USBStealer searches victim drives for files matching certain extensions (\".skr\",\".pkr\" or \".key\") or names.", "S0180": " Volgmer  : Volgmer can list directories on a victim.", "S0366": " WannaCry  : WannaCry searches for variety of user files by file extension before encrypting them using RSA and AES, including Office, PDF, image, audio, video, source code, archive/compression format, and key and certificate files.", "S0612": " WastedLocker  : WastedLocker can enumerate files and directories just prior to encryption.", "G0124": " Windigo  : Windigo has used a script to check for the presence of files created by OpenSSH backdoors.", "S0466": " WindTail  : WindTail has the ability to enumerate the users home directory and the path to its own application bundle.", "S0219": " WINERACK  : WINERACK can enumerate files and directories.", "S0059": " WinMM  : WinMM sets a WH_CBT Windows hook to search for and capture files on the victim.", "S0161": " XAgentOSX  : XAgentOSX contains the readFiles function to return a detailed listing (sometimes recursive) of a specified directory. XAgentOSX contains the showBackupIosFolder function to check for IOS device backups by running .", "S0248": " yty  : yty gathers information on victim\u2019s drives and has a plugin for document listing.", "S0251": " Zebrocy  : Zebrocy searches for files that are 60mb and less and contain the following extensions: .doc, .docx, .xls, .xlsx, .ppt, .pptx, .exe, .zip, and .rar. Zebrocy also runs the  command to list the contents of the directory. Zebrocy can obtain the current execution path as well as perform drive enumeration. ", "S0330": " Zeus Panda  : Zeus Panda searches for specific directories on the victim\u2019s machine.", "S0086": " ZLib  : ZLib has the ability to enumerate files and drives.", "S0350": " zwShell  : zwShell can browse the file system.", "S0412": " ZxShell  : ZxShell has a command to open a file manager and explorer on the system. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1083", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Some folders may require Administrator, SYSTEM or specific user depending on permission levels and access controls"], "permissionsrequired": ["Administrator, SYSTEM, User"], "capecid": ["CAPEC-127,", "CAPEC-497"], "version": "1.3", "created": "31 May 2017", "lastmodified": "23 August 2021"}, {"techniquename": "Network Service Scanning", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.", "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system. Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Ensure that unnecessary ports and services are closed to prevent risk of discovery and potential exploitation.", "M1031": " Network Intrusion Prevention  : Use network intrusion detection/prevention systems to detect and prevent remote service scans.", "M1030": " Network Segmentation  : Ensure proper network segmentation is followed to protect critical servers and devices."}, "procedureexamples": {"G0050": " APT32  : APT32 performed network scanning on the network to search for open ports, services, OS finger-printing, and other vulnerabilities.", "G0087": " APT39  : APT39 has used CrackMapExec and a custom port scanner known as BLUETORCH for network scanning.", "G0096": " APT41  : APT41 used a malware variant called WIDETONE to conduct port scans on specified subnets.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has used SMBTouch, a vulnerability scanner, to determine whether a target is vulnerable to EternalBlue malware.", "S0089": " BlackEnergy  : BlackEnergy has conducted port scans on a host.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell has a module to use a port scanner on a system. ", "G0114": " Chimera  : Chimera has used the  command for network scanning as well as a custom Python tool  packed into a Windows executable named Get.exe to scan IP ranges for HTTP.", "S0020": " China Chopper  : China Chopper's server component can spider authentication portals.", "G0080": " Cobalt Group  : Cobalt Group leveraged an open-source tool called SoftPerfect Network Scanner to perform network scanning.", "S0154": " Cobalt Strike  : Cobalt Strike can perform port scans from an infected host.", "S0608": " Conficker  : Conficker scans for other machines to infect.", "G0132": " CostaRicto  : CostaRicto employed nmap and pscan to scan target environments.", "G0105": " DarkVishnya  : DarkVishnya performed port scanning to obtain the list of active services.", "S0363": " Empire  : Empire can perform port scans from an infected host.", "G0037": " FIN6  : FIN6 used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.", "G0117": " Fox Kitten  : Fox Kitten has used tools including NMAP to conduct broad scanning to identify open ports.", "S0061": " HDoor  : HDoor scans to identify open ports on the victim.", "S0601": " Hildegard  : Hildegard has used masscan to look for kubelets in the internal Kubernetes network.", "S0604": " Industroyer  : Industroyer uses a custom port scanner to map out a network.", "S0260": " InvisiMole  : InvisiMole can scan the network for open ports and vulnerable instances of RDP and SMB protocols.", "S0250": " Koadic  : Koadic can scan for open TCP ports on the target network.", "G0077": " Leafminer  : Leafminer scanned network services to search for vulnerabilities in the victim system.", "S0532": " Lucifer  : Lucifer can scan for open ports including TCP ports 135 and 1433.", "G0045": " menuPass  : menuPass has used tcping.exe, similar to Ping, to probe port status on systems of interest.", "S0233": " MURKYTOP  : MURKYTOP has the capability to scan for open ports on hosts in a connected network.", "G0019": " Naikon  : Naikon has used the LadonGo scanner to scan target networks.", "S0590": " NBTscan  : NBTscan can be used to scan IP networks.", "G0049": " OilRig  : OilRig has used the publicly available tool SoftPerfect Network Scanner as well as a custom tool called GOLDIRONY to conduct network scanning.", "G0116": " Operation Wocao  : Operation Wocao has scanned for open ports and used nbtscan to find NETBIOS nameservers.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell can scan networks for open ports and listening services.", "S0378": " PoshC2  : PoshC2 can perform port scans from an infected host.", "S0192": " Pupy  : Pupy has a built-in module for port scanning.", "S0583": " Pysa  : Pysa can perform network reconnaissance using the Advanced Port Scanner tool.", "S0458": " Ramsay  : Ramsay can scan for systems that are vulnerable to the EternalBlue exploit.  ", "S0125": " Remsec  : Remsec has a plugin that can perform ARP scanning as well as port scanning.", "G0106": " Rocke  : Rocke conducted scanning for exposed TCP port 7001 as well as SSH and Redis servers.", "S0374": " SpeakUp  : SpeakUp checks for availability of specific ports on servers.", "G0039": " Suckfly  : Suckfly the victim's internal network for hosts with ports 8080, 5900, and 40 open.", "G0139": " TeamTNT  : TeamTNT has used masscan to search for open Docker API ports. TeamTNT has also used malware that utilizes zmap and zgrab to search for vulnerable services in cloud environments.", "G0027": " Threat Group-3390  : Threat Group-3390 actors use the Hunter tool to conduct network service discovery for vulnerable systems.", "G0081": " Tropic Trooper  : Tropic Trooper used  and an openly available tool to scan for open ports on target systems.", "S0341": " Xbash  : Xbash can perform port scanning of TCP and UDP ports.", "S0117": " XTunnel  : XTunnel is capable of probing the network for open ports.", "S0412": " ZxShell  : ZxShell can launch port scans. "}, "id": "T1046", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Containers, IaaS, Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "capecid": ["CAPEC-300"], "contributors": ["Praetorian"], "version": "2.2", "created": "31 May 2017", "lastmodified": "09 April 2021"}, {"techniquename": "Cloud Storage Object Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained. Monitor cloud logs for API calls used for file or object enumeration for unusual activity. ", "description": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage.  Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.Cloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include ListObjectsV2 in AWS  and List Blobs in Azure .", "mitigations": {"M1018": " User Account Management  : Restrict granting of permissions related to listing objects in cloud storage to necessary accounts."}, "id": "T1619", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["IaaS"], "contributors": ["Isif Ibrahima; Regina Elwell"], "version": "1.0", "created": "01 October 2021", "lastmodified": "07 October 2021"}, {"techniquename": "Domain Trust Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as . Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the  Win32 API call to spot activity associated with . Information may also be acquired through Windows system management tools such as . The .NET method  can be an indicator of .", "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the  Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.", "mitigations": {"M1047": " Audit  : Map the trusts within existing domains/forests and keep trust relationships to a minimum.", "M1030": " Network Segmentation  : Employ network segmentation for sensitive domains.."}, "procedureexamples": {"S0552": " AdFind  : AdFind can gather information about organizational units (OUs) and domain trusts from Active Directory.", "G0016": " APT29  : APT29 used the  PowerShell cmdlet to enumerate accepted domains through an Exchange Management Shell. They also used AdFind to enumerate domains and to discover trust between federated domains.", "S0534": " Bazar  : Bazar can use Nltest tools to obtain information about the domain.", "S0521": " BloodHound  : BloodHound has the ability to map domain trusts and identify misconfigurations for potential abuse.", "G0114": " Chimera  : Chimera has  to identify domain trust relationships.", "S0105": " dsquery  : dsquery can be used to gather information on domain trusts with .", "S0363": " Empire  : Empire has modules for enumerating domain trusts.", "G0061": " FIN8  : FIN8 has retrieved a list of trusted domains by using .", "S0359": " Nltest  : Nltest may be used to enumerate trusted domains by using commands such as .", "S0378": " PoshC2  : PoshC2 has modules for enumerating domain trusts.", "S0194": " PowerSploit  : PowerSploit has modules such as  and  to enumerate domain and forest trusts.", "S0650": " QakBot  : QakBot can run  for domain trust discovery.", "S0266": " TrickBot  : TrickBot can gather information about domain trusts by utilizing Nltest."}, "id": "T1482", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Windows"], "permissionsrequired": ["User"], "contributors": ["Dave Westgard; Elia Florio, Microsoft; Mnemonic; RedHuntLabs, @redhuntlabs"], "version": "1.1", "created": "14 February 2019", "lastmodified": "17 September 2020"}, {"techniquename": "Browser Bookmark Discovery", "detection": "Monitor processes and command-line arguments for actions that could be taken to gather browser bookmark information. Remote access tools with built-in features may interact directly using APIs to gather information. Information may also be acquired through system management tools such as  and .System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.", "description": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.Browser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser.Specific storage locations vary based on platform and/or application, but browser bookmarks are typically stored in local files/databases.", "procedureexamples": {"G0082": " APT38  : APT38 has collected browser bookmark information to learn more about compromised hosts, obtain personal information about users, and acquire details about internal network resources.", "S0274": " Calisto  : Calisto collects information on bookmarks from Google Chrome.", "G0114": " Chimera  : Chimera has used  for bookmark discovery.", "S0567": " Dtrack  : Dtrack can retrieve browser history.", "S0363": " Empire  : Empire has the ability to gather browser data such as bookmarks and visited sites.", "G0117": " Fox Kitten  : Fox Kitten has used Google Chrome bookmarks to identify internal resources and assets.", "S0409": " Machete  : Machete retrieves the user profile data (e.g., browsers) from Chrome and Firefox browsers. ", "S0079": " MobileOrder  : MobileOrder has a command to upload to its C2 server victim browser bookmarks."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1217", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Mike Kemmerer"], "version": "1.0", "created": "18 April 2018", "lastmodified": "26 March 2020"}, {"techniquename": "Cloud Infrastructure Discovery", "detection": "Establish centralized logging for the activity of cloud infrastructure components. Monitor logs for actions that could be taken to gather information about cloud infrastructure, including the use of discovery API calls by new or unexpected users. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones.", "description": "An adversary may attempt to discover resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.Cloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a  API within the Amazon EC2 API that can return information about one or more instances within an account, the  API that returns a list of all buckets owned by the authenticated sender of the request, or the  API to retrieve access block configuration for a bucket . Similarly, GCP's Cloud SDK CLI provides the  command to list all Google Compute Engine instances in a project , and Azure's CLI command  lists details of virtual machines.An adversary may enumerate resources using a compromised user's access keys to determine which are available to that user. The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as  to determine size, owner, permissions, and network ACLs of database resources.  Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.", "mitigations": {"M1018": " User Account Management  : Limit permissions to discover cloud infrastructure in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies."}, "id": "T1580", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["IaaS"], "permissionsrequired": ["User"], "contributors": ["Isif Ibrahima; Praetorian; Regina Elwell"], "version": "1.2", "created": "20 August 2020", "lastmodified": "02 September 2021"}, {"techniquename": "Container and Resource Discovery", "detection": "Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level.Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications. ", "description": "Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.These resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs. In Docker, logs may leak information about the environment, such as the environment\u2019s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary\u2019s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution. ", "mitigations": {"M1035": " Limit Access to Resource Over Network  : Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API and Kubernetes API Server.", "M1030": " Network Segmentation  : Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls.", "M1018": " User Account Management  : Enforce the principle of least privilege by limiting dashboard visibility to only the required users."}, "procedureexamples": {"S0601": " Hildegard  : Hildegard has used masscan to search for kubelets and the kubelet API for additional running containers. ", "G0139": " TeamTNT  : TeamTNT has checked for running containers with  and for specific container names with ."}, "id": "T1613", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Containers"], "permissionsrequired": ["User"], "contributors": ["Center for Threat-Informed Defense (CTID); Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team"], "version": "1.0", "created": "31 March 2021", "lastmodified": "12 April 2021"}, {"techniquename": "Cloud Service Dashboard", "detection": "Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.", "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.Depending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.", "mitigations": {"M1018": " User Account Management  : Enforce the principle of least-privilege by limiting dashboard visibility to only the resources required. This may limit the discovery value of the dashboard in the event of a compromised account."}, "id": "T1538", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Azure AD, Google Workspace, IaaS, Office 365"], "permissionsrequired": ["User"], "contributors": ["Praetorian"], "version": "1.1", "created": "30 August 2019", "lastmodified": "16 March 2021"}, {"techniquename": "Cloud Service Discovery", "detection": "Cloud service discovery techniques will likely occur throughout an operation where an adversary is targeting cloud-based systems and services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Normal, benign system and network events that look like cloud service discovery may be uncommon, depending on the environment and how they are used. Monitor cloud service usage for anomalous behavior that may indicate adversarial presence within the environment.", "description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. Adversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.", "id": "T1526", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Azure AD, Google Workspace, IaaS, Office 365, SaaS"], "permissionsrequired": ["User"], "contributors": ["Praetorian; Suzy Schapperle - Microsoft Azure Red Team"], "version": "1.2", "created": "30 August 2019", "lastmodified": "16 March 2021"}, {"techniquename": "Domain Account", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.Commands such as  and  of the Net utility, on macOS, and  on Linux can list domain users and groups.", "mitigations": {"M1028": " Operating System Configuration  : Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located at . It can be disabled through GPO: Computer Configuration > [Policies] > Administrative Templates > Windows Components > Credential User Interface: Enumerate administrator accounts on elevation."}, "procedureexamples": {"S0552": " AdFind  : AdFind can enumerate domain users.", "S0239": " Bankshot  : Bankshot gathers domain and account names/information through process monitoring.", "S0534": " Bazar  : Bazar has the ability to identify domain administrator accounts.", "S0521": " BloodHound  : BloodHound can collect information about domain users, including identification of domain admin accounts.", "S0635": " BoomBox  : BoomBox has the ability to execute an LDAP query to enumerate the distinguished name, SAM account name, and display name for all domain users.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used  to identify account information.", "G0114": " Chimera  : Chimera has has used  and  to enumerate domain accounts including administrator accounts.", "S0154": " Cobalt Strike  : Cobalt Strike can determine if the user on an infected machine is in the admin or domain admin group.", "S0488": " CrackMapExec  : CrackMapExec can enumerate the domain user accounts on a targeted system.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used batch scripts to enumerate users on a victim domain controller.", "S0105": " dsquery  : dsquery can be used to gather information on user accounts within a domain.", "S0363": " Empire  : Empire can acquire local and domain user account information.", "G0037": " FIN6  : FIN6 has used Metasploit\u2019s PsExec NTDSGRAB module to obtain a copy of the victim's Active Directory database.", "G0117": " Fox Kitten  : Fox Kitten has used the Softerra LDAP browser to browse documentation on service accounts.", "S0483": " IcedID  : IcedID can query LDAP to identify additional users on the network to infect.", "G0004": " Ke3chang  : Ke3chang performs account discovery using commands such as  and  on specific permissions groups.", "G0045": " menuPass  : menuPass has used the Microsoft administration tool csvde.exe to export Active Directory data.", "G0069": " MuddyWater  : MuddyWater has used  to enumerate domain users.", "S0039": " Net  : Net commands used with the  flag can be used to gather information about and manipulate user accounts on the current domain.", "G0049": " OilRig  : OilRig has run , , , and  to get account listings on a victim.", "G0116": " Operation Wocao  : Operation Wocao has used the  command to retrieve information about domain accounts.   ", "S0165": " OSInfo  : OSInfo enumerates local and domain users", "G0033": " Poseidon Group  : Poseidon Group searches for administrator accounts on both the local victim machine and the network.", "S0378": " PoshC2  : PoshC2 can enumerate local and domain user account information.", "S0184": " POWRUNER  : POWRUNER may collect user account information by running  or a series of other commands on a victim.", "G0034": " Sandworm Team  : Sandworm Team has used a tool to query Active Directory using LDAP, discovering information about usernames listed in AD.    ", "S0516": " SoreFang  : SoreFang can enumerate domain accounts via .", "S0603": " Stuxnet  : Stuxnet enumerates user accounts of the domain.", "S0018": " Sykipot  : Sykipot may use  to display accounts in the \"domain admins\" permissions group and  to list local system administrator group membership.", "G0010": " Turla  : Turla has used  to enumerate domain accounts.", "S0476": " Valak  : Valak has the ability to enumerate domain admin accounts.", "G0102": " Wizard Spider  : Wizard Spider has identified domain admins through the use of \"net group \u2018Domain admins\u2019\" commands."}, "id": "T1087.002", "subtechniqueof": "T1087", "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-575"], "version": "1.0", "created": "21 February 2020", "lastmodified": "13 October 2021"}, {"techniquename": "Email Account", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).In on-premises Exchange and Exchange Online, the PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.In Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.", "procedureexamples": {"S0093": " Backdoor.Oldrea  : Backdoor.Oldrea collects address book information from Outlook.", "S0635": " BoomBox  : BoomBox can execute an LDAP query to discover e-mail accounts for domain users.", "S0367": " Emotet  : Emotet has been observed leveraging a module that can scrape email addresses from Outlook.", "S0531": " Grandoreiro  : Grandoreiro can parse Outlook .pst files to extract e-mail addresses.", "S0413": " MailSniper  : MailSniper can be used to obtain account names from Exchange and Office 365 using the  cmdlet.", "S0358": " Ruler  : Ruler can be used to enumerate Exchange users and dump the GAL.", "G0034": " Sandworm Team  : Sandworm Team used malware to enumerate email settings, including usernames and passwords, from the M.E.Doc application.    ", "G0092": " TA505  : TA505 has used the tool EmailStealer to steal and send lists of e-mail addresses to a remote server.", "S0266": " TrickBot  : TrickBot collects email addresses from Outlook."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1087.003", "subtechniqueof": "T1087", "tactics": ["Discovery"], "platforms": ["Google Workspace, Office 365, Windows"], "permissionsrequired": ["User"], "version": "1.1", "created": "21 February 2020", "lastmodified": "31 March 2021"}, {"techniquename": "Application Window Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "procedureexamples": {"S0456": " Aria-body  : Aria-body has the ability to identify the titles of running windows on a compromised host.", "S0438": " Attor  : Attor can obtain application window titles and then determines which windows to perform Screen Capture on.", "S0454": " Cadelspy  : Cadelspy has the ability to identify open windows on the compromised host.", "S0261": " Catchamas  : Catchamas obtains application windows titles and then determines which windows to perform Screen Capture on.", "S0038": " Duqu  : The discovery modules used with Duqu can collect information on open windows.", "S0531": " Grandoreiro  : Grandoreiro can identify installed security tools based on window names.", "S0431": " HotCroissant  : HotCroissant has the ability to list the names of all open windows on the infected host.", "S0260": " InvisiMole  : InvisiMole can enumerate windows and child windows on a compromised host.", "S0265": " Kazuar  : Kazuar gathers information about opened windows.", "G0032": " Lazarus Group  : Lazarus Group malware IndiaIndia obtains and sends to its C2 server the title of the window for each running process. The KilaAlfa keylogger also reports the title of the window in the foreground.", "S0409": " Machete  : Machete saves the window names. ", "S0455": " Metamorfo  : Metamorfo can enumerate all windows on the victim\u2019s machine.", "S0033": " NetTraveler  : NetTraveler reports window names along with keylogger information to provide application context.", "S0198": " NETWIRE  : NETWIRE can discover and close windows on controlled systems.", "S0385": " njRAT  : njRAT gathers information about opened windows during the initial infection.", "S0435": " PLEAD  : PLEAD has the ability to list open windows on the compromised host.", "S0012": " PoisonIvy  : PoisonIvy captures window titles.", "S0139": " PowerDuke  : PowerDuke has a command to get text of the current foreground window.", "S0650": " QakBot  : QakBot has the ability to enumerate windows on a compromised host.", "S0375": " Remexi  : Remexi has a command to capture active windows on the machine and retrieve window titles.", "S0157": " SOUNDBITE  : SOUNDBITE is capable of enumerating application windows.", "S0094": " Trojan.Karagany  : Trojan.Karagany can monitor the titles of open windows to identify specific keywords.   ", "S0219": " WINERACK  : WINERACK can enumerate active windows."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1010", "subtechniques": ["No sub-techniques"], "tactics": ["Discovery"], "platforms": ["Windows, macOS"], "permissionsrequired": ["User"], "version": "1.1", "created": "31 May 2017", "lastmodified": "26 March 2020"}, {"techniquename": "Local Account", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .Monitor for processes that can be used to enumerate user accounts, such as  and , especially when executed in quick succession.", "description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.Commands such as  and  of the Net utility and  and on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the  file. On macOS the  command can be used to enumerate local accounts.", "mitigations": {"M1028": " Operating System Configuration  : Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located at . It can be disabled through GPO: Computer Configuration > [Policies] > Administrative Templates > Windows Components > Credential User Interface: Enumerate administrator accounts on elevation."}, "procedureexamples": {"G0018": " admin@338  : admin@338 actors used the following commands following exploitation of a machine with LOWBALL malware to enumerate user accounts:  ", "S0331": " Agent Tesla  : Agent Tesla can collect account information from the victim\u2019s machine.", "G0006": " APT1  : APT1 used the commands ,, and  to find accounts on the system.", "G0022": " APT3  : APT3 has used a tool that can obtain info about local and global group users, power users, and administrators.", "G0050": " APT32  : APT32 enumerated administrative users using the commands .", "S0239": " Bankshot  : Bankshot gathers domain and account names/information through process monitoring.", "S0534": " Bazar  : Bazar can identify administrator accounts on an infected host.", "S0570": " BitPaymer  : BitPaymer can enumerate the sessions for each user logged onto the infected host.", "S0521": " BloodHound  : BloodHound can identify users with local administrator rights.", "G0114": " Chimera  : Chimera has used  for account discovery.", "S0244": " Comnie  : Comnie uses the  command.", "S0038": " Duqu  : The discovery modules used with Duqu can collect information on accounts and permissions.", "S0081": " Elise  : Elise executes  after initial communication is made to the remote server.", "S0363": " Empire  : Empire can acquire local and domain user account information.", "S0091": " Epic  : Epic gathers a list of all user accounts, privilege classes, and time of last logon.", "G0117": " Fox Kitten  : Fox Kitten has accessed ntuser.dat and UserClass.dat on compromised hosts.", "S0049": " GeminiDuke  : GeminiDuke collects information on local user accounts from the victim.", "S0537": " HyperStack  : HyperStack can enumerate all account names on a remote share.", "S0260": " InvisiMole  : InvisiMole has a command to list account information on the victim\u2019s machine.", "S0265": " Kazuar  : Kazuar gathers information on local groups and members on the victim\u2019s machine.", "G0004": " Ke3chang  : Ke3chang performs account discovery using commands such as  and  on specific permissions groups.", "S0236": " Kwampirs  : Kwampirs collects a list of accounts with the command .", "S0084": " Mis-Type  : Mis-Type may create a file containing the results of the command .", "S0233": " MURKYTOP  : MURKYTOP has the capability to retrieve information about users on remote hosts.", "S0039": " Net  : Commands under  can be used in Net to gather information about and manipulate user accounts.", "G0049": " OilRig  : OilRig has run , , , and  to get account listings on a victim.", "S0165": " OSInfo  : OSInfo enumerates local and domain users", "S0598": " P.A.S. Webshell  : P.A.S. Webshell can display the /etc/passwd file on a compromised host.", "S0453": " Pony  : Pony has used the  function to enumerate local accounts. ", "G0033": " Poseidon Group  : Poseidon Group searches for administrator accounts on both the local victim machine and the network.", "S0378": " PoshC2  : PoshC2 can enumerate local and domain user account information.", "S0194": " PowerSploit  : PowerSploit's  Privesc-PowerUp module can enumerate all SIDs associated with its current token.", "S0223": " POWERSTATS  : POWERSTATS can retrieve usernames from compromised hosts.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY can gather user names.", "S0192": " Pupy  : Pupy uses PowerView and Pywerview to perform discovery commands such as net user, net group, net local group, etc.", "S0241": " RATANKBA  : RATANKBA uses the  command.", "S0125": " Remsec  : Remsec can obtain a list of users.", "S0085": " S-Type  : S-Type runs the command  on a victim. S-Type also runs tests to determine the privilege level of the compromised user.", "S0063": " SHOTPUT  : SHOTPUT has a command to retrieve information about connected users.", "S0649": " SMOKEDHAM  : SMOKEDHAM has used  and  to enumerate local accounts on a compromised host.", "S0516": " SoreFang  : SoreFang can collect usernames from the local system via .", "S0603": " Stuxnet  : Stuxnet enumerates user accounts of the local host.", "G0027": " Threat Group-3390  : Threat Group-3390 has used  to conduct internal discovery of systems.", "S0266": " TrickBot  : TrickBot collects the users of the system.", "G0010": " Turla  : Turla has used  to enumerate local accounts on the system.", "S0452": " USBferry  : USBferry can use  to gather information about local accounts. ", "S0476": " Valak  : Valak has the ability to enumerate local admin accounts."}, "id": "T1087.001", "subtechniqueof": "T1087", "tactics": ["Discovery"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Daniel Stepanic, Elastic"], "version": "1.2", "created": "21 February 2020", "lastmodified": "28 July 2021"}, {"techniquename": "Cloud Account", "detection": "Monitor processes, command-line arguments, and logs for actions that could be taken to gather information about cloud accounts, including the use of calls to cloud APIs that perform account discovery.System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.", "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.With authenticated access there are several tools that can be used to find accounts. The  PowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365. The Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command  will list all users within a domain. The AWS command  may be used to obtain a list of users in the current account while  can obtain IAM roles that have a specified path prefix. In GCP,  and  may be used to obtain a listing of service accounts and users in a project.", "mitigations": {"M1047": " Audit  : Routinely check user permissions to ensure only the expected users have the ability to list IAM identities or otherwise discover cloud accounts.", "M1018": " User Account Management  : Limit permissions to discover cloud accounts in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies."}, "id": "T1087.004", "subtechniqueof": "T1087", "tactics": ["Discovery"], "platforms": ["Azure AD, Google Workspace, IaaS, Office 365, SaaS"], "permissionsrequired": ["User"], "contributors": ["Praetorian"], "version": "1.2", "created": "21 February 2020", "lastmodified": "16 March 2021"}, {"techniquename": "Account Discovery", "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as  and .Monitor for processes that can be used to enumerate user accounts, such as  and , especially when executed in quick succession.", "description": "Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.", "mitigations": {"M1028": " Operating System Configuration  : Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located . It can be disabled through GPO: Computer Configuration > [Policies] > Administrative Templates > Windows Components > Credential User Interface: E numerate administrator accounts on elevation. "}, "procedureexamples": {"G0016": " APT29  : APT29 obtained a list of users and their roles from an Exchange server using .", "S0445": " ShimRatReporter  : ShimRatReporter listed all non-privileged and privileged accounts available on the machine.", "S0658": " XCSSET  : XCSSET attempts to discover accounts from various locations such as a user's Evernote, AppleID, Telegram, Skype, and WeChat data."}, "id": "T1087", "subtechniques": ["T1087.001", "T1087.002", "T1087.003", "T1087.004"], "tactics": ["Discovery"], "platforms": ["Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-575"], "contributors": ["Daniel Stepanic, Elastic; Microsoft Threat Intelligence Center (MSTIC); Travis Smith, Tripwire"], "version": "2.3", "created": "31 May 2017", "lastmodified": "13 October 2021"}, {"techniquename": "Group Policy Preferences", "detection": "Monitor for attempts to access SYSVOL that involve searching for XML files. Deploy a new XML file with permissions set to Everyone:Deny and monitor for Access Denied errors.", "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:On the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: ", "mitigations": {"M1015": " Active Directory Configuration  : Remove vulnerable Group Policy Preferences.", "M1047": " Audit  : Search SYSVOL for any existing GGPs that may contain credentials and remove them.", "M1051": " Update Software  : Apply patch KB2962486 which prevents credentials from being stored in GPPs."}, "procedureexamples": {"G0064": " APT33  : APT33 has used a variety of publicly available tools like Gpppassword to gather credentials.", "S0194": " PowerSploit  : PowerSploit contains a collection of Exfiltration modules that can harvest credentials from Group Policy Preferences."}, "id": "T1552.006", "subtechniqueof": "T1552", "tactics": ["Credential Access"], "platforms": ["Windows"], "permissionsrequired": ["User"], "version": "1.0", "created": "11 February 2020", "lastmodified": "17 June 2020"}, {"techniquename": "Container API", "detection": "Establish centralized logging for the activity of container and Kubernetes cluster components. Monitor logs for actions that could be taken to gather credentials to container and cloud infrastructure, including the use of discovery API calls by new or unexpected users and APIs that access Docker logs.It may be possible to detect adversary use of credentials they have obtained such as in .", "description": "Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.An adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment. An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components. ", "mitigations": {"M1035": " Limit Access to Resource Over Network  : Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API and Kubernetes API Server.", "M1030": " Network Segmentation  : Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls.", "M1026": " Privileged Account Management  : Use the principle of least privilege for privileged accounts such as the service account in Kubernetes."}, "id": "T1552.007", "subtechniqueof": "T1552", "tactics": ["Credential Access"], "platforms": ["Containers"], "permissionsrequired": ["Administrator, User"], "contributors": ["Center for Threat-Informed Defense (CTID); Jay Chen, Palo Alto Networks; Yossi Weizman, Azure Defender Research Team"], "version": "1.0", "created": "31 March 2021", "lastmodified": "12 April 2021"}, {"techniquename": "Unsecured Credentials", "detection": "While detecting adversaries accessing credentials may be difficult without knowing they exist in the environment, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See  for more information.Monitor for suspicious file access activity, specifically indications that a process is reading multiple files in a short amount of time and/or using command-line arguments  indicative of searching for credential material (ex: regex patterns). These may be indicators of automated/scripted credential access behavior.Monitoring when the user's  is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like .Additionally, monitor processes for applications that can be used to query the Registry, such as , and collect command parameters that may indicate credentials are being searched. Correlate activity with related suspicious behavior that may indicate an active intrusion to reduce false positives.", "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry), or other specialized files/artifacts (e.g. Private Keys).", "mitigations": {"M1015": " Active Directory Configuration  : Remove vulnerable Group Policy Preferences.", "M1047": " Audit  : Preemptively search for files containing passwords or other credentials and take actions to reduce the exposure risk when found.", "M1041": " Encrypt Sensitive Information  : When possible, store keys on separate cryptographic hardware instead of on the local system. ", "M1037": " Filter Network Traffic  : Limit access to the Instance Metadata API using a host-based firewall such as iptables. A properly configured Web Application Firewall (WAF) may help prevent external adversaries from exploiting Server-side Request Forgery (SSRF) attacks that allow access to the Cloud Instance Metadata API.", "M1028": " Operating System Configuration  : There are multiple methods of preventing a user's command history from being flushed to their .bash_history file, including use of the following commands: and  to start logging again; being added to a user's .bash_rc file; and to write commands to instead.", "M1027": " Password Policies  : Use strong passphrases for private keys to make cracking difficult. Do not store credentials within the Registry. Establish an organizational policy that prohibits password storage in files.", "M1026": " Privileged Account Management  : If it is necessary that software must store credentials in the Registry, then ensure the associated accounts have limited permissions so they cannot be abused if obtained by an adversary.", "M1022": " Restrict File and Directory Permissions  : Restrict file shares to specific directories with access only to necessary users.", "M1051": " Update Software  : Apply patch KB2962486 which prevents credentials from being stored in GPPs.", "M1017": " User Training  : Ensure that developers and system administrators are aware of the risk associated with having plaintext passwords in software configuration files that may be left on endpoint systems or servers."}, "procedureexamples": {"S0373": " Astaroth  : Astaroth uses an external software known as NetPass to recover passwords. "}, "id": "T1552", "subtechniques": ["T1552.001", "T1552.002", "T1552.003", "T1552.004", "T1552.005", "T1552.006", "T1552.007"], "tactics": ["Credential Access"], "platforms": ["Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "version": "1.2", "created": "04 February 2020", "lastmodified": "12 April 2021"}, {"techniquename": "Credentials In Files", "detection": "While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See  for more information.", "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.It is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping.  Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files. They may also be found as parameters to deployment commands in container logs. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.", "mitigations": {"M1047": " Audit  : Preemptively search for files containing passwords and take actions to reduce the exposure risk when found.", "M1027": " Password Policies  : Establish an organizational policy that prohibits password storage in files.", "M1022": " Restrict File and Directory Permissions  : Restrict file shares to specific directories with access only to necessary users.", "M1017": " User Training  : Ensure that developers and system administrators are aware of the risk associated with having plaintext passwords in software configuration files that may be left on endpoint systems or servers."}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has the ability to extract credentials from configuration or support files. ", "G0022": " APT3  : APT3 has a tool that can locate credentials in files on the file system such as those from Firefox or Chrome.", "G0064": " APT33  : APT33 has used a variety of publicly available tools like LaZagne to gather credentials.", "S0344": " Azorult  : Azorult can steal credentials in files belonging to common software such as Skype, Telegram, and Steam.", "S0089": " BlackEnergy  : BlackEnergy has used a plug-in to gather credentials stored in files on the host by various software programs, including The Bat! email client, Outlook, and Windows Credential Store.", "S0367": " Emotet  : Emotet has been observed leveraging a module that retrieves passwords stored on a system for the current logged-on user. ", "S0363": " Empire  : Empire can use various modules to search for files containing passwords.", "G0117": " Fox Kitten  : Fox Kitten has accessed files to gain valid credentials.", "S0601": " Hildegard  : Hildegard has searched for SSH keys, Docker credentials, and Kubernetes service tokens.", "S0283": " jRAT  : jRAT can capture passwords from common chat applications such as MSN Messenger, AOL, Instant Messenger, and and Google Talk.", "G0094": " Kimsuky  : Kimsuky has used tools that are capable of obtaining credentials from saved mail.", "S0349": " LaZagne  : LaZagne can obtain credentials from chats, databases, mail, and WiFi.", "G0077": " Leafminer  : Leafminer used several tools for retrieving login and password information, including LaZagne.", "G0069": " MuddyWater  : MuddyWater has run a tool that steals passwords saved in victim email.", "G0049": " OilRig  : OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.", "S0067": " pngdowner  : If an initial connectivity check fails, pngdowner attempts to extract proxy details and credentials from Windows Protected Storage and from the IE Credentials Store. This allows the adversary to use the proxy credentials for subsequent requests if they enable outbound HTTP access.", "S0378": " PoshC2  : PoshC2 contains modules for searching for passwords in local and remote files.", "S0192": " Pupy  : Pupy can use Lazagne for harvesting credentials.", "S0583": " Pysa  : Pysa has extracted credentials from the password database before encrypting the files. ", "S0262": " QuasarRAT  : QuasarRAT can obtain passwords from FTP clients.", "S0226": " Smoke Loader  : Smoke Loader searches for files named logins.json to parse for credentials.", "G0092": " TA505  : TA505 has used malware to gather credentials from FTP clients and Outlook.", "G0139": " TeamTNT  : TeamTNT has searched for unsecured AWS credentials and Docker API credentials.", "S0266": " TrickBot  : TrickBot can obtain passwords stored in files from several applications such as Outlook, Filezilla, OpenSSH, OpenVPN and WinSCP. Additionally, it searches for the \".vnc.lnk\" affix to steal VNC credentials.", "S0117": " XTunnel  : XTunnel is capable of accessing locally stored passwords on victims."}, "id": "T1552.001", "subtechniqueof": "T1552", "tactics": ["Credential Access"], "platforms": ["Containers, IaaS, Linux, Windows, macOS"], "systemrequirements": ["Access to files"], "permissionsrequired": ["Administrator, SYSTEM, User"], "capecid": ["CAPEC-639"], "contributors": ["Jay Chen, Palo Alto Networks; Microsoft Threat Intelligence Center (MSTIC); Rory McCune, Aqua Security; Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team"], "version": "1.1", "created": "04 February 2020", "lastmodified": "12 April 2021"}, {"techniquename": "Bash History", "detection": "Monitoring when the user's  is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like .", "description": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user\u2019s  file. For each user, this file resides at the same location: . Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials. ", "mitigations": {"M1028": " Operating System Configuration  : There are multiple methods of preventing a user's command history from being flushed to their .bash_history file, including use of the following commands: and  to start logging again; being added to a user's .bash_rc file; and to write commands to instead."}, "procedureexamples": {"S0599": " Kinsing  : Kinsing has searched  for credentials."}, "id": "T1552.003", "subtechniqueof": "T1552", "tactics": ["Credential Access"], "platforms": ["Linux, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "04 February 2020", "lastmodified": "07 February 2020"}, {"techniquename": "Cloud Instance Metadata API", "detection": "Monitor access to the Instance Metadata API and look for anomalous queries.It may be possible to detect adversary use of credentials they have obtained such as in .", "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance. A cloud metadata API has been used in at least one high profile compromise.If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, attackers may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows the attacker to gain access to the sensitive information via a request to the Instance Metadata API.The de facto standard across cloud service providers is to host the Instance Metadata API at .", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable unnecessary metadata services and restrict or disable insecure versions of metadata services that are in use to prevent adversary access.", "M1037": " Filter Network Traffic  : Limit access to the Instance Metadata API using a host-based firewall such as iptables. A properly configured Web Application Firewall (WAF) may help prevent external adversaries from exploiting Server-side Request Forgery (SSRF) attacks that allow access to the Cloud Instance Metadata API."}, "procedureexamples": {"S0601": " Hildegard  : Hildegard has queried the Cloud Instance Metadata API for cloud credentials.", "G0139": " TeamTNT  : TeamTNT has queried the AWS instance metadata service for credentials."}, "id": "T1552.005", "subtechniqueof": "T1552", "tactics": ["Credential Access"], "platforms": ["IaaS"], "contributors": ["Praetorian"], "version": "1.2", "created": "11 February 2020", "lastmodified": "31 March 2021"}, {"techniquename": "Private Keys", "detection": "Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication.", "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as  for SSH keys on * nix-based systems or  on Windows. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.Some private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line.", "mitigations": {"M1047": " Audit  : Ensure only authorized keys are allowed access to critical resources and audit access lists regularly.", "M1041": " Encrypt Sensitive Information  : When possible, store keys on separate cryptographic hardware instead of on the local system. ", "M1027": " Password Policies  : Use strong passphrases for private keys to make cracking difficult.", "M1022": " Restrict File and Directory Permissions  : Ensure permissions are properly set on folders containing sensitive private keys to prevent unintended access."}, "procedureexamples": {"G0016": " APT29  : APT29 obtained PKI keys, certificate files and the private encryption key from an Active Directory Federation Services (AD FS) container to decrypt corresponding SAML signing certificates.", "S0377": " Ebury  : Ebury has intercepted unencrypted private keys as well as private key pass-phrases.   ", "S0363": " Empire  : Empire can use modules like  to extract private key and session information.", "S0601": " Hildegard  : Hildegard has searched for private keys in .ssh.", "S0283": " jRAT  : jRAT can steal keys for VPNs and cryptocurrency wallets.", "S0599": " Kinsing  : Kinsing has searched for private keys.", "S0409": " Machete  : Machete has scanned and looked for cryptographic keys and certificate file extensions. ", "S0002": " Mimikatz  : Mimikatz's  module can extract keys by interacting with Windows cryptographic application programming interface (API) functions.", "G0116": " Operation Wocao  : Operation Wocao has used Mimikatz to dump certificates and private keys from the Windows certificate store.", "G0106": " Rocke  : Rocke has used SSH private keys on the infected machine to spread its coinminer throughout a network.", "G0139": " TeamTNT  : TeamTNT has searched for unsecured SSH keys."}, "id": "T1552.004", "subtechniqueof": "T1552", "tactics": ["Credential Access"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Itzik Kotler, SafeBreach"], "version": "1.0", "created": "04 February 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Credentials in Registry", "detection": "Monitor processes for applications that can be used to query the Registry, such as , and collect command parameters that may indicate credentials are being searched. Correlate activity with related suspicious behavior that may indicate an active intrusion to reduce false positives.", "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.Example commands to find Registry keys related to password information: ", "mitigations": {"M1047": " Audit  : Proactively search for credentials within the Registry and attempt to remediate the risk.", "M1027": " Password Policies  : Do not store credentials within the Registry.", "M1026": " Privileged Account Management  : If it is necessary that software must store credentials in the Registry, then ensure the associated accounts have limited permissions so they cannot be abused if obtained by an adversary."}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has the ability to extract credentials from the Registry. ", "G0050": " APT32  : APT32 used Outlook Credential Dumper to harvest credentials stored in Windows registry.", "S0194": " PowerSploit  : PowerSploit has several modules that search the Windows Registry for stored credentials: , , , , , and .", "S0075": " Reg  : Reg may be used to find credentials in the Windows Registry.", "S0266": " TrickBot  : TrickBot has retrieved PuTTY credentials by querying the  registry key ", "S0476": " Valak  : Valak can use the clientgrabber module to steal e-mail credentials from the Registry."}, "id": "T1552.002", "subtechniqueof": "T1552", "tactics": ["Credential Access"], "platforms": ["Windows"], "systemrequirements": ["Ability to query some Registry locations depends on the adversary's level of access. User permissions are usually limited to access of user-related Registry keys."], "permissionsrequired": ["Administrator, User"], "contributors": ["Sudhanshu Chauhan, @Sudhanshu_C"], "version": "1.0", "created": "04 February 2020", "lastmodified": "07 February 2020"}, {"techniquename": "AS-REP Roasting", "detection": "Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).", "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by Password Cracking Kerberos messages. Preauthentication offers protection against offline Password Cracking. When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.For each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline Password Cracking attacks similarly to Kerberoasting and expose plaintext credentials.  An account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like PowerShell with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. Cracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.", "mitigations": {"M1047": " Audit  : Kerberos preauthentication is enabled by default. Older protocols might not support preauthentication therefore it is possible to have this setting disabled. Make sure that all accounts have preauthentication whenever possible and audit changes to setting. Windows tools such as PowerShell may be used to easily find which accounts have preauthentication disabled.  ", "M1041": " Encrypt Sensitive Information  : Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.", "M1027": " Password Policies  : Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire. Also consider using Group Managed Service Accounts or another third party product such as password vaulting. "}, "id": "T1558.004", "subtechniqueof": "T1558", "tactics": ["Credential Access"], "platforms": ["Windows"], "systemrequirements": ["Valid domain account"], "permissionsrequired": ["User"], "contributors": ["Dan Nutting, @KerberToast; Jacques Pluviose, @Jacqueswildy_IT; James Dunn, @jamdunnDFW, EY; Swapnil Kumbhar; Yossi Nisani, Cymptom"], "version": "1.0", "created": "24 August 2020", "lastmodified": "07 June 2021"}, {"techniquename": "Silver Ticket", "detection": "Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4634, 4672). Monitor for unexpected processes interacting with lsass.exe. Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored.", "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.Silver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.Password hashes for target services may be obtained using OS Credential Dumping or Kerberoasting.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.", "M1027": " Password Policies  : Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire. Also consider using Group Managed Service Accounts or another third party product such as password vaulting.", "M1026": " Privileged Account Management  : Limit service accounts to minimal required privileges, including membership in privileged groups such as Domain Administrators."}, "procedureexamples": {"S0363": " Empire  : Empire can leverage its implementation of Mimikatz to obtain and use silver tickets.", "S0002": " Mimikatz  : Mimikatz's kerberos module can create silver tickets."}, "id": "T1558.002", "subtechniqueof": "T1558", "tactics": ["Credential Access"], "platforms": ["Windows"], "permissionsrequired": ["User"], "version": "1.0", "created": "11 February 2020", "lastmodified": "25 March 2020"}, {"techniquename": "Two-Factor Authentication Interception", "detection": "Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior.Similar to , keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.", "description": "Adversaries may target two-factor authentication mechanisms, such as smart cards, to gain access to credentials that can be used to access systems, services, and network resources. Use of two or multi-factor authentication (2FA or MFA) is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. If a smart card is used for two-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). Other methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors. ", "mitigations": {"M1017": " User Training  : Remove smart cards when not in use."}, "procedureexamples": {"G0114": " Chimera  : Chimera has registered alternate phone numbers for compromised users to intercept 2FA codes sent via SMS.", "G0116": " Operation Wocao  : Operation Wocao has used a custom collection method to intercept two-factor authentication soft tokens.", "S0018": " Sykipot  : Sykipot is known to contain functionality that enables targeting of smart card technologies to proxy authentication for connections to restricted network resources using detected hardware tokens."}, "id": "T1111", "subtechniques": ["No sub-techniques"], "tactics": ["Credential Access"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Smart card Proxy: Use of smart cards for single or multifactor authentication to access to network resources. Attached smart card reader with card inserted; Out-of-band one-time code: Access to the device, service, or communications to intercept the one-time code; Hardware token: Access to the seed and algorithm of generating one-time codes."], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["John Lambert, Microsoft Threat Intelligence Center"], "version": "1.1", "created": "31 May 2017", "lastmodified": "25 March 2020"}, {"techniquename": "Kerberoasting", "detection": "Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).", "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials. This same attack could be executed using service tickets captured from network traffic.Cracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.", "M1027": " Password Policies  : Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire. Also consider using Group Managed Service Accounts or another third party product such as password vaulting.", "M1026": " Privileged Account Management  : Limit service accounts to minimal required privileges, including membership in privileged groups such as Domain Administrators."}, "procedureexamples": {"G0016": " APT29  : APT29 obtained Ticket Granting Service (TGS) tickets for Active Directory Service Principle Names to crack offline.", "S0363": " Empire  : Empire uses PowerSploit's  to request service tickets and return crackable ticket hashes.", "G0046": " FIN7  : FIN7 has used Kerberoasting for credential access and to enable lateral movement.", "S0357": " Impacket  : Impacket modules like GetUserSPNs can be used to get Service Principal Names (SPNs) for user accounts. The output is formatted to be compatible with cracking tools like John the Ripper and Hashcat.", "G0116": " Operation Wocao  : Operation Wocao has used PowerSploit's Invoke-Kerberoast module to request encrypted service tickets and bruteforce the passwords of Windows service accounts offline.", "S0194": " PowerSploit  : PowerSploit's  module can request service tickets and return crackable ticket hashes.", "G0102": " Wizard Spider  : Wizard Spider has used Rubeus, MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet to steal AES hashes."}, "id": "T1558.003", "subtechniqueof": "T1558", "tactics": ["Credential Access"], "platforms": ["Windows"], "systemrequirements": ["Valid domain account or the ability to sniff traffic within a domain"], "capecid": ["CAPEC-509"], "contributors": ["Praetorian"], "version": "1.1", "created": "11 February 2020", "lastmodified": "20 October 2020"}, {"techniquename": "Steal Web Session Cookie", "detection": "Monitor for attempts to access files and repositories on a local system that are used to store browser session cookies. Monitor for attempts by programs to inject into or dump browser process memory.", "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.There are several examples of malware targeting cookies from web browsers on the local system. There are also open source frameworks such as Evilginx 2 and Muraena that can gather session cookies through a malicious proxy (ex: Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns.After an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application.", "mitigations": {"M1032": " Multi-factor Authentication  : A physical second factor key that uses the target login domain as part of the negotiation protocol will prevent session cookie theft through proxy methods.", "M1054": " Software Configuration  : Configure browsers or tasks to regularly delete persistent cookies.", "M1017": " User Training  : Train users to identify aspects of phishing attempts where they're asked to enter credentials into a site that has the incorrect domain for the application they are logging into."}, "procedureexamples": {"S0657": " BLUELIGHT  : BLUELIGHT can harvest cookies from Internet Explorer, Edge, Chrome, and Naver Whale browsers.", "S0631": " Chaes  : Chaes has used a script that extracts the web session cookie and sends it to the C2 server. ", "S0492": " CookieMiner  : CookieMiner can steal Google Chrome and Apple Safari browser cookies from the victim\u2019s machine. ", "S0568": " EVILNUM  : EVILNUM can harvest cookies and upload them to the C2 server.", "G0120": " Evilnum  : Evilnum can steal cookies and session information from browsers.", "S0531": " Grandoreiro  : Grandoreiro can steal the victim's cookies to use for duplicating the active session from another device.", "S0650": " QakBot  : QakBot has the ability to capture web session cookies.", "S0467": " TajMahal  : TajMahal has the ability to steal web session cookies from Internet Explorer, Netscape Navigator, FireFox and RealNetworks applications.", "S0658": " XCSSET  : XCSSET uses  to access the  file."}, "id": "T1539", "subtechniques": ["No sub-techniques"], "tactics": ["Credential Access"], "platforms": ["Google Workspace, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Johann Rehberger; Microsoft Threat Intelligence Center (MSTIC)"], "version": "1.2", "created": "08 October 2019", "lastmodified": "28 July 2021"}, {"techniquename": "Cached Domain Credentials", "detection": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.Detection of compromised  in-use by adversaries may help as well.", "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash. The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password.With SYSTEM access, the tools/utilities such as Mimikatz, Reg, and secretsdump.py can be used to extract the cached credentials.Note: Cached credentials for Windows Vista are derived using PBKDF2.", "mitigations": {"M1015": " Active Directory Configuration  : Consider adding users to the \"Protected Users\" Active Directory security group. This can help limit the caching of users' plaintext credentials.", "M1028": " Operating System Configuration  : Consider limiting the number of cached credentials (HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Current Version\\Winlogon\\cachedlogonscountvalue)", "M1027": " Password Policies  : Ensure that local administrator accounts have complex, unique passwords across all systems on the network.", "M1026": " Privileged Account Management  : Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.", "M1017": " User Training  : Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts."}, "procedureexamples": {"G0064": " APT33  : APT33 has used a variety of publicly available tools like LaZagne to gather credentials.", "S0119": " Cachedump  : Cachedump can extract cached password hashes from cache entry information.", "S0349": " LaZagne  : LaZagne can perform credential dumping from MSCache to obtain account and password information.", "G0077": " Leafminer  : Leafminer used several tools for retrieving login and password information, including LaZagne.", "G0069": " MuddyWater  : MuddyWater has performed credential dumping with LaZagne.", "G0049": " OilRig  : OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.", "S0439": " Okrum  : Okrum was seen using modified Quarks PwDump to perform credential dumping.", "S0192": " Pupy  : Pupy can use Lazagne for harvesting credentials."}, "id": "T1003.005", "subtechniqueof": "T1003", "tactics": ["Credential Access"], "platforms": ["Windows"], "permissionsrequired": ["SYSTEM"], "contributors": ["Ed Williams, Trustwave, SpiderLabs"], "version": "1.0", "created": "21 February 2020", "lastmodified": "24 March 2020"}, {"techniquename": "LSA Secrets", "detection": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.", "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at . LSA secrets can also be dumped from memory.Reg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.", "mitigations": {"M1027": " Password Policies  : Ensure that local administrator accounts have complex, unique passwords across all systems on the network.", "M1026": " Privileged Account Management  : Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.", "M1017": " User Training  : Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts."}, "procedureexamples": {"G0064": " APT33  : APT33 has used a variety of publicly available tools like LaZagne to gather credentials.", "S0050": " CosmicDuke  : CosmicDuke collects LSA secrets.", "S0488": " CrackMapExec  : CrackMapExec can dump hashed passwords from LSA secrets for the targeted system.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 dropped and executed SecretsDump to dump password hashes.", "S0008": " gsecdump  : gsecdump can dump LSA secrets.", "S0357": " Impacket  : SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information.", "G0004": " Ke3chang  : Ke3chang has dumped credentials, including by using gsecdump.", "S0349": " LaZagne  : LaZagne can perform credential dumping from LSA secrets to obtain account and password information.", "G0077": " Leafminer  : Leafminer used several tools for retrieving login and password information, including LaZagne.", "G0045": " menuPass  : menuPass has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.", "S0002": " Mimikatz  : Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the LSA.", "G0069": " MuddyWater  : MuddyWater has performed credential dumping with LaZagne.", "G0049": " OilRig  : OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.", "S0192": " Pupy  : Pupy can use Lazagne for harvesting credentials.", "G0027": " Threat Group-3390  : Threat Group-3390 actors have used gsecdump to dump credentials. They have also dumped credentials from domain controllers."}, "id": "T1003.004", "subtechniqueof": "T1003", "tactics": ["Credential Access"], "platforms": ["Windows"], "permissionsrequired": ["SYSTEM"], "contributors": ["Ed Williams, Trustwave, SpiderLabs"], "version": "1.0", "created": "21 February 2020", "lastmodified": "21 April 2021"}, {"techniquename": "Steal Application Access Token", "detection": "Administrators should set up monitoring to trigger automatic alerts when policy criteria are met. For example, using a Cloud Access Security Broker (CASB), admins can create a \"High severity app permissions\" policy that generates alerts if apps request high severity permissions or send permissions requests for too many users.Security analysts can hunt for malicious apps using the tools available in their CASB, identity provider, or resource provider (depending on platform.) For example, they can filter for apps that are authorized by a small number of users, apps requesting high risk permissions, permissions incongruous with the app\u2019s purpose, or apps with old \"Last authorized\" fields. A specific app can be investigated using an activity log displaying activities the app has performed, although some activities may be mis-logged as being performed by the user. App stores can be useful resources to further investigate suspicious apps.Administrators can set up a variety of logs and leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access.", "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS). OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a link through Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token.Adversaries have been seen targeting Gmail, Microsoft Outlook, and Yahoo Mail users.", "mitigations": {"M1047": " Audit  : Administrators should perform an audit of all OAuth applications and the permissions they have been granted to access organizational data. This should be done extensively on all applications in order to establish a baseline, followed up on with periodic audits of new or updated applications. Suspicious applications should be investigated and removed.", "M1021": " Restrict Web-Based Content  : Administrators can block end-user consent to OAuth applications, disabling users from authorizing third-party apps through OAuth 2.0 and forcing administrative consent for all requests. They can also block end-user registration of applications by their users, to reduce risk. A Cloud Access Security Broker can also be used to ban applications.Azure offers a couple of enterprise policy settings in the Azure Management Portal that may help:\"Users -> User settings -> App registrations: Users can register applications\" can be set to \"no\" to prevent users from registering new applications. \"Enterprise applications -> User settings -> Enterprise applications: Users can consent to apps accessing company data on their behalf\" can be set to \"no\" to prevent users from consenting to allow third-party multi-tenant applications", "M1018": " User Account Management  : A Cloud Access Security Broker (CASB) can be used to set usage policies and manage user permissions on cloud applications to prevent access to application access tokens.", "M1017": " User Training  : Users need to be trained to not authorize third-party applications they don\u2019t recognize. The user should pay particular attention to the redirect URL: if the URL is a misspelled or convoluted sequence of words related to an expected service or SaaS application, the website is likely trying to spoof a legitimate service. Users should also be cautious about the permissions they are granting to apps. For example, offline access and access to read emails should excite higher suspicions because adversaries can utilize SaaS APIs to discover credentials and other sensitive communications."}, "procedureexamples": {"G0007": " APT28  : APT28 has used several malicious applications to steal user OAuth access tokens including applications masquerading as \"Google Defender\" \"Google Email Protection,\" and \"Google Scanner\" for Gmail users. They also targeted Yahoo users with applications masquerading as \"Delivery Service\" and \"McAfee Email Protection\"."}, "id": "T1528", "subtechniques": ["No sub-techniques"], "tactics": ["Credential Access"], "platforms": ["Azure AD, Google Workspace, Office 365, SaaS"], "permissionsrequired": ["User"], "contributors": ["Jeff Sakowicz, Microsoft Identity Developer Platform Services (IDPM Services); Mark Wee; Saisha Agrawal, Microsoft Threat Intelligent Center (MSTIC); Shailesh Tiwary (Indian Army)"], "version": "1.1", "created": "04 September 2019", "lastmodified": "14 April 2021"}, {"techniquename": "Proc Filesystem", "detection": "To obtain the passwords and hashes stored in memory, processes must open a maps file in the /proc filesystem for the process being analyzed. This file is stored under the path , where the  directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.", "description": "Adversaries may gather credentials from information stored in the Proc filesystem or . The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.This functionality has been implemented in the MimiPenguin, an open source tool inspired by Mimikatz. The tool dumps process memory, then harvests passwords and hashes by looking for text strings and regex patterns for how given applications such as Gnome Keyring, sshd, and Apache use memory to store such authentication artifacts.", "mitigations": {"M1027": " Password Policies  : Ensure that root accounts have complex, unique passwords across all systems on the network.", "M1026": " Privileged Account Management  : Follow best practices in restricting access to privileged accounts to avoid hostile programs from accessing sensitive information."}, "procedureexamples": {"S0349": " LaZagne  : LaZagne can obtain credential information running Linux processes.", "S0179": " MimiPenguin  : MimiPenguin can dump process memory and extract clear-text credentials."}, "id": "T1003.007", "subtechniqueof": "T1003", "tactics": ["Credential Access"], "platforms": ["Linux"], "permissionsrequired": ["root"], "version": "1.0", "created": "11 February 2020", "lastmodified": "19 March 2020"}, {"techniquename": "/etc/passwd and /etc/shadow", "detection": "The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes attempting to access  and , alerting on the pid, process name, and arguments of such programs.", "description": "Adversaries may attempt to dump the contents of  and  to enable offline password cracking. Most modern Linux operating systems use a combination of  and  to store user account information including password hashes in . By default,  is only readable by the root user.The Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper: ", "mitigations": {"M1027": " Password Policies  : Ensure that root accounts have complex, unique passwords across all systems on the network.", "M1026": " Privileged Account Management  : Follow best practices in restricting access to privileged accounts to avoid hostile programs from accessing such sensitive information."}, "procedureexamples": {"S0349": " LaZagne  : LaZagne can obtain credential information from /etc/shadow using the shadow.py module."}, "id": "T1003.008", "subtechniqueof": "T1003", "tactics": ["Credential Access"], "platforms": ["Linux"], "permissionsrequired": ["root"], "version": "1.0", "created": "11 February 2020", "lastmodified": "20 March 2020"}, {"techniquename": "Steal or Forge Kerberos Tickets", "detection": "Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within ticket granting tickets (TGTs), and ticket granting service (TGS) requests without preceding TGT requests.Monitor the lifetime of TGT tickets for values that differ from the default domain duration.Monitor for indications of  being used to move laterally. Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]). Monitor for unexpected processes interacting with lsass.exe. Common credential dumpers such as  access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored.Monitor for unusual processes accessing\u00a0 and  located in .", "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \"realms\", there are three basic participants: client, service, and Key Distribution Center (KDC). Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Attackers may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.On Windows, the built-in  utility can be used to list and analyze cached Kerberos tickets.Linux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts. On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in  as well as the corresponding key located in . Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for Pass the Ticket. The ccache file may also be converted into a Windows format using tools such as Kekeo.Kerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the  configuration file and the  environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using , , , and  built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.", "mitigations": {"M1015": " Active Directory Configuration  : For containing the impact of a previously generated golden ticket, reset the built-in KRBTGT account password twice, which will invalidate any existing golden tickets that have been created with the KRBTGT hash and other Kerberos tickets derived from it. For each domain, change the KRBTGT account password once, force replication, and then change the password a second time. Consider rotating the KRBTGT account password every 180 days.", "M1041": " Encrypt Sensitive Information  : Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.", "M1027": " Password Policies  : Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire. Also consider using Group Managed Service Accounts or another third party product such as password vaulting.", "M1026": " Privileged Account Management  : Limit domain admin account permissions to domain controllers and limited servers. Delegate other admin functions to separate accounts.Limit service accounts to minimal required privileges, including membership in privileged groups such as Domain Administrators."}, "id": "T1558", "subtechniques": ["T1558.001", "T1558.002", "T1558.003", "T1558.004"], "tactics": ["Credential Access"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Kerberos authentication enabled"], "permissionsrequired": ["User, root"], "capecid": ["CAPEC-652"], "contributors": ["Cody Thomas, SpecterOps; Tim (Wadhwa-)Brown"], "version": "1.3", "created": "11 February 2020", "lastmodified": "14 October 2021"}, {"techniquename": "DCSync", "detection": "Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.   Also monitor for network protocols  and other replication requests from IPs not associated with known domain controllers.Note: Domain controllers may not log replication requests originating from the default domain controller account.", "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)    to simulate the replication process from a remote domain controller using a technique called DCSync.Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in Pass the Ticket or change an account's password as noted in Account Manipulation.DCSync functionality has been included in the \"lsadump\" module in Mimikatz. Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.", "mitigations": {"M1015": " Active Directory Configuration  : Manage the access control list for \"Replicating Directory Changes\" and other permissions associated with domain controller replication.", "M1027": " Password Policies  : Ensure that local administrator accounts have complex, unique passwords across all systems on the network.", "M1026": " Privileged Account Management  : Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers."}, "procedureexamples": {"G0016": " APT29  : APT29 leveraged privileged accounts to replicate directory service data with domain controllers.", "S0002": " Mimikatz  : Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from DCSync/NetSync.", "G0116": " Operation Wocao  : Operation Wocao has used Mimikatz's DCSync to dump credentials from the memory of the targeted system.    "}, "id": "T1003.006", "subtechniqueof": "T1003", "tactics": ["Credential Access"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "contributors": ["ExtraHop; Vincent Le Toux"], "version": "1.0", "created": "11 February 2020", "lastmodified": "22 April 2021"}, {"techniquename": "NTDS", "detection": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping, especially attempts to access or copy the NTDS.dit.", "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in  of a domain controller.In addition to looking for NTDS files on active Domain Controllers, attackers may search for backups that contain the same or similar information.The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Ensure Domain Controller backups are properly secured.", "M1027": " Password Policies  : Ensure that local administrator accounts have complex, unique passwords across all systems on the network.", "M1026": " Privileged Account Management  : Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.", "M1017": " User Training  : Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts."}, "procedureexamples": {"G0007": " APT28  : APT28 has used the ntdsutil.exe utility to export the Active Directory database for credential access.", "G0114": " Chimera  : Chimera has gathered the SYSTEM registry and ntds.dit files from target systems. Chimera specifically has used the NtdsAudit tool to dump the password hashes of domain users via  and used ntdsutil to copy the Active Directory database.", "S0488": " CrackMapExec  : CrackMapExec can dump hashed passwords associated with Active Directory using Windows' Directory Replication Services API (DRSUAPI), or Volume Shadow Copy.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 dropped and executed SecretsDump to dump password hashes. They also obtained ntds.dit from domain controllers. ", "S0404": " esentutl  : esentutl can use Volume Shadow Copy to copy locked files such as ntds.dit.", "G0037": " FIN6  : FIN6 has used Metasploit\u2019s PsExec NTDSGRAB module to obtain a copy of the victim's Active Directory database.   ", "G0117": " Fox Kitten  : Fox Kitten has used Volume Shadow Copy to access credential information from NTDS.", "G0125": " HAFNIUM  : HAFNIUM has stolen copies of the Active Directory database (NTDS.DIT).", "S0357": " Impacket  : SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information from NTDS.dit.", "S0250": " Koadic  : Koadic can gather hashed passwords by gathering domain controller hashes from NTDS.", "G0045": " menuPass  : menuPass has used Ntdsutil to dump credentials.", "G0129": " Mustang Panda  : Mustang Panda has used vssadmin to create a volume shadow copy and retrieve the NTDS.dit file. Mustang Panda has also used  on the SYSTEM file Registry location to help extract the NTDS.dit file.", "G0102": " Wizard Spider  : Wizard Spider has gained access to credentials via exported copies of the ntds.dit Active Directory database."}, "id": "T1003.003", "subtechniqueof": "T1003", "tactics": ["Credential Access"], "platforms": ["Windows"], "systemrequirements": ["Access to Domain Controller or backup"], "permissionsrequired": ["Administrator"], "contributors": ["Ed Williams, Trustwave, SpiderLabs"], "version": "1.0", "created": "11 February 2020", "lastmodified": "14 December 2020"}, {"techniquename": "Golden Ticket", "detection": "Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within TGTs, and TGS requests without preceding TGT requests.Monitor the lifetime of TGT tickets for values that differ from the default domain duration.Monitor for indications of  being used to move laterally. ", "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory. Using a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.The KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets. The KRBTGT password hash may be obtained using OS Credential Dumping and privileged access to a domain controller.", "mitigations": {"M1015": " Active Directory Configuration  : For containing the impact of a previously generated golden ticket, reset the built-in KRBTGT account password twice, which will invalidate any existing golden tickets that have been created with the KRBTGT hash and other Kerberos tickets derived from it. For each domain, change the KRBTGT account password once, force replication, and then change the password a second time. Consider rotating the KRBTGT account password every 180 days.", "M1026": " Privileged Account Management  : Limit domain admin account permissions to domain controllers and limited servers. Delegate other admin functions to separate accounts."}, "procedureexamples": {"S0363": " Empire  : Empire can leverage its implementation of Mimikatz to obtain and use golden tickets.", "G0004": " Ke3chang  : Ke3chang has used Mimikatz to generate Kerberos golden tickets.", "S0002": " Mimikatz  : Mimikatz's kerberos module can create golden tickets."}, "id": "T1558.001", "subtechniqueof": "T1558", "tactics": ["Credential Access"], "platforms": ["Windows"], "permissionsrequired": ["User"], "contributors": ["Itamar Mizrahi, Cymptom"], "version": "1.1", "created": "11 February 2020", "lastmodified": "05 November 2020"}, {"techniquename": "OS Credential Dumping", "detection": "Monitor for unexpected processes interacting with lsass.exe. Common credential dumpers such as  access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective  to reduce potential indicators of malicious activity.Hash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised  in-use by adversaries may help as well. On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like .  scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,  which may require additional logging features to be configured in the operating system to collect necessary information for analysis.Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.    Note: Domain controllers may not log replication requests originating from the default domain controller account. . Also monitor for network protocols    and other replication requests  from IPs not associated with known domain controllers. To obtain the passwords and hashes stored in memory, processes must open a maps file in the /proc filesystem for the process being analyzed. This file is stored under the path , where the  directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.", "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.", "mitigations": {"M1015": " Active Directory Configuration  : Manage the access control list for \"Replicating Directory Changes\" and other permissions associated with domain controller replication.   Consider adding users to the \"Protected Users\" Active Directory security group. This can help limit the caching of users' plaintext credentials.", "M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to secure LSASS and prevent credential stealing. ", "M1043": " Credential Access Protection  : With Windows 10, Microsoft implemented new protections called Credential Guard to protect the LSA secrets that can be used to obtain credentials through forms of credential dumping. It is not configured by default and has hardware and firmware system requirements.  It also does not protect against all forms of credential dumping. ", "M1041": " Encrypt Sensitive Information  : Ensure Domain Controller backups are properly secured.", "M1028": " Operating System Configuration  : Consider disabling or restricting NTLM. Consider disabling WDigest authentication.", "M1027": " Password Policies  : Ensure that local administrator accounts have complex, unique passwords across all systems on the network.", "M1026": " Privileged Account Management  : Windows:Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.Linux:Scraping the passwords from memory requires root privileges. Follow best practices in restricting access to privileged accounts to avoid hostile programs from accessing such sensitive regions of memory.", "M1025": " Privileged Process Integrity  : On Windows 8.1 and Windows Server 2012 R2, enable Protected Process Light for LSA.", "M1017": " User Training  : Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts."}, "procedureexamples": {"G0007": " APT28  : APT28 regularly deploys both publicly available (ex: Mimikatz) and custom password retrieval tools on victims.    ", "G0050": " APT32  : APT32 used GetPassword_x64 to harvest credentials.", "G0087": " APT39  : APT39 has used different versions of Mimikatz to obtain credentials.", "G0001": " Axiom  : Axiom has been known to dump credentials.", "S0030": " Carbanak  : Carbanak obtains Windows logon password details.", "G0101": " Frankenstein  : Frankenstein has harvested credentials from the victim's machine using Empire.", "S0232": " HOMEFRY  : HOMEFRY can perform credential dumping.", "G0065": " Leviathan  : Leviathan has used publicly available tools to dump password hashes, including HOMEFRY.", "S0052": " OnionDuke  : OnionDuke steals credentials from its victims.", "S0048": " PinchDuke  : PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated many sources such as WinInet Credential Cache, and Lightweight Directory Access Protocol (LDAP).", "G0033": " Poseidon Group  : Poseidon Group conducts credential dumping on victims, with a focus on obtaining credentials belonging to domain and database servers.", "S0379": " Revenge RAT  : Revenge RAT has a plugin for credential harvesting.", "G0054": " Sowbug  : Sowbug has used credential dumping tools.", "G0039": " Suckfly  : Suckfly used a signed credential-dumping tool to obtain victim account credentials.", "G0131": " Tonto Team  : Tonto Team has used a variety of credential dumping tools. ", "S0094": " Trojan.Karagany  : Trojan.Karagany can dump passwords and save them into ."}, "id": "T1003", "subtechniques": ["T1003.001", "T1003.002", "T1003.003", "T1003.004", "T1003.005", "T1003.006", "T1003.007", "T1003.008"], "tactics": ["Credential Access"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, root"], "contributors": ["Ed Williams, Trustwave, SpiderLabs; Vincent Le Toux"], "version": "2.1", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Security Account Manager", "detection": "Hash dumpers open the Security Accounts Manager (SAM) on the local file system () or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised  in-use by adversaries may help as well.", "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the  command. Enumerating the SAM database requires SYSTEM level access.A number of tools can be used to retrieve the SAM file through in-memory techniques:Alternatively, the SAM can be extracted from the Registry with Reg:Creddump7 can then be used to process the SAM database locally to retrieve hashes.Notes:  RID 501 is the guest account.* User accounts start with a RID of 1,000+.", "mitigations": {"M1028": " Operating System Configuration  : Consider disabling or restricting NTLM.", "M1027": " Password Policies  : Ensure that local administrator accounts have complex, unique passwords across all systems on the network.", "M1026": " Privileged Account Management  : Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.", "M1017": " User Training  : Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts."}, "procedureexamples": {"S0154": " Cobalt Strike  : Cobalt Strike can recover hashed passwords.", "S0050": " CosmicDuke  : CosmicDuke collects Windows account hashes.", "S0046": " CozyCar  : Password stealer and NTLM stealer modules in CozyCar harvest stored credentials from the victim, including credentials used as part of Windows NTLM user authentication.", "S0488": " CrackMapExec  : CrackMapExec can dump usernames and hashed passwords from the SAM.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 dropped and executed SecretsDump to dump password hashes.", "S0120": " Fgdump  : Fgdump can dump Windows password hashes.", "G0093": " GALLIUM  : GALLIUM used  commands to dump specific hives from the Windows Registry, such as the SAM hive, and obtain password hashes.", "S0008": " gsecdump  : gsecdump can dump Windows password hashes from the SAM.", "S0376": " HOPLIGHT  : HOPLIGHT has the capability to harvest credentials and passwords from the SAM database. ", "S0357": " Impacket  : SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information.", "G0004": " Ke3chang  : Ke3chang has dumped credentials, including by using gsecdump.", "S0250": " Koadic  : Koadic can gather hashed passwords by dumping SAM/SECURITY hive.", "G0045": " menuPass  : menuPass has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.", "S0002": " Mimikatz  : Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the SAM table.", "S0080": " Mivast  : Mivast has the capability to gather NTLM password information.", "G0014": " Night Dragon  : Night Dragon has dumped account hashes with Carbanak and cracked them with Cain & Abel.", "S0371": " POWERTON  : POWERTON has the ability to dump password hashes.", "S0006": " pwdump  : pwdump can be used to dump credentials from the SAM.", "S0125": " Remsec  : Remsec can dump the SAM database.", "G0027": " Threat Group-3390  : Threat Group-3390 actors have used gsecdump to dump credentials. They have also dumped credentials from domain controllers.", "G0102": " Wizard Spider  : Wizard Spider has acquired credentials from the SAM/SECURITY registry hives."}, "id": "T1003.002", "subtechniqueof": "T1003", "tactics": ["Credential Access"], "platforms": ["Windows"], "permissionsrequired": ["SYSTEM"], "contributors": ["Ed Williams, Trustwave, SpiderLabs"], "version": "1.0", "created": "11 February 2020", "lastmodified": "25 March 2020"}, {"techniquename": "GUI Input Capture", "detection": "Monitor process execution for unusual programs as well as malicious instances of  that could be used to prompt users for credentials. For example, command/script history including abnormal parameters (such as requests for credentials and/or strings related to creating password prompts) may be malicious. Inspect and scrutinize input prompts for indicators of illegitimacy, such as non-traditional banners, text, timing, and/or sources. ", "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems attackers may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell). ", "mitigations": {"M1017": " User Training  : Use user training as a way to bring awareness and raise suspicion for potentially malicious events and dialog boxes (ex: Office documents prompting for credentials)."}, "procedureexamples": {"S0482": " Bundlore  : Bundlore prompts the user for their credentials.", "S0274": " Calisto  : Calisto presents an input prompt asking for the user's login and password.", "S0281": " Dok  : Dok prompts the user for credentials.", "G0085": " FIN4  : FIN4 has presented victims with spoofed Windows Authentication prompts to collect their credentials.", "S0278": " iKitten  : iKitten prompts the user for their credentials.", "S0276": " Keydnap  : Keydnap prompts the users for credentials.", "S0455": " Metamorfo  : Metamorfo has displayed fake forms on top of banking sites to intercept credentials from victims. ", "S0279": " Proton  : Proton prompts users for their credentials.", "S0658": " XCSSET  : XCSSET prompts the user to input credentials using a native macOS dialog box leveraging the system process ."}, "id": "T1056.002", "subtechniqueof": "T1056", "tactics": ["Collection", "Credential Access"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-659"], "contributors": ["Matthew Molyett, @s1air, Cisco Talos"], "version": "1.1", "created": "11 February 2020", "lastmodified": "24 August 2021"}, {"techniquename": "LSASS Memory", "detection": "Monitor for unexpected processes interacting with LSASS.exe. Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective  to reduce potential indicators of malicious activity.On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.", "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.For example, on the target host use procdump:Locally, mimikatz can be run using:Built-in Windows tools such as comsvcs.dll can also be used:Windows Security Support Provider (SSP) DLLs are loaded into LSSAS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys:  and . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.The following SSPs can be used to access credentials:", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to secure LSASS and prevent credential stealing. ", "M1043": " Credential Access Protection  : With Windows 10, Microsoft implemented new protections called Credential Guard to protect the LSA secrets that can be used to obtain credentials through forms of credential dumping. It is not configured by default and has hardware and firmware system requirements. It also does not protect against all forms of credential dumping.", "M1028": " Operating System Configuration  : Consider disabling or restricting NTLM. Consider disabling WDigest authentication.", "M1027": " Password Policies  : Ensure that local administrator accounts have complex, unique passwords across all systems on the network.", "M1026": " Privileged Account Management  : Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.", "M1025": " Privileged Process Integrity  : On Windows 8.1 and Windows Server 2012 R2, enable Protected Process Light for LSA.", "M1017": " User Training  : Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts."}, "procedureexamples": {"G0006": " APT1  : APT1 has been known to use credential dumping using Mimikatz.", "G0007": " APT28  : APT28 regularly deploys both publicly available (ex: Mimikatz) and custom password retrieval tools on victims. They have also dumped the LSASS process memory using the MiniDump function.", "G0022": " APT3  : APT3 has used a tool to dump credentials by injecting itself into lsass.exe and triggering with the argument \"dig.\"", "G0050": " APT32  : APT32 used Mimikatz and customized versions of Windows Credential Dumper to harvest credentials.", "G0064": " APT33  : APT33 has used a variety of publicly available tools like LaZagne, Mimikatz, and ProcDump to dump credentials.", "G0087": " APT39  : APT39 has used Mimikatz, Windows Credential Editor and ProcDump to dump credentials.", "G0096": " APT41  : APT41 has used hashdump, Mimikatz, and the Windows Credential Editor to dump password hashes from memory and authenticate to other user accounts.", "S0606": " Bad Rabbit  : Bad Rabbit has used Mimikatz to harvest credentials from the victim's machine.", "G0108": " Blue Mockingbird  : Blue Mockingbird has used Mimikatz to retrieve credentials from LSASS memory.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used various tools (such as Mimikatz and WCE) to perform credential dumping.", "G0003": " Cleaver  : Cleaver has been known to dump credentials using Mimikatz and Windows Credential Editor.", "S0154": " Cobalt Strike  : Cobalt Strike can spawn a job to inject into LSASS memory and dump password hashes.", "S0046": " CozyCar  : CozyCar has executed Mimikatz to harvest stored credentials from the victim and further victim penetration.", "S0187": " Daserf  : Daserf leverages Mimikatz and Windows Credential Editor to steal credentials.", "S0367": " Emotet  : Emotet has been observed dropping password grabber modules including Mimikatz. ", "S0363": " Empire  : Empire contains an implementation of Mimikatz to gather credentials from memory.", "G0037": " FIN6  : FIN6 has used Windows Credential Editor for credential dumping. ", "G0061": " FIN8  : FIN8 harvests credentials using Invoke-Mimikatz or Windows Credentials Editor (WCE).", "G0117": " Fox Kitten  : Fox Kitten has used prodump to dump credentials from LSASS.", "G0093": " GALLIUM  : GALLIUM used a modified version of Mimikatz along with a PowerShell-based Mimikatz to dump credentials on the victim machines.", "S0342": " GreyEnergy  : GreyEnergy has a module for Mimikatz to collect Windows credentials from the victim\u2019s machine.", "G0125": " HAFNIUM  : HAFNIUM has used  to dump the LSASS process memory.", "S0357": " Impacket  : SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information.", "G0119": " Indrik Spider  : Indrik Spider used Cobalt Strike to carry out credential dumping using ProcDump.", "G0004": " Ke3chang  : Ke3chang has dumped credentials, including by using Mimikatz.", "G0094": " Kimsuky  : Kimsuky has gathered credentials using Mimikatz and ProcDump.", "S0349": " LaZagne  : LaZagne can perform credential dumping from memory to obtain account and password information.", "G0077": " Leafminer  : Leafminer used several tools for retrieving login and password information, including LaZagne and Mimikatz.", "G0065": " Leviathan  : Leviathan has used publicly available tools to dump password hashes, including ProcDump and WCE.", "S0121": " Lslsass  : Lslsass can dump active logon session password hashes from the lsass process.", "G0059": " Magic Hound  : Magic Hound stole domain credentials from Microsoft Active Directory Domain Controller and leveraged Mimikatz.", "S0002": " Mimikatz  : Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the LSASS Memory.", "G0069": " MuddyWater  : MuddyWater has performed credential dumping with Mimikatz and procdump64.exe.", "S0056": " Net Crawler  : Net Crawler uses credential dumpers such as Mimikatz and Windows Credential Editor to extract cached credentials from Windows systems.", "S0368": " NotPetya  : NotPetya contains a modified version of Mimikatz to help gather credentials that are later used for lateral movement.", "G0049": " OilRig  : OilRig has used credential dumping tools such as Mimikatz to steal credentials to accounts logged into the compromised system and to Outlook Web Access.", "S0439": " Okrum  : Okrum was seen using MimikatzLite to perform credential dumping.", "S0365": " Olympic Destroyer  : Olympic Destroyer contains a module that tries to obtain credentials from LSASS, similar to Mimikatz. These credentials are used with PsExec and Windows Management Instrumentation to help the malware propagate itself across a network.", "G0116": " Operation Wocao  : Operation Wocao has used ProcDump to dump credentials from memory.", "G0068": " PLATINUM  : PLATINUM has used keyloggers that are also capable of dumping credentials.", "S0428": " PoetRAT  : PoetRAT used voStro.exe, a compiled pypykatz (Python version of Mimikatz), to steal credentials.", "S0378": " PoshC2  : PoshC2 contains an implementation of Mimikatz to gather credentials from memory.", "S0194": " PowerSploit  : PowerSploit contains a collection of Exfiltration modules that can harvest credentials using Mimikatz.", "S0192": " Pupy  : Pupy can execute Lazagne as well as Mimikatz using PowerShell.", "S0583": " Pysa  : Pysa can perform OS credential dumping using Mimikatz.", "G0034": " Sandworm Team  : Sandworm Team's plainpwd tool is a modified version of Mimikatz and dumps Windows credentials from system memory.  ", "G0091": " Silence  : Silence has used the Farse6.1 utility (based on Mimikatz) to extract credentials from lsass.exe.", "G0088": " TEMP.Veles  : TEMP.Veles has used Mimikatz and a custom tool, SecHack, to harvest credentials. ", "G0027": " Threat Group-3390  : Threat Group-3390 actors have used a modified version of Mimikatz called Wrapikatz to dump credentials. They have also dumped credentials from domain controllers.", "G0107": " Whitefly  : Whitefly has used Mimikatz to obtain credentials.", "S0005": " Windows Credential Editor  : Windows Credential Editor can dump credentials."}, "id": "T1003.001", "subtechniqueof": "T1003", "tactics": ["Credential Access"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["Ed Williams, Trustwave, SpiderLabs; Edward Millington"], "version": "1.1", "created": "11 February 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Web Portal Capture", "detection": "File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.", "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.", "mitigations": {"M1026": " Privileged Account Management  : Do not allow administrator accounts that have permissions to modify the Web content of organization login portals to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."}, "id": "T1056.003", "subtechniqueof": "T1056", "tactics": ["Collection", "Credential Access"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["An externally facing login portal is configured."], "capecid": ["CAPEC-569"], "version": "1.0", "created": "11 February 2020", "lastmodified": "24 March 2020"}, {"techniquename": "Credential API Hooking", "detection": "Monitor for calls to the  and  functions, which install a hook procedure. Also consider analyzing hook chains (which hold pointers to hook procedures for each type of hook) using tools or by programmatically examining internal kernel structures.Rootkits detectors can also be used to monitor for various types of hooking activity.Verify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow. Also consider taking snapshots of newly started processes to compare the in-memory IAT to the real addresses of the referenced functions.", "description": "Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:", "procedureexamples": {"S0484": " Carberp  : Carberp has hooked several Windows API functions to steal credentials.", "S0363": " Empire  : Empire contains some modules that leverage API hooking to carry out tasks, such as netripper.", "S0182": " FinFisher  : FinFisher hooks processes by modifying IAT pointers to CreateWindowEx.", "S0353": " NOKKI  : NOKKI uses the Windows call SetWindowsHookEx and begins injecting it into every GUI process running on the victim's machine.", "G0068": " PLATINUM  : PLATINUM is capable of using Windows hook interfaces for information gathering such as credential access.", "S0416": " RDFSNIFFER  : RDFSNIFFER hooks several Win32 API functions to hijack elements of the remote system management user-interface.", "S0266": " TrickBot  : TrickBot has the ability to capture RDP credentials by capturing the  API ", "S0386": " Ursnif  : Ursnif has hooked APIs to perform a wide variety of information theft, such as monitoring traffic from browsers.", "S0251": " Zebrocy  : Zebrocy installs an application-defined Windows hook to get notified when a network drive has been attached, so it can then use the hook to call its RecordToFile file stealing method.", "S0330": " Zeus Panda  : Zeus Panda hooks processes by leveraging its own IAT hooked functions.", "S0412": " ZxShell  : ZxShell hooks several API functions to spawn system threads. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1056.004", "subtechniqueof": "T1056", "tactics": ["Collection", "Credential Access"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "version": "1.0", "created": "11 February 2020", "lastmodified": "10 November 2020"}, {"techniquename": "Network Sniffing", "detection": "Detecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a  attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.", "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS.", "M1032": " Multi-factor Authentication  : Use multi-factor authentication wherever possible."}, "procedureexamples": {"G0007": " APT28  : APT28 deployed the open source tool Responder to conduct NetBIOS Name Service poisoning, which captured usernames and hashed passwords that allowed access to legitimate credentials. APT28 close-access teams have used Wi-Fi pineapples to intercept Wi-Fi signals and user credentials.", "G0064": " APT33  : APT33 has used SniffPass to collect credentials by sniffing network traffic.", "G0105": " DarkVishnya  : DarkVishnya used network sniffing to obtain login data. ", "S0367": " Emotet  : Emotet has been observed to hook network APIs to monitor network traffic. ", "S0363": " Empire  : Empire can be used to conduct packet captures on target hosts.", "S0357": " Impacket  : Impacket can be used to sniff network traffic via an interface or raw socket.", "G0094": " Kimsuky  : Kimsuky has used the Nirsoft SniffPass network sniffer to obtain passwords sent over non-secure protocols.", "S0443": " MESSAGETAP  : MESSAGETAP uses the libpcap library to listen to all traffic and parses network protocols starting with Ethernet and IP layers. It continues parsing protocol layers including SCTP, SCCP, and TCAP and finally extracts SMS message data and routing metadata.  ", "S0590": " NBTscan  : NBTscan can dump and print whole packet content.    ", "S0587": " Penquin  : Penquin can sniff network traffic to look for packets matching specific conditions.", "S0378": " PoshC2  : PoshC2 contains a module for taking packet captures on compromised hosts.", "S0019": " Regin  : Regin appears to have functionality to sniff for credentials passed over HTTP, SMTP, and SMB.", "S0174": " Responder  : Responder captures hashes and credentials that are sent to the system after the name services have been poisoned.", "G0034": " Sandworm Team  : Sandworm Team has used intercepter-NG to sniff passwords in network traffic. "}, "id": "T1040", "subtechniques": ["No sub-techniques"], "tactics": ["Credential Access", "Discovery"], "platforms": ["Linux, Network, Windows, macOS"], "systemrequirements": ["Network interface access and packet capture driver"], "permissionsrequired": ["Administrator, SYSTEM"], "capecid": ["CAPEC-158"], "version": "1.2", "created": "31 May 2017", "lastmodified": "02 April 2021"}, {"techniquename": "Input Capture", "detection": "Detection may vary depending on how input is captured but may include monitoring for certain Windows API calls (e.g. , , and ), monitoring for malicious instances of , and ensuring no unauthorized drivers or kernel modules that could indicate keylogging or API hooking are present.", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "procedureexamples": {"G0087": " APT39  : APT39 has utilized tools to capture mouse movements.", "S0631": " Chaes  : Chaes has a module to perform any API hooking it desires. ", "S0641": " Kobalos  : Kobalos has used a compromised SSH client to capture the hostname, port, username and password used to establish an SSH connection from the compromised host. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1056", "subtechniques": ["T1056.001", "T1056.002", "T1056.003", "T1056.004"], "tactics": ["Collection", "Credential Access"], "platforms": ["Linux, Network, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "capecid": ["CAPEC-569"], "contributors": ["John Lambert, Microsoft Threat Intelligence Center"], "version": "1.2", "created": "31 May 2017", "lastmodified": "24 August 2021"}, {"techniquename": "Keylogging", "detection": "Keyloggers may take many forms, possibly involving modification to the Registry and installation of a driver, setting a hook, or polling to intercept keystrokes. Commonly used API calls include , , and . Monitor the Registry and file system for such changes, monitor driver installs, and look for common keylogging API calls. API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.", "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:", "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL can perform keylogging.", "S0331": " Agent Tesla  : Agent Tesla can log keystrokes on the victim\u2019s machine.", "G0130": " Ajax Security Team  : Ajax Security Team has used CWoolger and MPK, custom-developed malware, which recorded all keystrokes on an infected system.", "S0622": " AppleSeed  : AppleSeed can use  and  to capture keystrokes on the victim\u2019s machine. ", "G0007": " APT28  : APT28 has used tools to perform keylogging.", "G0022": " APT3  : APT3 has used a keylogging tool that records keystrokes in encrypted files.", "G0050": " APT32  : APT32 has abused the PasswordChangeNotify to monitor for and capture account password changes.", "G0082": " APT38  : APT38 used a Trojan called KEYLIME to capture keystrokes from the victim\u2019s machine.", "G0087": " APT39  : APT39 has used tools for capturing keystrokes.", "G0096": " APT41  : APT41 used a keylogger called GEARSHIFT on a target system.", "S0373": " Astaroth  : Astaroth logs keystrokes from the victim's machine. ", "S0438": " Attor  : One of Attor's plugins can collect user credentials via capturing keystrokes and can capture keystrokes pressed within the window of the injected process.", "S0414": " BabyShark  : BabyShark has a PowerShell-based remote administration ability that can implement a PowerShell or C# based keylogger.", "S0128": " BADNEWS  : When it first starts, BADNEWS spawns a new thread to log keystrokes.", "S0337": " BadPatch  : BadPatch has a keylogging capability.", "S0234": " Bandook  : Bandook contains keylogging capabilities.", "S0017": " BISCUIT  : BISCUIT can capture keystrokes.", "S0089": " BlackEnergy  : BlackEnergy has run a keylogger plug-in on a victim.", "S0454": " Cadelspy  : Cadelspy has the ability to log keystrokes on the compromised host.", "S0030": " Carbanak  : Carbanak logs key strokes for configured processes and sends them back to the C2 server.", "S0348": " Cardinal RAT  : Cardinal RAT can log keystrokes.", "S0261": " Catchamas  : Catchamas collects keystrokes from the victim\u2019s machine.", "S0023": " CHOPSTICK  : CHOPSTICK is capable of performing keylogging.", "S0154": " Cobalt Strike  : Cobalt Strike can track key presses with a keylogger module.", "S0338": " Cobian RAT  : Cobian RAT has a feature to perform keylogging on the victim\u2019s machine.", "S0050": " CosmicDuke  : CosmicDuke uses a keylogger.", "S0115": " Crimson  : Crimson can use a module to perform keylogging on compromised hosts.", "S0625": " Cuba  : Cuba logs keystrokes via polling by using  and  functions.", "S0334": " DarkComet  : DarkComet has a keylogging capability.", "G0012": " Darkhotel  : Darkhotel has used a keylogger.", "S0187": " Daserf  : Daserf can log keystrokes.", "S0021": " Derusbi  : Derusbi is capable of logging keystrokes.", "S0213": " DOGCALL  : DOGCALL is capable of logging keystrokes.", "S0567": " Dtrack  : Dtrack\u2019s dropper contains a keylogging executable.", "S0038": " Duqu  : Duqu can track key presses with a keylogger module.", "S0062": " DustySky  : DustySky contains a keylogger.", "S0593": " ECCENTRICBANDWAGON  : ECCENTRICBANDWAGON can capture and store keystrokes.", "S0363": " Empire  : Empire includes keylogging capabilities for Windows, Linux, and macOS systems.", "S0152": " EvilGrab  : EvilGrab has the capability to capture keystrokes.", "S0569": " Explosive  : Explosive has leveraged its keylogging capabilities to gain access to administrator accounts on target servers. ", "S0076": " FakeM  : FakeM contains a keylogger module.", "G0085": " FIN4  : FIN4 has captured credentials via fake Outlook Web App (OWA) login pages and has also used a .NET based keylogger.", "S0410": " Fysbis  : Fysbis can perform keylogging. ", "S0032": " gh0st RAT  : gh0st RAT has a keylogger.", "S0531": " Grandoreiro  : Grandoreiro can log keystrokes on the victim's machine.", "S0342": " GreyEnergy  : GreyEnergy has a module to harvest pressed keystrokes.", "G0043": " Group5  : Malware used by Group5 is capable of capturing keystrokes.", "S0170": " Helminth  : The executable version of Helminth has a module to log keystrokes.", "S0070": " HTTPBrowser  : HTTPBrowser is capable of capturing keystrokes on victims.", "S0434": " Imminent Monitor  : Imminent Monitor has a keylogging module.", "S0260": " InvisiMole  : InvisiMole can capture keystrokes on a compromised host.", "S0201": " JPIN  : JPIN contains a custom keylogger.", "S0283": " jRAT  : jRAT has the capability to log keystrokes from the victim\u2019s machine, both offline and online.", "S0088": " Kasidet  : Kasidet has the ability to initiate keylogging.", "G0004": " Ke3chang  : Ke3chang has used keyloggers.", "S0387": " KeyBoy  : KeyBoy installs a keylogger for intercepting credentials and keystrokes.", "S0526": " KGH_SPY  : KGH_SPY can perform keylogging by polling the  function.", "G0094": " Kimsuky  : Kimsuky has used a PowerShell-based keylogger as well as a tool called MECHANICAL to log keystrokes.", "S0437": " Kivars  : Kivars has the ability to initiate keylogging on the infected host.", "S0356": " KONNI  : KONNI has the capability to perform keylogging.", "G0032": " Lazarus Group  : Lazarus Group malware KiloAlfa contains keylogging functionality.", "S0447": " Lokibot  : Lokibot has the ability to capture input on the compromised host via keylogging.", "S0409": " Machete  : Machete logs keystrokes from the victim\u2019s machine.", "S0282": " MacSpy  : MacSpy captures keystrokes.", "G0059": " Magic Hound  : Magic Hound malware is capable of keylogging.", "S0652": " MarkiRAT  : MarkiRAT can capture all keystrokes on a compromised host.", "S0167": " Matryoshka  : Matryoshka is capable of keylogging.", "G0045": " menuPass  : menuPass has used key loggers to steal usernames and passwords.", "S0455": " Metamorfo  : Metamorfo has a command to launch a keylogger and capture keystrokes on the victim\u2019s machine. ", "S0339": " Micropsia  : Micropsia has keylogging capabilities.", "S0149": " MoonWind  : MoonWind has a keylogger.", "S0336": " NanoCore  : NanoCore can perform keylogging on the victim\u2019s machine.", "S0247": " NavRAT  : NavRAT logs the keystrokes on the targeted system.", "S0033": " NetTraveler  : NetTraveler contains a keylogger.", "S0198": " NETWIRE  : NETWIRE can perform keylogging.", "S0385": " njRAT  : njRAT is capable of logging keystrokes.", "G0049": " OilRig  : OilRig has used keylogging tools called KEYPUNCH and LONGWATCH.   ", "S0439": " Okrum  : Okrum was seen using a keylogger tool to capture keystrokes. ", "G0116": " Operation Wocao  : Operation Wocao has obtained the password for the victim's password manager via a custom keylogger.", "S0072": " OwaAuth  : OwaAuth captures and DES-encrypts credentials before writing the username and password to a log file, .", "S0643": " Peppy  : Peppy can log keystrokes on compromised hosts.", "G0068": " PLATINUM  : PLATINUM has used several different keyloggers.", "S0013": " PlugX  : PlugX has a module for capturing keystrokes per process including window titles.", "S0428": " PoetRAT  : PoetRAT has used a Python tool named klog.exe for keylogging.", "S0012": " PoisonIvy  : PoisonIvy contains a keylogger.", "S0378": " PoshC2  : PoshC2 has modules for keystroke logging and capturing credentials from spoofed Outlook authentication messages.", "S0194": " PowerSploit  : PowerSploit's  Exfiltration module can log keystrokes.", "S0113": " Prikormka  : Prikormka contains a keylogger module that collects keystrokes and the titles of foreground windows.", "S0279": " Proton  : Proton uses a keylogger to capture keystrokes.", "S0192": " Pupy  : Pupy uses a keylogger to capture keystrokes it then sends back to the server after it is stopped.", "S0650": " QakBot  : QakBot can capture keystrokes on a compromised host.", "S0262": " QuasarRAT  : QuasarRAT has a built-in keylogger.", "S0019": " Regin  : Regin contains a keylogger.", "S0332": " Remcos  : Remcos has a command for keylogging.", "S0375": " Remexi  : Remexi gathers and exfiltrates keystrokes from the machine.", "S0125": " Remsec  : Remsec contains a keylogger component.", "S0379": " Revenge RAT  : Revenge RAT has a plugin for keylogging.", "S0240": " ROKRAT  : ROKRAT uses a keylogger to capture keystrokes and location of where the user is typing.", "S0090": " Rover  : Rover has keylogging functionality.", "S0148": " RTM  : RTM can record keystrokes from both the keyboard and virtual keyboard.", "S0253": " RunningRAT  : RunningRAT captures keystrokes and sends them back to the C2 server.", "G0034": " Sandworm Team  : Sandworm Team has used a keylogger to capture keystrokes by using the SetWindowsHookEx function. ", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has a keylogging capability.", "S0649": " SMOKEDHAM  : SMOKEDHAM can continuously capture keystrokes.", "G0054": " Sowbug  : Sowbug has used keylogging tools.", "S0058": " SslMM  : SslMM creates a new thread implementing a keylogging facility using Windows Keyboard Accelerators.", "S0018": " Sykipot  : Sykipot contains keylogging functionality to steal passwords.", "S0467": " TajMahal  : TajMahal has the ability to capture keystrokes on an infected host.", "S0595": " ThiefQuest  : ThiefQuest uses the  functions to perform keylogging.", "G0027": " Threat Group-3390  : Threat Group-3390 actors installed a credential logger on Microsoft Exchange servers. Threat Group-3390 also leveraged the reconnaissance framework, ScanBox, to capture keystrokes.", "S0004": " TinyZBot  : TinyZBot contains keylogger functionality.", "G0131": " Tonto Team  : Tonto Team has used keylogging tools in their operations.", "S0094": " Trojan.Karagany  : Trojan.Karagany can capture keystrokes on a compromised host.", "S0130": " Unknown Logger  : Unknown Logger is capable of recording keystrokes.", "S0257": " VERMIN  : VERMIN collects keystrokes from the victim machine.", "S0161": " XAgentOSX  : XAgentOSX contains keylogging functionality that will monitor for active application windows and write them to the log, it can handle special characters, and it will buffer by default 50 characters before sending them out over the C2 infrastructure.", "S0248": " yty  : yty uses a keylogger plugin to gather keystrokes.", "S0330": " Zeus Panda  : Zeus Panda can perform keylogging on the victim\u2019s machine by hooking the functions TranslateMessage and WM_KEYDOWN.", "S0412": " ZxShell  : ZxShell has a feature to capture a remote computer's keystrokes using a keylogger. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1056.001", "subtechniqueof": "T1056", "tactics": ["Collection", "Credential Access"], "platforms": ["Linux, Network, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "capecid": ["CAPEC-568"], "version": "1.1", "created": "11 February 2020", "lastmodified": "21 October 2020"}, {"techniquename": "Forge Web Credentials", "detection": "Monitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts. Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.", "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.Adversaries may generate these credential materials in order to gain access to web resources. This differs from Steal Web Session Cookie, Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users. The generation of web credentials often requires secret values, such as passwords, Private Keys, or other cryptographic seed values.Once forged, adversaries may use these web credentials to access resources (ex: Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms.", "mitigations": {"M1047": " Audit  : Administrators should perform an audit of all access lists and the permissions they have been granted to access web applications and services. This should be done extensively on all resources in order to establish a baseline, followed up on with periodic audits of new or updated resources. Suspicious accounts/credentials should be investigated and removed.Enable advanced auditing on ADFS. Check the success and failure audit options in the ADFS Management snap-in. Enable Audit Application Generated events on the AD FS farm via Group Policy Object.", "M1026": " Privileged Account Management  : Restrict permissions and access to the AD FS server to only originate from privileged access workstations.", "M1054": " Software Configuration  : Configure browsers/applications to regularly delete persistent web credentials (such as cookies).", "M1018": " User Account Management  : Ensure that user accounts with administrative rights follow best practices, including use of privileged access workstations, Just in Time/Just Enough Administration (JIT/JEA), and strong authentication. Reduce the number of users that are members of highly privileged Directory Roles."}, "id": "T1606", "subtechniques": ["T1606.001", "T1606.002"], "tactics": ["Credential Access"], "platforms": ["Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "version": "1.2", "created": "17 December 2020", "lastmodified": "12 October 2021"}, {"techniquename": "Web Cookies", "detection": "Monitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts. Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.", "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.Adversaries may generate these cookies in order to gain access to web resources. This differs from Steal Web Session Cookie and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces. The generation of web cookies often requires secret values, such as passwords, Private Keys, or other cryptographic seed values.Once forged, adversaries may use these web cookies to access resources (Web Session Cookie), which may bypass multi-factor and other authentication protection mechanisms.", "mitigations": {"M1047": " Audit  : Administrators should perform an audit of all access lists and the permissions they have been granted to access web applications and services. This should be done extensively on all resources in order to establish a baseline, followed up on with periodic audits of new or updated resources. Suspicious accounts/credentials should be investigated and removed.", "M1054": " Software Configuration  : Configure browsers/applications to regularly delete persistent web cookies."}, "procedureexamples": {"G0016": " APT29  : APT29 has bypassed MFA set on OWA accounts by generating a cookie value from a previously stolen secret key."}, "id": "T1606.001", "subtechniqueof": "T1606", "tactics": ["Credential Access"], "platforms": ["IaaS, Linux, SaaS, Windows, macOS"], "contributors": ["Jen Burns, HubSpot"], "version": "1.1", "created": "17 December 2020", "lastmodified": "20 September 2021"}, {"techniquename": "SAML Tokens", "detection": "This technique may be difficult to detect as SAML tokens are signed by a trusted certificate. The forging process may not be detectable since it is likely to happen outside of a defender's visibility, but subsequent usage of the forged token may be seen. Monitor for anomalous logins using SAML tokens created by a compromised or adversary generated token-signing certificate. These logins may occur on any on-premises resources as well as from any cloud environment that trusts the certificate. Search for logins to service providers using SAML SSO which do not have corresponding 4769, 1200, and 1202 events in the Domain.Consider modifying SAML responses to include custom elements for each service provider. Monitor these custom elements in service provider access logs to detect any anomalous requests.", "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the  value of the  element in a token. This value can be changed using the  in a . Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.An adversary may utilize Private Keys to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate. This differs from Steal Application Access Token and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.An adversary may gain administrative Azure AD privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to Use Alternate Authentication Material, which may bypass multi-factor and other authentication protection mechanisms.", "mitigations": {"M1015": " Active Directory Configuration  : For containing the impact of a previously forged SAML token, rotate the token-signing AD FS certificate in rapid succession twice, which will invalidate any tokens generated using the previous certificate.", "M1047": " Audit  : Enable advanced auditing on AD FS. Check the success and failure audit options in the AD FS Management snap-in. Enable Audit Application Generated events on the AD FS farm via Group Policy Object.", "M1026": " Privileged Account Management  : Restrict permissions and access to the AD FS server to only originate from privileged access workstations.", "M1018": " User Account Management  : Ensure that user accounts with administrative rights follow best practices, including use of privileged access workstations, Just in Time/Just Enough Administration (JIT/JEA), and strong authentication. Reduce the number of users that are members of highly privileged Directory Roles."}, "procedureexamples": {"G0016": " APT29  : APT29 created tokens using compromised SAML signing certificates."}, "id": "T1606.002", "subtechniqueof": "T1606", "tactics": ["Credential Access"], "platforms": ["Azure AD, Google Workspace, IaaS, Office 365, SaaS, Windows"], "permissionsrequired": ["Administrator"], "contributors": ["Blake Strom, Microsoft 365 Defender; Jen Burns, HubSpot; Oleg Kolesnikov, Securonix"], "version": "1.2", "created": "17 December 2020", "lastmodified": "20 September 2021"}, {"techniquename": "Forced Authentication", "detection": "Monitor for SMB traffic on TCP ports 139, 445 and UDP port 137 and WebDAV traffic attempting to exit the network to unknown external systems. If attempts are detected, then investigate endpoint data sources to find the root cause. For internal traffic, monitor the workstation-to-workstation unusual (vs. baseline) SMB traffic. For many networks there should not be any, but it depends on how systems on the network are configured and where resources are located.Monitor creation and modification of .LNK, .SCF, or any other files on systems and within virtual environments that contain resources that point to external network resources as these could be used to gather credentials when the files are rendered. ", "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system.  This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443.  Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. Template Injection), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server.  With access to the credential hash, an adversary can perform off-line Brute Force cracking to gain access to plaintext credentials. There are several different ways this can occur.  Some specifics from in-the-wild use include:", "mitigations": {"M1037": " Filter Network Traffic  : Block SMB traffic from exiting an enterprise network with egress filtering or by blocking TCP ports 139, 445 and UDP port 137. Filter or block WebDAV protocol traffic from exiting the network. If access to external resources over SMB and WebDAV is necessary, then traffic should be tightly limited with allowlisting.  ", "M1027": " Password Policies  : Use strong passwords to increase the difficulty of credential hashes from being cracked if they are obtained."}, "procedureexamples": {"G0079": " DarkHydrus  : DarkHydrus used Template Injection to launch an authentication window for users to enter their credentials.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 has gathered hashed user credentials over SMB using spearphishing attachments with external resource links and by modifying .LNK file icon resources to collect credentials from virtualized systems.", "S0634": " EnvyScout  : EnvyScout can use protocol handlers to coax the operating system to send NTLMv2 authentication responses to attacker-controlled infrastructure."}, "id": "T1187", "subtechniques": ["No sub-techniques"], "tactics": ["Credential Access"], "platforms": ["Windows"], "permissionsrequired": ["User"], "contributors": ["Sudhanshu Chauhan, @Sudhanshu_C; Teodor Cimpoesu"], "version": "1.2", "created": "16 January 2018", "lastmodified": "19 June 2020"}, {"techniquename": "Windows Credential Manager", "detection": "Monitor process and command-line parameters of  for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., ).Consider monitoring API calls such as  that may list credentials from the Windows Credential Manager.Consider monitoring file reads to Vault locations, , for suspicious activity.", "description": "Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).The Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of Credentials from Web Browsers, Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.Credential Lockers store credentials in encrypted  files, located under . The encryption key can be found in a file named , typically located in the same folder as the credentials.Adversaries may list credentials managed by the Windows Credential Manager through several mechanisms.  is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may gather credentials by reading files located inside of the Credential Lockers. Adversaries may also abuse Windows APIs such as  to list credentials managed by the Credential Manager.Adversaries may use password recovery tools to obtain plain text passwords from the Credential Manager.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Consider enabling the \"Network access: Do not allow storage of passwords and credentials for network authentication\" setting that will prevent network credentials from being stored by the Credential Manager."}, "procedureexamples": {"S0526": " KGH_SPY  : KGH_SPY can collect credentials from the Windows Credential Manager.", "S0349": " LaZagne  : LaZagne can obtain credentials from Vault files.  ", "S0002": " Mimikatz  : Mimikatz contains functionality to acquire credentials from the Windows Credential Manager.", "G0049": " OilRig  : OilRig has used credential dumping tool named VALUEVAULT to steal credentials from the Windows Credential Manager.", "S0194": " PowerSploit  : PowerSploit contains a collection of Exfiltration modules that can harvest credentials from Windows vault credential objects.", "S0629": " RainyDay  : RainyDay can use the QuarksPwDump tool to obtain local passwords and domain cached credentials.", "S0240": " ROKRAT  : ROKRAT steals credentials by leveraging the Windows Vault mechanism.", "G0038": " Stealth Falcon  : Stealth Falcon malware gathers passwords from the Windows Credential Vault.", "G0010": " Turla  : Turla has gathered credentials from the Windows Credential Manager tool. ", "S0476": " Valak  : Valak can use a .NET compiled module named exchgrabber to enumerate credentials from the Credential Manager."}, "id": "T1555.004", "subtechniqueof": "T1555", "tactics": ["Credential Access"], "platforms": ["Windows"], "permissionsrequired": ["User"], "contributors": ["Bernaldo Penas Antelo; Mugdha Peter Bansode"], "version": "1.0", "created": "23 November 2020", "lastmodified": "29 April 2021"}, {"techniquename": "Password Managers", "detection": "Consider monitoring API calls, file read events, and processes for suspicious activity that could indicate searching in process memory of password managers. Consider monitoring file reads surrounding known password manager applications.", "description": "Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.Adversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory. Adversaries may extract credentials from memory via Exploitation for Credential Access. Adversaries may also try brute forcing via Password Guessing to obtain the master password of a password manager.", "mitigations": {"M1027": " Password Policies  : Refer to NIST guidelines when creating password policies for master passwords.", "M1054": " Software Configuration  : Consider re-locking password managers after a short timeout to limit the time plaintext credentials live in memory from decrypted databases.", "M1051": " Update Software  : Update password managers regularly by employing patch management for internal enterprise endpoints and servers."}, "procedureexamples": {"G0117": " Fox Kitten  : Fox Kitten has used scripts to access credential information from the KeePass database.", "S0652": " MarkiRAT  : MarkiRAT can gather information from the Keepass password manager. ", "G0116": " Operation Wocao  : Operation Wocao has accessed and collected credentials from password managers.", "S0279": " Proton  : Proton gathers credentials in files for 1password.", "S0266": " TrickBot  : TrickBot can steal passwords from the KeePass open source password manager."}, "id": "T1555.005", "subtechniqueof": "T1555", "tactics": ["Credential Access"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Matt Burrough, @mattburrough, Microsoft"], "version": "1.0", "created": "22 January 2021", "lastmodified": "21 June 2021"}, {"techniquename": "Exploitation for Credential Access", "detection": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. Credential resources obtained through exploitation may be detectable in use if they are not normally used or seen.", "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist.", "M1050": " Exploit Protection  : Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. Many of these protections depend on the architecture and target application binary for compatibility and may not work for software targeted for defense evasion.", "M1019": " Threat Intelligence Program  : Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization.", "M1051": " Update Software  : Update software regularly by employing patch management for internal enterprise endpoints and servers."}, "id": "T1212", "subtechniques": ["No sub-techniques"], "tactics": ["Credential Access"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["John Lambert, Microsoft Threat Intelligence Center"], "version": "1.1", "created": "18 April 2018", "lastmodified": "25 March 2020"}, {"techniquename": "Securityd Memory", "detection": "Monitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.", "description": "An adversary may obtain root access (allowing them to read securityd\u2019s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user\u2019s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc. In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.   Apple\u2019s securityd utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password.", "procedureexamples": {"S0276": " Keydnap  : Keydnap uses the keychaindump project to read securityd memory."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1555.002", "subtechniqueof": "T1555", "tactics": ["Credential Access"], "platforms": ["Linux, macOS"], "permissionsrequired": ["root"], "version": "1.0", "created": "12 February 2020", "lastmodified": "17 February 2020"}, {"techniquename": "Keychain", "detection": "Unlocking the keychain and using passwords from it is a very common process, so there is likely to be a lot of noise in any detection technique. Monitoring of system calls to the keychain can help determine if there is a suspicious process trying to access it.", "description": "Adversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in ,, and .  The  command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.To manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault.  By default, the passphrase for the keychain is the user\u2019s logon credentials.", "mitigations": {"M1027": " Password Policies  : The password for the user's login keychain can be changed from the user's login password. This increases the complexity for an adversary because they need to know an additional password."}, "procedureexamples": {"S0274": " Calisto  : Calisto collects Keychain storage data and copies those passwords/tokens to a file.", "S0278": " iKitten  : iKitten collects the keychains on the system.", "S0349": " LaZagne  : LaZagne can obtain credentials from macOS Keychains.  ", "S0279": " Proton  : Proton gathers credentials in files for keychains."}, "id": "T1555.001", "subtechniqueof": "T1555", "tactics": ["Credential Access"], "platforms": ["macOS"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "12 February 2020", "lastmodified": "17 February 2020"}, {"techniquename": "Credentials from Web Browsers", "detection": "Identify web browser files that contain credentials such as Google Chrome\u2019s Login Data database file: . Monitor file read events of web browser files that contain credentials, especially when the reading process is unrelated to the subject web browser. Monitor process execution logs to include PowerShell Transcription focusing on those that perform a combination of behaviors including reading web browser process memory, utilizing regular expressions, and those that contain numerous keywords for common web applications (Gmail, Twitter, Office365, etc.).", "description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file,  and executing a SQL query: . The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function , which uses the victim\u2019s cached logon credentials as the decryption key. Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).", "mitigations": {"M1027": " Password Policies  : Organizations may consider weighing the risk of storing credentials in web browsers. If web browser credential disclosure is a significant concern, technical controls, policy, and user training may be used to prevent storage of credentials in web browsers."}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla can gather credentials from a number of browsers. ", "G0130": " Ajax Security Team  : Ajax Security Team has used FireMalv custom-developed malware, which collected passwords from the Firefox browser storage.", "G0022": " APT3  : APT3 has used tools to dump passwords from browsers.", "G0064": " APT33  : APT33 has used a variety of publicly available tools like LaZagne to gather credentials.", "G0067": " APT37  : APT37 has used a credential stealer known as ZUMKONG that can harvest usernames and passwords stored in browsers.", "S0344": " Azorult  : Azorult can steal credentials from the victim's browser.", "S0093": " Backdoor.Oldrea  : Some Backdoor.Oldrea samples contain a publicly available Web browser password recovery tool.", "S0089": " BlackEnergy  : BlackEnergy has used a plug-in to gather credentials from web browsers including FireFox, Google Chrome, and Internet Explorer.", "S0657": " BLUELIGHT  : BLUELIGHT can collect passwords stored in web browers, including Internet Explorer, Edge, Chrome, and Naver Whale.", "S0484": " Carberp  : Carberp's passw.plug plugin can gather passwords saved in Opera, Internet Explorer, Safari, Firefox, and Chrome.", "S0631": " Chaes  : Chaes can steal login credentials and stored financial information from the browser.", "S0144": " ChChes  : ChChes steals credentials stored inside Internet Explorer.", "S0492": " CookieMiner  : CookieMiner can steal saved usernames and passwords in Chrome as well as credit card credentials.", "S0050": " CosmicDuke  : CosmicDuke collects user credentials, including passwords, for various programs including Web browsers.", "S0115": " Crimson  : Crimson contains a module to steal credentials from Web browsers on the victim machine.", "S0367": " Emotet  : Emotet has been observed dropping browser password grabber modules. ", "S0363": " Empire  : Empire can use modules that extract passwords from common web browsers such as Firefox and Chrome.", "G0037": " FIN6  : FIN6 has used the Stealer One credential stealer to target web browsers.", "S0531": " Grandoreiro  : Grandoreiro can steal cookie data and credentials from Google Chrome.", "S0132": " H1N1  : H1N1 dumps usernames and passwords from Firefox, Internet Explorer, and Outlook.", "S0434": " Imminent Monitor  : Imminent Monitor has a PasswordRecoveryPacket module for recovering browser passwords.", "G0100": " Inception  : Inception used a browser plugin to steal passwords and sessions from Internet Explorer, Chrome, Opera, Firefox, Torch, and Yandex.", "S0528": " Javali  : Javali can capture login credentials from open browsers including Firefox, Chrome, Internet Explorer, and Edge.", "S0283": " jRAT  : jRAT can capture passwords from common web browsers such as Internet Explorer, Google Chrome, and Firefox.", "S0387": " KeyBoy  : KeyBoy attempts to collect passwords from browsers.", "S0526": " KGH_SPY  : KGH_SPY has the ability to steal data from the Chrome, Edge, Firefox, Thunderbird, and Opera browsers.", "G0094": " Kimsuky  : Kimsuky has used browser extensions including Google Chrome to steal passwords and cookies from browsers.", "S0356": " KONNI  : KONNI can steal profiles (containing credential information) from Firefox, Chrome, and Opera.", "S0349": " LaZagne  : LaZagne can obtain credentials from web browsers such as Google Chrome, Internet Explorer, and Firefox.", "G0077": " Leafminer  : Leafminer used several tools for retrieving login and password information, including LaZagne.", "S0447": " Lokibot  : Lokibot has demonstrated the ability to steal credentials from multiple applications and data sources including Safari and the Chromium and Mozilla Firefox-based web browsers.", "S0409": " Machete  : Machete collects stored credentials from several web browsers. ", "S0530": " Melcoz  : Melcoz has the ability to steal credentials from web browsers.", "S0002": " Mimikatz  : Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from DPAPI. ", "G0021": " Molerats  : Molerats used the public tool BrowserPasswordDump10 to dump passwords saved in browsers on victims.", "G0069": " MuddyWater  : MuddyWater has run tools including Browser64 to steal passwords saved in victim web browsers.", "S0198": " NETWIRE  : NETWIRE has the ability to steal credentials from web browsers including Internet Explorer, Opera, Yandex, and Chrome.", "S0385": " njRAT  : njRAT has a module that steals passwords saved in victim web browsers.", "G0049": " OilRig  : OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access. OilRig has also used tool named PICKPOCKET to dump passwords from web browsers.", "S0138": " OLDBAIT  : OLDBAIT collects credentials from Internet Explorer, Mozilla Firefox, and Eudora.", "S0365": " Olympic Destroyer  : Olympic Destroyer contains a module that tries to obtain stored credentials from web browsers.", "G0040": " Patchwork  : Patchwork dumped the login data database from .", "S0048": " PinchDuke  : PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated with many sources such as Netscape Navigator, Mozilla Firefox, Mozilla Thunderbird, and Internet Explorer. ", "S0435": " PLEAD  : PLEAD has the ability to steal saved credentials from web browsers.", "S0428": " PoetRAT  : PoetRAT has used a Python tool named Browdec.exe to steal browser credentials.", "S0113": " Prikormka  : A module in Prikormka gathers logins and passwords stored in applications on the victims, including Google Chrome, Mozilla Firefox, and several other browsers.", "S0279": " Proton  : Proton gathers credentials for Google Chrome.", "S0192": " Pupy  : Pupy can use Lazagne for harvesting credentials.", "S0650": " QakBot  : QakBot has collected usernames and passwords from Firefox and Chrome.", "S0262": " QuasarRAT  : QuasarRAT can obtain passwords from common web browsers.", "S0629": " RainyDay  : RainyDay can use tools to collect credentials from web browsers.", "S0153": " RedLeaves  : RedLeaves can gather browser usernames and passwords.", "S0240": " ROKRAT  : ROKRAT steals credentials stored in Web browsers by querying the sqlite database.", "G0034": " Sandworm Team  : Sandworm Team's CredRaptor tool can collect saved passwords from various internet browsers.", "S0226": " Smoke Loader  : Smoke Loader searches for credentials stored from web browsers.", "G0038": " Stealth Falcon  : Stealth Falcon malware gathers passwords from multiple sources, including Internet Explorer, Firefox, and Chrome.", "G0092": " TA505  : TA505 has used malware to gather credentials from Internet Explorer.", "S0266": " TrickBot  : TrickBot can obtain passwords stored in files from web browsers such as Chrome, Firefox, Internet Explorer, and Microsoft Edge, sometimes using esentutl.", "S0094": " Trojan.Karagany  : Trojan.Karagany can steal data and credentials from browsers.", "S0436": " TSCookie  : TSCookie has the ability to steal saved passwords from the Internet Explorer, Edge, Firefox, and Chrome browsers.", "S0130": " Unknown Logger  : Unknown Logger is capable of stealing usernames and passwords from browsers on the victim machine.", "S0161": " XAgentOSX  : XAgentOSX contains the getFirefoxPassword function to attempt to locate Firefox passwords.", "S0251": " Zebrocy  : Zebrocy has the capability to upload dumper tools that extract credentials from web browsers and store them in database files.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used a tool to steal credentials from installed web browsers including Microsoft Internet Explorer and Google Chrome."}, "id": "T1555.003", "subtechniqueof": "T1555", "tactics": ["Credential Access"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Barry Shteiman, Exabeam; RedHuntLabs, @redhuntlabs; Ryan Benson, Exabeam; Sylvain Gil, Exabeam"], "version": "1.1", "created": "12 February 2020", "lastmodified": "14 April 2021"}, {"techniquename": "Credentials from Password Stores", "detection": "Monitor system calls, file read events, and processes for suspicious activity that could indicate searching for a password  or other activity related to performing keyword searches (e.g. password, pwd, login, store, secure, credentials, etc.) in process memory for credentials. File read events should be monitored surrounding known password storage applications.", "description": "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.", "mitigations": {"M1027": " Password Policies  : The password for the user's login keychain can be changed from the user's login password. This increases the complexity for an adversary because they need to know an additional password.Organizations may consider weighing the risk of storing credentials in password stores and web browsers. If system, software, or web browser credential disclosure is a significant concern, technical controls, policy, and user training may be used to prevent storage of credentials in improper locations."}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has the ability to steal credentials from FTP clients and wireless profiles.", "G0016": " APT29  : APT29 used account credentials they obtained to attempt access to Group Managed Service Account (gMSA) passwords.", "G0064": " APT33  : APT33 has used a variety of publicly available tools like LaZagne to gather credentials.", "G0087": " APT39  : APT39 has used the Smartftp Password Decryptor tool to decrypt FTP passwords.", "S0373": " Astaroth  : Astaroth uses an external software known as NetPass to recover passwords. ", "S0484": " Carberp  : Carberp's passw.plug plugin can gather account information from multiple instant messaging, email, and social media services, as well as FTP, VNC, and VPN clients.", "S0050": " CosmicDuke  : CosmicDuke collects user credentials, including passwords, for various programs including popular instant messaging applications and email clients as well as WLAN keys.", "G0120": " Evilnum  : Evilnum can collect email credentials from victims.", "G0037": " FIN6  : FIN6 has used the Stealer One credential stealer to target e-mail and file transfer utilities including FTP.", "S0526": " KGH_SPY  : KGH_SPY can collect credentials from WINSCP.", "S0349": " LaZagne  : LaZagne can obtain credentials from databases, mail, and WiFi across multiple platforms.", "G0077": " Leafminer  : Leafminer used several tools for retrieving login and password information, including LaZagne.", "S0447": " Lokibot  : Lokibot has stolen credentials from multiple applications and data sources including Windows OS credentials, email clients, FTP, and SFTP clients.", "S0167": " Matryoshka  : Matryoshka is capable of stealing Outlook passwords.", "S0002": " Mimikatz  : Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the credential vault and DPAPI.  ", "G0069": " MuddyWater  : MuddyWater has performed credential dumping with LaZagne and other tools, including by dumping passwords saved in victim email.", "S0198": " NETWIRE  : NETWIRE can retrieve passwords from messaging and mail client applications.", "G0049": " OilRig  : OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.", "S0138": " OLDBAIT  : OLDBAIT collects credentials from several email clients.", "S0048": " PinchDuke  : PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated with many sources such as The Bat!, Yahoo!, Mail.ru, Passport.Net, Google Talk, and Microsoft Outlook.", "S0435": " PLEAD  : PLEAD has the ability to steal saved passwords from Microsoft Outlook.", "S0113": " Prikormka  : A module in Prikormka collects passwords stored in applications installed on the victim.", "S0192": " Pupy  : Pupy can use Lazagne for harvesting credentials.", "S0262": " QuasarRAT  : QuasarRAT can obtain passwords from common FTP clients.", "G0038": " Stealth Falcon  : Stealth Falcon malware gathers passwords from multiple sources, including Windows Credential Vault and Outlook."}, "id": "T1555", "subtechniques": ["T1555.001", "T1555.002", "T1555.003", "T1555.004", "T1555.005"], "tactics": ["Credential Access"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "11 February 2020", "lastmodified": "21 June 2021"}, {"techniquename": "Brute Force", "detection": "Monitor authentication logs for system and application login failures of . If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials. Also monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network.", "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access.", "mitigations": {"M1036": " Account Use Policies  : Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out.", "M1032": " Multi-factor Authentication  : Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services.", "M1027": " Password Policies  : Refer to NIST guidelines when creating password policies.", "M1018": " User Account Management  : Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."}, "procedureexamples": {"G0007": " APT28  : APT28 can perform brute force attacks to obtain credentials.", "G0082": " APT38  : APT38 has used brute force techniques to attempt account access when passwords are unknown or when password hashes are unavailable.", "G0087": " APT39  : APT39 has used Ncrack to reveal credentials.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell has a module to perform brute force attacks on a system. ", "S0220": " Chaos  : Chaos conducts brute force attacks against SSH services to gain initial access.", "S0488": " CrackMapExec  : CrackMapExec can brute force supplied user credentials across a network range.", "G0105": " DarkVishnya  : DarkVishnya used brute-force attack to obtain login data.", "G0053": " FIN5  : FIN5 has has used the tool GET2 Penetrator to look for remote login and hard-coded credentials.", "G0117": " Fox Kitten  : Fox Kitten has brute forced RDP credentials.", "S0599": " Kinsing  : Kinsing has attempted to brute force hosts over SSH.", "G0049": " OilRig  : OilRig has used brute force techniques to obtain credentials.", "S0378": " PoshC2  : PoshC2 has modules for brute forcing local administrator and AD user accounts.", "S0583": " Pysa  : Pysa has used brute force attempts against a central management console, as well as some Active Directory accounts.", "S0650": " QakBot  : QakBot can conduct brute force attacks to capture credentials.", "G0010": " Turla  : Turla may attempt to connect to systems within a victim's network using  commands and a predefined list or collection of passwords."}, "id": "T1110", "subtechniques": ["T1110.001", "T1110.002", "T1110.003", "T1110.004"], "tactics": ["Credential Access"], "platforms": ["Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-49"], "contributors": ["Alfredo Oliveira, Trend Micro; David Fiser, @anu4is, Trend Micro; Ed Williams, Trustwave, SpiderLabs; Magno Logan, @magnologan, Trend Micro; Yossi Weizman, Azure Defender Research Team"], "version": "2.3", "created": "31 May 2017", "lastmodified": "30 September 2021"}, {"techniquename": "Password Guessing", "detection": "Monitor authentication logs for system and application login failures of . If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.", "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.", "mitigations": {"M1036": " Account Use Policies  : Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out.", "M1032": " Multi-factor Authentication  : Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services.", "M1027": " Password Policies  : Refer to NIST guidelines when creating password policies. "}, "procedureexamples": {"G0007": " APT28  : APT28 has used a brute-force/password-spray tooling that operated in two modes: in brute-force mode it typically sent over 300 authentication attempts per hour per targeted account over the course of several hours or days. APT28 has also used a Kubernetes cluster to conduct distributed, large-scale password guessing attacks.", "S0020": " China Chopper  : China Chopper's server component can perform brute force password guessing against authentication portals.", "S0488": " CrackMapExec  : CrackMapExec can brute force passwords for a specified user on a single target system or across an entire network.", "S0367": " Emotet  : Emotet has been observed using a hard coded list of passwords to brute force user accounts.  ", "S0532": " Lucifer  : Lucifer has attempted to brute force TCP ports 135 (RPC) and 1433 (MSSQL) with the default username or list of usernames and    passwords.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell can use predefined users and passwords to execute brute force attacks against SSH, FTP, POP3, MySQL, MSSQL, and PostgreSQL services.", "S0453": " Pony  : Pony has used a small dictionary of common passwords against a collected list of local accounts. ", "S0374": " SpeakUp  : SpeakUp can perform brute forcing using a pre-defined list of usernames and passwords in an attempt to log in to administrative panels. ", "S0341": " Xbash  : Xbash can obtain a list of weak passwords from the C2 server to use for brute forcing as well as attempt to brute force services with open ports."}, "id": "T1110.001", "subtechniqueof": "T1110", "tactics": ["Credential Access"], "platforms": ["Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-49"], "contributors": ["Microsoft Threat Intelligence Center (MSTIC)"], "version": "1.2", "created": "11 February 2020", "lastmodified": "21 April 2021"}, {"techniquename": "Password Spraying", "detection": "Monitor authentication logs for system and application login failures of . Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts.Consider the following event IDs:", "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.", "mitigations": {"M1036": " Account Use Policies  : Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out.", "M1032": " Multi-factor Authentication  : Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services.", "M1027": " Password Policies  : Refer to NIST guidelines when creating password policies. "}, "procedureexamples": {"G0007": " APT28  : APT28 has used a brute-force/password-spray tooling that operated in two modes: in password-spraying mode it conducted approximately four authentication attempts per hour per targeted account over the course of several days or weeks. APT28 has also used a Kubernetes cluster to conduct distributed, large-scale password spray attacks.", "G0016": " APT29  : APT29 has conducted brute force password spray attacks.", "G0064": " APT33  : APT33 has used password spraying to gain access to target systems.", "S0606": " Bad Rabbit  : Bad Rabbit\u2019s  file uses NTLM login credentials to brute force Windows machines.", "G0114": " Chimera  : Chimera has used multiple password spraying attacks against victim's remote services to obtain valid user and administrator accounts.", "S0488": " CrackMapExec  : CrackMapExec can brute force credential authentication by using a supplied list of usernames and a single password.", "G0032": " Lazarus Group  : Lazarus Group malware attempts to connect to Windows shares for lateral movement by using a generated list of usernames, which center around permutations of the username Administrator, and weak passwords.", "G0077": " Leafminer  : Leafminer used a tool called Total SMB BruteForcer to perform internal password spraying.", "S0362": " Linux Rabbit  : Linux Rabbit brute forces SSH passwords in order to attempt to gain access and install its malware onto the server. ", "S0413": " MailSniper  : MailSniper can be used for password spraying against Exchange and Office 365.", "G0034": " Sandworm Team  : Sandworm Team has used a script to attempt RPC authentication against a number of hosts. ", "G0122": " Silent Librarian  : Silent Librarian has used collected lists of names and e-mail accounts to use in password spraying attacks against private sector targets."}, "id": "T1110.003", "subtechniqueof": "T1110", "tactics": ["Credential Access"], "platforms": ["Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-565"], "contributors": ["John Strand; Microsoft Threat Intelligence Center (MSTIC)"], "version": "1.2", "created": "11 February 2020", "lastmodified": "06 April 2021"}, {"techniquename": "Password Cracking", "detection": "It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network. Consider focusing efforts on detecting other adversary behavior used to acquire credential materials, such as  or .", "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. OS Credential Dumping is used to obtain password hashes, this may only get an adversary so far when Pass the Hash is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services.", "M1027": " Password Policies  : Refer to NIST guidelines when creating password policies. "}, "procedureexamples": {"G0022": " APT3  : APT3 has been known to brute force password hashes to be able to leverage plain text credentials.", "G0096": " APT41  : APT41 performed password brute-force attacks on the local admin account.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 dropped and executed tools used for password cracking, including Hydra and CrackMapExec.", "G0037": " FIN6  : FIN6 has extracted password hashes from ntds.dit to crack offline.", "S0056": " Net Crawler  : Net Crawler uses a list of known credentials gathered through credential dumping to guess passwords to accounts as it spreads throughout a network."}, "id": "T1110.002", "subtechniqueof": "T1110", "tactics": ["Credential Access"], "platforms": ["Azure AD, Linux, Office 365, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-55"], "version": "1.1", "created": "11 February 2020", "lastmodified": "16 September 2020"}, {"techniquename": "Credential Stuffing", "detection": "Monitor authentication logs for system and application login failures of . If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.", "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.", "mitigations": {"M1036": " Account Use Policies  : Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out.", "M1032": " Multi-factor Authentication  : Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services.", "M1027": " Password Policies  : Refer to NIST guidelines when creating password policies. ", "M1018": " User Account Management  : Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."}, "procedureexamples": {"G0114": " Chimera  : Chimera has used credential stuffing against victim's remote services to obtain valid accounts.", "S0266": " TrickBot  : TrickBot uses brute-force attack against RDP with rdpscanDll module."}, "id": "T1110.004", "subtechniqueof": "T1110", "tactics": ["Credential Access"], "platforms": ["Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-600"], "contributors": ["Anastasios Pingios; Diogo Fernandes"], "version": "1.2", "created": "11 February 2020", "lastmodified": "06 April 2021"}, {"techniquename": "Reduce Key Space", "detection": "There is no documented method for defenders to directly identify behaviors that reduce encryption key space. Detection efforts may be focused on closely related adversary behaviors, such as  and . Some detection methods require vendor support to aid in investigation.", "description": "Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.Adversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.Adversaries may modify the key size used and other encryption parameters using specialized commands in a Network Device CLI introduced to the system through Modify System Image to change the configuration of the device. ", "id": "T1600.001", "subtechniqueof": "T1600", "tactics": ["Defense Evasion"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "19 October 2020", "lastmodified": "21 October 2020"}, {"techniquename": "Disable Crypto Hardware", "detection": "There is no documented method for defenders to directly identify behaviors that disable cryptographic hardware. Detection efforts may be focused on closely related adversary behaviors, such as  and . Some detection methods require vendor support to aid in investigation.", "description": "Adversaries disable a network device\u2019s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.Many network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of Modify System Image, forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., Reduce Key Space). ", "id": "T1600.002", "subtechniqueof": "T1600", "tactics": ["Defense Evasion"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "19 October 2020", "lastmodified": "21 October 2020"}, {"techniquename": "XSL Script Processing", "detection": "Use process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. Compare recent invocations of these utilities with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity (ex: URL command line arguments, creation of external network connections, loading of DLLs associated with scripting).   Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded.The presence of msxsl.exe or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.", "description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe)  can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files.  Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files.  Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.Command-line examples:Another variation of this technique, dubbed \"Squiblytwo\", involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file. This technique can also execute local/remote scripts and, similar to its Regsvr32/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch.Command-line examples:", "mitigations": {"M1038": " Execution Prevention  : If msxsl.exe is unnecessary, then block its execution to prevent abuse by adversaries."}, "procedureexamples": {"S0373": " Astaroth  : Astaroth executes embedded JScript or VBScript in an XSL stylesheet located on a remote domain. ", "G0080": " Cobalt Group  : Cobalt Group used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file.", "G0126": " Higaisa  : Higaisa used an XSL file to run VBScript code."}, "id": "T1220", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["Windows"], "systemrequirements": ["Microsoft Core XML Services (MSXML) or access to wmic.exe"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Application control, Digital Certificate Validation"], "contributors": ["Avneet Singh; Casey Smith; Praetorian"], "version": "1.2", "created": "17 October 2018", "lastmodified": "09 February 2021"}, {"techniquename": "Adversary-in-the-Middle", "detection": "Monitor network traffic for anomalies associated with known AiTM behavior. Consider monitoring for modifications to system configuration files involved in shaping network traffic flow.", "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.Adversaries may leverage the AiTM position to attempt to modify traffic, such as in Transmitted Data Manipulation. Adversaries can also stop traffic from flowing to the appropriate destination, causing denial of service.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable legacy network protocols that may be used   to intercept network traffic if applicable, especially those that are not needed within an environment.", "M1041": " Encrypt Sensitive Information  : Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS.", "M1037": " Filter Network Traffic  : Use network appliances and host-based security software to block network traffic that is not necessary within the environment, such as legacy protocols that may be leveraged for AiTM conditions.", "M1035": " Limit Access to Resource Over Network  : Limit access to network infrastructure and resources that can be used to reshape traffic or otherwise produce AiTM conditions.", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that can identify traffic patterns indicative of AiTM activity can be used to mitigate activity at the network level.", "M1030": " Network Segmentation  : Network segmentation can be used to isolate infrastructure components that do not require broad network access. This may mitigate, or at least alleviate, the scope of AiTM activity.", "M1017": " User Training  : Train users to be suspicious about certificate errors. Adversaries may use their own certificates in an attempt to intercept HTTPS traffic. Certificate errors may arise when the application\u2019s certificate does not match the one expected by the host."}, "procedureexamples": {"S0281": " Dok  : Dok proxies web traffic to potentially monitor and alter victim HTTP(S) traffic.", "G0094": " Kimsuky  : Kimsuky has used modified versions of PHProxy to examine web traffic between the victim and the accessed website."}, "id": "T1557", "subtechniques": ["T1557.001", "T1557.002"], "tactics": ["Credential Access", "Collection"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-94"], "contributors": ["Daniil Yugoslavskiy, @yugoslavskiy, Atomic Threat Coverage project"], "version": "2.0", "created": "11 February 2020", "lastmodified": "28 September 2021"}, {"techniquename": "LLMNR/NBT-NS Poisoning and SMB Relay", "detection": "Monitor  for changes to the \"EnableMulticast\" DWORD value. A value of \"0\" indicates LLMNR is disabled. Monitor for traffic on ports UDP 5355 and UDP 137 if LLMNR/NetBIOS is disabled by security policy.Deploy an LLMNR/NBT-NS spoofing detection tool. Monitoring of Windows event logs for event IDs 4697 and 7045 may help in detecting successful relay techniques.", "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.  Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. Several tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder.   ", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable LLMNR and NetBIOS in local computer security settings or by group policy if they are not needed within an environment. ", "M1037": " Filter Network Traffic  : Use host-based security software to block LLMNR/NetBIOS traffic. Enabling SMB Signing can stop NTLMv2 relay attacks.", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that can identify traffic patterns indicative of AiTM activity can be used to mitigate activity at the network level.", "M1030": " Network Segmentation  : Network segmentation can be used to isolate infrastructure components that do not require broad network access. This may mitigate, or at least alleviate, the scope of AiTM activity."}, "procedureexamples": {"S0363": " Empire  : Empire can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks.", "S0357": " Impacket  : Impacket modules like ntlmrelayx and smbrelayx can be used in conjunction with Network Sniffing and LLMNR/NBT-NS Poisoning and SMB Relay to gather NetNTLM credentials for Brute Force or relay attacks that can gain code execution.", "S0378": " PoshC2  : PoshC2 can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks.", "S0192": " Pupy  : Pupy can sniff plaintext network credentials and use NBNS Spoofing to poison name services.", "S0174": " Responder  : Responder is used to poison name services to gather hashes and credentials from systems within a local network.", "G0102": " Wizard Spider  : Wizard Spider has used the Invoke-Inveigh PowerShell cmdlets, likely for name service poisoning."}, "id": "T1557.001", "subtechniqueof": "T1557", "tactics": ["Credential Access", "Collection"], "platforms": ["Windows"], "permissionsrequired": ["User"], "contributors": ["Eric Kuehn, Secure Ideas; Matthew Demaske, Adaptforward"], "version": "1.2", "created": "11 February 2020", "lastmodified": "28 September 2021"}, {"techniquename": "ARP Cache Poisoning", "detection": "Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.", "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address. Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.Adversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Consider disabling updating the ARP cache on gratuitous ARP replies.", "M1041": " Encrypt Sensitive Information  : Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS.", "M1037": " Filter Network Traffic  : Consider enabling DHCP Snooping and Dynamic ARP Inspection on switches to create mappings between IP addresses requested via DHCP and ARP tables and tie the values to a port on the switch that may block bogus traffic.", "M1035": " Limit Access to Resource Over Network  : Create static ARP entries for networked devices. Implementing static ARP entries may be infeasible for large networks.", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that can identify traffic patterns indicative of AiTM activity can be used to mitigate activity at the network level.", "M1017": " User Training  : Train users to be suspicious about certificate errors. Adversaries may use their own certificates in an attempt to intercept HTTPS traffic. Certificate errors may arise when the application\u2019s certificate does not match the one expected by the host."}, "procedureexamples": {"G0003": " Cleaver  : Cleaver has used custom tools to facilitate ARP cache poisoning."}, "id": "T1557.002", "subtechniqueof": "T1557", "tactics": ["Credential Access", "Collection"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Jon Sternstein, Stern Security"], "version": "1.1", "created": "15 October 2020", "lastmodified": "28 July 2021"}, {"techniquename": "Weaken Encryption", "detection": "There is no documented method for defenders to directly identify behaviors that weaken encryption. Detection efforts may be focused on closely related adversary behaviors, such as . Some detection methods require vendor support to aid in investigation.", "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. Encryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.Adversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as Modify System Image, Reduce Key Space, and Disable Crypto Hardware, an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. ", "id": "T1600", "subtechniques": ["T1600.001", "T1600.002"], "tactics": ["Defense Evasion"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "defensebypassed": ["Encryption"], "version": "1.0", "created": "19 October 2020", "lastmodified": "21 October 2020"}, {"techniquename": "Time Based Evasion", "detection": "Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. ", "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.", "procedureexamples": {"S0584": " AppleJeus  : AppleJeus has waited a specified time before downloading a second stage payload.", "S0642": " BADFLICK  : BADFLICK has delayed communication to the actor-controlled IP address by 5 minutes.", "S0534": " Bazar  : Bazar can use a timer to delay execution of core functionality.", "S0574": " BendyBear  : BendyBear can check for analysis environments and signs of debugging using the Windows API  call. ", "S0611": " Clop  : Clop has used the  command to avoid sandbox detection.", "S0115": " Crimson  : Crimson can determine when it has been installed on a host for at least 15 days before downloading the final payload.", "S0554": " Egregor  : Egregor can perform a  long sleep (greater than or equal to 3 minutes) to evade detection.", "S0396": " EvilBunny  : EvilBunny has used time measurements from 3 different APIs before and after performing sleep operations to check and abort if the malware is running in a sandbox.", "S0512": " FatDuke  : FatDuke can turn itself on or off at random intervals.", "S0493": " GoldenSpy  : GoldenSpy's installer has delayed installation of GoldenSpy for two hours after it reaches a victim system.  ", "S0588": " GoldMax  : GoldMax has set an execution trigger date and time, stored as an ASCII Unix/Epoch time value.", "S0632": " GrimAgent  : GrimAgent can sleep for 195 - 205 seconds after payload execution and before deleting its task.", "S0561": " GuLoader  : GuLoader has the ability to perform anti-debugging based on time checks, API calls, and CPUID.", "S0513": " LiteDuke  : LiteDuke can wait 30 seconds before executing additional code if security software is detected.", "S0447": " Lokibot  : Lokibot has performed a time-based anti-debug check before downloading its third stage.", "S0439": " Okrum  : Okrum's loader can detect presence of an emulator by using two calls to GetTickCount API, and checking whether the time has been accelerated.", "S0626": " P8RAT  : P8RAT has the ability to \"sleep\" for a specified time to evade detection.", "S0453": " Pony  : Pony has delayed execution using a built-in function to avoid detection and analysis.    ", "S0650": " QakBot  : The QakBot dropper can delay dropping the payload to evade detection.", "S0565": " Raindrop  : After initial installation, Raindrop runs a computation to delay execution.", "S0627": " SodaMaster  : SodaMaster has the ability to put itself to \"sleep\" for a specified time.", "S0559": " SUNBURST  : SUNBURST remained dormant after initial access for a period of up to two weeks.", "S0595": " ThiefQuest  : ThiefQuest invokes  call to check the system's time, executes a  command, invokes a second  call, and then compares the time difference between the two  calls and the amount of time the system slept to identify the sandbox.", "S0266": " TrickBot  : TrickBot has used  and file I/O loops to delay process execution as part of API hammering.", "S0386": " Ursnif  : Ursnif has used a 30 minute delay after execution to evade sandbox monitoring tools.", "S0658": " XCSSET  : Using the machine's local time, XCSSET waits 43200 seconds (12 hours) from the initial creation timestamp of a specific file, . After the elapsed time, XCSSET executes additional modules."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1497.003", "subtechniqueof": "T1497", "tactics": ["Defense Evasion", "Discovery"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Anti-virus, Host forensic analysis, Signature-based detection, Static File Analysis"], "contributors": ["Deloitte Threat Library Team; Jeff Felling, Red Canary; Jorge Orchilles, SCYTHE; Ruben Dodge, @shotgunner101"], "version": "1.2", "created": "06 March 2020", "lastmodified": "15 October 2021"}, {"techniquename": "System Checks", "detection": "Virtualization/sandbox related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "procedureexamples": {"S0373": " Astaroth  : Astaroth can check for Windows product ID's used by sandboxes and usernames and disk serial numbers associated with analyst environments.", "S0438": " Attor  : Attor can detect whether it is executed in some virtualized or emulated environment by searching for specific artifacts, such as communication with I/O ports and using VM-specific instructions.", "S0337": " BadPatch  : BadPatch attempts to detect if it is being run in a Virtual Machine (VM) using a WMI query for disk drive name, BIOS, and motherboard information. ", "S0657": " BLUELIGHT  : BLUELIGHT can check to see if the infected machine has VM tools running.", "S0527": " CSPY Downloader  : CSPY Downloader can search loaded modules, PEB structure, file paths, Registry keys, and memory to determine if it is being debugged or running in a virtual environment.", "G0012": " Darkhotel  : Darkhotel malware has used a series of checks to determine if it's being analyzed; checks include the length of executable names, if a filename ends with , and if the program is executed from the root of the C:\\ drive, as well as checks for sandbox-related libraries.", "S0354": " Denis  : Denis ran multiple system checks, looking for processor and register characteristics, to evade emulation and analysis.", "S0024": " Dyre  : Dyre can detect sandbox analysis environments by inspecting the process list and Registry.", "S0396": " EvilBunny  : EvilBunny's dropper has checked the number of processes and the length and strings of its own file name to identify if the malware is in a sandbox environment.    ", "G0120": " Evilnum  : Evilnum has used a component called TerraLoader to check certain hardware and file information to detect sandboxed environments. ", "S0182": " FinFisher  : FinFisher obtains the hardware device list and checks if the MD5 of the vendor ID is equal to a predefined list in order to check for sandbox/virtualized environments.", "G0101": " Frankenstein  : Frankenstein has used WMI queries to check if various security applications were running, including VMWare and Virtualbox.", "S0588": " GoldMax  : GoldMax will check if it is being run in a virtualized environment by comparing the collected MAC address to .", "S0531": " Grandoreiro  : Grandoreiro can detect VMWare via its I/O port and Virtual PC via the  instruction.", "S0237": " GravityRAT  : GravityRAT uses WMI to check the BIOS and manufacturer information for strings like \"VMWare\", \"Virtual\", and \"XEN\" and another WMI request to get the current temperature of the hardware to determine if it's a virtual machine environment. ", "S0561": " GuLoader  : GuLoader has the ability to perform anti-VM and anti-sandbox checks using string hashing, the API call , and checking for Qemu guest agent.", "S0260": " InvisiMole  : InvisiMole can check for artifacts of VirtualBox, Virtual PC and VMware environment, and terminate itself if they are detected.", "S0532": " Lucifer  : Lucifer can check for specific usernames, computer names, device drivers, DLL's, and virtual devices associated with sandboxed environments and can enter an infinite loop and stop itself if any are detected.", "S0576": " MegaCortex  : MegaCortex has checked the number of CPUs in the system to avoid being run in a sandbox or emulator. ", "S0637": " NativeZone  : NativeZone has checked if Vmware or VirtualBox VM is running on a compromised host.", "S0644": " ObliqueRAT  : ObliqueRAT can halt execution if it identifies processes belonging to virtual machine software or analysis tools.", "G0049": " OilRig  : OilRig has used macros to verify if a mouse is connected to a compromised machine.", "S0439": " Okrum  : Okrum's loader can check the amount of physical memory and terminates itself if the host has less than 1.5 Gigabytes of physical memory in total.", "S0264": " OopsIE  : OopsIE performs several anti-VM and sandbox checks on the victim's machine. One technique the group has used was to perform a WMI query  to check the temperature to see if it\u2019s running in a virtual environment.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D has variants that check a number of system parameters to see if it is being run on real hardware or in a virtual machine environment, such as .", "S0626": " P8RAT  : P8RAT can check the compromised host for processes associated with VMware or VirtualBox environments.", "S0013": " PlugX  : PlugX checks if VMware tools is running in the background by searching for any process named \"vmtoolsd\". ", "S0428": " PoetRAT  : PoetRAT checked the size of the hard drive to determine if it was being run in a sandbox environment. In the event of sandbox detection, it would delete itself by overwriting the malware scripts with the contents of \"License.txt\" and exiting.", "S0192": " Pupy  : Pupy has a module that checks a number of indicators on the system to determine if its running on a virtual machine.", "S0650": " QakBot  : QakBot can check the compromised host for the presence of multiple executables associated with analysis tools and halt execution if any are found.", "S0332": " Remcos  : Remcos searches for Sandboxie and VMware on the system.", "S0270": " RogueRobin  : RogueRobin uses WMI to check BIOS version for VBOX, bochs, qemu, virtualbox, and vm to check for evidence that the script might be executing within an analysis environment. ", "S0240": " ROKRAT  : ROKRAT checks for sandboxing libraries.", "S0226": " Smoke Loader  : Smoke Loader scans processes to perform anti-VM checks. ", "S0627": " SodaMaster  : SodaMaster can check for the presence of the Registry key  before proceeding to its main functionality.    ", "S0559": " SUNBURST  : SUNBURST checked the domain name of the compromised host to verify it was running in a real environment.", "S0242": " SynAck  : SynAck checks its directory location in an attempt to avoid launching in a sandbox.", "S0595": " ThiefQuest  : ThiefQuest uses a function named  to perform anti-debugging logic. The function invokes  checking the returned value of . ThiefQuest also calls  with the  flag to prevent debugging.  ", "S0094": " Trojan.Karagany  : Trojan.Karagany can detect commonly used and generic virtualization platforms based primarily on drivers and file paths.", "S0333": " UBoatRAT  : UBoatRAT checks for virtualization software such as VMWare, VirtualBox, or QEmu on the compromised machine.", "S0612": " WastedLocker  : WastedLocker checked if UCOMIEnumConnections and IActiveScriptParseProcedure32 Registry keys were detected as part of its anti-analysis technique.", "S0248": " yty  : yty has some basic anti-sandbox detection that tries to detect Virtual PC, Sandboxie, and VMware. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1497.001", "subtechniqueof": "T1497", "tactics": ["Defense Evasion", "Discovery"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Anti-virus, Host forensic analysis, Signature-based detection, Static File Analysis"], "contributors": ["Deloitte Threat Library Team"], "version": "2.1", "created": "06 March 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Pass the Ticket", "detection": "Audit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity.Event ID 4769 is generated on the Domain Controller when using a golden ticket after the KRBTGT password has been reset twice, as mentioned in the mitigation section. The status code 0x1F indicates the action has failed due to \"Integrity check on decrypted field failed\" and indicates misuse by a previously invalidated golden ticket.", "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.When preforming PtT, valid Kerberos tickets for Valid Accounts are captured by OS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.A Silver Ticket can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).A Golden Ticket can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.Adversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. Pass the Hash) while also using the password hash to create a valid Kerberos ticket.", "mitigations": {"M1015": " Active Directory Configuration  : To contain the impact of a previously generated golden ticket, reset the built-in KRBTGT account password twice, which will invalidate any existing golden tickets that have been created with the KRBTGT hash and other Kerberos tickets derived from it. For each domain, change the KRBTGT account password once, force replication, and then change the password a second time. Consider rotating the KRBTGT account password every 180 days.", "M1027": " Password Policies  : Ensure that local administrator accounts have complex, unique passwords.", "M1026": " Privileged Account Management  : Limit domain admin account permissions to domain controllers and limited servers. Delegate other admin functions to separate accounts.", "M1018": " User Account Management  : Do not allow a user to be a local administrator for multiple systems."}, "procedureexamples": {"G0016": " APT29  : APT29 used Kerberos ticket attacks for lateral movement.", "G0050": " APT32  : APT32 successfully gained remote access by using pass the ticket.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has created forged Kerberos Ticket Granting Ticket (TGT) and Ticket Granting Service (TGS) tickets to maintain administrative access.", "S0002": " Mimikatz  : Mimikatz\u2019s  and  modules implement the three steps required to extract the krbtgt account hash and create/use Kerberos tickets.", "S0192": " Pupy  : Pupy can also perform pass-the-ticket.", "S0053": " SeaDuke  : Some SeaDuke samples have a module to use pass the ticket with Kerberos for authentication."}, "id": "T1550.003", "subtechniqueof": "T1550", "tactics": ["Defense Evasion", "Lateral Movement"], "platforms": ["Windows"], "systemrequirements": ["Kerberos authentication enabled"], "defensebypassed": ["System Access Controls"], "capecid": ["CAPEC-645"], "contributors": ["Ryan Becwar; Vincent Le Toux"], "version": "1.1", "created": "30 January 2020", "lastmodified": "31 August 2021"}, {"techniquename": "User Activity Based Checks", "detection": "User activity-based checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. ", "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks  , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro  or waiting for a user to double click on an embedded image to activate. ", "procedureexamples": {"G0012": " Darkhotel  : Darkhotel has used malware that repeatedly checks the mouse cursor position to determine if a real user is on the system.", "G0046": " FIN7  : FIN7 used images embedded into document lures that only activate the payload when a user double clicks to avoid sandboxes.", "S0439": " Okrum  : Okrum loader only executes the payload after the left mouse button has been pressed at least three times, in order to avoid being executed within virtualized or emulated environments. ", "S0543": " Spark  : Spark has used a splash screen to check whether an user actively clicks on the screen before running malicious code. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1497.002", "subtechniqueof": "T1497", "tactics": ["Defense Evasion", "Discovery"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Anti-virus, Host forensic analysis, Signature-based detection, Static File Analysis"], "contributors": ["Deloitte Threat Library Team"], "version": "1.1", "created": "06 March 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Application Access Token", "detection": "Monitor access token activity for abnormal use and permissions granted to unusual or suspicious applications and APIs.", "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS). OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.For example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded. With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.", "mitigations": {"M1047": " Audit  : Administrators can leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access.", "M1041": " Encrypt Sensitive Information  : File encryption should be enforced across email communications containing sensitive information that may be obtained through access to email services.", "M1021": " Restrict Web-Based Content  : Update corporate policies to restrict what types of third-party applications may be added to any online service or tool that is linked to the company's information, accounts or network (e.g., Google, Microsoft, Dropbox, Basecamp, GitHub). However, rather than providing high-level guidance on this, be extremely specific\u2014include a list of per-approved applications and deny all others not on the list. Administrators may also block end-user consent through administrative portals, such as the Azure Portal, disabling users from authorizing third-party apps through OAuth and forcing administrative consent."}, "procedureexamples": {"G0007": " APT28  : APT28 has used several malicious applications that abused OAuth access tokens to gain access to target email accounts, including Gmail and Yahoo Mail."}, "id": "T1550.001", "subtechniqueof": "T1550", "tactics": ["Defense Evasion", "Lateral Movement"], "platforms": ["Google Workspace, Office 365, SaaS"], "defensebypassed": ["System Access Controls"], "capecid": ["CAPEC-593"], "contributors": ["Jeff Sakowicz, Microsoft Identity Developer Platform Services (IDPM Services); Mark Wee; Saisha Agrawal, Microsoft Threat Intelligent Center (MSTIC); Shailesh Tiwary (Indian Army)"], "version": "1.2", "created": "30 January 2020", "lastmodified": "02 September 2021"}, {"techniquename": "Web Session Cookie", "detection": "Monitor for anomalous access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.", "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through Steal Web Session Cookie or Web Cookies, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.", "mitigations": {"M1054": " Software Configuration  : Configure browsers or tasks to regularly delete persistent cookies."}, "procedureexamples": {"G0016": " APT29  : APT29 used a forged  cookie to bypass MFA set on an email account."}, "id": "T1550.004", "subtechniqueof": "T1550", "tactics": ["Defense Evasion", "Lateral Movement"], "platforms": ["Google Workspace, IaaS, Office 365, SaaS"], "defensebypassed": ["System Access Controls"], "capecid": ["CAPEC-60"], "contributors": ["Jen Burns, HubSpot; Johann Rehberger"], "version": "1.3", "created": "30 January 2020", "lastmodified": "12 October 2021"}, {"techniquename": "Virtualization/Sandbox Evasion", "detection": "Virtualization, sandbox, user activity, and related discovery techniques will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.Adversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has he ability to perform anti-sandboxing and anti-virtualization checks.", "S0534": " Bazar  : Bazar can attempt to overload sandbox analysis by sending 1550 calls to .", "S0268": " Bisonal  : Bisonal checks if the malware was executed within a VMware environment.", "S0484": " Carberp  : Carberp has removed various hooks before installing the trojan or bootkit to evade sandbox analysis or other analysis software.", "S0023": " CHOPSTICK  : CHOPSTICK  includes runtime checks to identify an analysis environment and prevent execution on it.", "S0046": " CozyCar  : Some versions of CozyCar will check to ensure it is not being executed inside a virtual machine or a known malware analysis sandbox environment. If it detects that it is, it will exit.", "G0012": " Darkhotel  : Darkhotel malware has employed just-in-time decryption of strings to evade sandbox detection.", "S0554": " Egregor  : Egregor has used multiple anti-analysis and anti-sandbox techniques to prevent automated analysis by sandboxes. ", "S0499": " Hancitor  : Hancitor has used a macro to check that an ActiveDocument shape object in the lure message is present. If this object is not found, the macro will exit without downloading additional payloads.", "S0455": " Metamorfo  : Metamorfo has embedded a \"vmdetect.exe\" executable to identify virtual machines at the beginning of execution. ", "S0148": " RTM  : RTM can detect if it is running within a sandbox or other virtualized analysis environment.   ", "S0380": " StoneDrill  : StoneDrill has used several anti-emulation techniques to prevent automated analysis by emulators or sandboxes.  "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1497", "subtechniques": ["T1497.001", "T1497.002", "T1497.003"], "tactics": ["Defense Evasion", "Discovery"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Anti-virus, Host forensic analysis, Signature-based detection, Static File Analysis"], "contributors": ["Deloitte Threat Library Team; Sunny Neo"], "version": "1.3", "created": "17 April 2019", "lastmodified": "18 October 2021"}, {"techniquename": "Use Alternate Authentication Material", "detection": "Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).", "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.", "mitigations": {"M1026": " Privileged Account Management  : Limit credential overlap across systems to prevent the damage of credential compromise and reduce the adversary's ability to perform Lateral Movement between systems.", "M1018": " User Account Management  : Enforce the principle of least-privilege. Do not allow a domain user to be in the local administrator group on multiple systems."}, "procedureexamples": {"G0016": " APT29  : APT29 used forged SAML tokens that allowed the actors to impersonate users and bypass MFA, enabling APT29 to access enterprise cloud applications and services."}, "id": "T1550", "subtechniques": ["T1550.001", "T1550.002", "T1550.003", "T1550.004"], "tactics": ["Defense Evasion", "Lateral Movement"], "platforms": ["Google Workspace, IaaS, Office 365, SaaS, Windows"], "defensebypassed": ["System Access Controls"], "version": "1.2", "created": "30 January 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Pass the Hash", "detection": "Audit all logon and credential use events and review for discrepancies. Unusual remote logins that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. NTLM LogonType 3 authentications that are not associated to a domain login and are not anonymous logins are suspicious.Event ID 4768 and 4769 will also be generated on the Domain Controller when a user requests a new ticket granting ticket or service ticket. These events combined with the above activity may be indicative of an overpass the hash attempt.", "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.When performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.Adversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.", "mitigations": {"M1026": " Privileged Account Management  : Limit credential overlap across systems to prevent the damage of credential compromise and reduce the adversary's ability to perform Lateral Movement between systems.", "M1051": " Update Software  : Apply patch KB2871997 to Windows 7 and higher systems to limit the default access of accounts in the local administrator group. ", "M1052": " User Account Control  : Enable pass the hash mitigations to apply UAC restrictions to local accounts on network logon. The associated Registry key is located .Through GPO: Computer Configuration > [Policies] > Administrative Templates > SCM: Pass the Hash Mitigations: Apply UAC restrictions to local accounts on network logons.", "M1018": " User Account Management  : Do not allow a domain user to be in the local administrator group on multiple systems."}, "procedureexamples": {"G0006": " APT1  : The APT1 group is known to have used pass the hash.", "G0007": " APT28  : APT28 has used pass the hash for lateral movement.", "G0050": " APT32  : APT32 has used pass the hash for lateral movement.", "G0114": " Chimera  : Chimera has dumped password hashes for use in pass the hash authentication attacks.", "S0154": " Cobalt Strike  : Cobalt Strike can perform pass the hash.", "S0488": " CrackMapExec  : CrackMapExec can pass the hash to authenticate via SMB.", "S0363": " Empire  : Empire can perform pass the hash attacks.", "G0093": " GALLIUM  : GALLIUM used dumped hashes to authenticate to other machines via pass the hash.", "S0376": " HOPLIGHT  : HOPLIGHT has been observed loading several APIs associated with Pass the Hash.  ", "G0094": " Kimsuky  : Kimsuky has used pass the hash for authentication to remote access software used in C2.", "S0002": " Mimikatz  : Mimikatz's  module can impersonate a user, with only a password hash, to execute arbitrary commands.", "G0014": " Night Dragon  : Night Dragon used pass-the-hash tools to gain usernames and passwords.", "S0122": " Pass-The-Hash Toolkit  : Pass-The-Hash Toolkit can perform pass the hash.", "S0378": " PoshC2  : PoshC2 has a number of modules that leverage pass the hash for lateral movement."}, "id": "T1550.002", "subtechniqueof": "T1550", "tactics": ["Defense Evasion", "Lateral Movement"], "platforms": ["Windows"], "defensebypassed": ["System Access Controls"], "capecid": ["CAPEC-644"], "contributors": ["Blake Strom, Microsoft 365 Defender; Travis Smith, Tripwire"], "version": "1.1", "created": "30 January 2020", "lastmodified": "31 August 2021"}, {"techniquename": "Trusted Developer Utilities Proxy Execution", "detection": "Monitor for abnormal presence of these or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.Use process monitoring to monitor the execution and arguments of from developer utilities that may be abused. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. It is likely that these utilities will be used by software developers or for other software development related tasks, so if it exists and is used outside of that context, then the event may be suspicious. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed.", "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Specific developer utilities may not be necessary within a given environment and should be removed if not used.", "M1038": " Execution Prevention  : Certain developer utilities should be blocked or restricted if not required."}, "id": "T1127", "subtechniques": ["T1127.001"], "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Application control"], "contributors": ["Casey Smith; Matthew Demaske, Adaptforward"], "version": "1.2", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "MSBuild", "detection": "Use process monitoring to monitor the execution and arguments of MSBuild.exe. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed.", "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.Adversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file. MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : MSBuild.exe may not be necessary within an environment and should be removed if not being used.", "M1038": " Execution Prevention  : Use application control configured to block execution of  if it is not required for a given system or network to prevent potential misuse by adversaries. For example, in Windows 10 and Windows Server 2016 and above, Windows Defender Application Control (WDAC) policy rules may be applied to block the  application and to prevent abuse."}, "procedureexamples": {"S0363": " Empire  : Empire can use built-in modules to abuse trusted utilities like MSBuild.exe.", "G0101": " Frankenstein  : Frankenstein has used MSbuild to execute an actor-created file.", "S0013": " PlugX  : A version of PlugX loads as shellcode within a .NET Framework project using msbuild.exe, presumably to bypass application control techniques."}, "id": "T1127.001", "subtechniqueof": "T1127", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "systemrequirements": [".NET Framework version 4 or higher"], "contributors": ["@ionstorm; Carrie Roberts, @OrOneEqualsOne"], "version": "1.2", "created": "27 March 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Unused/Unsupported Cloud Regions", "detection": "Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.", "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity.An example of adversary use of unused AWS regions is to mine cryptocurrency through Resource Hijacking, which can cost organizations substantial amounts of money over time depending on the processing power used.", "mitigations": {"M1054": " Software Configuration  : Cloud service providers may allow customers to deactivate unused regions."}, "id": "T1535", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["IaaS"], "permissionsrequired": ["User"], "contributors": ["Netskope"], "version": "1.1", "created": "04 September 2019", "lastmodified": "22 April 2021"}, {"techniquename": "Code Signing Policy Modification", "detection": "Monitor processes and command-line arguments for actions that could be taken to modify the code signing policy of a system, such as . Consider monitoring for modifications made to Registry keys associated with code signing policies, such as . Modifications to the code signing policy of a system are likely to be rare.", "description": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. Some of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS. Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.Adversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, Modify Registry, rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory. Examples of commands that can modify the code signing policy of a system include  on Windows and  on macOS. Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.To gain access to kernel memory to modify variables related to signature checks, such as modifying  to disable Driver Signature Enforcement, adversaries may conduct Exploitation for Privilege Escalation using a signed, but vulnerable driver.", "mitigations": {"M1046": " Boot Integrity  : Use of Secure Boot may prevent some implementations of modification to code signing policies.", "M1026": " Privileged Account Management  : Limit the usage of local administrator and domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries.", "M1024": " Restrict Registry Permissions  : Ensure proper permissions are set for the Registry to prevent users from modifying keys related to code signing policies."}, "procedureexamples": {"G0087": " APT39  : APT39 has used malware to turn off the  feature which ensures only signed DLLs can be run on Windows.", "S0089": " BlackEnergy  : BlackEnergy has enabled the  boot configuration option to facilitate loading of a driver component.", "S0009": " Hikit  : Hikit has attempted to disable driver signing verification by tampering with several Registry keys prior to the loading of a rootkit driver component.", "G0010": " Turla  : Turla has modified variables in kernel memory to turn off Driver Signature Enforcement after exploiting vulnerabilities that obtained kernel mode privileges."}, "id": "T1553.006", "subtechniqueof": "T1553", "tactics": ["Defense Evasion"], "platforms": ["Windows, macOS"], "permissionsrequired": ["Administrator"], "defensebypassed": ["Application control, Digital Certificate Validation, User Mode Signature Validation"], "contributors": ["Abel Morales, Exabeam"], "version": "1.0", "created": "23 April 2021", "lastmodified": "26 April 2021"}, {"techniquename": "Template Injection", "detection": "Analyze process behavior to determine if an Office application is performing actions, such as opening network connections, reading files, spawning abnormal child processes (ex: ), or other suspicious actions that could relate to post-compromise behavior.", "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. Properties within parts may reference shared public resources accessed via online URLs. For example, template properties reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.Adversaries may abuse this technology to initially conceal malicious code to be executed via documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.  These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.  Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. This technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.   ", "mitigations": {"M1049": " Antivirus/Antimalware  : Network/Host intrusion prevention systems, antivirus, and detonation chambers can be employed to prevent documents from fetching and/or executing malicious payloads.", "M1042": " Disable or Remove Feature or Program  : Consider disabling Microsoft Office macros/active content to prevent the execution of malicious payloads in documents , though this setting may not mitigate the Forced Authentication use for this technique.", "M1031": " Network Intrusion Prevention  : Network/Host intrusion prevention systems, antivirus, and detonation chambers can be employed to prevent documents from fetching and/or executing malicious payloads.", "M1017": " User Training  : Train users to identify social engineering techniques and spearphishing emails."}, "procedureexamples": {"G0007": " APT28  : APT28 used weaponized Microsoft Word documents abusing the remote template function to retrieve a malicious macro. ", "S0631": " Chaes  : Chaes changed the template target of the settings.xml file embedded in the Word document and populated that field with the downloaded URL of the next payload. ", "G0079": " DarkHydrus  : DarkHydrus used an open-source tool, Phishery, to inject malicious remote template URLs into Microsoft Word documents and then sent them to victims to enable Forced Authentication.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 has injected SMB URLs into malicious Word spearphishing attachments to initiate Forced Authentication.", "G0101": " Frankenstein  : Frankenstein has used trojanized documents that retrieve remote templates from an adversary-controlled website.", "G0047": " Gamaredon Group  : Gamaredon Group has used DOCX files to download malicious DOT document templates. Gamaredon Group can also inject malicious macros or remote templates into documents already present on compromised systems.", "G0100": " Inception  : Inception has used decoy documents to load malicious remote payloads via HTTP.", "G0081": " Tropic Trooper  : Tropic Trooper delivered malicious documents with the XLSX extension, typically used by OpenXML documents, but the file itself was actually an OLE (XLS) document."}, "id": "T1221", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Static File Analysis"], "contributors": ["Brian Wiltse @evalstrings; Patrick Campbell, @pjcampbe11"], "version": "1.2", "created": "17 October 2018", "lastmodified": "29 April 2020"}, {"techniquename": "Gatekeeper Bypass", "detection": "The removal of the  flag by a user instead of the operating system is a suspicious action and should be examined further. Monitor and investigate attempts to modify extended file attributes with utilities such as . Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Monitor software update frameworks that strip the  flag when performing updates. Review  values under the  entry in an application's  file (required by every application).  under  indicates that an application does not use the quarantine flag. Unsandboxed applications with an unspecified  entry will default to not setting the quarantine flag. QuarantineEvents is a SQLite database containing a list of all files assigned the  attribute, located at . Each event contains the corresponding UUID, timestamp, application, Gatekeeper score, and decision if it was allowed.", "description": "Adversaries may modify file attributes that signify programs are from untrusted sources to subvert Gatekeeper controls in macOS. When documents, applications, or programs are downloaded an extended attribute (xattr) called  can be set on the file by the application performing the download. This attribute, also known as a quarantine flag, is read by Apple's Gatekeeper defense program when the file is run and provides a prompt to the user to allow or deny execution. Gatekeeper also monitors an application's usage of dynamic libraries (dylibs) loaded outside the application folder on any quarantined binary, often using the  function. If the quarantine flag is set in macOS 10.15+, Gatekeeper also checks for a notarization ticket and sends a cryptographic hash to Apple's servers to check for validity for all unsigned executables.The quarantine flag is an opt-in system and not imposed by macOS. If an application opts-in, a file downloaded from the Internet will be given a quarantine flag before being saved to disk. Any application or user with write permissions to the file can change or strip the quarantine flag. With elevated permission (sudo), this attribute can be removed from any file. The presence of the  quarantine flag can be checked with the xattr command . Similarly, this attribute can be recursively removed from all files in a folder using xattr, .Apps and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the  command do not set this flag. Additionally, it is possible to avoid setting this flag using Drive-by Compromise, which may bypass Gatekeeper. ", "mitigations": {"M1038": " Execution Prevention  : System settings can prevent applications from running that haven't been downloaded through the Apple Store which can help mitigate some of these issues. "}, "procedureexamples": {"S0369": " CoinTicker  : CoinTicker downloads the EggShell mach-o binary using curl, which does not set the quarantine flag.", "S0402": " OSX/Shlayer  : If running with elevated privileges, OSX/Shlayer uses the  command to disable Gatekeeper protection for a downloaded file. OSX/Shlayer also leveraged system links pointing to bash scripts in the downloaded DMG file to bypass Gatekeeper, a flaw patched in macOS 11.3 and later versions.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D uses the command  to remove the quarantine file attribute used by Gatekeeper and Notarization checks."}, "id": "T1553.001", "subtechniqueof": "T1553", "tactics": ["Defense Evasion"], "platforms": ["macOS"], "permissionsrequired": ["Administrator, User"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.1", "created": "05 February 2020", "lastmodified": "14 October 2021"}, {"techniquename": "Subvert Trust Controls", "detection": "Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers. Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries.  A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity.Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \"Hide Microsoft Entries\" and \"Hide Windows Entries\" are both deselected. Monitor and investigate attempts to modify extended file attributes with utilities such as . Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. ", "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct File and Directory Permissions Modification or Modify Registry in support of subverting these controls. Adversaries may also create or steal code signing certificates to acquire trust on target systems. ", "mitigations": {"M1038": " Execution Prevention  : System settings can prevent applications from running that haven't been downloaded through the Apple Store (or other legitimate repositories) which can help mitigate some of these issues. Also enable application control solutions such as AppLocker and/or Device Guard to block the loading of malicious content.", "M1028": " Operating System Configuration  : Windows Group Policy can be used to manage root certificates and the  value of  can be set to 1 to prevent non-administrator users from making further root installations into their own HKCU certificate store. ", "M1024": " Restrict Registry Permissions  : Ensure proper permissions are set for Registry hives to prevent users from modifying keys related to SIP and trust provider components. Components may still be able to be hijacked to suitable functions already present on disk if malicious modifications to Registry keys are not prevented.", "M1054": " Software Configuration  : HTTP Public Key Pinning (HPKP) is one method to mitigate potential Adversary-in-the-Middle situations where and adversary uses a mis-issued or fraudulent certificate to intercept encrypted communications by enforcing use of an expected certificate. "}, "id": "T1553", "subtechniques": ["T1553.001", "T1553.002", "T1553.003", "T1553.004", "T1553.005", "T1553.006"], "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Anti-virus, Application control, Autoruns Analysis, Digital Certificate Validation, Process whitelisting, User Mode Signature Validation, Windows User Account Control"], "version": "1.1", "created": "05 February 2020", "lastmodified": "14 October 2021"}, {"techniquename": "Code Signing", "detection": "Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.", "description": "Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.Code signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform.  Code signing certificates may be used to bypass security policies that require signed code to execute on a system. ", "procedureexamples": {"S0504": " Anchor  : Anchor has been signed with valid certificates to evade detection by security tools.", "S0584": " AppleJeus  : AppleJeus has used a valid digital signature from Sectigo to appear legitimate. ", "G0016": " APT29  : APT29 was able to get SUNBURST signed by SolarWinds code signing certificates by injecting the malware into the SolarWinds Orion software lifecycle.", "G0096": " APT41  : APT41 leveraged code-signing certificates to sign malware when targeting both gaming and non-gaming organizations.", "S0475": " BackConfig  : BackConfig has been signed with self signed digital certificates mimicking a legitimate software company.", "S0234": " Bandook  : Bandook was signed with valid Certum certificates. ", "S0534": " Bazar  : Bazar has been signed with fake certificates including those appearing to be from VB CORPORATE PTY. LTD.", "S0520": " BLINDINGCAN  : BLINDINGCAN has been signed with code-signing certificates such as CodeRipper.", "S0415": " BOOSTWRITE  : BOOSTWRITE has been signed by a valid CA.", "S0144": " ChChes  : ChChes samples were digitally signed with a certificate originally used by Hacking Team that was later leaked and subsequently revoked.", "S0611": " Clop  : Clop can use code signing to evade detection.", "S0154": " Cobalt Strike  : Cobalt Strike can use self signed Java applets to execute signed applet attacks.", "G0052": " CopyKittens  : CopyKittens digitally signed an executable with a stolen certificate from legitimate company AI Squared.", "S0527": " CSPY Downloader  : CSPY Downloader has come signed with revoked certificates.", "G0012": " Darkhotel  : Darkhotel has used code-signing certificates on its malware that are either forged due to weak keys or stolen. Darkhotel has also stolen certificates and signed backdoors and downloaders with them.", "S0187": " Daserf  : Some Daserf samples were signed with a stolen digital certificate.", "S0377": " Ebury  : Ebury has installed a self-signed RPM package mimicking the original system package on RPM based systems.", "S0624": " Ecipekac  : Ecipekac has used a valid, legitimate digital signature to evade detection.", "S0091": " Epic  : Turla has used valid digital certificates from Sysprint AG to sign its Epic dropper.", "G0037": " FIN6  : FIN6 has used Comodo code-signing certificates.    ", "G0046": " FIN7  : FIN7 has signed Carbanak payloads with legally purchased code signing certificates. FIN7 has also digitally signed their phishing documents, backdoors and other staging tools to bypass security controls.", "G0093": " GALLIUM  : GALLIUM has used stolen certificates to sign its tools including those from Whizzimo LLC.", "S0168": " Gazer  : Gazer versions are signed with various valid certificates; one was likely faked and issued by Comodo for \"Solid Loop Ltd,\" and another was issued for \"Ultimate Computer Support Ltd.\"", "S0342": " GreyEnergy  : GreyEnergy digitally signs the malware with a code-signing certificate.", "S0170": " Helminth  : Helminth samples have been signed with legitimate, compromised code signing certificates owned by software company AI Squared.", "G0072": " Honeybee  : Honeybee uses a dropper called MaoCheng that harvests a stolen digital signature from Adobe Systems.", "S0163": " Janicab  : Janicab used a valid AppleDeveloperID to sign the code to get past security restrictions.", "G0094": " Kimsuky  : Kimsuky has signed files with the name EGIS CO,. Ltd..", "G0065": " Leviathan  : Leviathan has used stolen code signing certificates to sign malware.", "S0372": " LockerGoga  : LockerGoga has been signed with stolen certificates in order to make it look more legitimate.", "G0045": " menuPass  : menuPass has resized and added data to the certificate table to enable the signing of modified files with legitimate signatures.", "S0455": " Metamorfo  : Metamorfo has digitally signed executables using AVAST Software certificates. ", "G0021": " Molerats  : Molerats has used forged Microsoft code-signing certificates on malware.", "S0284": " More_eggs  : More_eggs has used a signed binary shellcode loader and a signed Dynamic Link Library (DLL) to create a reverse shell.", "S0210": " Nerex  : Nerex drops a signed Microsoft DLL to disk.", "G0040": " Patchwork  : Patchwork has signed malware with self-signed certificates from fictitious and spoofed legitimate software companies.", "S0501": " PipeMon  : PipeMon, its installer, and tools are signed with stolen code-signing certificates.", "G0056": " PROMETHIUM  : PROMETHIUM has signed code with self-signed certificates.", "S0650": " QakBot  : QakBot can use signed loaders to evade detection.", "S0262": " QuasarRAT  : A QuasarRAT .dll file is digitally signed by a certificate from AirVPN.", "S0148": " RTM  : RTM samples have been signed with a code-signing certificates.", "G0091": " Silence  : Silence has used a valid certificate to sign their primary loader Silence.Downloader (aka TrueBot).", "S0646": " SpicyOmelette  : SpicyOmelette has been signed with valid digital certificates.", "S0491": " StrongPity  : StrongPity has been signed with self-signed certificates.", "S0603": " Stuxnet  : Stuxnet used a digitally signed driver with a compromised Realtek certificate.", "G0039": " Suckfly  : Suckfly has used stolen certificates to sign its malware.", "S0559": " SUNBURST  : SUNBURST was digitally signed by SolarWinds from March - May 2020.", "G0092": " TA505  : TA505 has signed payloads with code signing certificates from Thawte and Sectigo.", "S0266": " TrickBot  : TrickBot has come with a signed downloader component.", "G0044": " Winnti Group  : Winnti Group used stolen certificates to sign its malware.", "G0102": " Wizard Spider  : Wizard Spider has used Digicert code-signing certificates for some of its malware."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1553.002", "subtechniqueof": "T1553", "tactics": ["Defense Evasion"], "platforms": ["Windows, macOS"], "defensebypassed": ["Windows User Account Control"], "version": "1.0", "created": "05 February 2020", "lastmodified": "10 February 2020"}, {"techniquename": "SIP and Trust Provider Hijacking", "detection": "Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries. Enable CryptoAPI v2 (CAPI) event logging  to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033). Utilize Sysmon detection rules and/or enable the Registry (Global Object Access Auditing)  setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers:  As part of this technique, adversaries may attempt to manually edit these Registry keys (ex: Regedit) or utilize the legitimate registration process using . Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \"Hide Microsoft Entries\" and \"Hide Windows Entries\" are both deselected. ", "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). Similar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. ", "mitigations": {"M1038": " Execution Prevention  : Enable application control solutions such as AppLocker and/or Device Guard to block the loading of malicious SIP DLLs.", "M1022": " Restrict File and Directory Permissions  : Restrict storage and execution of SIP DLLs to protected directories, such as C:\\Windows, rather than user directories.", "M1024": " Restrict Registry Permissions  : Ensure proper permissions are set for Registry hives to prevent users from modifying keys related to SIP and trust provider components. Components may still be able to be hijacked to suitable functions already present on disk if malicious modifications to Registry keys are not prevented. "}, "id": "T1553.003", "subtechniqueof": "T1553", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "defensebypassed": ["Application control, Autoruns Analysis, Digital Certificate Validation, User Mode Signature Validation"], "contributors": ["Matt Graeber, @mattifestation, SpecterOps"], "version": "1.0", "created": "05 February 2020", "lastmodified": "09 February 2021"}, {"techniquename": "Mark-of-the-Web Bypass", "detection": "Monitor compressed/archive and image files downloaded from the Internet as the contents may not be tagged with the MOTW. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities.", "description": "Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named  with a specific value known as the MOTW. Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file in not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.Adversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.", "mitigations": {"M1038": " Execution Prevention  : Consider blocking container file types at web and/or email gateways. Consider unregistering container file extensions in Windows File Explorer."}, "procedureexamples": {"G0092": " TA505  : TA505 has used .iso files to deploy malicious .lnk files."}, "id": "T1553.005", "subtechniqueof": "T1553", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Application control"], "contributors": ["Christiaan Beek, @ChristiaanBeek"], "version": "1.0", "created": "22 February 2021", "lastmodified": "13 April 2021"}, {"techniquename": "Verclsid", "detection": "Use process monitoring to monitor the execution and arguments of verclsid.exe. Compare recent invocations of verclsid.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of verclsid.exe may also be useful in determining the origin and purpose of the payload being executed. Depending on the environment, it may be unusual for verclsid.exe to have a parent process of a Microsoft Office product. It may also be unusual for verclsid.exe to have any child processes or to make network connections or file modifications.", "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.Adversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running , where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to Regsvr32). Since it is signed and native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse. ", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Consider removing verclsid.exe if it is not necessary within a given environment.", "M1038": " Execution Prevention  : Use application control configured to block execution of verclsid.exe if it is not required for a given system or network to prevent potential misuse by adversaries.", "M1037": " Filter Network Traffic  : Consider modifying host firewall rules to prevent egress traffic from verclsid.exe."}, "procedureexamples": {"S0499": " Hancitor  : Hancitor has used verclsid.exe to download and execute a malicious script."}, "id": "T1218.012", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Application control, Digital Certificate Validation"], "contributors": ["Rodrigo Garcia, Red Canary"], "version": "1.0", "created": "10 August 2020", "lastmodified": "19 August 2020"}, {"techniquename": "Install Root Certificate", "detection": "A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity. Check pre-installed certificates on new systems to ensure unnecessary or suspicious certificates are not present. Microsoft provides a list of trustworthy root certificates online and through authroot.stl. The Sysinternals Sigcheck utility can also be used () to dump the contents of the certificate store and list valid certificates not rooted to the Microsoft Certificate Trust List.Installed root certificates are located in the Registry under  and . There are a subset of root certificates that are consistent across Windows systems and can be used for comparison:", "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide Adversary-in-the-Middle capability for intercepting information transmitted over secure TLS/SSL communications.Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.In macOS, the Ay MaMi malware uses  to install a malicious certificate as a trusted root certificate into the system keychain.", "mitigations": {"M1028": " Operating System Configuration  : Windows Group Policy can be used to manage root certificates and the  value of  can be set to 1 to prevent non-administrator users from making further root installations into their own HKCU certificate store. ", "M1054": " Software Configuration  : HTTP Public Key Pinning (HPKP) is one method to mitigate potential Adversary-in-the-Middle situations where and adversary uses a mis-issued or fraudulent certificate to intercept encrypted communications by enforcing use of an expected certificate. "}, "procedureexamples": {"S0160": " certutil  : certutil can be used to install browser root certificates as a precursor to performing Adversary-in-the-Middle between connections to banking websites. Example command: .", "S0281": " Dok  : Dok installs a root certificate to aid in Adversary-in-the-Middle actions using the command .", "S0009": " Hikit  : Hikit uses  and  to install a self-generated certificate to the local trust store as a root CA and Trusted Publisher.", "S0148": " RTM  : RTM can add a certificate to the Windows store."}, "id": "T1553.004", "subtechniqueof": "T1553", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "defensebypassed": ["Digital Certificate Validation"], "capecid": ["CAPEC-479"], "contributors": ["Itzik Kotler, SafeBreach; Matt Graeber, @mattifestation, SpecterOps; Red Canary; Travis Smith, Tripwire"], "version": "1.1", "created": "21 February 2020", "lastmodified": "25 August 2021"}, {"techniquename": "Mavinject", "detection": "Monitor the execution and arguments of mavinject.exe. Compare recent invocations of mavinject.exe with prior history of known good arguments and injected DLLs to determine anomalous and potentially adversarial activity.Adversaries may rename abusable binaries to evade detections, but the argument  is required for mavinject.exe to perform  and may therefore be monitored to alert malicious activity.", "description": "Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).Adversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. Dynamic-link Library Injection), allowing for arbitrary code execution (ex. ). Since mavinject.exe is digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process. In addition to Dynamic-link Library Injection, Mavinject.exe can also be abused to perform import descriptor injection via its   command-line parameter (ex. ). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Consider removing mavinject.exe if Microsoft App-V is not used within a given environment.", "M1038": " Execution Prevention  : Use application control configured to block execution of mavinject.exe if it is not required for a given system or network to prevent potential misuse by adversaries."}, "id": "T1218.013", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "version": "1.0", "created": "22 September 2021", "lastmodified": "14 October 2021"}, {"techniquename": "MMC", "detection": "Monitor processes and command-line parameters for suspicious or malicious use of MMC. Since MMC is a signed Windows binary, verify use of MMC is legitimate and not malicious. Monitor for creation and use of .msc files. MMC may legitimately be used to call Microsoft-created .msc files, such as  or . Invoking non-Microsoft .msc files may be an indicator of malicious activity. ", "description": "Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console, or MMC, is a signed Windows binary and is used in several ways in either its GUI or in a command prompt. MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.For example,  will open a custom, saved console msc file in author mode. Another common example is , which will open the Group Policy Editor application window. Adversaries may use MMC commands to perform malicious tasks. For example,  deletes the backup catalog on the system (i.e. Inhibit System Recovery) without prompts to the user (Note:  may only be present by default on Windows Server operating systems).Adversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a Component Object Model class object. Then, adversaries may create custom consoles with the \"Link to Web Address\" snap-in that is linked to the malicious CLSID subkey. Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command: .", "mitigations": {"M1042": " Disable or Remove Feature or Program  : MMC may not be necessary within a given environment since it is primarily used by system administrators, not regular users or clients. ", "M1038": " Execution Prevention  : Use application control configured to block execution of MMC if it is not required for a given system or network to prevent potential misuse by adversaries."}, "id": "T1218.014", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "defensebypassed": ["Application control, Digital Certificate Validation"], "contributors": ["Wes Hurd"], "version": "1.0", "created": "28 September 2021", "lastmodified": "16 October 2021"}, {"techniquename": "Signed Script Proxy Execution", "detection": "Monitor script processes, such as , and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.", "description": "Adversaries may use scripts signed with trusted certificates to proxy execution of malicious files. Several Microsoft signed scripts that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.", "mitigations": {"M1038": " Execution Prevention  : Certain signed scripts that can be used to execute other programs may not be necessary within a given environment. Use application control configured to block execution of these scripts if they are not required for a given system or network to prevent potential misuse by adversaries."}, "id": "T1216", "subtechniques": ["T1216.001"], "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Application control, Digital Certificate Validation"], "contributors": ["Praetorian"], "version": "1.1", "created": "18 April 2018", "lastmodified": "01 September 2021"}, {"techniquename": "PubPrn", "detection": "Monitor script processes, such as , and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.", "description": "Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script is signed by Microsoft and is commonly executed through the Windows Command Shell via . For example, the following code publishes a printer within the specified domain: .Adversaries may abuse PubPrn to execute malicious payloads hosted on remote sites. To do so, adversaries may set the second  parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is . This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.In later versions of Windows (10+),  has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to , vice the  moniker which could be used to reference remote code via HTTP(S).", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, update Windows Defender Application Control policies to include rules that block the older, vulnerable versions of PubPrn.", "M1038": " Execution Prevention  : Certain signed scripts that can be used to execute other programs may not be necessary within a given environment. Use application control configured to block execution of these scripts if they are not required for a given system or network to prevent potential misuse by adversaries."}, "procedureexamples": {"G0050": " APT32  : APT32 has used PubPrn.vbs within execution scripts to execute malware, possibly bypassing defenses."}, "id": "T1216.001", "subtechniqueof": "T1216", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Application Control, Digital Certificate Validation"], "contributors": ["Atul Nair, Qualys"], "version": "1.1", "created": "03 February 2020", "lastmodified": "01 September 2021"}, {"techniquename": "Odbcconf", "detection": "Use process monitoring to monitor the execution and arguments of odbcconf.exe. Compare recent invocations of odbcconf.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of odbcconf.exe may also be useful in determining the origin and purpose of the DLL being loaded.", "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. Odbcconf.exe is digitally signed by Microsoft.Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to Regsvr32, odbcconf.exe has a  flag that can be misused to execute DLLs (ex: ).  ", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Odbcconf.exe may not be necessary within a given environment.", "M1038": " Execution Prevention  : Use application control configured to block execution of Odbcconf.exe if it is not required for a given system or network to prevent potential misuse by adversaries."}, "procedureexamples": {"G0080": " Cobalt Group  : Cobalt Group has used  to proxy the execution of malicious DLL files."}, "id": "T1218.008", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Application control, Digital Certificate Validation"], "version": "1.0", "created": "24 January 2020", "lastmodified": "20 June 2020"}, {"techniquename": "Regsvcs/Regasm", "detection": "Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.", "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft.  Both utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration:  or  respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. ", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Regsvcs and Regasm may not be necessary within a given environment.", "M1038": " Execution Prevention  : Block execution of Regsvcs.exe and Regasm.exe if they are not required for a given system or network to prevent potential misuse by adversaries."}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has dropped RegAsm.exe onto systems for performing malicious activity. "}, "id": "T1218.009", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "defensebypassed": ["Application control, Digital Certificate Validation"], "contributors": ["Casey Smith"], "version": "1.0", "created": "23 January 2020", "lastmodified": "20 June 2020"}, {"techniquename": "InstallUtil", "detection": "Use process monitoring to monitor the execution and arguments of InstallUtil.exe. Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed.", "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.  InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system:  and .InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute . ", "mitigations": {"M1042": " Disable or Remove Feature or Program  : InstallUtil may not be necessary within a given environment.", "M1038": " Execution Prevention  : Use application control configured to block execution of InstallUtil.exe if it is not required for a given system or network to prevent potential misuse by adversaries."}, "procedureexamples": {"S0631": " Chaes  : Chaes has used Installutill to download content.", "G0045": " menuPass  : menuPass has used  to execute malicious software.", "G0129": " Mustang Panda  : Mustang Panda has used  to execute a malicious Beacon stager."}, "id": "T1218.004", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Application control, Digital Certificate Validation"], "contributors": ["Casey Smith; Travis Smith, Tripwire"], "version": "1.0", "created": "23 January 2020", "lastmodified": "20 June 2020"}, {"techniquename": "CMSTP", "detection": "Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity.Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include: ", "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles.  CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.Adversaries may supply CMSTP.exe with INF files infected with malicious commands.  Similar to Regsvr32 / \"Squiblydoo\", CMSTP.exe may be abused to load and execute DLLs   and/or COM scriptlets (SCT) from remote servers.    This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate, signed Microsoft application.CMSTP.exe can also be abused to Bypass User Account Control and execute arbitrary commands from a malicious INF through an auto-elevated COM interface.   ", "mitigations": {"M1042": " Disable or Remove Feature or Program  : CMSTP.exe may not be necessary within a given environment (unless using it for VPN connection installation).", "M1038": " Execution Prevention  : Consider using application control configured to block execution of CMSTP.exe if it is not required for a given system or network to prevent potential misuse by adversaries."}, "procedureexamples": {"G0080": " Cobalt Group  : Cobalt Group has used the command  to bypass AppLocker and launch a malicious script.", "G0069": " MuddyWater  : MuddyWater has used CMSTP.exe and a malicious INF to execute its POWERSTATS payload."}, "id": "T1218.003", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Application control"], "contributors": ["Nik Seetharaman, Palantir; Ye Yint Min Thu Htut, Offensive Security Team, DBS Bank"], "version": "1.0", "created": "23 January 2020", "lastmodified": "20 June 2020"}, {"techniquename": "Mshta", "detection": "Use process monitoring to monitor the execution and arguments of mshta.exe. Look for mshta.exe executing raw or obfuscated script within the command-line. Compare recent invocations of mshta.exe with prior history of known good arguments and executed .hta files to determine anomalous and potentially adversarial activity. Command arguments used before and after the mshta.exe invocation may also be useful in determining the origin and purpose of the .hta file being executed.Monitor use of HTA files. If they are not typically used within an environment then execution of them may be suspicious", "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. Files may be executed by mshta.exe through an inline script: They may also be executed directly from URLs: Mshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. ", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Mshta.exe may not be necessary within a given environment since its functionality is tied to older versions of Internet Explorer that have reached end of life.", "M1038": " Execution Prevention  : Use application control configured to block execution of  if it is not required for a given system or network to prevent potential misuse by adversaries. For example, in Windows 10 and Windows Server 2016 and above, Windows Defender Application Control (WDAC) policy rules may be applied to block the  application and to prevent abuse."}, "procedureexamples": {"G0050": " APT32  : APT32 has used mshta.exe for code execution.", "S0414": " BabyShark  : BabyShark has used mshta.exe to download and execute applications from a remote server.", "G0046": " FIN7  : FIN7 has used mshta.exe to execute VBScript to execute malicious code on victim systems.", "G0100": " Inception  : Inception has used malicious HTA files to drop and execute malware.", "G0094": " Kimsuky  : Kimsuky has used mshta.exe to run malicious scripts on the system.", "S0250": " Koadic  : Koadic can use MSHTA to serve additional payloads.", "S0455": " Metamorfo  : Metamorfo has used mshta.exe to execute a HTA payload. ", "G0069": " MuddyWater  : MuddyWater has used mshta.exe to execute its POWERSTATS payload and to pass a PowerShell one-liner for execution.", "G0129": " Mustang Panda  : Mustang Panda has used mshta.exe to launch collection scripts.", "S0228": " NanHaiShu  : NanHaiShu uses mshta.exe to load its program and files.", "S0223": " POWERSTATS  : POWERSTATS can use Mshta.exe to execute additional payloads on compromised hosts.", "S0379": " Revenge RAT  : Revenge RAT uses mshta.exe to run malicious scripts on the system.", "S0589": " Sibot  : Sibot has been executed via MSHTA application.", "G0121": " Sidewinder  : Sidewinder has used  to execute malicious payloads.", "G0127": " TA551  : TA551 has used mshta.exe to execute malicious payloads.", "S0341": " Xbash  : Xbash can use mshta for executing scripts."}, "id": "T1218.005", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Application control, Digital Certificate Validation"], "contributors": ["@ionstorm; Ricardo Dias; Ye Yint Min Thu Htut, Offensive Security Team, DBS Bank"], "version": "1.1", "created": "23 January 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Compiled HTML File", "detection": "Monitor and analyze the execution and arguments of hh.exe.  Compare recent invocations of hh.exe with prior history of known good arguments to determine anomalous and potentially adversarial activity (ex: obfuscated and/or malicious commands). Non-standard process execution trees may also indicate suspicious or malicious behavior, such as if hh.exe is the parent process for suspicious processes and activity relating to other adversarial techniques.Monitor presence and use of CHM files, especially if they are not typically used within an environment.", "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX.  CHM content is displayed using underlying components of the Internet Explorer browser  loaded by the HTML Help executable program (hh.exe). A custom CHM file containing embedded payloads could be delivered to a victim then triggered by User Execution. CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe.  ", "mitigations": {"M1038": " Execution Prevention  : Consider using application control to prevent execution of hh.exe if it is not required for a given system or network to prevent potential misuse by adversaries.", "M1021": " Restrict Web-Based Content  : Consider blocking download/transfer and execution of potentially uncommon file types known to be used in adversary campaigns, such as CHM files"}, "procedureexamples": {"G0096": " APT41  : APT41 used compiled HTML (.chm) files for targeting. ", "S0373": " Astaroth  : Astaroth uses ActiveX objects for file execution and manipulation. ", "G0070": " Dark Caracal  : Dark Caracal leveraged a compiled HTML file that contained a command to download and run an executable.", "G0032": " Lazarus Group  : Lazarus Group has used CHM files to move concealed payloads.", "G0049": " OilRig  : OilRig has used a CHM payload to load and execute another malicious file once delivered to a victim.", "G0091": " Silence  : Silence has weaponized CHM files in their phishing campaigns."}, "id": "T1218.001", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Application control, Digital Certificate Validation"], "contributors": ["Rahmat Nurfauzi, @infosecn1nja, PT Xynexis International"], "version": "1.0", "created": "23 January 2020", "lastmodified": "20 June 2020"}, {"techniquename": "Control Panel", "detection": "Monitor and analyze activity related to items associated with CPL files, such as the control.exe and the  and  API functions in shell32.dll. When executed from the command line or clicked, control.exe will execute the CPL file (ex: ) before  is used to call the CPL's API functions (ex: ). CPL files can be executed directly via the CPL API function with just the latter  command, which may bypass detections and/or execution filters for control.exe.Inventory Control Panel items to locate unregistered and potentially malicious files present on systems:Analyze new Control Panel items as well as those present on disk for malicious content. Both executable and CPL formats are compliant Portable Executable (PE) images and can be examined using traditional tools and methods, pending anti-reverse-engineering techniques.", "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a  function. For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file. Malicious Control Panel items can be delivered via Phishing campaigns or executed as part of multi-stage malware. Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to . Even when these registered DLLs do not comply with the CPL file specification and do not export  functions, they are loaded and executed through its  when Control Panel is executed. CPL files not exporting  are not directly executable.", "mitigations": {"M1038": " Execution Prevention  : Identify and block potentially malicious and unknown .cpl files by using application control  tools, like Windows Defender Application Control, AppLocker,   or Software Restriction Policies  where appropriate. ", "M1022": " Restrict File and Directory Permissions  : Restrict storage and execution of Control Panel items to protected directories, such as , rather than user directories."}, "procedureexamples": {"S0260": " InvisiMole  : InvisiMole can register itself for execution and persistence via the Control Panel.", "S0172": " Reaver  : Reaver drops and executes a malicious CPL file as its payload."}, "id": "T1218.002", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM, User"], "defensebypassed": ["Application control"], "contributors": ["ESET"], "version": "1.1", "created": "23 January 2020", "lastmodified": "21 October 2020"}, {"techniquename": "Rundll32", "detection": "Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity.Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded. Analyzing DLL exports and comparing to runtime arguments may be useful in uncovering obfuscated function calls.", "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: ).Rundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions  and . Double-clicking a .cpl file also causes rundll32.exe to execute. Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this:   This behavior has been seen used by malware such as Poweliks. Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command , rundll32.exe would first attempt to execute , or failing that , before loading ). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending  and/or  to harmless ones.", "mitigations": {"M1050": " Exploit Protection  : Microsoft's Enhanced Mitigation Experience Toolkit (EMET) Attack Surface Reduction (ASR) feature can be used to block methods of using rundll32.exe to bypass application control."}, "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL has used rundll32.exe in a Registry value to establish persistence.", "G0073": " APT19  : APT19 configured its payload to inject into the rundll32.exe.", "G0007": " APT28  : APT28 executed CHOPSTICK by using rundll32 commands such as . APT28 also executed a .dll for a first stage dropper using rundll32.exe. An APT28 loader Trojan saved a batch script that uses rundll32 to execute a DLL payload.", "G0016": " APT29  : APT29 has used  to execute payloads.", "G0022": " APT3  : APT3 has a tool that can run DLLs.", "G0050": " APT32  : APT32 malware has used rundll32.exe to execute an initial infection process.", "G0082": " APT38  : APT38 has used rundll32.exe to execute binaries, scripts, and Control Panel Item files and to execute code via proxy to avoid triggering security tools.", "G0096": " APT41  : APT41 has used rundll32.exe to execute a loader.", "S0438": " Attor  : Attor's installer plugin can schedule rundll32.exe to load the dispatcher.", "S0606": " Bad Rabbit  : Bad Rabbit has used rundll32 to launch a malicious DLL as .", "S0268": " Bisonal  : Bisonal uses rundll32.exe to execute as part of the Registry Run key it adds: .", "S0520": " BLINDINGCAN  : BLINDINGCAN has used Rundll32 to load a malicious DLL.", "G0108": " Blue Mockingbird  : Blue Mockingbird has executed custom-compiled XMRIG miner DLLs using rundll32.exe.", "S0635": " BoomBox  : BoomBox can use RunDLL32 for execution.", "S0204": " Briba  : Briba uses rundll32 within Registry Run Keys / Startup Folder entries to execute malicious DLLs.", "G0008": " Carbanak  : Carbanak installs VNC server software that executes through rundll32.", "S0154": " Cobalt Strike  : Cobalt Strike can use rundll32.exe to load DLL from the command line.", "S0244": " Comnie  : Comnie uses Rundll32 to load a malicious DLL.", "G0052": " CopyKittens  : CopyKittens uses rundll32 to load various tools on victims, including a lateral movement tool named Vminst, Cobalt Strike, and shellcode.", "S0137": " CORESHELL  : CORESHELL is installed via execution of rundll32 with an export named \"init\" or \"InitW.\"", "S0046": " CozyCar  : The CozyCar dropper copies the system file rundll32.exe to the install location for the malware, then uses the copy of rundll32.exe to load and execute the main CozyCar component.", "S0255": " DDKONG  : DDKONG uses Rundll32 to ensure only a single instance of itself is running at once.", "S0554": " Egregor  : Egregor has used rundll32 during execution.", "S0081": " Elise  : After copying itself to a DLL file, a variant of Elise calls the DLL file using rundll32.exe.", "S0082": " Emissary  : Variants of Emissary have used rundll32.exe in Registry values added to establish persistence.", "S0634": " EnvyScout  : EnvyScout has the ability to proxy execution of malicious files with Rundll32.", "S0568": " EVILNUM  : EVILNUM can execute commands and scripts through rundll32. ", "S0512": " FatDuke  : FatDuke can execute via rundll32.", "S0267": " FELIXROOT  : FELIXROOT uses Rundll32 for executing the dropper program.", "S0143": " Flame  : Rundll32.exe is used as a way of executing Flame at the command-line.", "G0047": " Gamaredon Group  : Gamaredon Group malware has used rundll32 to launch additional malicious components.", "S0032": " gh0st RAT  : A gh0st RAT variant has used rundll32 for execution.", "S0342": " GreyEnergy  : GreyEnergy uses PsExec locally in order to execute rundll32.exe at the highest privileges (NTAUTHORITY\\SYSTEM).", "G0125": " HAFNIUM  : HAFNIUM has used  to load malicious DLLs.", "S0260": " InvisiMole  : InvisiMole has used rundll32.exe for execution.", "S0044": " JHUHUGIT  : JHUHUGIT is executed using rundll32.exe.", "S0250": " Koadic  : Koadic can use Rundll32 to execute additional payloads.", "S0356": " KONNI  : KONNI has used Rundll32 to execute its loader for privilege escalation purposes.", "S0236": " Kwampirs  : Kwampirs uses rundll32.exe in a Registry value added to establish persistence.", "S0167": " Matryoshka  : Matryoshka uses rundll32.exe in a Registry Run key value for execution as part of its persistence mechanism.", "S0576": " MegaCortex  : MegaCortex has used  to load a DLL for file encryption.", "S0256": " Mosquito  : Mosquito's launcher uses rundll32.exe in a Registry Key value to start the main backdoor capability.", "G0069": " MuddyWater  : MuddyWater has used malware that leveraged rundll32.exe in a Registry Run key to execute a .dll.", "S0637": " NativeZone  : NativeZone has used rundll32 to execute a malicious DLL.", "S0353": " NOKKI  : NOKKI has used rundll32 for execution.", "S0368": " NotPetya  : NotPetya uses  to install itself on remote systems when accessed via PsExec or .", "S0518": " PolyglotDuke  : PolyglotDuke can be executed using rundll32.exe.", "S0139": " PowerDuke  : PowerDuke uses rundll32.exe to load.", "S0113": " Prikormka  : Prikormka uses rundll32.exe to load its DLL.", "S0147": " Pteranodon  : Pteranodon executes functions using rundll32.exe.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY can load a DLL using Rundll32.", "S0650": " QakBot  : QakBot can use Rundll32.exe to enable C2 communication.", "S0481": " Ragnar Locker  : Ragnar Locker has used rundll32.exe to execute components of VirtualBox.", "S0148": " RTM  : RTM runs its core DLL file using rundll32.exe.", "S0074": " Sakula  : Sakula calls cmd.exe to run various DLL files via rundll32.", "G0034": " Sandworm Team  : Sandworm Team used a backdoor which could execute a supplied DLL using rundll32.exe.    ", "S0382": " ServHelper  : ServHelper contains a module for downloading and executing DLLs that leverages .", "S0589": " Sibot  : Sibot has executed downloaded DLLs with .", "S0142": " StreamEx  : StreamEx uses rundll32 to call an exported function.", "S0559": " SUNBURST  : SUNBURST used Rundll32 to execute payloads. ", "G0092": " TA505  : TA505 has leveraged  to execute malicious DLLs.", "G0127": " TA551  : TA551 has used rundll32.exe to load malicious DLLs.", "S0452": " USBferry  : USBferry can execute rundll32.exe in memory to avoid detection.    ", "S0141": " Winnti for Windows  : The Winnti for Windows installer loads a DLL using rundll32.", "S0412": " ZxShell  : ZxShell has used rundll32.exe to execute other DLLs and named pipes. "}, "id": "T1218.011", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Application control, Digital Certificate Validation"], "contributors": ["Casey Smith; Gareth Phillips, Seek Ltd.; Ricardo Dias"], "version": "1.1", "created": "23 January 2020", "lastmodified": "14 October 2021"}, {"techniquename": "Msiexec", "detection": "Use process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.", "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). Msiexec.exe is digitally signed by Microsoft.Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs. Since it is signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the  policy is enabled.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Consider disabling the  policy to prevent elevated execution of Windows Installer packages.", "M1026": " Privileged Account Management  : Restrict execution of Msiexec.exe to privileged accounts or groups that need to use it to lessen the opportunities for malicious usage."}, "procedureexamples": {"S0584": " AppleJeus  : AppleJeus has been installed via MSI installer.", "S0631": " Chaes  : Chaes has used .MSI files as an initial way to start the infection chain.", "S0611": " Clop  : Clop can use msiexec.exe to disable security tools on the system. ", "S0038": " Duqu  : Duqu has used  to execute malicious Windows Installer packages. Additionally, a PROPERTY=VALUE pair containing a 56-bit encryption key has been used to decrypt the main payload from the installer packages.", "S0531": " Grandoreiro  : Grandoreiro can use MSI files to execute DLLs.", "S0483": " IcedID  : IcedID can inject itself into a suspended msiexec.exe process to send beacons to C2 while appearing as a normal msi application. ", "S0528": " Javali  : Javali has used the MSI installer to download and execute malicious payloads.", "S0451": " LoudMiner  : LoudMiner used an MSI installer to install the virtualization software.  ", "G0095": " Machete  : Machete has used msiexec to install the Machete malware.", "S0449": " Maze  : Maze has delivered components for its ransomware attacks using MSI files, some of which have been executed from the command-line using .", "S0530": " Melcoz  : Melcoz can use MSI files with embedded VBScript for execution.", "S0455": " Metamorfo  : Metamorfo has used MsiExec.exe to automatically execute files. ", "G0021": " Molerats  : Molerats has used msiexec.exe to execute an MSI payload. ", "S0650": " QakBot  : QakBot can use MSIExec to spawn multiple cmd.exe processes.", "S0481": " Ragnar Locker  : Ragnar Locker has been delivered as an unsigned MSI package that was executed with .", "G0075": " Rancor  : Rancor has used  to download and execute malicious installer files over HTTP.", "S0592": " RemoteUtilities  : RemoteUtilities can use Msiexec to install a service.", "G0092": " TA505  : TA505 has used  to download and execute malicious Windows Installer files.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used the msiexec.exe command-line utility to download and execute malicious MSI files."}, "id": "T1218.007", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Application control, Digital Certificate Validation"], "contributors": ["Alexandros Pappas; Ziv Kaspersky, Cymptom"], "version": "1.1", "created": "24 January 2020", "lastmodified": "07 June 2021"}, {"techniquename": "Signed Binary Proxy Execution", "detection": "Monitor processes and command-line parameters for signed binaries that may be used to proxy execution of malicious files. Compare recent invocations of signed binaries that may be used to proxy execution with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Legitimate programs used in suspicious ways, like msiexec.exe downloading an MSI file from the Internet, may be indicative of an intrusion. Correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.Monitor for file activity (creations, downloads, modifications, etc.), especially for file types that are not typical within an environment and may be indicative of adversary activity.", "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Many native binaries may not be necessary within a given environment.", "M1038": " Execution Prevention  : Consider using application control to prevent execution of binaries that are susceptible to abuse and not required for a given system or network.", "M1050": " Exploit Protection  : Microsoft's Enhanced Mitigation Experience Toolkit (EMET) Attack Surface Reduction (ASR) feature can be used to block methods of using using trusted binaries to bypass application control.", "M1026": " Privileged Account Management  : Restrict execution of particularly vulnerable binaries to privileged accounts or groups that need to use it to lessen the opportunities for malicious usage."}, "id": "T1218", "subtechniques": ["T1218.001", "T1218.002", "T1218.003", "T1218.004", "T1218.005", "T1218.007", "T1218.008", "T1218.009", "T1218.010", "T1218.011", "T1218.012", "T1218.013", "T1218.014"], "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "defensebypassed": ["Anti-virus, Application control, Digital Certificate Validation"], "contributors": ["Hans Christoffer Gaardl\u00f8s; Nishan Maharjan, @loki248; Praetorian"], "version": "2.1", "created": "18 April 2018", "lastmodified": "16 October 2021"}, {"techniquename": "Regsvr32", "detection": "Use process monitoring to monitor the execution and arguments of regsvr32.exe. Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded. ", "description": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe is also a Microsoft signed binary. Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  This variation of the technique is often referred to as a \"Squiblydoo\" attack and has been used in campaigns targeting governments.  Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking. ", "mitigations": {"M1050": " Exploit Protection  : Microsoft's Enhanced Mitigation Experience Toolkit (EMET) Attack Surface Reduction (ASR) feature can be used to block regsvr32.exe from being used to bypass application control.  Identify and block potentially malicious software executed through regsvr32 functionality by using application control  tools, like Windows Defender Application Control, AppLocker,   or Software Restriction Policies  where appropriate. "}, "procedureexamples": {"S0622": " AppleSeed  : AppleSeed can call regsvr32.exe for execution.", "G0073": " APT19  : APT19 used Regsvr32 to bypass application control techniques.", "G0050": " APT32  : APT32 created a Scheduled Task/Job that used regsvr32.exe to execute a COM scriptlet that dynamically downloaded a backdoor and injected it into memory. The group has also used regsvr32 to run their backdoor. ", "S0373": " Astaroth  : Astaroth can be loaded through regsvr32.exe.", "G0108": " Blue Mockingbird  : Blue Mockingbird has executed custom-compiled XMRIG miner DLLs using regsvr32.exe.   ", "G0080": " Cobalt Group  : Cobalt Group has used regsvr32.exe to execute scripts.", "G0009": " Deep Panda  : Deep Panda has used regsvr32.exe to execute a server variant of Derusbi in victim networks.", "S0021": " Derusbi  : Derusbi variants have been seen that use Registry persistence to proxy execution through regsvr32.exe.", "S0554": " Egregor  : Egregor has used regsvr32.exe to execute malicious DLLs.", "S0568": " EVILNUM  : EVILNUM can run a remote scriptlet that drops a file and executes it via regsvr32.exe. ", "S0087": " Hi-Zor  : Hi-Zor executes using regsvr32.exe called from the Registry Run Keys / Startup Folder persistence mechanism.", "G0100": " Inception  : Inception has ensured persistence at system boot by setting the value .", "S0250": " Koadic  : Koadic can use Regsvr32 to execute additional payloads.", "G0065": " Leviathan  : Leviathan has used regsvr32 for execution.", "S0284": " More_eggs  : More_eggs has used regsvr32.exe to execute the malicious DLL.", "S0229": " Orz  : Some Orz versions have an embedded DLL known as MockDll that uses Process Hollowing and regsvr32 to execute another payload.", "S0650": " QakBot  : QakBot can use Regsvr32 to execute malicious DLLs.", "S0481": " Ragnar Locker  : Ragnar Locker has used regsvr32.exe to execute components of VirtualBox.", "S0270": " RogueRobin  : RogueRobin uses regsvr32.exe to run a .sct file for execution.", "G0127": " TA551  : TA551 has used regsvr32.exe to load malicious DLLs.", "S0476": " Valak  : Valak has used  to launch malicious DLLs.", "G0090": " WIRTE  : WIRTE has used Regsvr32.exe to trigger the execution of a malicious script.", "S0341": " Xbash  : Xbash can use regsvr32 for executing scripts."}, "id": "T1218.010", "subtechniqueof": "T1218", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "defensebypassed": ["Anti-virus, Application control, Digital Certificate Validation"], "contributors": ["Casey Smith"], "version": "1.0", "created": "23 January 2020", "lastmodified": "20 June 2020"}, {"techniquename": "Rootkit", "detection": "Some rootkit protections may be built into anti-virus or operating system software. There are dedicated rootkit detection tools that look for specific types of rootkit behavior. Monitor for the existence of unrecognized DLLs, devices, services, and changes to the MBR. ", "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.  ", "procedureexamples": {"G0007": " APT28  : APT28 has used a UEFI (Unified Extensible Firmware Interface) rootkit known as LoJax.", "G0096": " APT41  : APT41 deployed rootkits on Linux systems.", "S0484": " Carberp  : Carberp has used user mode rootkit techniques to remain hidden on the system.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell has a module to use a rootkit on a system. ", "S0502": " Drovorub  : Drovorub has used a kernel module rootkit to hide processes, files, executables, and network artifacts from user space view.", "S0377": " Ebury  : Ebury has used user mode rootkit techniques to remain hidden on the system.", "S0047": " Hacking Team UEFI Rootkit  : Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems.", "S0394": " HiddenWasp  : HiddenWasp uses a rootkit to hook and implement functions on the system.", "S0135": " HIDEDRV  : HIDEDRV is a rootkit that hides certain operating system artifacts.", "S0009": " Hikit  : Hikit is a Rootkit that has been used by Axiom.  ", "S0601": " Hildegard  : Hildegard has modified /etc/ld.so.preload to overwrite readdir() and readdir64().", "S0040": " HTRAN  : HTRAN can install a rootkit to hide network connections from the host OS.", "S0397": " LoJax  : LoJax is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems.", "S0012": " PoisonIvy  : PoisonIvy starts a rootkit from a malicious file dropped to disk.", "S0458": " Ramsay  : Ramsay has included a rootkit to evade defenses. ", "G0106": " Rocke  : Rocke has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.", "S0468": " Skidmap  : Skidmap is a kernel-mode rootkit that has the ability to hook system calls to hide specific files and fake network and CPU-related statistics to make the CPU load of the infected machine always appear low.", "S0603": " Stuxnet  : Stuxnet uses a Windows rootkit to mask its binaries and other relevant files.", "G0139": " TeamTNT  : TeamTNT has used the open-source rootkit Diamorphine to hide cryptocurrency mining activities on the machine. ", "S0221": " Umbreon  : Umbreon hides from defenders by hooking libc function calls, hiding artifacts that would reveal its presence, such as the user account it creates to provide access and undermining strace, a tool often used to identify malware.", "S0022": " Uroburos  : Uroburos is a rootkit used by Turla.", "S0430": " Winnti for Linux  : Winnti for Linux has used a modified copy of the open-source userland rootkit Azazel, named libxselinux.so, to hide the malware's operations and network activity.", "G0044": " Winnti Group  : Winnti Group used a rootkit to modify typical server functionality.", "S0027": " Zeroaccess  : Zeroaccess is a kernel-mode rootkit."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1014", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, root"], "defensebypassed": ["Anti-virus, Application control, Application control by file name or path, File monitoring, Host intrusion prevention systems, Signature-based detection, System access controls"], "capecid": ["CAPEC-552"], "version": "1.1", "created": "31 May 2017", "lastmodified": "20 June 2020"}, {"techniquename": "Reflective Code Loading", "detection": "Monitor for code artifacts associated with reflectively loading code, such as the abuse of .NET functions such as  and  functions such as , , , and/or .Monitor for artifacts of abnormal process execution. For example, a common signature related to reflective code loading on Windows is mechanisms related to the .NET Common Language Runtime (CLR) -- such as mscor.dll, mscoree.dll, and clr.dll -- loading into abnormal processes (such as notepad.exe). Similarly, AMSI / ETW traces can be used to identify signs of arbitrary code execution from within the memory of potentially compromised processes.Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).Reflective code injection is very similar to Process Injection except that the \"injection\" loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.", "procedureexamples": {"S0154": " Cobalt Strike  : Cobalt Strike's  command can run a .NET executable within the memory of a sacrificial process by loading the CLR.", "S0625": " Cuba  : Cuba loaded the payload into memory using PowerShell. ", "S0447": " Lokibot  : Lokibot has reflectively loaded the decoded DLL into memory. ", "S0194": " PowerSploit  : PowerSploit reflectively loads a Windows PE file into a process.", "S0595": " ThiefQuest  : ThiefQuest uses various API functions such as  to load and link in-memory payloads."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1620", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Application control"], "contributors": ["Joas Antonio dos Santos, @C0d3Cr4zy; Jo\u00e3o Paulo de A. Filho, @Hug1nN__; Lior Ribak, SentinelOne; Rex Guo, @Xiaofei_REX, Confluera; Shlomi Salem, SentinelOne"], "version": "1.0", "created": "05 October 2021", "lastmodified": "01 November 2021"}, {"techniquename": "Rogue Domain Controller", "detection": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an attacker or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929). Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.  Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects. Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \"GC/\") by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.", "description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.  Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors).  The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. ", "procedureexamples": {"S0002": " Mimikatz  : Mimikatz\u2019s  module can be used to make AD updates by temporarily setting a computer to be a DC."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1207", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "defensebypassed": ["Log analysis"], "contributors": ["Vincent Le Toux"], "version": "2.0", "created": "18 April 2018", "lastmodified": "09 February 2021"}, {"techniquename": "HTML Smuggling", "detection": "Detection of HTML Smuggling is difficult as HTML5 and JavaScript attributes are used by legitimate services and applications. HTML Smuggling can be performed in many ways via JavaScript, developing rules for the different variants, with a combination of different encoding and/or encryption schemes, may be very challenging. Detecting specific JavaScript and/or HTML5 attribute strings such as , , and/or  may be a good indicator of HTML Smuggling. These strings may also be used by legitimate services therefore it is possible to raise false positives.Consider monitoring files downloaded from the Internet, possibly by HTML Smuggling, for suspicious activities. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities.", "description": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as  and/or . Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. Deobfuscate/Decode Files or Information), potentially bypassing content filters.For example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as .", "procedureexamples": {"S0634": " EnvyScout  : EnvyScout contains JavaScript code that can extract an encoded blob from its HTML body and write it to disk."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1027.006", "subtechniqueof": "T1027", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Static file analysis, Web content filters"], "contributors": ["Jonathan Boucher, @crash_wave, Bank of Canada; Stan Hegt, Outflank"], "version": "1.0", "created": "20 May 2021", "lastmodified": "18 October 2021"}, {"techniquename": "Indicator Removal from Tools", "detection": "The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.", "description": "Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.", "procedureexamples": {"G0022": " APT3  : APT3 has been known to remove indicators of compromise from tools.", "S0154": " Cobalt Strike  : Cobalt Strike includes a capability to modify the Beacon payload to eliminate known signatures or unpacking methods.", "S0187": " Daserf  : Analysis of Daserf has shown that it regularly undergoes technical improvements to evade anti-virus detection.", "G0009": " Deep Panda  : Deep Panda has updated and modified its malware, resulting in different hash values that evade detection.", "G0093": " GALLIUM  : GALLIUM ensured each payload had a unique hash, including by using different types of packers.", "S0237": " GravityRAT  : The author of GravityRAT submitted samples to VirusTotal for testing, showing that the author modified the code to try to hide the DDE object in a different part of the document.", "S0260": " InvisiMole  : InvisiMole has undergone regular technical improvements in an attempt to evade detection.", "G0049": " OilRig  : OilRig has tested malware samples to determine AV detection and subsequently modified the samples to ensure AV evasion.", "G0116": " Operation Wocao  : Operation Wocao has edited variable names within the Impacket suite to avoid automated detection.", "G0040": " Patchwork  : Patchwork apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes.", "S0587": " Penquin  : Penquin can remove strings from binaries.", "S0194": " PowerSploit  : PowerSploit's  AntivirusBypass module can be used to locate single byte anti-virus signatures.", "S0650": " QakBot  : QakBot can make small changes to itself in order to change its checksum and hash value.", "S0559": " SUNBURST  : SUNBURST source code used generic variable names and pre-obfuscated strings, and was likely sanitized of developer comments before being added to SUNSPOT. ", "G0088": " TEMP.Veles  : TEMP.Veles has modified files based on the open-source project cryptcat in an apparent attempt to decrease AV detection rates.", "G0010": " Turla  : Based on comparison of Gazer versions, Turla made an effort to obfuscate strings in the malware that could be used as IoCs, including the mutex name and named pipe.", "S0579": " Waterbear  : Waterbear can scramble functions not to be executed again with random values."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1027.005", "subtechniqueof": "T1027", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Anti-virus, Host intrusion prevention systems, Log analysis, Signature-based detection"], "version": "1.0", "created": "19 March 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Steganography", "detection": "Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.", "description": "Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.Duqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server. By the end of 2017, a threat group used\u202f\u202fto hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.  ", "procedureexamples": {"S0469": " ABK  : ABK can extract a malicious Portable Executable (PE) from a photo.", "G0138": " Andariel  : Andariel has hidden malicious executables within PNG files.", "G0067": " APT37  : APT37 uses steganography to send images to users that are embedded with shellcode.", "S0473": " Avenger  : Avenger can extract backdoor malware from downloaded images.", "S0234": " Bandook  : Bandook has used .PNG images within a zip file to build the executable. ", "S0470": " BBK  : BBK can extract a malicious Portable Executable (PE) from a photo.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used steganography in multiple operations to conceal malicious payloads.", "S0471": " build_downer  : build_downer can extract malware from a downloaded JPEG.", "S0483": " IcedID  : IcedID has embedded binaries within RC4 encrypted .png files.", "G0065": " Leviathan  : Leviathan has used steganography to hide stolen data inside other files stored on Github.", "S0513": " LiteDuke  : LiteDuke has used image files to hide its loader component.", "G0069": " MuddyWater  : MuddyWater has stored obfuscated JavaScript code in an image file named temp.jpg.", "S0644": " ObliqueRAT  : ObliqueRAT can hide its payload in BMP images hosted on compromised websites.", "S0439": " Okrum  : Okrum's payload is encrypted and embedded within its loader, or within a legitimate PNG file.", "S0518": " PolyglotDuke  : PolyglotDuke can use steganography to hide C2 information in images.", "S0139": " PowerDuke  : PowerDuke uses steganography to hide backdoors in PNG files, which are also encrypted using the Tiny Encryption Algorithm (TEA). ", "S0654": " ProLock  : ProLock can use .jpg and .bmp files to store its payload.", "S0565": " Raindrop  : Raindrop used steganography to locate the start of its encoded payload within legitimate 7-Zip code.", "S0458": " Ramsay  : Ramsay has PE data embedded within JPEG files contained within Word documents.", "S0495": " RDAT  : RDAT can also embed data within a BMP image prior to exfiltration.  ", "S0511": " RegDuke  : RegDuke can hide data in images, including use of the Least Significant Bit (LSB).", "G0127": " TA551  : TA551 has hidden encoded data for malware DLLs in a PNG.", "G0081": " Tropic Trooper  : Tropic Trooper has used JPG files with encrypted payloads to mask their backdoor routines and evade detection."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1027.003", "subtechniqueof": "T1027", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "capecid": ["CAPEC-636"], "version": "1.2", "created": "05 February 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Compile After Delivery", "detection": "Monitor the execution file paths and command-line arguments for common compilers, such as csc.exe and GCC/MinGW, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior. The compilation of payloads may also generate file creation and/or file write events. Look for non-native binary formats and cross-platform compiler and execution frameworks like Mono and determine if they have a legitimate purpose on the system. Typically these should only be used in specific and limited cases, like for software development.", "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a Phishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.", "procedureexamples": {"S0348": " Cardinal RAT  : Cardinal RAT and its watchdog component are compiled and executed after being delivered to victims as embedded, uncompiled source code.", "G0047": " Gamaredon Group  : Gamaredon Group has compiled the source code for a downloader directly on the infected system using the built-in  class.   ", "G0069": " MuddyWater  : MuddyWater has used the .NET csc.exe tool to compile executables from downloaded C# code.", "S0385": " njRAT  : njRAT has used AutoIt to compile the payload and main script into a single executable after delivery.", "G0106": " Rocke  : Rocke has compiled malware, delivered to victims as .c files, with the GNU Compiler Collection (GCC).  "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1027.004", "subtechniqueof": "T1027", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Compiler software (either native to the system or delivered by the adversary)"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Binary Analysis, Host intrusion prevention systems, Signature-based detection, Static File Analysis"], "contributors": ["Praetorian; Ye Yint Min Thu Htut, Offensive Security Team, DBS Bank"], "version": "1.0", "created": "16 March 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Software Packing", "detection": "Use file scanning to look for known software packers or artifacts of packing techniques. Packing is not a definitive indicator of malicious activity, because legitimate software may use packing techniques to reduce binary size or to protect proprietary code.", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "mitigations": {"M1049": " Antivirus/Antimalware  : Employ heuristic-based malware detection. Ensure updated virus definitions and create custom signatures for observed malware. "}, "procedureexamples": {"S0504": " Anchor  : Anchor has come with a packed payload.", "S0622": " AppleSeed  : AppleSeed has used UPX packers for its payload DLL.", "G0016": " APT29  : APT29 used UPX to pack files.", "G0022": " APT3  : APT3 has been known to pack their tools. ", "G0082": " APT38  : APT38 has used several code packing methods such as Themida, Enigma, VMProtect, and Obsidium, to pack their implants.", "G0087": " APT39  : APT39 has packed tools with UPX, and has repacked a modified version of Mimikatz to thwart anti-virus detection.", "S0373": " Astaroth  : Astaroth uses a software packer called Pe123\\RPolyCryptor.", "S0638": " Babuk  : Versions of Babuk have been packed.", "S0534": " Bazar  : Bazar has a variant with a packed payload.", "S0520": " BLINDINGCAN  : BLINDINGCAN has been packed with the UPX packer.", "S0020": " China Chopper  : China Chopper's client component is packed with UPX.", "S0611": " Clop  : Clop has been packed to help avoid detection.", "S0614": " CostaBricks  : CostaBricks can implement a custom-built virtual machine mechanism to obfuscate its code.", "S0527": " CSPY Downloader  : CSPY Downloader has been packed with UPX.", "S0625": " Cuba  : Cuba has a packed payload when delivered. ", "G0070": " Dark Caracal  : Dark Caracal has used UPX to pack Bandook.", "S0334": " DarkComet  : DarkComet has the option to compress its payload using UPX or MPRESS.", "S0187": " Daserf  : A version of Daserf uses the MPRESS packer.", "S0281": " Dok  : Dok is packed with an UPX executable packer.", "S0024": " Dyre  : Dyre has been delivered with encrypted resources and must be unpacked for execution.", "S0554": " Egregor  : Egregor's payloads are custom-packed, archived and encrypted to prevent analysis.", "G0066": " Elderwood  : Elderwood has packed malware payloads before delivery to victims.", "S0367": " Emotet  : Emotet has used custom packers to protect its payloads.", "S0512": " FatDuke  : FatDuke has been regularly repacked by its operators to create large binaries and evade detection.", "S0182": " FinFisher  : A FinFisher variant uses a custom packer.", "S0628": " FYAnti  : FYAnti has used ConfuserEx to pack its .NET module.", "G0093": " GALLIUM  : GALLIUM packed some payloads using different types of packers, both known and custom.", "S0588": " GoldMax  : GoldMax has been packed for obfuscation.", "S0342": " GreyEnergy  : GreyEnergy is packed for obfuscation.", "S0132": " H1N1  : H1N1 uses a custom packing algorithm.", "S0601": " Hildegard  : Hildegard has packed ELF files into other binaries.", "S0431": " HotCroissant  : HotCroissant has used the open source UPX executable packer.", "S0483": " IcedID  : IcedID has packed and encrypted its loader module.", "S0283": " jRAT  : jRAT payloads have been packed.", "G0094": " Kimsuky  : Kimsuky has packed malware with UPX.", "S0513": " LiteDuke  : LiteDuke has been packed with multiple layers of encryption.", "S0447": " Lokibot  : Lokibot has used several packing methods for obfuscation.", "S0532": " Lucifer  : Lucifer has used UPX packed binaries.", "S0409": " Machete  : Machete has been packed with NSIS. ", "S0530": " Melcoz  : Melcoz has been packed with VMProtect and Themida.", "S0455": " Metamorfo  : Metamorfo has used VMProtect to pack and protect files. ", "S0198": " NETWIRE  : NETWIRE has used .NET packer tools to evade detection.", "G0014": " Night Dragon  : Night Dragon is known to use software packing in its tools.", "S0264": " OopsIE  : OopsIE uses the SmartAssembly obfuscator to pack an embedded .Net Framework assembly used for C2.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D has a variant that is packed with UPX.", "G0040": " Patchwork  : A Patchwork payload was packed with UPX.", "S0650": " QakBot  : QakBot can encrypt and pack malicious payloads.", "S0565": " Raindrop  : Raindrop used a custom packer for its Cobalt Strike payload, which was compressed using the LZMA algorithm.", "G0106": " Rocke  : Rocke's miner has created UPX-packed files in the Windows Start Menu Folder.", "G0034": " Sandworm Team  : Sandworm Team used UPX to pack a copy of Mimikatz. ", "S0461": " SDBbot  : SDBbot has used a packed installer file.", "S0053": " SeaDuke  : SeaDuke has been packed with the UPX packer.", "S0444": " ShimRat  : ShimRat's loader has been packed with the compressed ShimRat core DLL and the legitimate DLL for it to hijack.", "S0543": " Spark  : Spark has been packed with Enigma Protector to obfuscate its contents. ", "G0092": " TA505  : TA505 has used UPX to obscure malicious code.", "G0139": " TeamTNT  : TeamTNT has used UPX and Ezuri packer to pack its binaries.", "G0089": " The White Company  : The White Company has obfuscated their payloads through packing.", "S0266": " TrickBot  : TrickBot leverages a custom packer to obfuscate its functionality.", "S0094": " Trojan.Karagany  : Trojan.Karagany samples sometimes use common binary packers such as UPX and Aspack on top of a custom Delphi binary packer.", "S0022": " Uroburos  : Uroburos uses a custom packer.", "S0476": " Valak  : Valak has used packed DLL payloads.", "S0257": " VERMIN  : VERMIN is initially packed.", "S0248": " yty  : yty packs a plugin with UPX.", "S0251": " Zebrocy  : Zebrocy's Delphi variant was packed with UPX.", "S0230": " ZeroT  : Some ZeroT DLL files have been packed with UPX.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used multi-stage packers for exploit code."}, "id": "T1027.002", "subtechniqueof": "T1027", "tactics": ["Defense Evasion"], "platforms": ["Windows, macOS"], "defensebypassed": ["Anti-virus, Heuristic detection, Signature-based detection"], "capecid": ["CAPEC-570"], "contributors": ["Filip Kafka, ESET"], "version": "1.1", "created": "05 February 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Obfuscated Files or Information", "detection": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network. ", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. Adversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "mitigations": {"M1049": " Antivirus/Antimalware  : Consider utilizing the Antimalware Scan Interface (AMSI) on Windows 10 to analyze commands after being processed/interpreted. ", "M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent execution of potentially obfuscated scripts. "}, "procedureexamples": {"S0045": " ADVSTORESHELL  : Most of the strings in ADVSTORESHELL are encrypted with an XOR-based algorithm; some strings are also encrypted with 3DES and reversed. API function names are also reversed, presumably to avoid detection in memory.", "S0331": " Agent Tesla  : Agent Tesla has had its code obfuscated in an apparent attempt to make analysis difficult. Agent Tesla has used the Rijndael symmetric encryption algorithm to encrypt strings.", "S0504": " Anchor  : Anchor has obsuscated code with stack strings and string encryption.", "S0584": " AppleJeus  : AppleJeus has XOR-encrypted collected system information prior to sending to a C2. AppleJeus has also used the open source ADVObfuscation library for its components.", "S0622": " AppleSeed  : AppleSeed has the ability to Base64 encode its payload and custom encrypt API calls.", "G0099": " APT-C-36  : APT-C-36 has used ConfuserEx to obfuscate its variant of Imminent Monitor, compressed payload and RAT packages, and password protected encrypted email attachments to avoid detection.", "G0026": " APT18  : APT18 obfuscates strings in the payload.", "G0073": " APT19  : APT19 used Base64 to obfuscate commands and the payload.", "G0007": " APT28  : APT28 encrypted a .dll payload using RTL and a custom encryption algorithm. APT28 has also obfuscated payloads with base64, XOR, and RC4.", "G0016": " APT29  : APT29 has used encoded PowerShell commands.", "G0022": " APT3  : APT3 obfuscates files or information to help evade defensive measures.", "G0050": " APT32  : APT32 uses the Invoke-Obfuscation framework to obfuscate their PowerShell and also performs other code obfuscation. APT32 has also encoded payloads using Base64 and a framework called \"Dont-Kill-My-Cat (DKMC). APT32 also encrypts the library used for network exfiltration with AES-256 in CBC mode in their macOS backdoor.", "G0064": " APT33  : APT33 has used base64 to encode payloads.", "G0067": " APT37  : APT37 obfuscates strings and payloads.", "G0087": " APT39  : APT39 has used malware to drop encrypted CAB files.", "G0096": " APT41  : APT41 used VMProtected binaries in multiple intrusions.", "S0456": " Aria-body  : Aria-body has used an encrypted configuration file for its loader.", "S0373": " Astaroth  : Astaroth obfuscates its JScript code, and has used an XOR-based algorithm to encrypt payloads twice with different keys.", "S0438": " Attor  : Strings in Attor's components are encrypted with a XOR cipher, using a hardcoded key and the configuration data, log files and plugins are encrypted using a hybrid encryption scheme of Blowfish-OFB combined with RSA.", "S0347": " AuditCred  : AuditCred encrypts the configuration.", "S0640": " Avaddon  : Avaddon has used encrypted strings.", "S0473": " Avenger  : Avenger has the ability to XOR encrypt files to be sent to C2.", "S0475": " BackConfig  : BackConfig has used compressed and decimal encoded VBS scripts.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has obfuscated tools and malware it uses with VMProtect.", "S0534": " Bazar  : Bazar has used XOR, RSA2, and RC4 encrypted files.", "S0574": " BendyBear  : BendyBear has encrypted payloads using RC4 and XOR.", "S0268": " Bisonal  : Bisonal's DLL file and non-malicious decoy file are encrypted with RC4.", "S0570": " BitPaymer  : BitPaymer has used RC4-encrypted strings and string hashes to avoid identifiable strings within the binary.", "G0063": " BlackOasis  : BlackOasis's first stage shellcode contains a NOP sled with alternative instructions that was likely designed to bypass antivirus tools.", "S0520": " BLINDINGCAN  : BLINDINGCAN has obfuscated code using Base64 encoding.", "G0108": " Blue Mockingbird  : Blue Mockingbird has obfuscated the wallet address in the payload binary.", "S0657": " BLUELIGHT  : BLUELIGHT has a XOR-encoded payload.", "S0635": " BoomBox  : BoomBox can encrypt data using AES prior to exfiltration.", "S0415": " BOOSTWRITE  : BOOSTWRITE has encoded its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit Initialization vector (IV) to evade detection.", "S0651": " BoxCaon  : BoxCaon used the \"StackStrings\" obfuscation technique to hide malicious functionalities.", "S0482": " Bundlore  : Bundlore has obfuscated data with base64, AES, RC4, and bz2.", "S0030": " Carbanak  : Carbanak encrypts strings to make analysis more difficult.", "S0484": " Carberp  : Carberp has used XOR-based encryption to mask C2 server locations within the trojan.", "S0335": " Carbon  : Carbon encrypts configuration files and tasks for the malware to complete using CAST-128 algorithm.", "S0348": " Cardinal RAT  : Cardinal RAT encodes many of its artifacts and is encrypted (AES-128) when downloaded. ", "S0465": " CARROTBALL  : CARROTBALL has used a custom base64 alphabet to decode files.", "S0462": " CARROTBAT  : CARROTBAT has the ability to download a base64 encoded payload and execute obfuscated commands on the infected host.", "G0114": " Chimera  : Chimera has encoded PowerShell commands. ", "G0080": " Cobalt Group  : Cobalt Group obfuscated several scriptlets and code used on the victim\u2019s machine, including through use of XOR and RC4.", "S0154": " Cobalt Strike  : Cobalt Strike can hash functions to obfuscate calls to the Windows API and use a public/private key pair to encrypt Beacon session metadata.", "S0369": " CoinTicker  : CoinTicker initially downloads a hidden encoded file.", "S0244": " Comnie  : Comnie uses RC4 and Base64 to obfuscate strings.", "S0126": " ComRAT  : ComRAT has used encryption and base64 to obfuscate its orchestrator code in the Registry. ComRAT has also embedded an XOR encrypted communications module inside the orchestrator module. ComRAT has encrypted its virtual file system using AES-256 in XTS mode and has encoded PowerShell scripts. ", "S0608": " Conficker  : Conficker has obfuscated its code to prevent its removal from host machines.", "S0575": " Conti  : Conti can use compiler-based obfuscation for its code, encrypt DLLs, and hide Windows API calls.", "S0492": " CookieMiner  : CookieMiner has used base64 encoding to obfuscate scripts on the system. ", "S0137": " CORESHELL  : CORESHELL obfuscates strings using a custom stream cipher.", "S0046": " CozyCar  : The payload of CozyCar is encrypted with simple XOR with a rotating key. The CozyCar configuration file has been encrypted with RC4 keys.", "S0625": " Cuba  : Cuba has used multiple layers of obfuscation to avoid analysis, including its Base64 encoded payload. ", "S0497": " Dacls  : Dacls can encrypt its configuration file with AES CBC.", "G0070": " Dark Caracal  : Dark Caracal has obfuscated strings in Bandook by base64 encoding, and then encrypting them.", "G0012": " Darkhotel  : Darkhotel has obfuscated code using RC4, XOR, and RSA.", "S0187": " Daserf  : Daserf uses encrypted Windows APIs and also encrypts data using the alternative base64+RC4 or the Caesar cipher.", "S0354": " Denis  : Denis obfuscates its code and encrypts the API names. Denis also encodes its payload in Base64.", "S0213": " DOGCALL  : DOGCALL is encrypted using single-byte XOR.", "S0384": " Dridex  : Dridex's strings are obfuscated using RC4. ", "S0502": " Drovorub  : Drovorub has used XOR encrypted payloads in WebSocket client to server messages.", "S0567": " Dtrack  : Dtrack has used a dropper that embeds an encrypted payload as extra data.", "G0031": " Dust Storm  : Dust Storm has encoded payloads with a single-byte XOR, both skipping the key itself and zeroing in an attempt to avoid exposing the key.", "S0062": " DustySky  : The DustySky dropper uses a function to obfuscate the name of functions and other parts of the malware.", "S0377": " Ebury  : Ebury has obfuscated its strings with a simple XOR encryption with a static key.", "S0593": " ECCENTRICBANDWAGON  : ECCENTRICBANDWAGON has encrypted strings with RC4.", "S0624": " Ecipekac  : Ecipekac can use XOR, AES, and DES to encrypt loader shellcode.", "S0605": " EKANS  : EKANS uses encoded strings in its process kill list. ", "G0066": " Elderwood  : Elderwood has encrypted documents and malicious executables.", "S0081": " Elise  : Elise encrypts several of its files, including configuration files.", "S0082": " Emissary  : Variants of Emissary encrypt payloads using various XOR ciphers, as well as a custom algorithm that uses the \"srand\" and \"rand\" functions.", "S0367": " Emotet  : Emotet has obfuscated macros within malicious documents to hide the URLs hosting the malware,  CMD.exe arguments, and PowerShell scripts. ", "S0363": " Empire  : Empire has the ability to obfuscate commands using .", "S0634": " EnvyScout  : EnvyScout can Base64 encode payloads.", "S0091": " Epic  : Epic heavily obfuscates its code to make analysis more difficult.", "S0401": " Exaramel for Linux  : Exaramel for Linux uses RC4 for encrypting the configuration.", "S0512": " FatDuke  : FatDuke can use base64 encoding, string stacking, and opaque predicates for obfuscation.", "S0267": " FELIXROOT  : FELIXROOT encrypts strings in the backdoor using a custom XOR algorithm.", "G0037": " FIN6  : FIN6 has used encoded PowerShell commands.", "G0046": " FIN7  : FIN7 has used fragmented strings, environment variables, standard input (stdin), and native character-replacement functionalities to obfuscate commands.", "G0061": " FIN8  : FIN8 has used environment variables and standard input (stdin) to obfuscate command-line arguments. FIN8 also obfuscates malicious macros delivered as payloads.", "S0355": " Final1stspy  : Final1stspy obfuscates strings with base64 encoding.", "S0182": " FinFisher  : FinFisher is heavily obfuscated in many ways, including through the use of spaghetti code in its functions in an effort to confuse disassembly programs. It also uses a custom XOR algorithm to obfuscate code.", "S0618": " FIVEHANDS  : The FIVEHANDS payload is encrypted with AES-128.", "S0383": " FlawedGrace  : FlawedGrace encrypts its C2 configuration files with AES in CBC mode.", "G0117": " Fox Kitten  : Fox Kitten has base64 encoded scripts and payloads to avoid detection.", "G0101": " Frankenstein  : Frankenstein has run encoded commands from the command line.", "S0277": " FruitFly  : FruitFly executes and stores obfuscated Perl scripts.", "S0410": " Fysbis  : Fysbis has been encrypted using XOR and RC4. ", "G0093": " GALLIUM  : GALLIUM used a modified version of HTRAN in which they obfuscated strings such as debug messages in an apparent attempt to evade detection.", "G0084": " Gallmaker  : Gallmaker obfuscated shellcode used during execution.", "G0047": " Gamaredon Group  : Gamaredon Group has delivered self-extracting 7z archive files within malicious document attachments, and used obfuscated or encrypted scripts.", "S0168": " Gazer  : Gazer logs its actions into files that are encrypted with 3DES. It also uses RSA to encrypt resources.", "G0115": " GOLD SOUTHFIELD  : GOLD SOUTHFIELD has executed base64 encoded PowerShell scripts on compromised hosts.", "S0493": " GoldenSpy  : GoldenSpy's uninstaller has base64-encoded its variables. ", "S0588": " GoldMax  : GoldMax has written AES-encrypted and Base64-encoded configuration files to disk.", "S0477": " Goopy  : Goopy's decrypter have been inflated with junk code in between legitimate API functions, and also included infinite loops to avoid analysis.", "S0531": " Grandoreiro  : The Grandoreiro payload has been delivered encrypted with a custom XOR-based algorithm and also as a base64-encoded ZIP file.", "S0237": " GravityRAT  : GravityRAT supports file encryption (AES with the key \"lolomycin2017\").", "S0342": " GreyEnergy  : GreyEnergy encrypts its configuration files with AES-256 and also encrypts its strings.", "S0632": " GrimAgent  : GrimAgent has used Rotate on Right (RoR) and Rotate on Left (RoL) functionality to encrypt strings.", "G0043": " Group5  : Group5 disguised its malicious binaries with several layers of obfuscation, including encrypting the files.", "S0132": " H1N1  : H1N1 uses multiple techniques to obfuscate strings, including XOR.", "S0499": " Hancitor  : Hancitor has used Base64 to encode malicious links. Hancitor has also delivered compressed payloads in ZIP files to victims.", "S0391": " HAWKBALL  : HAWKBALL has encrypted the payload with an XOR-based algorithm.", "S0170": " Helminth  : The Helminth config file is encrypted with RC4.", "S0087": " Hi-Zor  : Hi-Zor uses various XOR techniques to obfuscate its components.", "S0394": " HiddenWasp  : HiddenWasp encrypts its configuration and payload.", "G0126": " Higaisa  : Higaisa used Base64 encoded compressed payloads.", "S0601": " Hildegard  : Hildegard has encrypted an ELF file.", "S0232": " HOMEFRY  : Some strings in HOMEFRY are obfuscated with XOR x56.", "G0072": " Honeybee  : Honeybee drops files with base64-encoded data.", "S0431": " HotCroissant  : HotCroissant has encrypted strings with single-byte XOR and base64 encoded RC4.", "S0070": " HTTPBrowser  : HTTPBrowser's code may be obfuscated through structured exception handling and return-oriented programming.", "S0203": " Hydraq  : Hydraq uses basic obfuscation in the form of spaghetti code.", "S0483": " IcedID  : IcedID has utilzed encrypted binaries and base64 encoded strings.", "S0434": " Imminent Monitor  : Imminent Monitor has encrypted the spearphish attachments to avoid detection from email gateways; the debugger also encrypts information before sending to the C2.", "G0100": " Inception  : Inception has encrypted malware payloads dropped on victim machines with AES and RC4 encryption.", "S0604": " Industroyer  : Industroyer uses heavily obfuscated code in its Windows Notepad backdoor.", "S0259": " InnaputRAT  : InnaputRAT uses an 8-byte XOR key to obfuscate API names and other strings contained in the payload.", "S0260": " InvisiMole  : InvisiMole avoids analysis by encrypting all strings, internal files, configuration data and by using a custom executable format.", "S0231": " Invoke-PSImage  : Invoke-PSImage can be used to embed a PowerShell script within the pixels of a PNG file.", "S0581": " IronNetInjector  : IronNetInjector can obfuscate variable names, encrypt strings, as well as base64 encode and Rijndael encrypt payloads.", "S0189": " ISMInjector  : ISMInjector is obfuscated with the off-the-shelf SmartAssembly .NET obfuscator created by red-gate.com.", "S0044": " JHUHUGIT  : Many strings in JHUHUGIT are obfuscated with a XOR algorithm.", "S0201": " JPIN  : A JPIN uses a encrypted and compressed payload that is disguised as a bitmap within the resource section of the installer.", "S0283": " jRAT  : jRAT\u2019s Java payload is encrypted with AES. Additionally, backdoor files are encrypted using DES as a stream cipher. Later variants of jRAT also incorporated AV evasion methods such as Java bytecode obfuscation via the commercial Allatori obfuscation tool.", "S0265": " Kazuar  : Kazuar is obfuscated using the open source ConfuserEx protector. Kazuar also obfuscates the name of created files/folders/mutexes and encrypts debug messages written to log files using the Rijndael cipher.", "S0585": " Kerrdown  : Kerrdown can encrypt, encode, and compress multiple layers of shellcode.", "S0487": " Kessel  : Kessel's configuration is hardcoded and RC4 encrypted within the binary.", "S0387": " KeyBoy  : In one version of KeyBoy, string obfuscation routines were used to hide many of the critical values referenced in the malware.", "S0526": " KGH_SPY  : KGH_SPY has used encrypted strings in its installer.", "S0607": " KillDisk  : KillDisk uses VMProtect to make reverse engineering the malware more difficult.", "G0094": " Kimsuky  : Kimsuky has obfuscated binary strings including the use of XOR encryption and Base64 encoding.", "S0641": " Kobalos  : Kobalos encrypts all strings using RC4 and bundles all functionality into a single function call. ", "S0236": " Kwampirs  : Kwampirs downloads additional files that are base64-encoded and encrypted with another cipher.", "G0032": " Lazarus Group  : Lazarus Group malware uses multiple types of encryption and encoding in its malware files, including AES, Caracachs, RC4, basic XOR with constant 0xA7, and other techniques.", "G0077": " Leafminer  : Leafminer obfuscated scripts that were used on victim machines.", "G0065": " Leviathan  : Leviathan has obfuscated code using base64 and gzip compression.", "S0395": " LightNeuron  : LightNeuron encrypts its configuration files with AES-256.", "S0447": " Lokibot  : Lokibot has obfuscated strings with base64 encoding.", "S0451": " LoudMiner  : LoudMiner has obfuscated various scripts and encrypted DMG files.    ", "S0409": " Machete  : Machete has used pyobfuscate, zlib compression, and base64 encoding for obfuscation. Machete has also used some visual obfuscation techniques by naming variables as combinations of letters to hinder analysis.", "G0059": " Magic Hound  : Magic Hound malware has used base64-encoded commands and files, and has also encrypted embedded strings with AES.", "S0167": " Matryoshka  : Matryoshka obfuscates API function names using a substitute cipher combined with Base64 encoding.", "S0449": " Maze  : Maze has decrypted strings and other important information during the encryption process. Maze also calls certain functions dynamically to hinder analysis. ", "S0500": " MCMD  : MCMD can Base64 encode output strings prior to sending to C2.", "G0045": " menuPass  : menuPass has encoded strings in its malware with base64 as well as with a simple, single-byte XOR obfuscation using key 0x40.", "S0455": " Metamorfo  : Metamorfo has encrypted payloads and strings.", "S0339": " Micropsia  : Micropsia obfuscates the configuration with a custom Base64 and XOR.", "S0051": " MiniDuke  : MiniDuke can use control flow flattening to obscure code.", "G0103": " Mofang  : Mofang has compressed the ShimRat executable within malicious email attachments. Mofang has also encrypted payloads before they are downloaded to victims.", "G0021": " Molerats  : Molerats has delivered compressed executables within ZIP files to victims.", "S0284": " More_eggs  : More_eggs's payload has been encrypted with a key that has the hostname and processor family information appended to the end.", "S0256": " Mosquito  : Mosquito\u2019s installer is obfuscated with a custom crypter to obfuscate the installer.", "G0069": " MuddyWater  : MuddyWater has used Daniel Bohannon\u2019s Invoke-Obfuscation framework and obfuscated PowerShell scripts. The group has also used other obfuscation methods, including Base64 obfuscation of VBScripts and PowerShell commands.", "G0129": " Mustang Panda  : Mustang Panda has delivered initial payloads hidden using archives and encoding measures.", "S0228": " NanHaiShu  : NanHaiShu encodes files in Base64.", "S0336": " NanoCore  : NanoCore\u2019s plugins were obfuscated with Eazfuscater.NET 3.3.", "S0457": " Netwalker  : Netwalker's PowerShell script has been obfuscated with multiple layers including base64 and hexadecimal encoding and XOR-encryption, as well as obfuscated PowerShell functions and variables. Netwalker's DLL has also been embedded within the PowerShell script in hex format.", "S0198": " NETWIRE  : NETWIRE has used a custom obfuscation algorithm to hide strings including Registry keys, APIs, and DLL names.", "G0014": " Night Dragon  : A Night Dragon DLL included an XOR-encoded section.", "S0385": " njRAT  : njRAT has included a base64 encoded executable.", "S0353": " NOKKI  : NOKKI uses Base64 encoding for strings.", "G0049": " OilRig  : OilRig has encrypted and encoded data in its malware, including by using base64.", "S0138": " OLDBAIT  : OLDBAIT obfuscates internal strings and unpacks them at startup.", "S0264": " OopsIE  : OopsIE uses the Confuser protector to obfuscate an embedded .Net Framework assembly used for C2. OopsIE also encodes collected data in hexadecimal format before writing to files on disk and obfuscates strings.", "G0116": " Operation Wocao  : Operation Wocao has executed PowerShell commands which were encoded or compressed using Base64, zlib, and XOR.", "S0229": " Orz  : Some Orz strings are base64 encoded, such as the embedded DLL known as MockDll.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D encrypts its strings in RSA256 and encodes them in a custom base64 scheme and XOR.", "S0594": " Out1  : Out1 has the ability to encode data.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell can use encryption and base64 encoding to hide strings and to enforce access control once deployed.", "G0040": " Patchwork  : Patchwork has obfuscated a script with Crypto Obfuscator.", "S0587": " Penquin  : Penquin has encrypted strings in the binary for obfuscation.", "S0517": " Pillowmint  : Pillowmint has been compressed and stored within a registry key. Pillowmint has also obfuscated the AES key used for encryption.    ", "S0501": " PipeMon  : PipeMon modules are stored encrypted on disk.", "S0124": " Pisloader  : Pisloader obfuscates files by splitting strings into smaller sub-strings and including \"garbage\" strings that are never used. The malware also uses return-oriented programming (ROP) technique and single-byte XOR to obfuscate data.", "S0428": " PoetRAT  : PoetRAT has used a custom encryption scheme for communication between scripts and pyminifier to obfuscate scripts.", "S0012": " PoisonIvy  : PoisonIvy hides any strings related to its own indicators of compromise.", "S0518": " PolyglotDuke  : PolyglotDuke can custom encrypt strings.", "S0453": " Pony  : Pony attachments have been delivered via compressed archive files. Pony also obfuscates the memory flow by adding junk instructions when executing to make analysis more difficult.   ", "S0150": " POSHSPY  : POSHSPY appends a file signature header (randomly selected from six file types) to encrypted data prior to upload or download.", "S0194": " PowerSploit  : PowerSploit contains a collection of ScriptModification modules that compress and encode scripts and payloads.", "S0393": " PowerStallion  : PowerStallion uses a XOR cipher to encrypt command output written to its OneDrive C2 server.", "S0223": " POWERSTATS  : POWERSTATS uses character replacement, PowerShell environment variables, and XOR encoding to obfuscate code. POWERSTATS's backdoor code is a multi-layer obfuscated, encoded, and compressed blob.  POWERSTATS has used PowerShell code with custom string obfuscation ", "S0113": " Prikormka  : Some resources in Prikormka are encrypted with a simple XOR operation or encoded with Base64.", "S0613": " PS1  : PS1 is distributed as a set of encrypted files and scripts.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY has hashed most its code's functions and encrypted payloads with base64 and XOR.", "S0197": " PUNCHTRACK  : PUNCHTRACK is loaded and executed by a highly obfuscated launcher.", "G0024": " Putter Panda  : Droppers used by Putter Panda use RC4 or a 16-byte XOR key consisting of the bytes 0xA0 \u2013 0xAF to obfuscate payloads.", "S0650": " QakBot  : QakBot can use obfuscated and encoded scripts; it has also hidden code within Excel spreadsheets by turning the font color to white and splitting it across multiple cells.", "S0269": " QUADAGENT  : QUADAGENT was likely obfuscated using Invoke-Obfuscation.", "S0565": " Raindrop  : Raindrop encrypted its payload using a simple XOR algorithm with a single-byte key.", "S0629": " RainyDay  : RainyDay has downloaded as a XOR-encrypted payload.", "S0458": " Ramsay  : Ramsay has base64-encoded its portable executable and hidden itself under a JPG header. Ramsay can also embed information within document footers.    ", "S0172": " Reaver  : Reaver encrypts some of its files with XOR.", "S0153": " RedLeaves  : A RedLeaves configuration file is encrypted with a simple XOR key, 0x53.", "S0511": " RegDuke  : RegDuke can use control-flow flattening or the commercially available .NET Reactor for obfuscation.", "S0332": " Remcos  : Remcos uses RC4 and base64 to obfuscate data, including Registry entries and file paths.", "S0375": " Remexi  : Remexi obfuscates its configuration data with XOR.", "S0125": " Remsec  : Some data in Remsec is encrypted using RC5 in CBC mode, AES-CBC with a hardcoded key, RC4, or Salsa20. Some data is also base64-encoded.", "S0496": " REvil  : REvil has used encrypted strings and configuration files.", "S0433": " Rifdoor  : Rifdoor has encrypted strings with a single byte XOR algorithm.", "S0448": " Rising Sun  : Configuration data used by Rising Sun is encrypted using RC4.   ", "G0106": " Rocke  : Rocke has modified UPX headers after packing files to break unpackers.", "S0270": " RogueRobin  : The PowerShell script with the RogueRobin payload was obfuscated using the COMPRESS technique in Invoke-Obfuscation.", "S0148": " RTM  : RTM strings, network data, configuration, and modules are encrypted with a modified RC4 algorithm. RTM has also been delivered to targets as various archive files including ZIP, 7-ZIP, and RAR.", "S0446": " Ryuk  : Ryuk can use anti-disassembly and code transformation obfuscation techniques.", "S0074": " Sakula  : Sakula uses single-byte XOR obfuscation to obfuscate many of its files.", "S0370": " SamSam  : SamSam has been seen using AES or DES to encrypt payloads and payload components.", "G0034": " Sandworm Team  : Sandworm Team has used Base64 encoding within malware variants. Sandworm Team has also used ROT13 encoding, AES encryption and compression with the zlib library for their Python-based backdoor.", "S0461": " SDBbot  : SDBbot has the ability to XOR the strings for its installer component with a hardcoded 128 byte key.", "S0345": " Seasalt  : Seasalt obfuscates configuration data.", "S0596": " ShadowPad  : ShadowPad has encrypted a virtual file system and various files.", "S0140": " Shamoon  : Shamoon contains base64-encoded strings.", "S0450": " SHARPSTATS  : SHARPSTATS has used base64 encoding and XOR to obfuscate PowerShell scripts.", "S0444": " ShimRat  : ShimRat has been delivered as a package that includes compressed DLL and shellcode payloads within a .dat file.", "S0445": " ShimRatReporter  : ShimRatReporter encrypted gathered information with a combination of shifting and XOR using a static key.", "S0063": " SHOTPUT  : SHOTPUT is obscured using XOR encoding and appended to a valid GIF file.", "S0589": " Sibot  : Sibot has obfuscated scripts used in execution.", "G0121": " Sidewinder  : Sidewinder has used base64 encoding and ECDH-P256 encryption for scripts and files.", "G0091": " Silence  : Silence has used environment variable string substitution for obfuscation.", "S0623": " Siloscape  : Siloscape itself is obfuscated and uses obfuscated API calls.", "S0468": " Skidmap  : Skidmap has encrypted it's main payload using 3DES. ", "S0633": " Sliver  : Sliver can encrypt strings at compile time.", "S0226": " Smoke Loader  : Smoke Loader uses a simple one-byte XOR method to obfuscate values in the malware.", "S0649": " SMOKEDHAM  : The SMOKEDHAM source code is embedded in the dropper as an encrypted string.", "S0627": " SodaMaster  : SodaMaster can use \"stackstrings\" for obfuscation.", "S0615": " SombRAT  : SombRAT can encrypt strings with XOR-based routines and use a custom AES storage format for plugins, configuration, C2 domains, and harvested data.", "S0516": " SoreFang  : SoreFang has the ability to encode and RC6 encrypt data sent to C2.", "S0374": " SpeakUp  : SpeakUp encodes its second-stage payload with Base64. ", "S0390": " SQLRat  : SQLRat has used a character insertion obfuscation technique, making the script appear to contain Chinese characters.", "S0380": " StoneDrill  : StoneDrill has obfuscated its module with an alphabet-based table or XOR encryption.", "S0142": " StreamEx  : StreamEx obfuscates some commands by using statically programmed fragments of strings when starting a DLL. It also uses a one-byte xor against 0x91 to encode configuration data.", "S0491": " StrongPity  : StrongPity has used encrypted strings in its dropper component.", "S0603": " Stuxnet  : Stuxnet uses encrypted configuration blocks and writes encrypted files to disk.", "S0559": " SUNBURST  : SUNBURST strings were compressed and encoded in Base64. SUNBURST also obfuscated collected system information using a FNV-1a + XOR algorithm.", "S0562": " SUNSPOT  : SUNSPOT encrypted log entries it collected with the stream cipher RC4 using a hard-coded key. It also uses AES128-CBC encrypted blobs for SUNBURST source code and data extracted from the SolarWinds Orion ", "S0578": " SUPERNOVA  : SUPERNOVA contained Base64-encoded strings.", "S0242": " SynAck  : SynAck payloads are obfuscated prior to compilation to inhibit analysis and/or reverse engineering.", "G0092": " TA505  : TA505 has password-protected malicious Word documents and used base64 encoded PowerShell commands.", "G0127": " TA551  : TA551 has used obfuscated variable names in a JavaScript configuration file.", "S0011": " Taidoor  : Taidoor can use encrypted string blocks for obfuscation.", "S0467": " TajMahal  : TajMahal has used an encrypted Virtual File System to store plugins.", "G0139": " TeamTNT  : TeamTNT has encrypted its binaries via AES. TeamTNT has also encoded files using Base64.", "S0560": " TEARDROP  : TEARDROP created and read from a file with a fake JPG header, and its payload was encrypted with a simple rotating XOR cipher.", "G0027": " Threat Group-3390  : A Threat Group-3390 tool can encrypt payloads using XOR. Threat Group-3390 malware is also obfuscated using Metasploit\u2019s shikata_ga_nai encoder as well as compressed with LZNT1 compression.", "S0131": " TINYTYPHON  : TINYTYPHON has used XOR with 0x90 to obfuscate its configuration file.", "G0134": " Transparent Tribe  : Transparent Tribe has dropped encoded executables on compromised hosts.", "S0266": " TrickBot  : TrickBot uses non-descriptive names to hide functionality and uses an AES CBC (256 bits) encryption algorithm for its loader and configuration files.", "S0609": " TRITON  : TRITON encoded the two inject.bin and imain.bin payloads.", "S0094": " Trojan.Karagany  : Trojan.Karagany can base64 encode and AES-128-CBC encrypt data prior to transmission.", "G0081": " Tropic Trooper  : Tropic Trooper has encrypted configuration files.", "S0647": " Turian  : Turian can use VMProtect for obfuscation.", "G0010": " Turla  : Turla has used encryption (including salted 3DES via PowerSploit's ), random variable names, and base64 encoding to obfuscate PowerShell commands and payloads.", "S0263": " TYPEFRAME  : APIs and strings in some TYPEFRAME variants are RC4 encrypted. Another variant is encoded with XOR.", "S0333": " UBoatRAT  : UBoatRAT encrypts instructions in the payload using a simple XOR cipher.", "S0386": " Ursnif  : Ursnif has used an XOR-based algorithm to encrypt Tor clients dropped to disk. Ursnif droppers have also been delivered as password-protected zip files that execute base64 encoded PowerShell commands.", "S0136": " USBStealer  : Most strings in USBStealer are encrypted using 3DES and XOR and reversed.", "S0476": " Valak  : Valak has the ability to base64 encode and XOR encrypt strings.", "S0257": " VERMIN  : VERMIN is obfuscated using the obfuscation tool called ConfuserEx.", "S0180": " Volgmer  : A Volgmer variant is encoded using a simple XOR cipher.", "S0612": " WastedLocker  : The WastedLocker payload includes encrypted strings stored within the .bss section of the binary file.   ", "S0579": " Waterbear  : Waterbear has used RC4 encrypted shellcode.", "G0107": " Whitefly  : Whitefly has encrypted the payload used for C2.    ", "G0112": " Windshift  : Windshift has used string encoding with floating point calculations.", "S0466": " WindTail  : WindTail can be delivered as a compressed, encrypted, and encoded payload.", "S0430": " Winnti for Linux  : Winnti for Linux can encode its configuration file with single-byte XOR encoding.", "G0102": " Wizard Spider  : Wizard Spider used Base64 encoding to obfuscate an Empire service and PowerShell commands.", "S0117": " XTunnel  : A version of XTunnel introduced in July 2015 obfuscated the binary using opaque predicates and other techniques in a likely attempt to obfuscate it and bypass security products.", "S0388": " YAHOYAH  : YAHOYAH encrypts its configuration file using a simple algorithm.", "S0230": " ZeroT  : ZeroT has encrypted its payload with RC4.", "S0330": " Zeus Panda  : Zeus Panda encrypts strings with XOR and obfuscates the macro code from the initial payload. Zeus Panda also encrypts all configuration and settings in AES and RC4."}, "id": "T1027", "subtechniques": ["T1027.001", "T1027.002", "T1027.003", "T1027.004", "T1027.005", "T1027.006"], "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Application control, Application control by file name or path, Host forensic analysis, Host intrusion prevention systems, Log analysis, Signature-based detection"], "capecid": ["CAPEC-267"], "contributors": ["Christiaan Beek, @ChristiaanBeek; Red Canary"], "version": "1.2", "created": "31 May 2017", "lastmodified": "20 October 2021"}, {"techniquename": "Network Boundary Bridging", "detection": "Consider monitoring network traffic on both interfaces of border network devices with out-of-band packet capture or network flow data, using a different device than the one in question.  Look for traffic that should be prohibited by the intended network traffic policy enforcement for the border network device.Monitor the border network device\u2019s configuration to validate that the policy enforcement sections are what was intended.  Look for rules that are less restrictive, or that allow specific traffic types that were not previously authorized.", "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication.  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.", "mitigations": {"M1043": " Credential Access Protection  : Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations.", "M1037": " Filter Network Traffic  : Upon identifying a compromised network device being used to bridge a network boundary, block the malicious packets using an unaffected network device in path, such as a firewall or a router that has not been compromised.  Continue to monitor for additional activity and to ensure that the blocks are indeed effective.", "M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.", "M1027": " Password Policies  : Refer to NIST guidelines when creating password policies. ", "M1026": " Privileged Account Management  : Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints."}, "id": "T1599", "subtechniques": ["T1599.001"], "tactics": ["Defense Evasion"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "defensebypassed": ["Firewall, Router ACL"], "version": "1.0", "created": "19 October 2020", "lastmodified": "21 October 2020"}, {"techniquename": "Network Address Translation Traversal", "detection": "Consider monitoring network traffic on both interfaces of border network devices.  Compare packets transmitted by the device between networks to look for signs of NAT being implemented.  Packets which have their IP addresses changed should still have the same size and contents in the data encapsulated beyond Layer 3.  In some cases, Port Address Translation (PAT) may also be used by an adversary.Monitor the border network device\u2019s configuration to determine if any unintended NAT rules have been added without authorization.", "description": "Adversaries may bridge network boundaries by modifying a network device\u2019s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Network devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.When an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders.  Adversaries may use Patch System Image to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities", "mitigations": {"M1043": " Credential Access Protection  : Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations. ", "M1037": " Filter Network Traffic  : Block Traffic   Upon identifying a compromised network device being used to bridge a network boundary, block the malicious packets using an unaffected network device in path, such as a firewall or a router that has not been compromised.  Continue to monitor for additional activity and to ensure that the blocks are indeed effective.", "M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control. ", "M1027": " Password Policies  : Refer to NIST guidelines when creating password policies. ", "M1026": " Privileged Account Management  : Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints."}, "id": "T1599.001", "subtechniqueof": "T1599", "tactics": ["Defense Evasion"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "19 October 2020", "lastmodified": "21 October 2020"}, {"techniquename": "Downgrade System Image", "detection": "Many embedded network devices provide a command to print the version of the currently running operating system.  Use this command to query the operating system for its version number and compare it to what is expected for the device in question.  Because image downgrade may be used in conjunction with , it may be appropriate to also verify the integrity of the vendor provided operating system image file. ", "description": "Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. On embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.Downgrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as Weaken Encryption.  Downgrading of a system image can be done on its own, or it can be used in conjunction with Patch System Image.  ", "mitigations": {"M1046": " Boot Integrity  : Some vendors of embedded network devices provide cryptographic signing to ensure the integrity of operating system images at boot time.  Implement where available, following vendor guidelines. ", "M1045": " Code Signing  : Many vendors provide digitally signed operating system images to validate the integrity of the software used on their platform.  Make use of this feature where possible in order to prevent and/or detect attempts by adversaries to compromise the system image. ", "M1043": " Credential Access Protection  : Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations. ", "M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.", "M1027": " Password Policies  : Refer to NIST guidelines when creating password policies.  ", "M1026": " Privileged Account Management  : Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints."}, "id": "T1601.002", "subtechniqueof": "T1601", "tactics": ["Defense Evasion"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "19 October 2020", "lastmodified": "22 October 2020"}, {"techniquename": "Binary Padding", "detection": "Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool.  When executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file. ", "description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed. ", "procedureexamples": {"G0016": " APT29  : APT29 has used large file sizes to avoid detection.", "G0050": " APT32  : APT32 includes garbage code to mislead anti-malware software and researchers.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER downloader code has included \"0\" characters at the end of the file to inflate the file size in a likely attempt to evade anti-virus detection.", "S0244": " Comnie  : Comnie appends a total of 64MB of garbage data to a file to deter any security products in place that may be scanning files on disk.", "S0137": " CORESHELL  : CORESHELL contains unused machine instructions in a likely attempt to hinder analysis.", "S0614": " CostaBricks  : CostaBricks has added the entire unobfuscated code of the legitimate open source application Blink to its code.", "S0082": " Emissary  : A variant of Emissary appends junk data to the end of its DLL file to create a large file that may exceed the maximum size that anti-virus programs can scan.", "S0512": " FatDuke  : FatDuke has been packed with junk code and strings.", "S0182": " FinFisher  : FinFisher contains junk code in its functions in an effort to confuse disassembly programs.", "G0047": " Gamaredon Group  : Gamaredon Group has obfuscated .NET executables by inserting junk code.    ", "S0477": " Goopy  : Goopy has had null characters padded in its malicious DLL payload.", "S0531": " Grandoreiro  : Grandoreiro has added BMP images to the resources section of its Portable Executable (PE) file increasing each binary to at least 300MB in size.", "S0632": " GrimAgent  : GrimAgent has the ability to add bytes to change the file hash.", "G0126": " Higaisa  : Higaisa performed padding with null bytes before calculating its hash.", "S0528": " Javali  : Javali can use large obfuscated libraries to hinder detection and analysis.", "S0236": " Kwampirs  : Before writing to disk, Kwampirs inserts a randomly generated string into the middle of the decrypted payload in an attempt to evade hash-based detections.", "G0065": " Leviathan  : Leviathan has inserted garbage characters into code, presumably to avoid anti-virus detection.", "S0449": " Maze  : Maze has inserted large blocks of junk code, including some components to decrypt strings and other important information for later in the encryption process.", "G0002": " Moafee  : Moafee has been known to employ binary padding.", "G0129": " Mustang Panda  : Mustang Panda has used junk code within their DLL files to hinder analysis.", "G0040": " Patchwork  : Patchwork apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes.", "S0223": " POWERSTATS  : POWERSTATS has used useless code blocks to counter analysis.", "S0650": " QakBot  : QakBot can use large file sizes to evade detection.", "S0433": " Rifdoor  : Rifdoor has added four additional bytes of data upon launching, then saved the changed version as .", "S0370": " SamSam  : SamSam has used garbage code to pad some of its malware components.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE can execute  to append random bytes to the end of a file received from C2.", "S0612": " WastedLocker  : WastedLocker contains junk code to increase its entropy and hide the actual code.", "S0117": " XTunnel  : A version of XTunnel introduced in July 2015 inserted junk code into the binary in a likely attempt to obfuscate it and bypass security products.", "S0248": " yty  : yty contains junk code in its binary, likely to confuse malware analysts.", "S0230": " ZeroT  : ZeroT has obfuscated DLLs and functions using dummy API calls inserted between real instructions."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1027.001", "subtechniqueof": "T1027", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Anti-virus, Signature-based detection"], "capecid": ["CAPEC-572,", "CAPEC-655"], "contributors": ["Martin Jirkal, ESET"], "version": "1.2", "created": "05 February 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Modify System Image", "detection": "Most embedded network devices provide a command to print the version of the currently running operating system.  Use this command to query the operating system for its version number and compare it to what is expected for the device in question.  Because this method may be used in conjunction with , it may be appropriate to also verify the integrity of the vendor provided operating system image file. Compare the checksum of the operating system file with the checksum of a known good copy from a trusted source.  Some embedded network device platforms may have the capability to calculate the checksum of the file, while others may not.  Even for those platforms that have the capability, it is recommended to download a copy of the file to a trusted computer to calculate the checksum with software that is not compromised.  Many vendors of embedded network devices can provide advanced debugging support that will allow them to work with device owners to validate the integrity of the operating system running in memory.  If a compromise of the operating system is suspected, contact the vendor technical support and seek such services for a more thorough inspection of the current running system.  ", "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.", "mitigations": {"M1046": " Boot Integrity  : Some vendors of embedded network devices provide cryptographic signing to ensure the integrity of operating system images at boot time.  Implement where available, following vendor guidelines. ", "M1045": " Code Signing  : Many vendors provide digitally signed operating system images to validate the integrity of the software used on their platform.  Make use of this feature where possible in order to prevent and/or detect attempts by adversaries to compromise the system image. ", "M1043": " Credential Access Protection  : Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations. ", "M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.", "M1027": " Password Policies  : Refer to NIST guidelines when creating password policies. ", "M1026": " Privileged Account Management  : Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints."}, "id": "T1601", "subtechniques": ["T1601.001", "T1601.002"], "tactics": ["Defense Evasion"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "19 October 2020", "lastmodified": "22 October 2020"}, {"techniquename": "Modify Registry", "detection": "Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods).  Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. The Registry may also be modified through Windows system management tools such as  and , which may require additional logging features to be configured in the operating system to collect necessary information for analysis.Monitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide.  Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns  and RegDelNull .", "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.", "mitigations": {"M1024": " Restrict Registry Permissions  : Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."}, "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL is capable of setting and deleting Registry values.", "S0331": " Agent Tesla  : Agent Tesla can achieve persistence by modifying Registry key entries. ", "G0073": " APT19  : APT19 uses a Port 22 malware variant to modify several Registry keys.", "G0050": " APT32  : APT32's backdoor has modified the Windows Registry to store the backdoor's configuration.  ", "G0082": " APT38  : APT38 uses a tool called CLEANTOAD that has the capability to modify Registry keys.", "G0096": " APT41  : APT41 used a malware variant called GOODLUCK to modify the registry in order to steal credentials.", "S0438": " Attor  : Attor's dispatcher can modify the Run registry key.", "S0640": " Avaddon  : Avaddon modifies several registry keys for persistence and UAC bypass.", "S0031": " BACKSPACE  : BACKSPACE is capable of deleting Registry keys, sub-keys, and values on a victim system.", "S0245": " BADCALL  : BADCALL modifies the firewall Registry key .", "S0239": " Bankshot  : Bankshot writes data into the Registry key .", "S0570": " BitPaymer  : BitPaymer can set values in the Registry to help in execution. ", "G0108": " Blue Mockingbird  : Blue Mockingbird has used Windows Registry modifications to specify a DLL payload.   ", "S0348": " Cardinal RAT  : Cardinal RAT sets  to point to its executable.", "S0261": " Catchamas  : Catchamas creates three Registry keys to establish persistence by adding a Windows Service.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell has a command to modify a Registry key.", "S0631": " Chaes  : Chaes stored its instructions in a config file in the Registry. ", "S0023": " CHOPSTICK  : CHOPSTICK may store RC4 encrypted configuration information in the Windows Registry.", "S0611": " Clop  : Clop can make modifications to Registry keys. ", "S0154": " Cobalt Strike  : Cobalt Strike can modify Registry values within  to enable the execution of additional code.", "S0126": " ComRAT  : ComRAT has encrypted and stored its orchestrator code in the Registry as well as a PowerShell script into the WsqmCons Registry key. ", "S0608": " Conficker  : Conficker adds keys to the Registry at  and various other Registry locations.", "S0488": " CrackMapExec  : CrackMapExec can create a registry key using wdigest.", "S0115": " Crimson  : Crimson can set a Registry key to determine how long it has been installed and possibly to indicate the version number.", "S0527": " CSPY Downloader  : CSPY Downloader can write to the Registry under the  variable to execute tasks.", "S0334": " DarkComet  : DarkComet adds a Registry value for its installation routine to the Registry Key  and .", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 modified the Registry to perform multiple techniques through the use of Reg.", "S0568": " EVILNUM  : EVILNUM can make modifications to the Regsitry for persistence.", "S0343": " Exaramel for Windows  : Exaramel for Windows adds the configuration to the Registry in XML format.", "S0569": " Explosive  : Explosive has a function to write itself to Registry values. ", "S0267": " FELIXROOT  : FELIXROOT deletes the Registry key .", "G0061": " FIN8  : FIN8 has deleted Registry keys during post compromise cleanup activities.", "G0047": " Gamaredon Group  : Gamaredon Group has removed security settings for VBA macro execution by changing registry values  and .", "S0032": " gh0st RAT  : gh0st RAT has altered the InstallTime subkey.", "G0078": " Gorgon Group  : Gorgon Group malware can deactivate security mechanisms in Microsoft Office by editing several keys and values under .", "S0531": " Grandoreiro  : Grandoreiro can store its configuration in the Registry at  under frequently changing names including  and .", "S0342": " GreyEnergy  : GreyEnergy modifies conditions in the Registry and adds keys.", "G0072": " Honeybee  : Honeybee uses a batch file that modifies Registry keys to launch a DLL into the svchost.exe process.", "S0376": " HOPLIGHT  : HOPLIGHT has modified Managed Object Format (MOF) files within the Registry to run specific commands and create persistence on the system.  ", "S0203": " Hydraq  : Hydraq creates a Registry subkey to register its created service, and can also uninstall itself later by deleting this value. Hydraq's backdoor also enables remote attackers to modify and delete subkeys.", "S0537": " HyperStack  : HyperStack can add the name of its communication pipe to .", "S0260": " InvisiMole  : InvisiMole has a command to create, set, copy, or delete a specified Registry key or value.", "S0271": " KEYMARBLE  : KEYMARBLE has a command to create Registry entries for storing data under .", "G0094": " Kimsuky  : Kimsuky has modified Registry settings for default file associations to enable the opening of malicious documents.", "S0356": " KONNI  : KONNI has modified registry keys of ComSysApp service and Svchost on the machine to gain persistence.", "S0397": " LoJax  : LoJax has modified the Registry key  from  to .", "S0447": " Lokibot  : Lokibot has modified the Registry as part of its UAC bypass process. ", "S0576": " MegaCortex  : MegaCortex has added entries to the Registry for ransom contact information.", "S0455": " Metamorfo  : Metamorfo has written process names to the Registry, disabled IE browser features, deleted Registry keys, and changed the ExtendedUIHoverTime key.", "S0256": " Mosquito  : Mosquito stores configuration values under the Registry key  and modifies Registry keys under with a path to the launcher.", "S0205": " Naid  : Naid creates Registry entries that store information about a created service and point to a malicious DLL dropped to disk.", "S0336": " NanoCore  : NanoCore has the capability to edit the Registry.", "S0210": " Nerex  : Nerex creates a Registry subkey that registers a new service.", "S0457": " Netwalker  : Netwalker can add the following registry entry: .", "S0198": " NETWIRE  : NETWIRE stores its configuration file within the Registry.", "S0385": " njRAT  : njRAT can create, delete, or modify a specified Registry key or value.", "G0116": " Operation Wocao  : Operation Wocao has enabled Wdigest by changing the registry value from 0 to 1.", "G0040": " Patchwork  : A Patchwork payload deletes Resiliency Registry keys created by Microsoft Office applications in an apparent effort to trick users into thinking there were no issues during application runs.", "S0158": " PHOREAL  : PHOREAL is capable of manipulating the Registry.", "S0517": " Pillowmint  : Pillowmint has stored its malicious payload in the registry key .", "S0501": " PipeMon  : PipeMon has stored its encrypted payload in the Registry.", "S0254": " PLAINTEE  : PLAINTEE uses  to add a Registry Run key for persistence.", "S0013": " PlugX  : PlugX has a module to create, delete, or modify Registry keys.", "S0428": " PoetRAT  : PoetRAT has made registry modifications to alter its behavior upon execution.", "S0012": " PoisonIvy  : PoisonIvy creates a Registry subkey that registers a new system device.", "S0518": " PolyglotDuke  : PolyglotDuke can write encrypted JSON configuration files to the Registry.", "S0441": " PowerShower  : PowerShower has added a registry key so future powershell.exe instances are spawned off-screen by default, and has removed all registry entries that are left behind during the dropper process.", "S0583": " Pysa  : Pysa has modified the registry key \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" and added the ransom note. ", "S0650": " QakBot  : QakBot can store its configuration information in a randomly named subkey under .", "S0269": " QUADAGENT  : QUADAGENT modifies an HKCU Registry key to store a session identifier unique to the compromised system as well as a pre-shared key used for encrypting and decrypting C2 communications.", "S0262": " QuasarRAT  : QuasarRAT has a command to edit the Registry on the victim\u2019s machine.", "S0075": " Reg  : Reg may be used to interact with and modify the Windows Registry of a local or remote system at the command-line interface.", "S0511": " RegDuke  : RegDuke can store its encryption key in the Registry.", "S0019": " Regin  : Regin appears to have functionality to modify remote Registry information.", "S0332": " Remcos  : Remcos has full control of the Registry, including the ability to modify it.", "S0496": " REvil  : REvil can save encryption parameters and system information to the Registry.", "S0090": " Rover  : Rover has functionality to remove Registry Run key persistence as a cleanup procedure.", "S0148": " RTM  : RTM can delete all Registry entries created during its execution.", "S0596": " ShadowPad  : ShadowPad maintains a configuration block and virtual file system in the Registry.", "S0140": " Shamoon  : Once Shamoon has access to a network share, it enables the RemoteRegistry service on the target system. It will then connect to the system with RegConnectRegistryW and modify the Registry to disable UAC remote restrictions by setting  to 1.", "S0444": " ShimRat  : ShimRat has registered two registry keys for shim databases.", "S0589": " Sibot  : Sibot has installed a second-stage script in the  registry key.", "G0091": " Silence  : Silence can create, delete, or modify a specified Registry key or value.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA can add, modify, and/or delete registry keys. It has changed the proxy configuration of a victim system by modifying the  registry.", "S0649": " SMOKEDHAM  : SMOKEDHAM has modified registry keys for persistence, to enable credential caching for credential access, and to facilitate lateral movement via RDP.", "S0157": " SOUNDBITE  : SOUNDBITE is capable of modifying the Registry.", "S0142": " StreamEx  : StreamEx has the ability to modify the Registry.", "S0603": " Stuxnet  : Stuxnet can create registry keys to load driver files.", "S0559": " SUNBURST  : SUNBURST had commands that allow an attacker to write or delete registry keys, and was observed stopping services by setting their  registry entries to value 4. It also deleted previously-created Image File Execution Options (IFEO) Debugger registry values and registry keys related to HTTP proxy to clean up traces of its activity.", "S0242": " SynAck  : SynAck can manipulate Registry keys.", "S0011": " Taidoor  : Taidoor has the ability to modify the Registry on compromised hosts using  and .", "S0467": " TajMahal  : TajMahal can set the  attribute for configured printers in  to enable document stealing.", "S0560": " TEARDROP  : TEARDROP modified the Registry to create a Windows service for itself on a compromised host.", "G0027": " Threat Group-3390  : A Threat Group-3390 tool can create a new Registry key under .", "S0266": " TrickBot  : TrickBot can modify registry entries.", "G0010": " Turla  : Turla has used the Registry to store encrypted payloads.", "S0263": " TYPEFRAME  : TYPEFRAME can install encrypted configuration data under the Registry key  and .", "S0386": " Ursnif  : Ursnif has used Registry modifications as part of its installation routine.", "S0476": " Valak  : Valak has the ability to modify the Registry key  to store information regarding the C2 server and downloads.", "S0180": " Volgmer  : Volgmer stores the encoded configuration file in the Registry key .", "S0612": " WastedLocker  : WastedLocker can modify registry values within the  registry key.", "G0102": " Wizard Spider  : Wizard Spider has modified the Registry key  by setting the  registry value to  in order to force credentials to be stored in clear text in memory.", "S0330": " Zeus Panda  : Zeus Panda modifies several Registry keys under  to disable phishing filters.", "S0350": " zwShell  : zwShell can modify the Registry."}, "id": "T1112", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM, User"], "defensebypassed": ["Host forensic analysis"], "capecid": ["CAPEC-203"], "contributors": ["Bartosz Jerzman; David Lu, Tripwire; Travis Smith, Tripwire"], "version": "1.2", "created": "31 May 2017", "lastmodified": "13 August 2020"}, {"techniquename": "Delete Cloud Instance", "detection": "The deletion of a new instance or virtual machine is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, detecting a sequence of events such as the creation of an instance, mounting of a snapshot to that instance, and deletion of that instance by a new user account may indicate suspicious activity.In AWS, CloudTrail logs capture the deletion of an instance in the  event, and in Azure the deletion of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of  to delete a VM.", "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.An adversary may also Create Cloud Instance and later terminate the instance after achieving their objectives.", "mitigations": {"M1047": " Audit  : Routinely check user permissions to ensure only the expected users have the capability to delete new instances.", "M1018": " User Account Management  : Limit permissions for deleting new instances in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies."}, "id": "T1578.003", "subtechniqueof": "T1578", "tactics": ["Defense Evasion"], "platforms": ["IaaS"], "permissionsrequired": ["User"], "version": "1.1", "created": "16 June 2020", "lastmodified": "08 March 2021"}, {"techniquename": "Revert Cloud Instance", "detection": "Establish centralized logging of instance activity, which can be used to monitor and review system events even after reverting to a snapshot, rolling back changes, or changing persistence/type of storage. Monitor specifically for events related to snapshots and rollbacks and VM configuration changes, that are occurring outside of normal activity. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones.", "description": "An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.", "id": "T1578.004", "subtechniqueof": "T1578", "tactics": ["Defense Evasion"], "platforms": ["IaaS"], "permissionsrequired": ["User"], "contributors": ["Netskope"], "version": "1.1", "created": "16 June 2020", "lastmodified": "08 March 2021"}, {"techniquename": "Create Cloud Instance", "detection": "The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity.In AWS, CloudTrail logs capture the creation of an instance in the  event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of  to create a VM.", "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may Create Snapshot of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect Data from Local System or for Remote Data Staging.Creating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.", "mitigations": {"M1047": " Audit  : Routinely check user permissions to ensure only the expected users have the capability to create new instances.", "M1018": " User Account Management  : Limit permissions for creating new instances in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies."}, "id": "T1578.002", "subtechniqueof": "T1578", "tactics": ["Defense Evasion"], "platforms": ["IaaS"], "permissionsrequired": ["User"], "version": "1.1", "created": "14 May 2020", "lastmodified": "08 March 2021"}, {"techniquename": "Patch System Image", "detection": "Compare the checksum of the operating system file with the checksum of a known good copy from a trusted source.  Some embedded network device platforms may have the capability to calculate the checksum of the file, while others may not.  Even for those platforms that have the capability, it is recommended to download a copy of the file to a trusted computer to calculate the checksum with software that is not compromised.Many vendors of embedded network devices can provide advanced debugging support that will allow them to work with device owners to validate the integrity of the operating system running in memory.  If a compromise of the operating system is suspected, contact the vendor technical support and seek such services for a more thorough inspection of the current running system.  ", "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.     Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.To change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.To change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.In the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the ROMMONkit method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.By modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via Weaken Encryption, authentication, via Network Device Authentication, and perimeter defenses, via Network Boundary Bridging.  Adding new capabilities for the adversary\u2019s purpose include Keylogging, Multi-hop Proxy, and Port Knocking.Adversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with Downgrade System Image, one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade. When the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via TFTP Boot. When the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with ROMMONkit to achieve persistence. ", "mitigations": {"M1046": " Boot Integrity  : Some vendors of embedded network devices provide cryptographic signing to ensure the integrity of operating system images at boot time.  Implement where available, following vendor guidelines. ", "M1045": " Code Signing  : Many vendors provide digitally signed operating system images to validate the integrity of the software used on their platform.  Make use of this feature where possible in order to prevent and/or detect attempts by adversaries to compromise the system image. ", "M1043": " Credential Access Protection  : Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations. ", "M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.", "M1027": " Password Policies  : Refer to NIST guidelines when creating password policies.  ", "M1026": " Privileged Account Management  : Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints."}, "procedureexamples": {"S0519": " SYNful Knock  : SYNful Knock is malware that is inserted into a network device by patching the operating system image."}, "id": "T1601.001", "subtechniqueof": "T1601", "tactics": ["Defense Evasion"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "19 October 2020", "lastmodified": "22 October 2020"}, {"techniquename": "Double File Extension", "detection": "Monitor for files written to disk that contain two file extensions, particularly when the second is an executable.", "description": "Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex:  may render in some views as just ). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system\u2019s policies. Adversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain Initial Access into a user\u2019s system via Spearphishing Attachment then User Execution. For example, an executable file attachment named  may display as  to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.Common file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.", "mitigations": {"M1028": " Operating System Configuration  : Disable the default to \"hide file extensions for known file types\" in Windows OS.", "M1017": " User Training  : Train users to look for double extensions in filenames, and in general use training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."}, "procedureexamples": {"S0534": " Bazar  : The Bazar loader has used dual-extension executable files such as PreviewReport.DOC.exe.", "G0129": " Mustang Panda  : Mustang Panda has used an additional filename extension to hide the true file type."}, "id": "T1036.007", "subtechniqueof": "T1036", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "version": "1.0", "created": "04 August 2021", "lastmodified": "14 October 2021"}, {"techniquename": "Create Snapshot", "detection": "The creation of a snapshot is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities such as the creation of one or more snapshots and the restoration of these snapshots by a new user account.In AWS, CloudTrail logs capture the creation of snapshots and all API calls for AWS Backup as events. Using the information collected by CloudTrail, you can determine the request that was made, the IP address from which the request was made, which user made the request, when it was made, and additional details..In Azure, the creation of a snapshot may be captured in Azure activity logs. Backup restoration events can also be detected through Azure Monitor Log Data by creating a custom alert for completed restore jobs.Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of the  command to create a new VM disk from a snapshot. It is also possible to detect the usage of the GCP API with the  parameter pointed to .", "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in Revert Cloud Instance where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.An adversary may Create Cloud Instance, mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.", "mitigations": {"M1047": " Audit  : Routinely check user permissions to ensure only the expected users have the capability to create snapshots and backups.", "M1018": " User Account Management  : Limit permissions for creating snapshots or backups in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies."}, "id": "T1578.001", "subtechniqueof": "T1578", "tactics": ["Defense Evasion"], "platforms": ["IaaS"], "permissionsrequired": ["User"], "contributors": ["Praetorian"], "version": "1.1", "created": "09 June 2020", "lastmodified": "08 March 2021"}, {"techniquename": "Modify Cloud Compute Infrastructure", "detection": "Establish centralized logging for the activity of cloud compute infrastructure components. Monitor for suspicious sequences of events, such as the creation of multiple snapshots within a short period of time or the mount of a snapshot to a new instance by a new or unexpected user. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones.", "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.", "mitigations": {"M1047": " Audit  : Routinely monitor user permissions to ensure only the expected users have the capability to modify cloud compute infrastructure components.", "M1018": " User Account Management  : Limit permissions for creating, deleting, and otherwise altering compute components in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies."}, "id": "T1578", "subtechniques": ["T1578.001", "T1578.002", "T1578.003", "T1578.004"], "tactics": ["Defense Evasion"], "platforms": ["IaaS"], "permissionsrequired": ["User"], "version": "1.1", "created": "30 August 2019", "lastmodified": "20 April 2021"}, {"techniquename": "Space after Filename", "detection": "It's not common for spaces to be at the end of filenames, so this is something that can easily be checked with file monitoring. From the user's perspective though, this is very hard to notice from within the Finder.app or on the command-line in Terminal.app. Processes executed from binaries containing non-standard extensions in the filename are suspicious.", "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.For example, if there is a Mach-O executable file called , when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to , then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to  (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed .Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.", "procedureexamples": {"S0276": " Keydnap  : Keydnap puts a space after a false .jpg extension so that execution actually goes through the Terminal.app program."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1036.006", "subtechniqueof": "T1036", "tactics": ["Defense Evasion"], "platforms": ["Linux, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-649"], "contributors": ["Erye Hernandez, Palo Alto Networks"], "version": "1.0", "created": "10 February 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Invalid Code Signature", "detection": "Collect and analyze signing certificate metadata and check signature validity on software that executes within the environment, look for invalid signatures as well as unusual certificate characteristics and outliers.", "description": "Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.Unlike Code Signing, this activity will not result in a valid signature.", "mitigations": {"M1045": " Code Signing  : Require signed binaries."}, "procedureexamples": {"G0067": " APT37  : APT37 has signed its malware with an invalid digital certificates listed as \"Tencent Technology (Shenzhen) Company Limited.\"", "S0128": " BADNEWS  : BADNEWS is sometimes signed with an invalid Authenticode certificate in an apparent effort to make it look more legitimate.", "S0198": " NETWIRE  : The NETWIRE client has been signed by fake and invalid digital certificates.", "S0019": " Regin  : Regin stage 1 modules for 64-bit systems have been found to be signed with fake certificates masquerading as originating from Microsoft Corporation and Broadcom Corporation.", "G0112": " Windshift  : Windshift has used revoked certificates to sign malware.", "S0466": " WindTail  : WindTail has been incompletely signed with revoked certificates."}, "id": "T1036.001", "subtechniqueof": "T1036", "tactics": ["Defense Evasion"], "platforms": ["Windows, macOS"], "version": "1.0", "created": "10 February 2020", "lastmodified": "10 February 2020"}, {"techniquename": "Masquerade Task or Service", "detection": "Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "description": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.Tasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.", "procedureexamples": {"G0099": " APT-C-36  : APT-C-36 has disguised its scheduled tasks as those used by Google.", "G0016": " APT29  : APT29 named tasks  in order to appear legitimate.", "G0050": " APT32  : APT32 has used hidden or non-printing characters to help masquerade service names, such as appending a Unicode no-break space character to a legitimate service name. APT32 has also impersonated the legitimate Flash installer file name \"install_flashplayer.exe\".", "G0096": " APT41  : APT41 has created services to appear as benign system tools.", "S0438": " Attor  : Attor's dispatcher disguises itself as a legitimate task (i.e., the task name and description appear legitimate).", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has disguised their backdoor droppers with naming conventions designed to blend into normal operations.", "S0534": " Bazar  : Bazar can create a task named to appear benign.", "S0471": " build_downer  : build_downer has added itself to the Registry Run key as \"NVIDIA\" to appear legitimate.", "G0008": " Carbanak  : Carbanak has copied legitimate service names to use for malicious services.", "S0261": " Catchamas  : Catchamas adds a new service named NetAdapter in an apparent attempt to masquerade as a legitimate service.", "S0126": " ComRAT  : ComRAT has used a task name associated with Windows SQM Consolidator.", "S0538": " Crutch  : Crutch has established persistence with a scheduled task impersonating the Outlook item finder.", "S0527": " CSPY Downloader  : CSPY Downloader has attempted to appear as a legitimate Windows service with a fake description claiming it is used to support packed applications.", "S0554": " Egregor  : Egregor has masqueraded the svchost.exe process to exfiltrate data.", "S0343": " Exaramel for Windows  : The Exaramel for Windows dropper creates and starts a Windows service named wsmprovav with the description \"Windows Check AV\" in an apparent attempt to masquerade as a legitimate service.", "G0037": " FIN6  : FIN6 has renamed the \"psexec\" service name to \"mstdc\" to masquerade as a legitimate Windows service.  ", "G0046": " FIN7  : FIN7 has created a scheduled task named \"AdobeFlashSync\" to establish persistence.", "G0117": " Fox Kitten  : Fox Kitten has named the task for a reverse proxy lpupdate to appear legitimate.", "S0410": " Fysbis  : Fysbis has masqueraded as the rsyncd and dbus-inotifier services.", "S0588": " GoldMax  : GoldMax has impersonated systems management software to avoid detection.", "G0126": " Higaisa  : Higaisa named a shellcode loader binary  to spoof the legitimate . ", "S0601": " Hildegard  : Hildegard has disguised itself as a known Linux process.", "S0259": " InnaputRAT  : InnaputRAT variants have attempted to appear legitimate by adding a new service named OfficeUpdateService.", "S0260": " InvisiMole  : InvisiMole has attempted to disguise itself by registering under a seemingly legitimate service name.", "S0581": " IronNetInjector  : IronNetInjector has been disguised as a legitimate service using the name PythonUpdateSrvc.", "S0607": " KillDisk  : KillDisk registers as a service under the Plug-And-Play Support name.", "G0094": " Kimsuky  : Kimsuky has disguised services to appear as benign software or related to operating system functions.", "S0236": " Kwampirs  : Kwampirs establishes persistence by adding a new service with the display name \"WMI Performance Adapter Extension\" in an attempt to masquerade as a legitimate WMI service.", "S0409": " Machete  : Machete renamed task names to masquerade as legitimate Google Chrome, Java, Dropbox, Adobe Reader and Python tasks. ", "S0449": " Maze  : Maze operators have created scheduled tasks masquerading as \"Windows Update Security\", \"Windows Update Security Patches\", and \"Google Chrome Security Update\" designed to launch the ransomware. ", "G0019": " Naikon  : Naikon renamed a malicious service  to appear to be a legitimate version of Task Manager.", "S0630": " Nebulae  : Nebulae has created a service named \"Windows Update Agent1\" to appear legitimate.", "S0118": " Nidiran  : Nidiran can create a new service named msamger (Microsoft Security Accounts Manager), which mimics the legitimate Microsoft database by the same name.", "S0439": " Okrum  : Okrum can establish persistence by adding a new service NtmsSvc with the display name Removable Storage to masquerade as a legitimate Removable Storage Manager.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D has disguised its app bundle by adding special characters to the filename and using the icon for legitimate Word documents.", "S0013": " PlugX  : In one instance, menuPass added PlugX as a service with a display name of \"Corel Writing Tools Utility.\"", "S0223": " POWERSTATS  : POWERSTATS has created a scheduled task named \"MicrosoftEdge\" to establish persistence.", "G0056": " PROMETHIUM  : PROMETHIUM has named services to appear legitimate.", "S0629": " RainyDay  : RainyDay has named services and scheduled tasks to appear benign including \"ChromeCheck\" and \"googleupdate.\"", "S0169": " RawPOS  : New services created by RawPOS are made to appear like legitimate Windows services, with names such as \"Windows Management Help Service\", \"Microsoft Support\", and \"Windows Advanced Task Manager\".", "S0495": " RDAT  : RDAT has used Windows Video Service as a name for malicious services.", "S0148": " RTM  : RTM has named the scheduled task it creates \"Windows Update\".", "S0345": " Seasalt  : Seasalt has masqueraded as a service called \"SaSaut\" with a display name of \"System Authorization Service\" in an apparent attempt to masquerade as a legitimate service.", "S0140": " Shamoon  : Shamoon creates a new service named \"ntssrv\" that attempts to appear legitimate; the service's display name is \"Microsoft Network Realtime Inspection Service\" and its description is \"Helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols.\" Newer versions create the \"MaintenaceSrv\" service, which misspells the word \"maintenance.\"", "S0444": " ShimRat  : ShimRat can impersonate Windows services and antivirus products to avoid detection on compromised systems.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has named a service it establishes on victim machines as \"TaskFrame\" to hide its malicious purpose. ", "S0491": " StrongPity  : StrongPity has named services to appear legitimate.", "S0178": " Truvasys  : To establish persistence, Truvasys adds a Registry Run key with a value \"TaskMgr\" in an attempt to masquerade as the legitimate Windows Task Manager.", "S0647": " Turian  : Turian can disguise as a legitimate service to blend into normal operations.", "S0180": " Volgmer  : Some Volgmer variants add new services with display names generated by a list of hard-coded strings such as Application, Background, Security, and Windows, presumably as a way to masquerade as a legitimate service.", "G0102": " Wizard Spider  : Wizard Spider has used scheduled tasks to install TrickBot, using task names to appear legitimate such as WinDotNet, GoogleTask, or Sysnetsf. It has also used common document file names for other malware binaries.", "G0128": " ZIRCONIUM  : ZIRCONIUM has created a run key named  to mask a persistence mechanism for a malicious binary."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1036.004", "subtechniqueof": "T1036", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "version": "1.1", "created": "10 February 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Rename System Utilities", "detection": "If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.", "description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.  It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename ).  An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. ", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Use file system access controls to protect folders such as C:\\Windows\\System32."}, "procedureexamples": {"G0050": " APT32  : APT32 has moved and renamed pubprn.vbs to a .txt file to avoid detection.", "S0046": " CozyCar  : The CozyCar dropper has masqueraded a copy of the infected system's rundll32.exe executable that was moved to the malware's install directory and renamed according to a predefined configuration file.", "G0093": " GALLIUM  : GALLIUM used a renamed cmd.exe file to evade detection.", "G0045": " menuPass  : menuPass has renamed certutil and moved it to a different location on the system to avoid detection based on use of the tool."}, "id": "T1036.003", "subtechniqueof": "T1036", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "10 February 2020", "lastmodified": "23 November 2020"}, {"techniquename": "Right-to-Left Override", "detection": "Detection methods should include looking for common formats of RTLO characters within filenames such as , , and . Defenders should also check their analysis tools to ensure they do not interpret the RTLO character and instead print the true name of the file containing it.", "description": "Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named  will display as . A JavaScript file named  will be displayed as .Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with Spearphishing Attachment/Malicious File since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity. RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.", "procedureexamples": {"G0098": " BlackTech  : BlackTech has used right-to-left-override to obfuscate the filenames of malicious e-mail attachments.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used Right-to-Left Override to deceive victims into executing several strains of malware.", "G0137": " Ferocious Kitten  : Ferocious Kitten has used right-to-left override to reverse executables\u2019 names to make them appear to have different file extensions, rather than their real ones.", "G0004": " Ke3chang  : Ke3chang has used the right-to-left override character in spearphishing attachment names to trick targets into executing .scr and .exe files.", "G0029": " Scarlet Mimic  : Scarlet Mimic has used the left-to-right override character in self-extracting RAR archive spearphishing attachment file names."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1036.002", "subtechniqueof": "T1036", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "version": "1.1", "created": "10 February 2020", "lastmodified": "14 October 2021"}, {"techniquename": "Match Legitimate Name or Location", "detection": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.", "description": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.Adversaries may also use the same icon of the file they are trying to mimic.", "mitigations": {"M1045": " Code Signing  : Require signed binaries and images.", "M1038": " Execution Prevention  : Use tools that restrict program execution via application control by attributes other than file name for common operating system utilities that are needed.", "M1022": " Restrict File and Directory Permissions  : Use file system access controls to protect folders such as C:\\Windows\\System32."}, "procedureexamples": {"G0018": " admin@338  : admin@338 actors used the following command to rename one of their tools to a benign file name: ", "S0622": " AppleSeed  : AppleSeed has the ability to rename its payload to ESTCommon.dll to masquerade as a DLL belonging to ESTsecurity.", "G0006": " APT1  : The file name AcroRD32.exe, a legitimate process name for Adobe's Acrobat Reader, was used by APT1 as a name for malware.", "G0007": " APT28  : APT28 has changed extensions on files containing exfiltrated data to make them appear benign, and renamed a web shell instance to appear as a legitimate OWA page.", "G0016": " APT29  : APT29 renamed software and DLL's with legitimate names to appear benign.", "G0050": " APT32  : APT32 has renamed a NetCat binary to kb-10233.exe to masquerade as a Windows update. APT32 has also renamed a Cobalt Strike beacon payload to install_flashplayers.exe. ", "G0087": " APT39  : APT39 has used malware disguised as Mozilla Firefox and a tool named mfevtpse.exe to proxy C2 communications, closely mimicking a legitimate McAfee file mfevtps.exe.", "G0096": " APT41  : APT41 attempted to masquerade their files as popular anti-virus software.", "S0475": " BackConfig  : BackConfig has hidden malicious payloads in  and mimicked the legitimate DHCP service binary.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has dropped implants in folders named for legitimate software.", "S0606": " Bad Rabbit  : Bad Rabbit has masqueraded as a Flash Player installer through the executable file .", "S0128": " BADNEWS  : BADNEWS attempts to hide its payloads using legitimate filenames.", "S0534": " Bazar  : The Bazar loader has named malicious shortcuts \"adobe\" and mimicked communications software.", "S0520": " BLINDINGCAN  : BLINDINGCAN has attempted to hide its payload by using legitimate file names such as \"iconcache.db\".", "G0108": " Blue Mockingbird  : Blue Mockingbird has masqueraded their XMRIG payload name by naming it wercplsupporte.dll after the legitimate wercplsupport.dll file.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has given malware the same name as an existing file on the file share server to cause users to unwittingly launch and install the malware on additional systems.", "S0482": " Bundlore  : Bundlore has disguised a malicious .app file as a Flash Player update.", "S0274": " Calisto  : Calisto's installation file is an unsigned DMG image under the guise of Intego\u2019s security solution for mac.", "G0008": " Carbanak  : Carbanak has named malware \"svchost.exe,\" which is the name of the Windows shared service host program.", "S0484": " Carberp  : Carberp has masqueraded as Windows system file names, as well as \"chkntfs.exe\" and \"syscron.exe\".", "S0631": " Chaes  : Chaes has used an unsigned, crafted DLL module named  that was designed to look like a legitimate 32-bit Windows DLL.", "S0144": " ChChes  : ChChes copies itself to an .exe file with a filename that is likely intended to imitate Norton Antivirus but has several letters reversed (e.g. notron.exe).", "G0114": " Chimera  : Chimera has renamed malware to GoogleUpdate.exe and WinRAR to jucheck.exe, RecordedTV.ms, teredo.tmp, update.exe, and msadcs1.exe.", "S0625": " Cuba  : Cuba has been disguised as legitimate 360 Total Security Antivirus and OpenVPN programs. ", "S0334": " DarkComet  : DarkComet has dropped itself onto victim machines with file names such as WinDefender.Exe and winupdate.exe in an apparent attempt to masquerade as a legitimate file.", "G0012": " Darkhotel  : Darkhotel has used malware that is disguised as a Secure Shell (SSH) tool.", "S0187": " Daserf  : Daserf uses file and folder names related to legitimate programs in order to blend in, such as HP, Intel, Adobe, and perflogs.", "S0600": " Doki  : Doki has disguised a file as a Linux kernel module.", "S0567": " Dtrack  : One of Dtrack can hide in replicas of legitimate programs like OllyDbg, 7-Zip, and FileZilla.", "S0605": " EKANS  : EKANS has been disguised as  to appear as a valid executable.", "S0081": " Elise  : If installing itself as a service fails, Elise instead writes itself as a file named svchost.exe saved in %APPDATA%\\Microsoft\\Network.", "S0171": " Felismus  : Felismus has masqueraded as legitimate Adobe Content Management System files.", "G0137": " Ferocious Kitten  : Ferocious Kitten has named malicious files  and loaded them into the compromise host's \"Public\" folder.", "G0046": " FIN7  : FIN7 has attempted to run Darkside ransomware with the filename sleep.exe.", "S0182": " FinFisher  : FinFisher renames one of its .dll files to uxtheme.dll in an apparent attempt to masquerade as a legitimate file.", "G0117": " Fox Kitten  : Fox Kitten has named binaries and configuration files svhost and dllhost respectively to appear legitimate.", "S0410": " Fysbis  : Fysbis has masqueraded as trusted software rsyncd and dbus-inotifier.", "S0493": " GoldenSpy  : GoldenSpy's setup file installs initial executables under the folder .  ", "S0588": " GoldMax  : GoldMax appeared as a scheduled task impersonating systems management software within the corresponding ProgramData subfolder.", "S0477": " Goopy  : Goopy has impersonated the legitimate goopdate.dll, which was dropped on the target system with a legitimate GoogleUpdate.exe.", "S0531": " Grandoreiro  : Grandoreiro has named malicious browser extensions and update files to appear legitimate.", "S0070": " HTTPBrowser  : HTTPBrowser's installer contains a malicious file named navlu.dll to decrypt and run the RAT. navlu.dll is also the name of a legitimate Symantec DLL.", "G0119": " Indrik Spider  : Indrik Spider used fake updates for FlashPlayer plugin and Google Chrome as initial infection vectors.", "S0259": " InnaputRAT  : InnaputRAT variants have attempted to appear legitimate by using the file names SafeApp.exe and NeutralApp.exe.", "S0260": " InvisiMole  : InvisiMole has disguised its droppers as legitimate software or documents, matching their original names and locations, and saved its files as mpr.dll in the Windows folder.", "S0015": " Ixeshe  : Ixeshe has used registry values and file names associated with Adobe software, such as AcroRd32.exe.", "S0526": " KGH_SPY  : KGH_SPY has masqueraded as a legitimate Windows tool.", "S0356": " KONNI  : KONNI creates a shortcut called \"Anti virus service.lnk\" in an apparent attempt to masquerade as a legitimate file.", "G0032": " Lazarus Group  : Lazarus Group has renamed the TAINTEDSCRIBE main executable to disguise itself as Microsoft's narrator.", "S0395": " LightNeuron  : LightNeuron has used filenames associated with Exchange and Outlook for binary and configuration files, such as .", "S0582": " LookBack  : LookBack has a C2 proxy tool that masquerades as , which is software used by Notepad++.", "S0409": " Machete  : Machete renamed payloads to masquerade as legitimate Google Chrome, Java, Dropbox, Adobe Reader and Python executables.", "G0095": " Machete  : Machete's Machete MSI installer has masqueraded as a legitimate Adobe Acrobat Reader installer.", "S0652": " MarkiRAT  : MarkiRAT can masquerade as  and ; it has also mimicked legitimate Telegram and Chrome files.", "S0500": " MCMD  : MCMD has been named Readme.txt to appear legitimate.", "S0459": " MechaFlounder  : MechaFlounder has been downloaded as a file named lsass.exe, which matches the legitimate Windows file.", "G0045": " menuPass  : menuPass has been seen changing malicious files to appear legitimate.", "S0455": " Metamorfo  : Metamorfo has disguised an MSI file as the Adobe Acrobat Reader Installer and has masqueraded payloads as OneDrive, WhatsApp, or Spotify, for example. ", "S0084": " Mis-Type  : Mis-Type saves itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.", "S0083": " Misdat  : Misdat saves itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.", "G0069": " MuddyWater  : MuddyWater has disguised malicious executables and used filenames and Registry key names associated with Windows Defender.", "G0129": " Mustang Panda  : Mustang Panda has used 'adobeupdate.dat' as a PlugX loader, and a file named 'OneDrive.exe' to load a Cobalt Strike payload.", "G0019": " Naikon  : Naikon has disguised malicious programs as Google Chrome, Adobe, and VMware executables.", "S0630": " Nebulae  : Nebulae uses functions named  and  indicating that it's trying to imitate chrome_frame_helper.dll.", "S0198": " NETWIRE  : NETWIRE has masqueraded as legitimate software including TeamViewer and macOS Finder.", "S0353": " NOKKI  : NOKKI is written to %LOCALAPPDATA%\\MicroSoft Updatea\\svServiceUpdate.exe prior being executed in a new process in an apparent attempt to masquerade as a legitimate folder and file.", "S0340": " Octopus  : Octopus has been disguised as legitimate programs, such as Java and Telegram Messenger.", "S0138": " OLDBAIT  : OLDBAIT installs itself in ; the directory name is missing a space and the file name is missing the letter \"o.\"", "S0402": " OSX/Shlayer  : OSX/Shlayer can masquerade as a Flash Player update.", "S0072": " OwaAuth  : OwaAuth uses the filename owaauth.dll, which is a legitimate file that normally resides in ; the malicious file by the same name is saved in .", "G0040": " Patchwork  : Patchwork installed its payload in the startup programs folder as \"Baidu Software Update.\" The group also adds its second stage payload to the startup programs as \"Net Monitor.\" They have also dropped QuasarRAT binaries as files named microsoft_network.exe and crome.exe.", "S0587": " Penquin  : Penquin has mimicked the Cron binary to hide itself on compromised systems.", "S0501": " PipeMon  : PipeMon modules are stored on disk with seemingly benign names including use of a file extension associated with a popular word processor.", "S0453": " Pony  : Pony has used the Adobe Reader icon for the downloaded file to look more trustworthy.    ", "G0033": " Poseidon Group  : Poseidon Group tools attempt to spoof anti-virus processes as a means of self-defense.", "G0056": " PROMETHIUM  : PROMETHIUM has disguised malicious installer files by bundling them with legitimate software installers.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY mimics filenames from %SYSTEM%\\System32 to hide DLLs in %WINDIR% and/or %TEMP%.", "S0583": " Pysa  : Pysa has executed a malicious executable by naming it svchost.exe.", "S0269": " QUADAGENT  : QUADAGENT used the PowerShell filenames  and .", "S0565": " Raindrop  : Raindrop was installed under names that resembled legitimate Windows file and directory names.", "S0629": " RainyDay  : RainyDay has used names to mimic legitimate software including \"vmtoolsd.exe\" to spoof Vmtools.", "S0458": " Ramsay  : Ramsay has masqueraded as a 7zip installer.  ", "S0495": " RDAT  : RDAT has masqueraded as VMware.exe. ", "S0125": " Remsec  : The Remsec loader implements itself with the name Security Support Provider, a legitimate Windows function. Various Remsec .exe files mimic legitimate file names used by Microsoft, Symantec, Kaspersky, Hewlett-Packard, and VMWare. Remsec also disguised malicious modules using similar filenames as custom network encryption software on victims.", "S0496": " REvil  : REvil can mimic the names of known executables.", "G0106": " Rocke  : Rocke has used shell scripts which download mining executables and saves them with the filename \"java\".", "S0446": " Ryuk  : Ryuk has constructed legitimate appearing installation folder paths by calling  and then inserting a null byte at the fourth character of the path. For Windows Vista or higher, the path would appear as .", "S0085": " S-Type  : S-Type may save itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.", "G0034": " Sandworm Team  : Sandworm Team has avoided detection by naming a malicious binary explorer.exe.", "S0445": " ShimRatReporter  : ShimRatReporter spoofed itself as , a specialized Unicode font.", "S0589": " Sibot  : Sibot has downloaded a DLL to the  folder and renamed it with a  extension.", "G0121": " Sidewinder  : Sidewinder has named malicious files  to match the name of a legitimate Windows executable.", "G0091": " Silence  : Silence has named its backdoor \"WINWORD.exe\".", "S0468": " Skidmap  : Skidmap has created a fake  binary to replace the legitimate Linux binary.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has mimicked the names of known executables, such as mediaplayer.exe.", "G0054": " Sowbug  : Sowbug named its tools to masquerade as Windows or Adobe Reader software, such as by using the file name adobecms.exe and the directory .", "S0058": " SslMM  : To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut.", "S0188": " Starloader  : Starloader has masqueraded as legitimate software update packages such as Adobe Acrobat Reader and Intel.", "S0491": " StrongPity  : StrongPity has been bundled with legitimate software installation files for disguise.", "S0559": " SUNBURST  : SUNBURST created VBScripts that were named after existing services or folders to blend into legitimate activities. ", "S0562": " SUNSPOT  : SUNSPOT was identified on disk with a filename of  and it created an encrypted log file at . ", "S0578": " SUPERNOVA  : SUPERNOVA has masqueraded as a legitimate SolarWinds DLL.", "S0586": " TAINTEDSCRIBE  : The TAINTEDSCRIBE main executable has disguised itself as Microsoft\u2019s Narrator.", "S0560": " TEARDROP  : TEARDROP files had names that resembled legitimate Window file and directory names.", "G0088": " TEMP.Veles  : TEMP.Veles has renamed files to look like legitimate files, such as Windows update files or Schneider Electric application files.", "S0595": " ThiefQuest  : ThiefQuest prepends a copy of itself to the beginning of an executable file while maintaining the name of the executable.", "G0134": " Transparent Tribe  : Transparent Tribe can mimic legitimate Windows directories by using the same icons and names.", "S0609": " TRITON  : TRITON disguised itself as the legitimate Triconex Trilog application.", "G0081": " Tropic Trooper  : Tropic Trooper has hidden payloads in Flash directories and fake installer files.", "S0386": " Ursnif  : Ursnif has used strings from legitimate system files and existing folders for its file, folder, and Registry entry names.", "S0136": " USBStealer  : USBStealer mimics a legitimate Russian program called USB Disk Security.", "G0107": " Whitefly  : Whitefly has named the malicious DLL the same name as DLLs belonging to legitimate software from various security vendors.", "S0141": " Winnti for Windows  : A Winnti for Windows implant file was named ASPNET_FILTER.DLL, mimicking the legitimate ASP.NET ISAPI filter DLL with the same name.", "S0086": " ZLib  : ZLib mimics the resource version information of legitimate Realtek Semiconductor, Nvidia, or Synaptics modules."}, "id": "T1036.005", "subtechniqueof": "T1036", "tactics": ["Defense Evasion"], "platforms": ["Containers, Linux, Windows, macOS"], "defensebypassed": ["Application control by file name or path"], "capecid": ["CAPEC-177"], "contributors": ["Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team"], "version": "1.1", "created": "10 February 2020", "lastmodified": "20 April 2021"}, {"techniquename": "Masquerading", "detection": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\".", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.Renaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "mitigations": {"M1045": " Code Signing  : Require signed binaries.", "M1038": " Execution Prevention  : Use tools that restrict program execution via application control by attributes other than file name for common operating system utilities that are needed.", "M1022": " Restrict File and Directory Permissions  : Use file system access controls to protect folders such as C:\\Windows\\System32."}, "procedureexamples": {"S0622": " AppleSeed  : AppleSeed can disguise JavaScript files as PDFs.", "G0007": " APT28  : APT28 has renamed the WinRAR utility to avoid detection.", "G0016": " APT29  : APT29 has set the hostnames of its C2 infrastructure to match legitimate hostnames in the victim environment. They have also used IP addresses originating from the same country as the victim for their VPN infrastructure.", "G0050": " APT32  : APT32 has disguised a Cobalt Strike beacon as a Flash Installer.", "S0635": " BoomBox  : BoomBox has the ability to mask malicious data strings as PDF files.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has masked executables with document file icons including Word and Adobe PDF.", "S0497": " Dacls  : The Dacls Mach-O binary has been disguised as a .nib file.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 created accounts disguised as legitimate backup and service accounts as well as an email administration account.", "S0634": " EnvyScout  : EnvyScout has used folder icons for malicious files to lure victims into opening them.", "S0512": " FatDuke  : FatDuke has attempted to mimic a compromised user's traffic by using the same user agent as the installed browser.", "G0045": " menuPass  : menuPass has used esentutl to change file extensions to their true type that were masquerading as .txt files. ", "S0637": " NativeZone  : NativeZone has, upon execution, displayed a message box that appears to be related to a Ukrainian electronic document management system.", "G0133": " Nomadic Octopus  : Nomadic Octopus attempted to make Octopus appear as a  Telegram Messenger with a Russian interface.", "S0368": " NotPetya  : NotPetya drops PsExec with the filename dllhost.dat.", "G0049": " OilRig  : OilRig has used .doc file extensions to mask malicious executables.", "G0068": " PLATINUM  : PLATINUM has renamed rar.exe to avoid detection.", "S0650": " QakBot  : The QakBot payload has been disguised as a PNG file. ", "S0565": " Raindrop  : Raindrop was built to include a modified version of 7-Zip source code (including associated export names) and Far Manager source code.", "S0458": " Ramsay  : Ramsay has masqueraded as a JPG image file.", "S0148": " RTM  : RTM has been delivered as archived Windows executable files masquerading as PDF documents.    ", "S0446": " Ryuk  : Ryuk can create .dll files that actually contain a Rich Text File format document.", "S0615": " SombRAT  : SombRAT can use a legitimate process name to hide itself.", "G0127": " TA551  : TA551 has masked malware DLLs as dat and jpg files.", "S0266": " TrickBot  : The TrickBot downloader has used an icon to appear as a Microsoft Word document.", "S0609": " TRITON  : TRITON attempts to write a dummy program into memory if it fails to reset the Triconex controller.", "G0112": " Windshift  : Windshift has used icons mimicking MS Office files to mask malicious executables. Windshift has also attempted to hide executables by changing the file extension to \".scr\" to mimic Windows screensavers.", "S0466": " WindTail  : WindTail has used icons mimicking MS Office files to mask payloads.", "S0658": " XCSSET  : XCSSET builds a malicious application bundle to resemble Safari through using the Safari icon and . ", "G0128": " ZIRCONIUM  : ZIRCONIUM has spoofed legitimate applications in phishing lures and changed file extensions to conceal  installation of malware."}, "id": "T1036", "subtechniques": ["T1036.001", "T1036.002", "T1036.003", "T1036.004", "T1036.005", "T1036.006", "T1036.007"], "tactics": ["Defense Evasion"], "platforms": ["Containers, Linux, Windows, macOS"], "defensebypassed": ["Application control by file name or path"], "capecid": ["CAPEC-177"], "contributors": ["Bartosz Jerzman; David Lu, Tripwire; Elastic; Felipe Esp\u00f3sito, @Pr0teus; Nick Carr, Mandiant; Oleg Kolesnikov, Securonix"], "version": "1.4", "created": "31 May 2017", "lastmodified": "18 October 2021"}, {"techniquename": "Indirect Command Execution", "detection": "Monitor and analyze logs from host-based detection mechanisms, such as Sysmon, for events such as process creations that include or are resulting from parameters associated with invoking programs/commands/files and/or spawning child processes/network connections. ", "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts.  Adversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.", "procedureexamples": {"S0193": " Forfiles  : Forfiles can be used to subvert controls and possibly conceal command execution by not directly invoking cmd.", "S0379": " Revenge RAT  : Revenge RAT uses the Forfiles utility to execute commands on the system."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1202", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Application control, Application control by file name or path, Static File Analysis"], "contributors": ["Matthew Demaske, Adaptforward"], "version": "1.1", "created": "18 April 2018", "lastmodified": "20 June 2020"}, {"techniquename": "Timestomp", "detection": "Forensic techniques exist to detect aspects of files that have had their timestamps modified.  It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values.", "description": "Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.Timestomping may be used along with file name Masquerading to hide malware and tools.", "procedureexamples": {"S0066": " 3PARA RAT  : 3PARA RAT has a command to set certain attributes such as creation/modification timestamps on files.", "G0007": " APT28  : APT28 has performed timestomping on victim files.", "G0016": " APT29  : APT29 modified timestamps of backdoors to match legitimate Windows files.", "G0050": " APT32  : APT32 has used scheduled task raw XML with a backdated timestamp of June 2, 2016. The group has also set the creation time of the files dropped by the second stage of the exploit to match the creation time of kernel32.dll. Additionally, APT32 has used a random value to modify the timestamp of the file storing the clientID.", "G0082": " APT38  : APT38 has modified data timestamps to mimic files that are in the same folder on a compromised host.", "S0438": " Attor  : Attor has manipulated the time of last access to files and registry keys after they have been created or modified.", "S0239": " Bankshot  : Bankshot modifies the time of a file as specified by the control server.", "S0570": " BitPaymer  : BitPaymer can modify the timestamp of an executable so that it can be identified and restored by the decryption tool.", "S0520": " BLINDINGCAN  : BLINDINGCAN has modified file and directory timestamps.", "G0114": " Chimera  : Chimera has used a Windows version of the Linux  command to modify the date and time stamp on DLLs.", "S0020": " China Chopper  : China Chopper's server component can change the timestamp of files.", "S0154": " Cobalt Strike  : Cobalt Strike can timestomp any files or payloads placed on a target machine to help them blend in.", "S0021": " Derusbi  : The Derusbi malware supports timestomping.", "S0081": " Elise  : Elise performs timestomping of a CAB file it creates.", "S0363": " Empire  : Empire can timestomp any files or payloads placed on a target machine to help them blend in.", "S0568": " EVILNUM  : EVILNUM has changed the creation date of files.", "S0181": " FALLCHILL  : FALLCHILL can modify file or directory timestamps.", "S0168": " Gazer  : For early Gazer versions, the compilation timestamp was faked.", "S0260": " InvisiMole  : InvisiMole samples were timestomped by the authors by setting the PE timestamps to all zero values. InvisiMole also has a built-in command to modify file times.", "S0387": " KeyBoy  : KeyBoy time-stomped its DLL in order to evade detection.", "G0094": " Kimsuky  : Kimsuky has manipulated timestamps for creation or compilation dates to defeat anti-forensics.", "S0641": " Kobalos  : Kobalos can modify timestamps of replaced files, such as  with the added credential stealer or  used to deploy Kobalos. ", "G0032": " Lazarus Group  : Several Lazarus Group malware families use timestomping, including modifying the last write timestamp of a specified Registry key to a random date, as well as copying the timestamp for legitimate .exe files (such as calc.exe or mspaint.exe) to its dropped files.", "S0083": " Misdat  : Many Misdat samples were programmed using Borland Delphi, which will mangle the default PE compile timestamp of a file.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D can use the  command to change timestamps.", "S0072": " OwaAuth  : OwaAuth has a command to timestop a file or directory.", "S0150": " POSHSPY  : POSHSPY modifies timestamps of all downloaded executables to match a randomly selected file created prior to 2013.", "S0393": " PowerStallion  : PowerStallion modifies the MAC times of its local log files to match that of the victim's desktop.ini file.", "S0078": " Psylo  : Psylo has a command to conduct timestomping by setting a specified file\u2019s timestamps to match those of a system file in the System32 directory.", "G0106": " Rocke  : Rocke has changed the time stamp of certain files. ", "S0185": " SEASHARPEE  : SEASHARPEE can timestomp files on victims using a Web shell.", "S0140": " Shamoon  : Shamoon can change the modified time for files to evade forensic detection.  ", "S0603": " Stuxnet  : Stuxnet extracts and writes driver files that match the times of other legitimate files.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE can change the timestamp of specified filenames.", "S0164": " TDTESS  : After creating a new service for persistence, TDTESS sets the file creation time for the service to the creation time of the victim's legitimate svchost.exe file.", "G0088": " TEMP.Veles  : TEMP.Veles used timestomping to modify the $STANDARD_INFORMATION attribute on tools.", "S0136": " USBStealer  : USBStealer sets the timestamps of its dropper files to the last-access and last-write timestamps of a standard Windows library chosen on the system."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1070.006", "subtechniqueof": "T1070", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["SYSTEM, User, root"], "defensebypassed": ["Host forensic analysis"], "contributors": ["Romain Dumont, ESET"], "version": "1.0", "created": "31 January 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Network Share Connection Removal", "detection": "Network share connections may be common depending on how an network environment is used. Monitor command-line invocation of  commands associated with establishing and removing remote shares over SMB, including following best practices for detection of . SMB traffic between systems may also be captured and decoded to look for related network share session and file transfer activity. Windows authentication logs are also useful in determining when authenticated network shares are established and by which account, and can be used to correlate network share activity to other events to investigate potentially malicious activity.", "description": "Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and SMB/Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the  command. ", "procedureexamples": {"S0260": " InvisiMole  : InvisiMole can disconnect previously connected remote drives.", "S0039": " Net  : The  command can be used in Net to remove an established connection to a network share.", "S0400": " RobbinHood  : RobbinHood disconnects all network shares from the computer with the command .", "G0027": " Threat Group-3390  : Threat Group-3390 has detached network shares after exfiltrating files, likely to evade detection."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1070.005", "subtechniqueof": "T1070", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "systemrequirements": ["Established network share connection to a remote system. Level of access depends on permissions of the account used."], "permissionsrequired": ["Administrator, User"], "defensebypassed": ["Host forensic analysis"], "version": "1.0", "created": "31 January 2020", "lastmodified": "09 February 2021"}, {"techniquename": "File Deletion", "detection": "It may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.", "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native cmd functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. ", "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL can delete files and directories.", "S0504": " Anchor  : Anchor can self delete its dropper after the malware is successfully deployed.", "S0584": " AppleJeus  : AppleJeus has deleted the MSI file after installation.", "S0622": " AppleSeed  : AppleSeed can delete files from a compromised host after they are exfiltrated.", "G0026": " APT18  : APT18 actors deleted tools and batch files from victim systems.", "G0007": " APT28  : APT28 has intentionally deleted computer files to cover their tracks, including with use of the program CCleaner.", "G0016": " APT29  : APT29 routinely removed their tools, including custom backdoors, once remote access was achieved. APT29 has also used SDelete to remove artifacts from victims.", "G0022": " APT3  : APT3 has a tool that can delete files.", "G0050": " APT32  : APT32's macOS backdoor can receive a \"delete\" command.", "G0082": " APT38  : APT38 has used a utility called CLOSESHAVE that can securely delete a file from the system. They have also removed malware, tools, or other non-native files used during the intrusion to reduce their footprint or as part of the post-intrusion cleanup process.", "G0087": " APT39  : APT39 has used malware to delete files after they are deployed on a compromised host.", "G0096": " APT41  : APT41 deleted files from the system. ", "S0456": " Aria-body  : Aria-body has the ability to delete files and directories on compromised hosts.", "S0438": " Attor  : Attor\u2019s plugin deletes the collected files and log files after exfiltration.", "S0347": " AuditCred  : AuditCred can delete files from the system.", "S0344": " Azorult  : Azorult can delete files from victim machines.", "S0414": " BabyShark  : BabyShark has cleaned up all files associated with the secondary payload execution.", "S0475": " BackConfig  : BackConfig has the ability to remove files and folders related to previous infections.", "S0093": " Backdoor.Oldrea  : Backdoor.Oldrea contains a cleanup module that removes traces of itself from the victim.", "S0234": " Bandook  : Bandook has a command to delete a file.", "S0239": " Bankshot  : Bankshot marks files to be deleted upon the next system reboot and uninstalls and removes itself from the system.", "S0534": " Bazar  : Bazar can delete its loader using a batch file in the Windows temporary folder.", "S0127": " BBSRAT  : BBSRAT can delete files and directories.", "S0268": " Bisonal  : Bisonal deletes its dropper and VBS scripts from the victim\u2019s machine.", "S0069": " BLACKCOFFEE  : BLACKCOFFEE has the capability to delete files.", "S0520": " BLINDINGCAN  : BLINDINGCAN has deleted itself and associated artifacts from victim machines.", "S0657": " BLUELIGHT  : BLUELIGHT can uninstall itself.", "G0060": " BRONZE BUTLER  : The BRONZE BUTLER uploader or malware the uploader uses  to delete the RAR archives after they have been exfiltrated.", "S0274": " Calisto  : Calisto has the capability to use  to remove folders and files from the victim's machine.", "S0030": " Carbanak  : Carbanak has a command to delete files.", "S0348": " Cardinal RAT  : Cardinal RAT can uninstall itself, including deleting its executable.", "S0462": " CARROTBAT  : CARROTBAT has the ability to delete downloaded files from a compromised host.", "S0107": " Cherry Picker  : Recent versions of Cherry Picker delete files and registry keys created by the malware.", "G0114": " Chimera  : Chimera has performed file deletion to evade detection. ", "S0106": " cmd  : cmd can be used to delete files from the file system.", "G0080": " Cobalt Group  : Cobalt Group deleted the DLL dropper from the victim\u2019s machine to cover their tracks.", "S0115": " Crimson  : Crimson has the ability to delete files from a compromised host.  ", "S0498": " Cryptoistic  : Cryptoistic has the ability delete files from a compromised host.", "S0527": " CSPY Downloader  : CSPY Downloader has the ability to self delete.", "S0625": " Cuba  : Cuba can use the command  to delete its artifacts from the system. ", "S0354": " Denis  : Denis has a command to delete files from the victim\u2019s machine.", "S0021": " Derusbi  : Derusbi is capable of deleting files. It has been observed loading a Linux Kernel Module (LKM) and then deleting it from the hard disk as well as overwriting the data with null bytes.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 deleted many of its files used during operations as part of cleanup, including removing applications and deleting screenshots.", "S0502": " Drovorub  : Drovorub can delete specific files from a compromised host.", "S0567": " Dtrack  : Dtrack can remove its persistence and delete itself.", "S0062": " DustySky  : DustySky can delete files it creates from the infected system.", "S0593": " ECCENTRICBANDWAGON  : ECCENTRICBANDWAGON can delete log files generated from the malware stored at .", "S0081": " Elise  : Elise is capable of launching a remote shell on the host to delete itself.", "S0091": " Epic  : Epic has a command to delete a file from the machine.", "S0396": " EvilBunny  : EvilBunny has deleted the initial dropper after running through the environment checks.", "G0120": " Evilnum  : Evilnum has deleted files used during infection.", "S0401": " Exaramel for Linux  : Exaramel for Linux can uninstall its persistence mechanism and delete its configuration file.", "S0181": " FALLCHILL  : FALLCHILL can delete malware and associated artifacts from the victim.", "S0512": " FatDuke  : FatDuke can secure delete its DLL.", "S0267": " FELIXROOT  : FELIXROOT deletes the .LNK file from the startup directory as well as the dropper components.", "G0051": " FIN10  : FIN10 has used batch scripts and scheduled tasks to delete critical system files.", "G0053": " FIN5  : FIN5 uses SDelete to clean up the environment and attempt to prevent detection.", "G0037": " FIN6  : FIN6 has removed files from victim machines.", "G0061": " FIN8  : FIN8 has deleted tmp and prefetch files during post compromise cleanup activities.", "S0277": " FruitFly  : FruitFly will delete files on the system.", "S0410": " Fysbis  : Fysbis has the ability to delete files.", "G0047": " Gamaredon Group  : Gamaredon Group tools can delete files used during an infection.", "S0168": " Gazer  : Gazer has commands to delete files and persistence mechanisms from the victim.", "S0032": " gh0st RAT  : gh0st RAT has the capability to to delete files.", "S0249": " Gold Dragon  : Gold Dragon deletes one of its files, 2.hwp, from the endpoint after establishing persistence.", "S0493": " GoldenSpy  : GoldenSpy's uninstaller can delete registry entries, files and folders, and finally itself once these tasks have been completed.", "S0531": " Grandoreiro  : Grandoreiro can delete .LNK files created in the Startup folder.", "S0342": " GreyEnergy  : GreyEnergy can securely delete a file by hooking into the DeleteFileA and DeleteFileW functions in the Windows API.", "S0632": " GrimAgent  : GrimAgent can delete old binaries on a compromised host.", "G0043": " Group5  : Malware used by Group5 is capable of remotely deleting files from victims.", "S0561": " GuLoader  : GuLoader can delete its executable from the  directory on the compromised host.", "S0151": " HALFBAKED  : HALFBAKED can delete a specified file.", "S0499": " Hancitor  : Hancitor has deleted files using the VBA  function.", "S0391": " HAWKBALL  : HAWKBALL has the ability to delete files.   ", "S0087": " Hi-Zor  : Hi-Zor deletes its RAT installer file as it executes its DLL payload file.", "S0601": " Hildegard  : Hildegard has deleted scripts after execution. ", "G0072": " Honeybee  : Honeybee removes batch files to reduce fingerprint on the system as well as deletes the CAB file that gets encoded upon infection.", "S0431": " HotCroissant  : HotCroissant has the ability to clean up installed files, delete files, and delete itself from the victim\u2019s machine.", "S0070": " HTTPBrowser  : HTTPBrowser deletes its original installer file once installation is complete.", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can delete files.", "S0398": " HyperBro  : HyperBro has the ability to delete a specified file.", "S0434": " Imminent Monitor  : Imminent Monitor has deleted files related to its dynamic debugger feature.", "S0259": " InnaputRAT  : InnaputRAT has a command to delete files.", "S0260": " InvisiMole  : InvisiMole has deleted files and directories including XML and files successfully uploaded to C2 servers.", "S0015": " Ixeshe  : Ixeshe has a command to delete a file from the machine.", "S0044": " JHUHUGIT  : The JHUHUGIT dropper can delete itself from the victim. Another JHUHUGIT variant has the capability to delete specified files.", "S0201": " JPIN  : JPIN's installer/uninstaller component deletes itself if it encounters a version of Windows earlier than Windows XP or identifies security-related processes running.", "S0283": " jRAT  : jRAT has a function to delete files from the victim\u2019s machine.", "S0265": " Kazuar  : Kazuar can delete files.", "S0271": " KEYMARBLE  : KEYMARBLE has the capability to delete files off the victim\u2019s machine.", "G0094": " Kimsuky  : Kimsuky has deleted the exfiltrated data on disk after transmission.", "S0437": " Kivars  : Kivars has the ability to uninstall malware from the infected host.", "S0162": " Komplex  : The Komplex trojan supports file deletion.", "S0356": " KONNI  : KONNI can delete files.", "G0032": " Lazarus Group  : Lazarus Group malware deletes files in various ways, including \"suicide scripts\" to delete malware binaries from the victim. Lazarus Group also uses secure file deletion to delete files from the victim.", "S0395": " LightNeuron  : LightNeuron has a function to delete files.", "S0211": " Linfo  : Linfo creates a backdoor through which remote attackers can delete files.", "S0513": " LiteDuke  : LiteDuke can securely delete files by first writing random data to the file.", "S0372": " LockerGoga  : LockerGoga has been observed deleting its original launcher after execution.", "S0447": " Lokibot  : Lokibot will delete its dropped files after bypassing UAC.", "S0582": " LookBack  : LookBack removes itself after execution and can delete files on the system.", "S0451": " LoudMiner  : LoudMiner deleted installation files after completion.", "S0409": " Machete  : Once a file is uploaded, Machete will delete it from the machine. ", "S0282": " MacSpy  : MacSpy deletes any temporary files it creates", "G0059": " Magic Hound  : Magic Hound has deleted and overwrote files to cover tracks.", "G0045": " menuPass  : A menuPass macro deletes files after it has decoded and decompressed them.", "S0443": " MESSAGETAP  : Once loaded into memory, MESSAGETAP deletes the keyword_parm.txt and parm.txt configuration files from disk. ", "S0455": " Metamorfo  : Metamorfo has deleted itself from the system after execution.", "S0083": " Misdat  : Misdat is capable of deleting the backdoor file.", "S0149": " MoonWind  : MoonWind can delete itself or specified files.", "S0284": " More_eggs  : More_eggs can remove itself from a system.", "S0256": " Mosquito  : Mosquito deletes files using DeleteFileW API call.", "S0233": " MURKYTOP  : MURKYTOP has the capability to delete local files.", "G0129": " Mustang Panda  : Mustang Panda will delete their tools and files, and kill processes after their objectives are reached.", "S0228": " NanHaiShu  : NanHaiShu launches a script to delete their original decoy file to cover tracks.", "S0630": " Nebulae  : Nebulae has the ability to delete files and directories.", "S0353": " NOKKI  : NOKKI can delete files to cover tracks.", "S0346": " OceanSalt  : OceanSalt can delete files from the system.", "G0049": " OilRig  : OilRig has deleted files associated with their payload after execution.", "S0439": " Okrum  : Okrum's backdoor deletes files after they have been successfully uploaded to C2 servers.", "S0264": " OopsIE  : OopsIE has the capability to delete files and scripts from the victim's machine.", "G0116": " Operation Wocao  : Operation Wocao has deleted logs and executable files used during an intrusion.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D has a command to delete a file from the system. OSX_OCEANLOTUS.D deletes the app bundle and dropper after execution.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell can delete scripts from a subdirectory of /tmp after they are run.", "S0208": " Pasam  : Pasam creates a backdoor through which remote attackers can delete files.", "G0040": " Patchwork  : Patchwork removed certain files and replaced them so they could not be retrieved.", "S0556": " Pay2Key  : Pay2Key can remove its log file from disk.", "S0587": " Penquin  : Penquin can delete downloaded executables after running them.", "S0517": " Pillowmint  : Pillowmint has deleted the filepath .", "S0435": " PLEAD  : PLEAD has the ability to delete files on the compromised host.", "S0067": " pngdowner  : pngdowner deletes content from C2 communications that was saved to the user's temporary directory.", "S0453": " Pony  : Pony has used scripts to delete itself after execution.  ", "S0139": " PowerDuke  : PowerDuke has a command to write random data across a file and delete it.", "S0441": " PowerShower  : PowerShower has the ability to remove all files created during the dropper process.", "S0223": " POWERSTATS  : POWERSTATS can delete all files on the C:\\, D:\\, E:\\ and, F:\\ drives using PowerShell Remove-Item commands.", "S0654": " ProLock  : ProLock can remove files containing its payload after they are executed.", "S0279": " Proton  : Proton removes all files in the /tmp directory.", "S0238": " Proxysvc  : Proxysvc can delete files indicated by the attacker and remove itself from disk using a batch file.", "S0147": " Pteranodon  : Pteranodon can delete files that may interfere with it executing. It also can delete temporary files and itself after the initial script executes.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY can delete files written to disk.", "S0583": " Pysa  : Pysa has deleted batch files after execution.  ", "S0650": " QakBot  : QakBot can delete folders and files including overwriting its executable with legitimate programs.", "S0269": " QUADAGENT  : QUADAGENT has a command to delete its Registry key and scheduled task.", "S0629": " RainyDay  : RainyDay has the ability to uninstall itself by deleting its service and files.", "S0495": " RDAT  : RDAT can issue SOAP requests to delete already processed C2 emails. RDAT can also delete itself from the infected system.    ", "S0416": " RDFSNIFFER  : RDFSNIFFER has the capability of deleting local files.", "S0172": " Reaver  : Reaver deletes the original dropped file from the victim.", "S0153": " RedLeaves  : RedLeaves can delete specified files.", "S0125": " Remsec  : Remsec is capable of deleting files on the victim. It also securely removes itself after collecting and exfiltrating data.", "S0496": " REvil  : REvil can mark its binary code for deletion after reboot.", "S0448": " Rising Sun  : Rising Sun can delete files specified by the C2.    ", "G0106": " Rocke  : Rocke has deleted files on infected machines.  ", "S0240": " ROKRAT  : ROKRAT can request to delete files.  ", "S0148": " RTM  : RTM can delete all files created during its execution.", "S0253": " RunningRAT  : RunningRAT contains code to delete files from the victim\u2019s machine.", "S0074": " Sakula  : Some Sakula samples use cmd.exe to delete temporary files.", "S0370": " SamSam  : SamSam has been seen deleting its own files and payloads to make analysis of the attack more difficult.", "G0034": " Sandworm Team  : Sandworm Team has used backdoors that can delete files used in an attack from an infected system.", "S0461": " SDBbot  : SDBbot has the ability to delete files from a compromised host.", "S0195": " SDelete  : SDelete deletes data in a way that makes it unrecoverable.", "S0053": " SeaDuke  : SeaDuke can securely delete files, including deleting itself from the victim.", "S0345": " Seasalt  : Seasalt has a command to delete a specified file.", "S0382": " ServHelper  : ServHelper has a module to delete itself from the infected machine.", "S0444": " ShimRat  : ShimRat can uninstall itself from compromised hosts, as well create and modify directories, delete, move, copy, and rename files.", "S0589": " Sibot  : Sibot will delete itself if a certain server response is received.", "G0091": " Silence  : Silence has deleted artifacts, including scheduled tasks, communicates files from the C2 and other logs.  ", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has deleted itself and the 'index.dat' file on a compromised machine to remove recent Internet history from the system.", "S0615": " SombRAT  : SombRAT has the ability to run  or  to remove all files from storage and delete the storage temp file on a compromised host.", "S0374": " SpeakUp  : SpeakUp deletes files to remove evidence on the machine. ", "S0390": " SQLRat  : SQLRat has used been observed deleting scripts once used. ", "S0380": " StoneDrill  : StoneDrill has been observed deleting the temporary files once they fulfill their task. ", "S0491": " StrongPity  : StrongPity can delete previously exfiltrated files from the compromised host.", "S0603": " Stuxnet  : Stuxnet uses an RPC server that contains a routine for file deletion.", "S0559": " SUNBURST  : SUNBURST had a command to delete files.", "S0562": " SUNSPOT  : Following the successful injection of SUNBURST, SUNSPOT deleted a temporary file it created named  after restoring the original SolarWinds Orion source code to the software library.", "S0011": " Taidoor  : Taidoor can use  to remove files from infected hosts.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE can delete files from a compromised host.", "S0164": " TDTESS  : TDTESS creates then deletes log files during installation of itself as a service.", "G0139": " TeamTNT  : TeamTNT uses a payload that removes itself after running.", "G0088": " TEMP.Veles  : TEMP.Veles routinely deleted tools, logs, and other files after they were finished with them.", "G0089": " The White Company  : The White Company has the ability to delete its malware entirely from the target system.", "G0027": " Threat Group-3390  : Threat Group-3390 has deleted existing logs and exfiltrated file archives from a victim.", "S0094": " Trojan.Karagany  : Trojan.Karagany has used plugins with a self-delete capability.", "G0081": " Tropic Trooper  : Tropic Trooper has deleted dropper files on an infected system using command scripts.    ", "S0263": " TYPEFRAME  : TYPEFRAME can delete files off the system.", "S0386": " Ursnif  : Ursnif has deleted data staged in tmp files after exfiltration.", "S0136": " USBStealer  : USBStealer has several commands to delete files associated with the malware from the victim.", "S0442": " VBShower  : VBShower has attempted to complicate forensic analysis by deleting all the files contained in  and .", "S0257": " VERMIN  : VERMIN can delete files on the victim\u2019s machine.", "S0180": " Volgmer  : Volgmer can delete files and itself after infection to avoid analysis.", "S0155": " WINDSHIELD  : WINDSHIELD is capable of file deletion along with other file system interaction.", "S0466": " WindTail  : WindTail has the ability to receive and execute a self-delete command.", "S0176": " Wingbird  : Wingbird deletes its payload along with the payload's parent process after it finishes copying files.", "G0102": " Wizard Spider  : Wizard Spider has used file deletion to remove some modules and configurations from an infected host after use.", "S0161": " XAgentOSX  : XAgentOSX contains the deletFileFromPath function to delete a specified file using the NSFileManager:removeFileAtPath method.", "S0251": " Zebrocy  : Zebrocy has a command to delete files and directories.", "S0330": " Zeus Panda  : Zeus Panda has a command to delete a file. It also can uninstall scripts and delete files to cover its track.", "S0350": " zwShell  : zwShell has deleted itself after creating a service as well as deleted a temporary file when the system reboots.", "S0412": " ZxShell  : ZxShell can delete files from the system. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1070.004", "subtechniqueof": "T1070", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "defensebypassed": ["Host forensic analysis"], "contributors": ["Walker Johnson"], "version": "1.0", "created": "31 January 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Clear Command History", "detection": "User authentication, especially via remote terminal services like SSH, without new entries in that user's  is suspicious. Additionally, the removal/clearing of the  file can be an indicator of suspicious activity.Monitor for suspicious modifications or deletion of  and use of the  command.", "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.On Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable . When a user logs off a system, this information is flushed to a file in the user's home directory called . The benefit of this is that it allows users to go back to commands they've used before in different sessions.Adversaries may delete their commands from these logs by manually clearing the history () or deleting the bash history file .On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the  module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.The  command history tracks the commands used in all PowerShell sessions and writes them to a file ( by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.Adversaries may run the PowerShell command  to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the  file. Adversaries may also delete the  file or edit its contents to hide PowerShell commands they have run.", "mitigations": {"M1039": " Environment Variable Permissions  : Making the environment variables associated with command history read only may ensure that the history is preserved.", "M1022": " Restrict File and Directory Permissions  : Preventing users from deleting or writing to certain files can stop adversaries from maliciously altering their  or  files."}, "procedureexamples": {"G0096": " APT41  : APT41 attempted to remove evidence of some of its activity by deleting Bash histories.", "S0601": " Hildegard  : Hildegard has used history -c to clear script shell logs.", "S0641": " Kobalos  : Kobalos can remove all command history on compromised hosts.    ", "G0045": " menuPass  : menuPass has used Wevtutil to remove PowerShell execution logs.", "G0139": " TeamTNT  : TeamTNT has cleared command history with ."}, "id": "T1070.003", "subtechniqueof": "T1070", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "defensebypassed": ["Host forensic analysis, Log analysis"], "contributors": ["Emile Kenning, Sophos; Vikas Singh, Sophos"], "version": "1.1", "created": "31 January 2020", "lastmodified": "16 October 2020"}, {"techniquename": "Clear Linux or Mac System Logs", "detection": "File system monitoring may be used to detect improper deletion or modification of indicator files. Also monitor for suspicious processes interacting with log files.", "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the  directory. Subfolders in this directory categorize logs by their related functions, such as:", "mitigations": {"M1041": " Encrypt Sensitive Information  : Obfuscate/encrypt event files locally and in transit to avoid giving feedback to an adversary.", "M1029": " Remote Data Storage  : Automatically forward events to a log server or data repository to prevent conditions in which the adversary can locate and manipulate data on the local system. When possible, minimize time delay on event reporting to avoid prolonged storage on the local system.", "M1022": " Restrict File and Directory Permissions  : Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities."}, "procedureexamples": {"S0279": " Proton  : Proton removes logs from  and .", "G0106": " Rocke  : Rocke has cleared log files within the /var/log/ folder.", "G0139": " TeamTNT  : TeamTNT has removed system logs from ."}, "id": "T1070.002", "subtechniqueof": "T1070", "tactics": ["Defense Evasion"], "platforms": ["Linux, macOS"], "version": "1.0", "created": "28 January 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Downgrade Attack", "detection": "Monitor for commands or other activity that may be indicative of attempts to abuse older or deprecated technologies (ex: ). Also monitor for other abnormal events, such as execution of and/or processes spawning from a version of a tool that is not expected in the environment.", "description": "Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls such as logging. For example, PowerShell versions 5+ includes Script Block Logging (SBL) which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to Impair Defenses while running malicious scripts that may have otherwise been detected.Adversaries may downgrade and use less-secure versions of various features of a system, such as Command and Scripting Interpreters or even network protocols that can be abused to enable Adversary-in-the-Middle.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Consider removing previous versions of tools that are unnecessary to the environment when possible."}, "id": "T1562.010", "subtechniqueof": "T1562", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "08 October 2021", "lastmodified": "15 October 2021"}, {"techniquename": "Clear Windows Event Logs", "detection": "Deleting Windows event logs (via native binaries , API functions , or  ) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").", "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.The event logs can be cleared with the following utility commands:These logs may also be cleared through other mechanisms, such as the event viewer GUI or PowerShell.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Obfuscate/encrypt event files locally and in transit to avoid giving feedback to an adversary.", "M1029": " Remote Data Storage  : Automatically forward events to a log server or data repository to prevent conditions in which the adversary can locate and manipulate data on the local system. When possible, minimize time delay on event reporting to avoid prolonged storage on the local system.", "M1022": " Restrict File and Directory Permissions  : Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities."}, "procedureexamples": {"G0007": " APT28  : APT28 has cleared event logs, including by using the commands  and .", "G0050": " APT32  : APT32 has cleared select event log entries.", "G0082": " APT38  : APT38 clears Window Event logs and Sysmon logs from the system.", "G0096": " APT41  : APT41 attempted to remove evidence of some of its activity by clearing Windows security and system events.", "S0089": " BlackEnergy  : The BlackEnergy component KillDisk is capable of deleting Windows Event Logs.", "G0114": " Chimera  : Chimera has cleared event logs on compromised hosts.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 cleared Windows event logs and other logs produced by tools they used, including system, security, terminal services, remote services, and audit logs. The actors also deleted specific Registry keys.", "G0053": " FIN5  : FIN5 has cleared event logs from victims.", "G0061": " FIN8  : FIN8 has cleared logs during post compromise cleanup activities.", "S0182": " FinFisher  : FinFisher clears the system event logs using .", "S0032": " gh0st RAT  : gh0st RAT is able to wipe event logs.", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can clear all system event logs.", "G0119": " Indrik Spider  : Indrik Spider has used Cobalt Strike to empty log files.", "S0607": " KillDisk  : KillDisk deletes Application, Security, Setup, and System Windows Event Logs.", "S0532": " Lucifer  : Lucifer can clear and remove event logs.", "S0368": " NotPetya  : NotPetya uses  to clear the Windows event logs.", "S0365": " Olympic Destroyer  : Olympic Destroyer will attempt to clear the System and Security event logs using .", "G0116": " Operation Wocao  : Operation Wocao has deleted Windows Event Logs to hinder forensic investigation.", "S0192": " Pupy  : Pupy has a module to clear event logs with PowerShell.", "S0253": " RunningRAT  : RunningRAT contains code to clear event logs.", "S0242": " SynAck  : SynAck clears event logs.", "S0645": " Wevtutil  : Wevtutil can be used to clear system and security event logs from the system.", "S0412": " ZxShell  : ZxShell has a command to clear system event logs. "}, "id": "T1070.001", "subtechniqueof": "T1070", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "systemrequirements": ["Clearing the Windows event logs requires Administrator permissions"], "permissionsrequired": ["Administrator"], "defensebypassed": ["Anti Virus, Host Intrusion Prevention Systems, Log Analysis"], "version": "1.0", "created": "28 January 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Safe Mode Boot", "detection": "Monitor Registry modification and additions for services that may start on safe mode. For example, a program can be forced to start on safe mode boot by adding a  in front of the \"Startup\" value name:  or by adding a key to .Monitor execution of processes and commands associated with making configuration changes to boot settings, such as  and .", "description": "Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.Adversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings.Adversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e. Modify Registry). Malicious Component Object Model (COM) objects may also be registered and loaded in safe mode.", "mitigations": {"M1026": " Privileged Account Management  : Restrict administrator accounts to as few individuals as possible, following least privilege principles, that may be abused to remotely boot a machine in safe mode.", "M1054": " Software Configuration  : Ensure that endpoint defenses run in safe mode."}, "procedureexamples": {"S0496": " REvil  : REvil can force a reboot in safe mode with networking."}, "id": "T1562.009", "subtechniqueof": "T1562", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "defensebypassed": ["Anti-virus, Host Intrusion Prevention Systems"], "contributors": ["Jorell Magtibay, National Australia Bank Limited; Kiyohito Yamamoto, RedLark, NTT Communications; Yusuke Kubo, RedLark, NTT Communications"], "version": "1.0", "created": "23 June 2021", "lastmodified": "31 August 2021"}, {"techniquename": "Indicator Removal on Host", "detection": "File system monitoring may be used to detect improper deletion or modification of indicator files.  Events not stored on the file system may require different detection mechanisms.", "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as Bash History and /var/log/*.These actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.", "mitigations": {"M1041": " Encrypt Sensitive Information  : Obfuscate/encrypt event files locally and in transit to avoid giving feedback to an adversary.", "M1029": " Remote Data Storage  : Automatically forward events to a log server or data repository to prevent conditions in which the adversary can locate and manipulate data on the local system. When possible, minimize time delay on event reporting to avoid prolonged storage on the local system. ", "M1022": " Restrict File and Directory Permissions  : Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities."}, "procedureexamples": {"G0016": " APT29  : APT29 removed evidence of email export requests using . They temporarily replaced legitimate utilities with their own, executed their payload, and then restored the original file.", "S0239": " Bankshot  : Bankshot deletes all artifacts associated with the malware from the infected machine.", "S0534": " Bazar  : Bazar's loader can delete scheduled tasks created by a previous instance of the malware.    ", "S0089": " BlackEnergy  : BlackEnergy has removed the watermark associated with enabling the  boot configuration option by removing the relevant strings in the  of the system.", "S0527": " CSPY Downloader  : CSPY Downloader has the ability to remove values it writes to the Registry.", "S0568": " EVILNUM  : EVILNUM has a function called \"DeleteLeftovers\" to remove certain artifacts of the attack.", "S0477": " Goopy  : Goopy has the ability to delete emails used for C2 once the content has been copied. ", "S0632": " GrimAgent  : GrimAgent can delete previously created tasks on a compromised host.", "S0449": " Maze  : Maze has used the \"Wow64RevertWow64FsRedirection\" function following attempts to delete the shadow volumes, in order to leave the system in the same state as it was prior to redirection. ", "S0500": " MCMD  : MCMD has the ability to remove set Registry Keys.", "S0455": " Metamorfo  : Metamorfo has a command to delete a Registry key it uses, . ", "S0083": " Misdat  : Misdat is capable of deleting Registry keys used for persistence.", "S0385": " njRAT  : njRAT is capable of deleting objects related to itself (registry keys, files, and firewall rules) on the victim.", "S0229": " Orz  : Orz can overwrite Registry settings to reduce its visibility on the victim.", "S0517": " Pillowmint  : Pillowmint can uninstall the malicious service from an infected machine.", "S0428": " PoetRAT  : PoetRAT has the ability to overwrite scripts and delete itself if a sandbox environment is detected.", "S0113": " Prikormka  : After encrypting its own log files, the log encryption module in Prikormka deletes the original, unencrypted files from the host.", "S0448": " Rising Sun  : Rising Sun can clear process memory by overwriting it with junk bytes.  ", "S0148": " RTM  : RTM has the ability to remove Registry entries that it created during execution.", "S0461": " SDBbot  : SDBbot has the ability to clean up and remove data structures from a compromised host.", "S0596": " ShadowPad  : ShadowPad has deleted arbitrary Registry values.", "S0589": " Sibot  : Sibot will delete an associated registry key if a certain server response is received.", "S0603": " Stuxnet  : Stuxnet removes itself from the system through a DLL export by deleting specific files and stored procedures.", "S0559": " SUNBURST  : SUNBURST removed IFEO values to clean up traces of execution."}, "id": "T1070", "subtechniques": ["T1070.001", "T1070.002", "T1070.003", "T1070.004", "T1070.005", "T1070.006"], "tactics": ["Defense Evasion"], "platforms": ["Containers, Linux, Windows, macOS"], "defensebypassed": ["Anti-virus, Host intrusion prevention systems, Log analysis"], "capecid": ["CAPEC-93"], "contributors": ["Brad Geesaman, @bradgeesaman; Ed Williams, Trustwave, SpiderLabs"], "version": "1.2", "created": "31 May 2017", "lastmodified": "27 July 2021"}, {"techniquename": "Disable or Modify Cloud Firewall", "detection": "Monitor cloud logs for modification or creation of new security groups or firewall rules.", "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in Disable or Modify System Firewall. Cloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary may introduce new firewall rules or policies to allow access into a victim cloud environment. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups to allow any TCP/IP connectivity.Modifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.", "mitigations": {"M1047": " Audit  : Routinely check account role permissions to ensure only expected users and roles have permission to modify cloud firewalls. ", "M1018": " User Account Management  : Ensure least privilege principles are applied to Identity and Access Management (IAM) security policies."}, "id": "T1562.007", "subtechniqueof": "T1562", "tactics": ["Defense Evasion"], "platforms": ["IaaS"], "permissionsrequired": ["User"], "contributors": ["Expel"], "version": "1.1", "created": "24 June 2020", "lastmodified": "08 March 2021"}, {"techniquename": "Disable Cloud Logs", "detection": "Monitor logs for API calls to disable logging. In AWS, monitor for:  and . In GCP, monitor for: .  In Azure, monitor for . Additionally, a sudden loss of a log source may indicate that it has been disabled.", "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an attacker has sufficient permissions, they can disable logging to avoid detection of their activities. For example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.", "mitigations": {"M1018": " User Account Management  : Configure default account policy to enable logging. Manage policies to ensure only necessary users have permissions to make changes to logging policies."}, "id": "T1562.008", "subtechniqueof": "T1562", "tactics": ["Defense Evasion"], "platforms": ["IaaS"], "permissionsrequired": ["User"], "contributors": ["Alex Soler, AttackIQ; Ibrahim Ali Khan; Janantha Marasinghe; Matt Snyder, VMware; Prasad Somasamudram, McAfee; Sekhar Sarukkai, McAfee ; Syed Ummar Farooqh, McAfee"], "version": "1.1", "created": "12 October 2020", "lastmodified": "15 March 2021"}, {"techniquename": "Indicator Blocking", "detection": "Detect lack of reported activity from a host sensor. Different methods of blocking may cause different disruptions in reporting. Systems may suddenly stop reporting all data or only certain kinds of data.Depending on the types of host information collected, an analyst may be able to detect the event that triggered a process to stop or connection to be blocked. For example, Sysmon will log when its configuration state has changed (Event ID 16) and Windows Management Instrumentation (WMI) may be used to subscribe ETW providers that log any provider removal from a specific trace session.  To detect changes in ETW you can also monitor the registry key which contains configurations for all ETW event providers: ", "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting  or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry.  These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation.ETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell  cmdlet or by interfacing directly with the Registry to make alterations.In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. ", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Ensure event tracers/forwarders , firewall policies, and other associated mechanisms are secured with appropriate permissions and access controls.", "M1054": " Software Configuration  : Consider automatically relaunching forwarding mechanisms at recurring intervals (ex: temporal, on-logon, etc.) as well as applying appropriate change management to firewall rules and other related system configurations.", "M1018": " User Account Management  : Ensure event tracers/forwarders , firewall policies, and other associated mechanisms are secured with appropriate permissions and access controls and cannot be manipulated by user accounts."}, "procedureexamples": {"S0377": " Ebury  : Ebury can hook logging functions so that nothing from the backdoor gets sent to the logging facility. ", "S0579": " Waterbear  : Waterbear can hook the  and  APIs called by the process of a security product to hide PIDs and TCP records from detection."}, "id": "T1562.006", "subtechniqueof": "T1562", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Anti-virus, Host intrusion prevention systems"], "capecid": ["CAPEC-571"], "contributors": ["Rob Smith"], "version": "1.0", "created": "19 March 2020", "lastmodified": "13 January 2021"}, {"techniquename": "Impair Command History Logging", "detection": "Correlating a user session with a distinct lack of new commands in their  can be a clue to suspicious behavior. Additionally, users checking or changing their , , or  environment variables may be suspicious.Monitor for modification of PowerShell command history settings through processes being created with  command-line arguments and use of the PowerShell commands  and . ", "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. On Linux and macOS, command history is tracked in a file pointed to by the environment variable . When a user logs off a system, this information is flushed to a file in the user's home directory called . The  environment variable keeps track of what should be saved by the  command and eventually into the  file when a user logs out.  does not exist by default on macOS, but can be set by the user and will be respected.Adversaries may clear the history environment variable () or set the command history size to zero () to prevent logging of commands. Additionally,  can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\".  can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.On Windows systems, the  module tracks commands used in all PowerShell sessions and writes them to a file ( by default). Adversaries may change where these logs are saved using . This will cause  to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command .", "mitigations": {"M1039": " Environment Variable Permissions  : Prevent users from changing the , , and  environment variables. ", "M1028": " Operating System Configuration  : Make sure that the  environment variable is set to \"ignoredups\" instead of \"ignoreboth\" or \"ignorespace\"."}, "procedureexamples": {"G0082": " APT38  : APT38 has prepended a space to all of their terminal commands to operate without leaving traces in the HISTCONTROL environment."}, "id": "T1562.003", "subtechniqueof": "T1562", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "defensebypassed": ["Host forensic analysis, Log analysis"], "capecid": ["CAPEC-13"], "contributors": ["Emile Kenning, Sophos; Vikas Singh, Sophos"], "version": "2.0", "created": "21 February 2020", "lastmodified": "24 April 2021"}, {"techniquename": "Impair Defenses", "detection": "Monitor processes and command-line arguments to see if security tools or logging services are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools.  Lack of log events may be suspicious.Monitor environment variables and APIs that can be leveraged to disable security measures.", "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Ensure proper process and file permissions are in place to prevent adversaries from disabling or interfering with security/logging services.", "M1024": " Restrict Registry Permissions  : Ensure proper Registry permissions are in place to prevent adversaries from disabling or interfering with security/logging services.", "M1018": " User Account Management  : Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security/logging services."}, "procedureexamples": {"S0603": " Stuxnet  : Stuxnet reduces the integrity level of objects to allow write actions."}, "id": "T1562", "subtechniques": ["T1562.001", "T1562.002", "T1562.003", "T1562.004", "T1562.006", "T1562.007", "T1562.008", "T1562.009", "T1562.010"], "tactics": ["Defense Evasion"], "platforms": ["Containers, IaaS, Linux, Network, Office 365, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "defensebypassed": ["Anti-virus, Digital Certificate Validation, File monitoring, Firewall, Host forensic analysis, Host intrusion prevention systems, Log analysis, Signature-based detection"], "version": "1.2", "created": "21 February 2020", "lastmodified": "19 October 2021"}, {"techniquename": "VBA Stomping", "detection": "Detection efforts should be placed finding differences between VBA source code and p-code. VBA code can be extracted from p-code before execution with tools such as the pcodedmp disassembler. The oletools toolkit leverages the pcodedmp disassembler to detect VBA stomping by comparing keywords present in the VBA source code and p-code.If the document is opened with a Graphical User Interface (GUI) the malicious p-code is decompiled and may be viewed. However, if the  stream, which specifies the project properties, is modified in a specific way the decompiled VBA code will not be displayed. For example, adding a module name that is undefined to the  stream will inhibit attempts of reading the VBA source code through the GUI.", "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a  that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the  stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.An adversary may hide malicious VBA code by overwriting the VBA source code location with zero\u2019s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the  stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Turn off or restrict access to unneeded VB components."}, "id": "T1564.007", "subtechniqueof": "T1564", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["MS Office version specified in", "stream must match host"], "permissionsrequired": ["User"], "contributors": ["Rick Cole, Mandiant"], "version": "1.1", "created": "17 September 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Resource Forking", "detection": "Identify files with the  extended attribute and large data amounts stored in resource forks. Monitor command-line activity leveraging the use of resource forks, especially those immediately followed by potentially malicious activity such as creating network connections. ", "description": "Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code. Usage of a resource fork is identifiable when displaying a file\u2019s extended attributes, using  or  commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the  folder.Adversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.", "mitigations": {"M1013": " Application Developer Guidance  : Configure applications to use the application bundle structure which leverages the  folder location. "}, "procedureexamples": {"S0276": " Keydnap  : Keydnap uses a resource fork to present a macOS JPEG or text file icon rather than the executable's icon assigned by the operating system."}, "id": "T1564.009", "subtechniqueof": "T1564", "tactics": ["Defense Evasion"], "platforms": ["macOS"], "permissionsrequired": ["User"], "defensebypassed": ["Notarization; Gatekeeper"], "contributors": ["Ivan Sinyakov; Jaron Bradley @jbradley89"], "version": "1.0", "created": "12 October 2021", "lastmodified": "16 October 2021"}, {"techniquename": "Run Virtual Instance", "detection": "Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines. Network adapter information may also be helpful in detecting the use of virtual instances.Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. , ), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. ). Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. ).Monitor for commands which enable hypervisors such as Hyper-V.  If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for , with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.", "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable Hyper-V if not necessary within a given environment.", "M1038": " Execution Prevention  : Use application control to mitigate installation and use of unapproved virtualization software."}, "procedureexamples": {"S0451": " LoudMiner  : LoudMiner has used QEMU and VirtualBox to run a Tiny Core Linux virtual machine, which runs XMRig and makes connections to the C2 server for updates.", "S0449": " Maze  : Maze operators have used VirtualBox and a Windows 7 virtual machine to run the ransomware; the virtual machine's configuration file mapped the shared network drives of the target company, presumably so Maze can encrypt files on the shared drives as well as the local machine. ", "S0481": " Ragnar Locker  : Ragnar Locker has used VirtualBox and a stripped Windows XP virtual machine to run itself. The use of a shared folder specified in the configuration enables Ragnar Locker to encrypt files on the host operating system, including files on any mapped drives."}, "id": "T1564.006", "subtechniqueof": "T1564", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Janantha Marasinghe; Johann Rehberger; Menachem Shafran, XM Cyber"], "version": "1.1", "created": "29 June 2020", "lastmodified": "14 October 2021"}, {"techniquename": "Disable or Modify System Firewall", "detection": "Monitor processes and command-line arguments to see if firewalls are disabled or modified. Monitor Registry edits to keys that manage firewalls.", "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. ", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Ensure proper process and file permissions are in place to prevent adversaries from disabling or modifying firewall settings.", "M1024": " Restrict Registry Permissions  : Ensure proper Registry permissions are in place to prevent adversaries from disabling or modifying firewall settings.", "M1018": " User Account Management  : Ensure proper user permissions are in place to prevent adversaries from disabling or modifying firewall settings."}, "procedureexamples": {"G0016": " APT29  : APT29 used  to configure firewall rules that limited certain UDP outbound packets.", "G0082": " APT38  : APT38 have created firewall exemptions on specific ports, including ports 443, 6443, 8443, and 9443.", "S0031": " BACKSPACE  : The \"ZR\" variant of BACKSPACE will check to see if known host-based firewalls are installed on the infected systems. BACKSPACE will attempt to establish a C2 channel, then will examine open windows to identify a pop-up from the firewall software and will simulate a mouse-click to allow the connection to proceed.", "S0245": " BADCALL  : BADCALL disables the Windows firewall before binding to a port.", "G0008": " Carbanak  : Carbanak may use netsh to add local firewall rule exceptions.", "S0492": " CookieMiner  : CookieMiner has checked for the presence of \"Little Snitch\", macOS network monitoring and application firewall software, stopping and exiting if it is found.", "S0334": " DarkComet  : DarkComet can disable Security Center functions like the Windows Firewall.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 has disabled host-based firewalls. The group has also globally opened port 3389.", "S0531": " Grandoreiro  : Grandoreiro can block the Deibold Warsaw GAS Tecnologia security tool at the firewall level.", "S0132": " H1N1  : H1N1 kills and disables services for Windows Firewall.", "S0246": " HARDRAIN  : HARDRAIN opens the Windows Firewall to modify incoming connections.", "S0376": " HOPLIGHT  : HOPLIGHT has modified the firewall using netsh.  ", "S0260": " InvisiMole  : InvisiMole has a command to disable routing and the Firewall on the victim\u2019s machine.", "S0088": " Kasidet  : Kasidet has the ability to change firewall settings to allow a plug-in to be downloaded.", "G0094": " Kimsuky  : Kimsuky has been observed disabling the system firewall.", "G0032": " Lazarus Group  : Various Lazarus Group malware modifies the Windows firewall to allow incoming connections or disable it entirely using netsh. ", "S0336": " NanoCore  : NanoCore can modify the victim's firewall.", "S0108": " netsh  : netsh can be used to disable local firewall settings.", "S0385": " njRAT  : njRAT has modified the Windows firewall to allow itself to communicate through the firewall.", "G0116": " Operation Wocao  : Operation Wocao has used PowerShell to add and delete rules in the Windows firewall.", "S0125": " Remsec  : Remsec can add or remove applications or ports on the Windows firewall or disable it entirely.", "G0106": " Rocke  : Rocke used scripts which killed processes and added firewall rules to block traffic related to other cryptominers.  ", "G0139": " TeamTNT  : TeamTNT has disabled .", "S0263": " TYPEFRAME  : TYPEFRAME can open the Windows Firewall on the victim\u2019s machine to allow incoming connections.", "S0412": " ZxShell  : ZxShell can disable the firewall by modifying the registry key . "}, "id": "T1562.004", "subtechniqueof": "T1562", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Firewall"], "version": "1.0", "created": "21 February 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Disable or Modify Tools", "detection": "Monitor processes and command-line arguments to see if security tools/services are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools. Monitoring for changes to other known features used by deployed security tools may also expose malicious activity.Lack of expected log events may be suspicious.", "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Ensure proper process and file permissions are in place to prevent adversaries from disabling or interfering with security services.", "M1024": " Restrict Registry Permissions  : Ensure proper Registry permissions are in place to prevent adversaries from disabling or interfering with security services.", "M1018": " User Account Management  : Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has the capability to kill any running analysis processes and AV software.", "G0016": " APT29  : APT29 used the service control manager on a remote system to disable services associated with security monitoring products.", "S0640": " Avaddon  : Avaddon looks for and attempts to stop anti-malware solutions.", "S0638": " Babuk  : Babuk can stop anti-virus services on a compromised host.", "S0534": " Bazar  : Bazar has manually loaded ntdll from disk in order to identity and remove API hooks set by security products.   ", "S0252": " Brave Prince  : Brave Prince terminates antimalware processes.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has incorporated code into several tools that attempts to terminate anti-virus processes.", "S0482": " Bundlore  : Bundlore can change browser security settings to enable extensions to be installed. Bundlore uses the  command to prevent users from inspecting processes.", "S0484": " Carberp  : Carberp has attempted to disable security software by creating a suspended process for the security software and injecting code to delete antivirus core files when the process is resumed.", "S0144": " ChChes  : ChChes can alter the victim's proxy configuration.", "S0611": " Clop  : Clop can uninstall or disable security products.", "S0154": " Cobalt Strike  : Cobalt Strike has the ability to use Smart Applet attacks to disable the Java SecurityManager sandbox.", "S0608": " Conficker  : Conficker terminates various services related to system security and Windows.", "S0334": " DarkComet  : DarkComet can disable Security Center functions like anti-virus.", "S0377": " Ebury  : Ebury can disable SELinux Role-Based Access Control and deactivate PAM modules.", "S0554": " Egregor  : Egregor has disabled Windows Defender to evade protections.", "S0605": " EKANS  : EKANS stops processes related to security and management software.", "G0037": " FIN6  : FIN6 has deployed a utility script named  to disable anti-virus.", "G0047": " Gamaredon Group  : Gamaredon Group has delivered macros which can tamper with Microsoft Office security settings. ", "S0249": " Gold Dragon  : Gold Dragon terminates anti-malware processes if they\u2019re found running on the system.", "S0477": " Goopy  : Goopy has the ability to disable Microsoft Outlook's security policies to disable macro warnings.    ", "G0078": " Gorgon Group  : Gorgon Group malware can attempt to disable security features in Microsoft Office and Windows Defender using the  command.", "S0531": " Grandoreiro  : Grandoreiro can hook APIs, kill processes, break file system paths, and change ACLs to prevent security tools from running.", "S0132": " H1N1  : H1N1 kills and disables services for Windows Security Center, and Windows Defender.", "S0061": " HDoor  : HDoor kills anti-virus found on the victim.", "S0601": " Hildegard  : Hildegard has modified DNS resolvers to evade DNS monitoring tools.", "S0434": " Imminent Monitor  : Imminent Monitor has a feature to disable Windows Task Manager.   ", "G0119": " Indrik Spider  : Indrik Spider used PsExec to leverage Windows Defender to disable scanning of all downloaded files and to restrict real-time monitoring.", "S0201": " JPIN  : JPIN can lower security settings by changing Registry keys.", "G0094": " Kimsuky  : Kimsuky has been observed turning off Windows Security Center.", "G0032": " Lazarus Group  : Lazarus Group malware TangoDelta attempts to terminate various processes associated with McAfee. Additionally, Lazarus Group malware SHARPKNOT disables the Microsoft Windows System Event Notification and Alerter services.. ", "S0372": " LockerGoga  : LockerGoga installation has been immediately preceded by a \"task kill\" command in order to disable anti-virus.", "S0449": " Maze  : Maze has disabled dynamic analysis and other security tools including IDA debugger, x32dbg, and OllyDbg. It has also disabled Windows Defender's Real-Time Monitoring feature and attempted to disable endpoint protection services.", "S0576": " MegaCortex  : MegaCortex was used to kill endpoint security processes.", "S0455": " Metamorfo  : Metamorfo has a function to kill processes associated with defenses and can prevent certain processes from launching. ", "G0069": " MuddyWater  : MuddyWater can disable the system's local proxy settings.", "S0228": " NanHaiShu  : NanHaiShu can change Internet Explorer settings to reduce warnings about malware activity.", "S0336": " NanoCore  : NanoCore can modify the victim's anti-virus.", "S0457": " Netwalker  : Netwalker can detect and terminate active security software-related processes on infected systems.", "G0014": " Night Dragon  : Night Dragon has disabled anti-virus and anti-spyware tools in some instances on the victim\u2019s machines. The actors have also disabled proxy settings to allow direct communication from victims to the Internet.", "S0223": " POWERSTATS  : POWERSTATS can disable Microsoft Office Protected View by changing Registry keys.", "S0279": " Proton  : Proton kills security tools like Wireshark that are running.", "G0024": " Putter Panda  : Malware used by Putter Panda attempts to terminate processes corresponding to two components of Sophos Anti-Virus (SAVAdminService.exe and SavService.exe).", "S0583": " Pysa  : Pysa has the capability to stop antivirus services and disable Windows Defender. ", "S0650": " QakBot  : QakBot has the ability to modify the Registry to add its binaries to the Windows Defender exclusion list.", "S0481": " Ragnar Locker  : Ragnar Locker has attempted to terminate/stop processes and services associated with endpoint security products.", "S0496": " REvil  : REvil can connect to and disable the Symantec server on the victim's network.", "S0400": " RobbinHood  : RobbinHood will search for Windows services that are associated with antivirus software on the system and kill the process. ", "G0106": " Rocke  : Rocke used scripts which detected and uninstalled antivirus software.", "S0253": " RunningRAT  : RunningRAT kills antimalware running process.", "S0446": " Ryuk  : Ryuk has stopped services related to anti-virus.", "S0468": " Skidmap  : Skidmap has the ability to set SELinux to permissive mode.", "S0058": " SslMM  : SslMM identifies and kills anti-malware processes.", "S0491": " StrongPity  : StrongPity can add directories used by the malware to the Windows Defender exclusions list to prevent detection.", "S0559": " SUNBURST  : SUNBURST attempted to disable software security services following checks against a FNV-1a + XOR hashed hardcoded blocklist.", "G0139": " TeamTNT  : TeamTNT has disabled and uninstalled security tools.", "S0595": " ThiefQuest  : ThiefQuest uses the function  to obtain a list of running processes and kills each process matching a list of security related processes.", "S0004": " TinyZBot  : TinyZBot can disable Avira anti-virus.", "S0266": " TrickBot  : TrickBot can disable Windows Defender.", "G0010": " Turla  : Turla has used a AMSI bypass, which patches the in-memory amsi.dll, in PowerShell scripts to bypass Windows antimalware products.", "S0130": " Unknown Logger  : Unknown Logger has functionality to disable security tools, including Kaspersky, BitDefender, and MalwareBytes.", "G0102": " Wizard Spider  : Wizard Spider has shut down or uninstalled security applications on victim systems that might prevent ransomware from executing.", "S0412": " ZxShell  : ZxShell can kill AV products' processes. "}, "id": "T1562.001", "subtechniqueof": "T1562", "tactics": ["Defense Evasion"], "platforms": ["Containers, IaaS, Linux, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "defensebypassed": ["Anti-virus, File monitoring, Host intrusion prevention systems, Log analysis, Signature-based detection"], "capecid": ["CAPEC-578"], "contributors": ["Gal Singer, @galsinger29, Team Nautilus Aqua Security; Gordon Long, Box, Inc., @ethicalhax; Nathaniel Quist, Palo Alto Networks; Ziv Karliner, @ziv_kr, Team Nautilus Aqua Security"], "version": "1.2", "created": "21 February 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Email Hiding Rules", "detection": "Monitor email clients and applications for suspicious activity, such as missing messages or abnormal configuration and/or log entries.On Windows systems, monitor for creation of suspicious inbox rules through the use of the  and  PowerShell cmdlets. On MacOS systems, monitor for modifications to the , , , and  files.", "description": "Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the  or  PowerShell cmdlets on Windows systems.Adversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to Internal Spearphishing emails sent from the compromised account.Any user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as , , , and ) found in message bodies and subject lines. ", "mitigations": {"M1047": " Audit  : Enterprise email solutions may have monitoring mechanisms that may include the ability to audit inbox rules on a regular basis. In an Exchange environment, Administrators can use  to discover and remove potentially malicious inbox rules."}, "procedureexamples": {"G0085": " FIN4  : FIN4 has created rules in victims' Microsoft Outlook accounts to automatically delete emails containing words such as \"hacked,\" \"phish,\" and \"malware\" in a likely attempt to prevent organizations from communicating about their activities."}, "id": "T1564.008", "subtechniqueof": "T1564", "tactics": ["Defense Evasion"], "platforms": ["Linux, Office 365, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Dor Edry, Microsoft"], "version": "1.0", "created": "07 June 2021", "lastmodified": "16 October 2021"}, {"techniquename": "Hidden Users", "detection": "This technique prevents a user from showing up at the log in screen, but all of the other signs of the user may still exist. For example, \"hidden\" users may still get a home directory and will appear in the authentication logs.Monitor processes and command-line events for actions that could be taken to add a new user and subsequently hide it from login screens. Monitor Registry events for modifications to the  key.", "description": "Adversaries may use hidden users to mask the presence of user accounts they create or modify. Normal users may want to hide users when there are many users accounts on a given system or want to keep an account hidden from the other users on the system.In macOS, every user account has a userID associated with it. When creating a user, you can specify the userID for that account. There is a property value in  called  that prevents users with userIDs 500 and lower from appearing at the login screen. When using the Create Account technique with a userID under 500 (ex: ) and enabling this property (setting it to Yes), an adversary can conceal user accounts. In Windows, adversaries may hide user accounts via settings in the Registry. For example, an adversary may add a value to the Windows Registry (via Reg or other means) that will hide the user \"test\" from the Windows login screen: .", "mitigations": {"M1028": " Operating System Configuration  : If the computer is domain joined, then group policy can help restrict the ability to create or hide users. Similarly, preventing the modification of the   value will force all users to be visible."}, "procedureexamples": {"G0074": " Dragonfly 2.0  : Dragonfly 2.0 modified the Registry to hide create user accounts. ", "S0649": " SMOKEDHAM  : SMOKEDHAM has modified the Registry to hide created user accounts from the Windows logon screen. "}, "id": "T1564.002", "subtechniqueof": "T1564", "tactics": ["Defense Evasion"], "platforms": ["Windows, macOS"], "permissionsrequired": ["Administrator, root"], "contributors": ["Omkar Gudhate"], "version": "1.1", "created": "13 March 2020", "lastmodified": "14 October 2021"}, {"techniquename": "Hidden File System", "detection": "Detecting the use of a hidden file system may be exceptionally difficult depending on the implementation. Emphasis may be placed on detecting related aspects of the adversary lifecycle, such as how malware interacts with the hidden file system or how a hidden file system is loaded. Consider looking for anomalous interactions with the Registry or with a particular file on disk. Likewise, if the hidden file system is loaded on boot from reserved disk space, consider shifting focus to detecting  activity.", "description": "Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.Adversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions. Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system. Adversaries may also fragment files across the existing file system structure in non-standard ways.", "procedureexamples": {"S0114": " BOOTRASH  : BOOTRASH has used unallocated disk space between partitions for a hidden file system that stores components of the Nemesis bootkit.", "S0126": " ComRAT  : ComRAT has used a portable FAT16 partition image placed in %TEMP% as a hidden file system.", "G0020": " Equation  : Equation has used an encrypted virtual file system stored in the Windows Registry.", "S0019": " Regin  : Regin has used a hidden file system to store some of its components.", "G0041": " Strider  : Strider has used a hidden file system that is stored as a file on disk."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1564.005", "subtechniqueof": "T1564", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "version": "1.0", "created": "28 June 2020", "lastmodified": "29 June 2020"}, {"techniquename": "Disable Windows Event Logging", "detection": "Monitor processes and command-line arguments for commands that can be used to disable logging. For example, , , , and offensive tooling (such as  and ) may be used to clear logs.  In Event Viewer, Event ID 1102 under the \"Security\" Windows Log and Event ID 104 under the \"System\" Windows Log both indicate logs have been cleared.  in Event Viewer may indicate the termination of the EventLog service. Additionally, gaps in the logs, e.g. non-sequential Event Record IDs, may indicate that the logs may have been tampered.Monitor the addition of the MiniNT registry key in , which may disable Event Viewer.", "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.The EventLog service maintains event logs from various system components and applications. By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to  for basic audit policy settings or  for advanced audit policy settings.  may also be used to set audit policies.Adversaries may target system-wide logging or just that of a particular application. For example, the EventLog service may be disabled using the following PowerShell line: . Additionally, adversaries may use  and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the  or  parameters. For example,  turns off auditing for the Account Logon category. To clear the audit policy, adversaries may run the following lines:  or .By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.", "mitigations": {"M1047": " Audit  : Consider periodic review of  settings for Administrator accounts and perform dynamic baselining on SIEM(s) to investigate potential malicious activity. Also ensure that the EventLog service and its threads are properly running.", "M1022": " Restrict File and Directory Permissions  : Ensure proper process and file permissions are in place to prevent adversaries from disabling or interfering with logging or deleting or modifying .evtx logging files. Ensure .evtx files, which are located at , have the proper file permissions for limited, legitimate access and audit policies for detection. ", "M1024": " Restrict Registry Permissions  : Ensure proper Registry permissions are in place to prevent adversaries from disabling or interfering logging. The addition of the MiniNT registry key disables Event Viewer.", "M1018": " User Account Management  : Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with logging."}, "procedureexamples": {"G0016": " APT29  : APT29 used  to prevent the collection of audit logs.", "G0034": " Sandworm Team  : Sandworm Team has disabled event logging on compromised systems.", "G0027": " Threat Group-3390  : Threat Group-3390 has used appcmd.exe to disable logging on a victim server.", "S0645": " Wevtutil  : Wevtutil can be used to disable specific event logs on the system."}, "id": "T1562.002", "subtechniqueof": "T1562", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "defensebypassed": ["Log analysis"], "contributors": ["Prasanth Sadanala, Cigna Information Protection (CIP) - Threat Response Engineering Team"], "version": "1.1", "created": "21 February 2020", "lastmodified": "19 October 2021"}, {"techniquename": "NTFS File Attributes", "detection": "Forensic techniques exist to identify information stored in NTFS EA.  Monitor calls to the  and  Windows API functions as well as binaries used to interact with EA,   and consider regularly scanning for the presence of modified information. There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: ) is commonly associated with ADSs.    For a more exhaustive list of utilities that can be used to execute and create ADSs, see https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f.The Streams tool of Sysinternals can be used to uncover files with ADSs. The  command can also be used to display ADSs.  Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a  parameter to interact with ADSs.  ", "description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).    Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.  ", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Consider adjusting read and write permissions for NTFS EA, though this should be tested to ensure routine OS operations are not impeded. "}, "procedureexamples": {"S0504": " Anchor  : Anchor has used NTFS to hide files.", "G0050": " APT32  : APT32 used NTFS alternate data streams to hide their payloads.", "S0373": " Astaroth  : Astaroth can abuse alternate data streams (ADS) to store content for malicious payloads.", "S0570": " BitPaymer  : BitPaymer has copied itself to the  alternate data stream of a newly created file.", "S0404": " esentutl  : esentutl can be used to read and write alternate data streams.", "S0361": " Expand  : Expand can be used to download or copy a file into an alternate data stream.", "S0168": " Gazer  : Gazer stores configuration items in alternate data streams (ADSs) if the Registry is not accessible.", "S0397": " LoJax  : LoJax has loaded an embedded NTFS DXE driver to be able to access and write to NTFS partitions.", "S0139": " PowerDuke  : PowerDuke hides many of its backdoor payloads in an alternate data stream (ADS).", "S0145": " POWERSOURCE  : If the victim is using PowerShell 3.0 or later, POWERSOURCE writes its decoded payload to an alternate data stream (ADS) named kernel32.dll that is saved in .", "S0019": " Regin  : The Regin malware platform uses Extended Attributes to store encrypted executables.", "S0476": " Valak  : Valak has the ability save and execute files as alternate data streams (ADS).", "S0612": " WastedLocker  : WastedLocker has the ability to save and execute files as an alternate data stream (ADS).", "S0027": " Zeroaccess  : Some variants of the Zeroaccess Trojan have been known to store data in Extended Attributes."}, "id": "T1564.004", "subtechniqueof": "T1564", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "systemrequirements": ["NTFS partitioned hard drive"], "defensebypassed": ["Anti-virus, Host forensic analysis, Signature-based detection"], "contributors": ["Oddvar Moe, @oddvarmoe; Red Canary"], "version": "1.0", "created": "13 March 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Hidden Window", "detection": "Monitor processes and command-line arguments for actions indicative of hidden windows. In Windows, enable and configure event logging and PowerShell logging to check for the hidden window style. In MacOS, plist files are ASCII text files with a specific format, so they're relatively easy to parse. File monitoring can check for the  or any other suspicious plist tag in plist files and flag them.", "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. On Windows, there are a variety of features in scripting languages in Windows, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is . Similarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be , which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.", "mitigations": {"M1038": " Execution Prevention  : Limit or restrict program execution using anti-virus software. On MacOS, allowlist programs that are allowed to have the plist tag. All other programs should be considered suspicious."}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has used  to hide windows.", "G0073": " APT19  : APT19 used  to conceal PowerShell windows by setting the WindowStyle parameter to hidden. ", "G0007": " APT28  : APT28 has used the WindowStyle parameter to conceal PowerShell windows. ", "G0022": " APT3  : APT3 has been known to use  to conceal PowerShell windows.", "G0050": " APT32  : APT32 has used the WindowStyle parameter to conceal PowerShell windows.  ", "S0373": " Astaroth  : Astaroth loads its module with the XSL script parameter  set to zero, which opens the application with a hidden window. ", "S0360": " BONDUPDATER  : BONDUPDATER uses  to conceal a PowerShell window that downloads a payload.", "G0052": " CopyKittens  : CopyKittens has used  and  to conceal PowerShell windows. ", "S0625": " Cuba  : Cuba has executed hidden PowerShell windows. ", "G0079": " DarkHydrus  : DarkHydrus has used  to conceal PowerShell windows. ", "G0009": " Deep Panda  : Deep Panda has used  to conceal PowerShell windows by setting the WindowStyle parameter to hidden. ", "G0078": " Gorgon Group  : Gorgon Group has used  to conceal PowerShell windows by setting the WindowStyle parameter to hidden. ", "S0037": " HAMMERTOSS  : HAMMERTOSS has used  to conceal PowerShell windows.", "G0126": " Higaisa  : Higaisa used a payload that creates a hidden window.", "S0431": " HotCroissant  : HotCroissant has the ability to hide the window for operations performed on a given file.", "S0260": " InvisiMole  : InvisiMole has executed legitimate tools in hidden windows.", "S0387": " KeyBoy  : KeyBoy uses  to conceal a PowerShell window that downloads a payload. ", "S0437": " Kivars  : Kivars has the ability to conceal its activity through hiding active windows.", "G0059": " Magic Hound  : Magic Hound malware has a function to determine whether the C2 server wishes to execute the newly dropped file in a hidden window.", "S0500": " MCMD  : MCMD can modify processes to prevent them from being visible on the desktop.", "S0455": " Metamorfo  : Metamorfo has hidden its GUI using the ShowWindow() WINAPI call. ", "G0133": " Nomadic Octopus  : Nomadic Octopus executed PowerShell in a hidden window. ", "S0441": " PowerShower  : PowerShower has added a registry key so future powershell.exe instances are spawned with coordinates for a window position off-screen by default.", "S0491": " StrongPity  : StrongPity has the ability to hide the console window for its document search module from the user.", "S0386": " Ursnif  : Ursnif droppers have used COM properties to execute malware in hidden windows.", "S0466": " WindTail  : WindTail can instruct the OS to execute an application without a dock icon or menu."}, "id": "T1564.003", "subtechniqueof": "T1564", "tactics": ["Defense Evasion"], "platforms": ["Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Travis Smith, Tripwire"], "version": "1.0", "created": "13 March 2020", "lastmodified": "29 March 2020"}, {"techniquename": "File and Directory Permissions Modification", "detection": "Monitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.Consider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.", "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.", "mitigations": {"M1026": " Privileged Account Management  : Ensure critical system files as well as those known to be abused by adversaries have restrictive permissions and are owned by an appropriately privileged account, especially if access is not required by users nor will inhibit system functionality.", "M1022": " Restrict File and Directory Permissions  : Applying more restrictive permissions to files and directories could prevent adversaries from modifying the access control lists."}, "procedureexamples": {"S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D has changed permissions of a second-stage payload to an executable via ."}, "id": "T1222", "subtechniques": ["T1222.001", "T1222.002"], "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "defensebypassed": ["File system access controls"], "contributors": ["CrowdStrike Falcon OverWatch; Jan Miller, CrowdStrike"], "version": "2.1", "created": "17 October 2018", "lastmodified": "13 September 2021"}, {"techniquename": "Hide Artifacts", "detection": "Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.", "procedureexamples": {"S0482": " Bundlore  : Bundlore uses the  utility to make unique file and directory names for payloads, such as .", "S0402": " OSX/Shlayer  : OSX/Shlayer uses the  utility to make random and unique filenames for payloads, such as  or ."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1564", "subtechniques": ["T1564.001", "T1564.002", "T1564.003", "T1564.004", "T1564.005", "T1564.006", "T1564.007", "T1564.008", "T1564.009"], "tactics": ["Defense Evasion"], "platforms": ["Linux, Office 365, Windows, macOS"], "version": "1.1", "created": "26 February 2020", "lastmodified": "20 October 2021"}, {"techniquename": "Hidden Files and Directories", "detection": "Monitor the file system and shell commands for files being created with a leading \".\" and the Windows command-line use of attrib.exe to add the hidden attribute.", "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches ( for Windows and  for Linux and macOS).On Linux and Mac, users can mark specific files as hidden simply by putting a \".\" as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \"ls\". Users must specifically change settings to have these files viewable.Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.", "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has created hidden folders.", "S0584": " AppleJeus  : AppleJeus has added a leading  to plist filenames, unlisting them from the Finder app and default Terminal directory listings.", "G0007": " APT28  : APT28 has saved files with hidden file attributes.", "G0050": " APT32  : APT32's macOS backdoor hides the clientID file via a chflags function.", "S0438": " Attor  : Attor can set attributes of log files and directories to HIDDEN, SYSTEM, ARCHIVE, or a combination of those.", "S0475": " BackConfig  : BackConfig has the ability to set folders or files to be hidden from the Windows Explorer default view.", "S0274": " Calisto  : Calisto uses a hidden directory named .calisto to store data from the victim\u2019s machine before exfiltration.", "S0484": " Carberp  : Carberp has created a hidden file in the Startup folder of the current user.", "S0369": " CoinTicker  : CoinTicker downloads the following hidden files to evade detection and maintain persistence: /private/tmp/.info.enc, /private/tmp/.info.py, /private/tmp/.server.sh, ~/Library/LaunchAgents/.espl.plist, ~/Library/Containers/.[random string]/[random string].", "S0497": " Dacls  : Dacls has had its payload named with a dot prefix to make it hidden from view in the Finder application.", "S0634": " EnvyScout  : EnvyScout can use hidden directories and files to hide malicious executables.", "S0569": " Explosive  : Explosive has commonly set file and path attributes to hidden.", "S0277": " FruitFly  : FruitFly saves itself with a leading \".\" to make it a hidden file.", "S0278": " iKitten  : iKitten saves itself with a leading \".\" so that it's hidden from users by default.", "S0434": " Imminent Monitor  : Imminent Monitor has a dynamic debugging feature to set the file attribute to hidden.", "S0260": " InvisiMole  : InvisiMole can create hidden system directories.", "S0015": " Ixeshe  : Ixeshe sets its own executable file's attributes to hidden.", "S0162": " Komplex  : The Komplex payload is stored in a hidden directory at .", "G0032": " Lazarus Group  : Lazarus Group has used a VBA Macro to set its file attributes to System and Hidden and has named files with a dot prefix to hide them from the Finder application.", "S0447": " Lokibot  : Lokibot has the ability to copy itself to a hidden file and directory.", "S0451": " LoudMiner  : LoudMiner has set the attributes of the VirtualBox directory and VBoxVmService parent directory to \"hidden\".", "S0409": " Machete  : Machete has the capability to exfiltrate stolen data to a hidden folder on a removable drive.", "S0282": " MacSpy  : MacSpy stores itself in  ", "S0339": " Micropsia  : Micropsia creates a new hidden directory to store all components' outputs in a dedicated sub-folder for each.", "G0129": " Mustang Panda  : Mustang Panda's PlugX variant has created a hidden folder on USB drives named  to store malicious executables and collected data.", "S0198": " NETWIRE  : NETWIRE can copy itself to and launch itself from hidden folders.", "S0439": " Okrum  : Before exfiltration, Okrum's backdoor has used hidden files to store logs and outputs from backdoor commands.", "S0402": " OSX/Shlayer  : OSX/Shlayer executes a .command script from a hidden directory in a mounted DMG.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D sets the main loader file\u2019s attributes to hidden.", "S0428": " PoetRAT  : PoetRAT has the ability to hide and unhide files.", "S0448": " Rising Sun  : Rising Sun can modify file attributes to hide files.", "G0106": " Rocke  : Rocke downloaded a file \"libprocesshider\", which could hide files on the target system.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has been created with a hidden attribute to insure it's not visible to the victim.", "S0595": " ThiefQuest  : ThiefQuest hides a copy of itself in the user's  directory by using a  at the beginning of the file name followed by 9 random characters.", "G0134": " Transparent Tribe  : Transparent Tribe can hide legitimate directories and replace them with malicious copies of the same name.", "G0081": " Tropic Trooper  : Tropic Trooper has created a hidden directory under  and .", "S0366": " WannaCry  : WannaCry uses  to make some of its files hidden.", "S0612": " WastedLocker  : WastedLocker has copied a random file from the Windows System32 folder to the  location under a different hidden filename.", "S0658": " XCSSET  : XCSSET uses a hidden folder named  and  to embed itself in Xcode."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1564.001", "subtechniqueof": "T1564", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "defensebypassed": ["Host forensic analysis"], "version": "1.0", "created": "26 February 2020", "lastmodified": "29 March 2020"}, {"techniquename": "Exploitation for Defense Evasion", "detection": "Exploitation for defense evasion may happen shortly after the system has been compromised to prevent detection during later actions for for additional tools that may be brought in and used. Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. This could include suspicious files written to disk, evidence of  for attempts to hide execution or evidence of Discovery.", "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for Security Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist. ", "M1050": " Exploit Protection  : Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring.  Many of these protections depend on the architecture and target application binary for compatibility and may not work for software targeted for defense evasion.", "M1019": " Threat Intelligence Program  : Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization.", "M1051": " Update Software  : Update software regularly by employing patch management for internal enterprise endpoints and servers."}, "procedureexamples": {"G0007": " APT28  : APT28 has used CVE-2015-4902 to bypass security features."}, "id": "T1211", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, System access controls"], "contributors": ["John Lambert, Microsoft Threat Intelligence Center"], "version": "1.1", "created": "18 April 2018", "lastmodified": "29 March 2020"}, {"techniquename": "Windows File and Directory Permissions Modification", "detection": "Monitor and investigate attempts to modify DACLs and file/directory ownership. Many of the commands used to modify DACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.Consider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.", "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Windows implements file and directory ACLs as Discretionary Access Control Lists (DACLs). Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.Adversaries can interact with the DACLs using built-in Windows commands, such as , , , and , which can grant adversaries higher permissions on specific files and folders. Further, PowerShell provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.", "mitigations": {"M1026": " Privileged Account Management  : Ensure critical system files as well as those known to be abused by adversaries have restrictive permissions and are owned by an appropriately privileged account, especially if access is not required by users nor will inhibit system functionality.", "M1022": " Restrict File and Directory Permissions  : Applying more restrictive permissions to files and directories could prevent adversaries from modifying the access control lists."}, "procedureexamples": {"S0570": " BitPaymer  : BitPaymer can use  and  to reset a targeted executable's permissions and then take ownership.", "S0531": " Grandoreiro  : Grandoreiro can modify the binary ACL to prevent security tools from running.", "S0201": " JPIN  : JPIN can use the command-line utility cacls.exe to change file permissions.", "S0446": " Ryuk  : Ryuk can launch  to delete every access-based restrictions on files and directories.", "S0366": " WannaCry  : WannaCry uses  and  to make some of its files hidden and grant all users full access controls.", "S0612": " WastedLocker  : WastedLocker has a command to take ownership of a file and reset the ACL permissions using the  command. ", "G0102": " Wizard Spider  : Wizard Spider has used the icacls command to modify access control to backup servers, providing them with full control of all the system folders."}, "id": "T1222.001", "subtechniqueof": "T1222", "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM, User"], "version": "1.1", "created": "04 February 2020", "lastmodified": "01 September 2020"}, {"techniquename": "Linux and Mac File and Directory Permissions Modification", "detection": "Monitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Commonly abused command arguments include , , and . Consider enabling file/directory permission change auditing on folders containing key binary/configuration files.", "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Most Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs:  (short for change owner), and  (short for change mode).Adversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Unix Shell Configuration Modification or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow. ", "mitigations": {"M1026": " Privileged Account Management  : Ensure critical system files as well as those known to be abused by adversaries have restrictive permissions and are owned by an appropriately privileged account, especially if access is not required by users nor will inhibit system functionality.", "M1022": " Restrict File and Directory Permissions  : Applying more restrictive permissions to files and directories could prevent adversaries from modifying the access control lists."}, "procedureexamples": {"G0050": " APT32  : APT32's macOS backdoor changes the permission of the file it wants to execute to 755.", "S0482": " Bundlore  : Bundlore changes the permissions of a payload using the command .", "S0281": " Dok  : Dok gives all users execute permissions for the application using the command .", "S0599": " Kinsing  : Kinsing has used chmod to modify permissions on key files for use.", "S0402": " OSX/Shlayer  : OSX/Shlayer can use the  utility to set a file as executable, such as  or .", "S0598": " P.A.S. Webshell  : P.A.S. Webshell has the ability to modify file permissions.", "S0587": " Penquin  : Penquin can add the executable flag to a downloaded file.", "G0106": " Rocke  : Rocke has changed file permissions of files so they could not be modified. ", "G0139": " TeamTNT  : TeamTNT has modified the permissions on binaries with .", "S0658": " XCSSET  : XCSSET uses the  command to grant executable permissions to the malicious file."}, "id": "T1222.002", "subtechniqueof": "T1222", "tactics": ["Defense Evasion"], "platforms": ["Linux, macOS"], "permissionsrequired": ["User, root"], "version": "1.1", "created": "04 February 2020", "lastmodified": "13 September 2021"}, {"techniquename": "Direct Volume Access", "detection": "Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives. Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through , additional logging of PowerShell scripts is recommended.", "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools. Utilities, such as NinjaCopy, exist to perform these actions in PowerShell. ", "id": "T1006", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "defensebypassed": ["File monitoring, File system access controls"], "version": "2.0", "created": "31 May 2017", "lastmodified": "09 February 2021"}, {"techniquename": "Execution Guardrails", "detection": "Detecting the use of guardrails may be difficult depending on the implementation. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of , especially in a short period of time, may aid in detection.", "description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.", "mitigations": {"M1055": " Do Not Mitigate  : Execution Guardrails likely should not be mitigated with preventative controls because it may protect unintended targets from being compromised. If targeted, efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior if compromised."}, "procedureexamples": {"S0504": " Anchor  : Anchor can terminate itself if specific execution flags are not present.", "S0570": " BitPaymer  : BitPaymer compares file names and paths to a list of excluded names and directory names during encryption.", "S0635": " BoomBox  : BoomBox can check its current working directory and for the presence of a specific file and terminate if specific values are not found.", "S0634": " EnvyScout  : EnvyScout can call  to ensure that embedded files are being executed from the C: drive, and will terminate if they are not.", "S0637": " NativeZone  : NativeZone can check for the presence of KM.EkeyAlmaz1C.dll and will halt execution unless it is in the same directory as the rest of the malware's components.", "S0603": " Stuxnet  : Stuxnet checks for specific operating systems on 32-bit machines, Registry keys, and dates for vulnerabilities, and will exit execution if the values are not met. ", "S0562": " SUNSPOT  : SUNSPOT only replaces SolarWinds Orion source code if the MD5 checksums of both the original source code file and backdoored replacement source code match hardcoded values. ", "S0636": " VaporRage  : VaporRage has the ability to check for the presence of a specific DLL and terminate if it is not found."}, "id": "T1480", "subtechniques": ["T1480.001"], "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Host forensic analysis, Signature-based detection, Static file analysis"], "contributors": ["Nick Carr, Mandiant"], "version": "1.1", "created": "31 January 2019", "lastmodified": "09 June 2021"}, {"techniquename": "Environmental Keying", "detection": "Detecting the use of environmental keying may be difficult depending on the implementation. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of , especially in a short period of time, may aid in detection.", "description": "Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses. By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult. These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).Similar to Obfuscated Files or Information, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution. By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult. This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.Like other Execution Guardrails, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.", "mitigations": {"M1055": " Do Not Mitigate  : Environmental Keying likely should not be mitigated with preventative controls because it may protect unintended targets from being compromised. If targeted, efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior if compromised."}, "procedureexamples": {"G0096": " APT41  : APT41 has encrypted payloads using the Data Protection API (DPAPI), which relies on keys tied to specific user accounts on specific machines. APT41 has also environmentally keyed second stage malware with an RC5 key derived in part from the infected system's volume serial number.", "G0020": " Equation  : Equation has been observed utilizing environmental keying in payload delivery.", "S0260": " InvisiMole  : InvisiMole can use Data Protection API to encrypt its components on the victim\u2019s computer, to evade detection, and to make sure the payload can only be decrypted and loaded on one specific compromised computer."}, "id": "T1480.001", "subtechniqueof": "T1480", "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Host forensic analysis, Signature-based detection, Static file analysis"], "contributors": ["Nick Carr, Mandiant"], "version": "1.0", "created": "23 June 2020", "lastmodified": "09 June 2021"}, {"techniquename": "Build Image on Host", "detection": "Monitor for unexpected Docker image build requests to the Docker daemon on hosts in the environment. Additionally monitor for subsequent network communication with anomalous IPs that have never been seen before in the environment that indicate the download of malicious code.", "description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote  request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.An adversary may take advantage of that  API to build a custom image on the host that includes malware downloaded from their C2 server, and then they then may utilize Deploy Container using that custom image. If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it\u2019s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment. ", "mitigations": {"M1047": " Audit  : Audit images deployed within the environment to ensure they do not contain any malicious components.", "M1035": " Limit Access to Resource Over Network  : Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API on port 2375. Instead, communicate with the Docker API over TLS on port 2376.", "M1030": " Network Segmentation  : Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls.", "M1026": " Privileged Account Management  : Ensure containers are not running as root by default."}, "id": "T1612", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["Containers"], "permissionsrequired": ["User, root"], "contributors": ["Assaf Morag, @MoragAssaf, Team Nautilus Aqua Security; Michael Katchinskiy, @michael64194968, Team Nautilus Aqua Security; Roi Kol, @roykol1, Team Nautilus Aqua Security; Vishwas Manral, McAfee"], "version": "1.1", "created": "30 March 2021", "lastmodified": "26 August 2021"}, {"techniquename": "Deobfuscate/Decode Files or Information", "detection": "Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as .Monitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.", "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.One such example is use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file.  Another example is using the Windows  command to reassemble binary fragments into a malicious payload. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. ", "procedureexamples": {"S0469": " ABK  : ABK has the ability to decrypt AES encrypted payloads.", "S0331": " Agent Tesla  : Agent Tesla has the ability to decrypt strings encrypted with the Rijndael symmetric encryption algorithm.", "S0584": " AppleJeus  : AppleJeus has decoded files received from a C2.", "S0622": " AppleSeed  : AppleSeed can decode its payload prior to execution.", "G0073": " APT19  : An APT19 HTTP malware variant decrypts strings using single-byte XOR keys.", "G0007": " APT28  : An APT28 macro uses the command  to decode contents of a .txt file storing the base64 encoded payload.", "G0016": " APT29  : APT29 used 7-Zip to decode its Raindrop malware.", "G0087": " APT39  : APT39 has used malware to decrypt encrypted CAB files.", "S0456": " Aria-body  : Aria-body has the ability to decrypt the loader configuration and payload DLL.", "S0373": " Astaroth  : Astaroth uses a fromCharCode() deobfuscation method to avoid explicitly writing execution commands and to hide its code. ", "S0347": " AuditCred  : AuditCred uses XOR and RC4 to perform decryption on the code functions.", "S0640": " Avaddon  : Avaddon has decrypted encrypted strings.", "S0473": " Avenger  : Avenger has the ability to decrypt files downloaded from C2.", "S0344": " Azorult  : Azorult uses an XOR key to decrypt content and uses Base64 to decode the C2 address.", "S0638": " Babuk  : Babuk has the ability to unpack itself into memory using XOR.", "S0414": " BabyShark  : BabyShark has the ability to decode downloaded files prior to execution.", "S0475": " BackConfig  : BackConfig has used a custom routine to decrypt strings.", "S0642": " BADFLICK  : BADFLICK can decode shellcode using a custom rotating XOR cipher.", "S0234": " Bandook  : Bandook has decoded its PowerShell script.", "S0239": " Bankshot  : Bankshot decodes embedded XOR strings.", "S0534": " Bazar  : Bazar can decrypt downloaded payloads. Bazar also resolves strings and API calls at runtime.", "S0470": " BBK  : BBK has the ability to decrypt AES encrypted payloads.", "S0127": " BBSRAT  : BBSRAT uses Expand to decompress a CAB file into executable content.", "S0574": " BendyBear  : BendyBear has decrypted function blocks using a XOR key during runtime to evade detection.", "S0268": " Bisonal  : Bisonal decodes strings in the malware using XOR and RC4.", "S0520": " BLINDINGCAN  : BLINDINGCAN has used AES and XOR to decrypt its DLLs.", "S0635": " BoomBox  : BoomBox can decrypt AES-encrypted files downloaded from C2.", "S0415": " BOOSTWRITE  : BOOSTWRITE has used a a 32-byte long multi-XOR key to decode data inside its payload.   ", "G0060": " BRONZE BUTLER  : BRONZE BUTLER downloads encoded payloads and decodes them on the victim.", "S0482": " Bundlore  : Bundlore has used  to decrypt AES encrypted payload data. Bundlore has also used base64 and RC4 with a hardcoded key to deobfuscate data.", "S0335": " Carbon  : Carbon decrypts task and configuration files for execution.", "S0348": " Cardinal RAT  : Cardinal RAT decodes many of its artifacts and is decrypted (AES-128) after being downloaded.", "S0160": " certutil  : certutil has been used to decode binaries hidden inside certificate files as Base64 information.", "S0631": " Chaes  : Chaes has decrypted an AES encrypted binary file to trigger the download of other files. ", "S0611": " Clop  : Clop has used a simple XOR operation to decrypt strings.", "S0154": " Cobalt Strike  : Cobalt Strike can deobfuscate shellcode using a rolling XOR and decrypt metadata from Beacon sessions.", "S0369": " CoinTicker  : CoinTicker decodes the initially-downloaded hidden encoded file using OpenSSL.", "S0126": " ComRAT  : ComRAT has used unique per machine passwords to decrypt the orchestrator payload and a hardcoded XOR key to decrypt its communications module. ComRAT has also used a unique password to decrypt the file used for its hidden file system.", "S0575": " Conti  : Conti has decrypted its payload using a hardcoded AES-256 key.", "S0492": " CookieMiner  : CookieMiner has used Google Chrome's decryption and extraction operations.", "S0614": " CostaBricks  : CostaBricks has the ability to use bytecode to decrypt embedded payloads.", "S0115": " Crimson  : Crimson can decode its encoded PE file prior to execution.", "G0012": " Darkhotel  : Darkhotel has decrypted strings and imports using RC4 during execution.", "S0255": " DDKONG  : DDKONG decodes an embedded configuration using XOR.", "S0354": " Denis  : Denis will decrypt important strings used for C&C communication.", "S0547": " DropBook  : DropBook can unarchive data downloaded from the C2 to obtain the payload and persistence modules. ", "S0502": " Drovorub  : Drovorub has de-obsfuscated XOR encrypted payloads in WebSocket messages.", "S0567": " Dtrack  : Dtrack has used a decryption routine that is part of an executable physical patch.", "S0024": " Dyre  : Dyre decrypts resources needed for targeting the victim.", "S0377": " Ebury  : Ebury has verified C2 domain ownership by decrypting the TXT record using an embedded RSA public key.", "S0624": " Ecipekac  : Ecipekac has the ability to decrypt fileless loader modules.", "S0554": " Egregor  : Egregor has been decrypted before execution. ", "S0634": " EnvyScout  : EnvyScout can deobfuscate and write malicious ISO files to disk.", "S0401": " Exaramel for Linux  : Exaramel for Linux can decrypt its configuration file.", "S0361": " Expand  : Expand can be used to decompress a local or remote CAB file into an executable.", "S0512": " FatDuke  : FatDuke can decrypt AES encrypted C2 communications.", "S0355": " Final1stspy  : Final1stspy uses Python code to deobfuscate base64-encoded strings.", "S0182": " FinFisher  : FinFisher extracts and decrypts stage 3 malware, which is stored in encrypted resources.", "S0618": " FIVEHANDS  : FIVEHANDS has the ability to decrypt its payload prior to execution.", "G0101": " Frankenstein  : Frankenstein has deobfuscated base64-encoded commands following the execution of a malicious script, which revealed a small script designed to obtain an additional payload.  ", "S0628": " FYAnti  : FYAnti has the ability to decrypt an embedded .NET module.", "G0047": " Gamaredon Group  : Gamaredon Group tools decrypted additional payloads from the C2. Gamaredon Group has also decoded base64-encoded source code of a downloader.", "S0032": " gh0st RAT  : gh0st RAT has decrypted and loaded the gh0st RAT DLL into memory, once the initial dropper executable is launched.", "S0588": " GoldMax  : GoldMax has decoded and decrypted the configuration file when executed.", "S0477": " Goopy  : Goopy has used a polymorphic decryptor to decrypt itself at runtime.", "G0078": " Gorgon Group  : Gorgon Group malware can decode contents from a payload that was Base64 encoded and write the contents to a file.", "S0531": " Grandoreiro  : Grandoreiro can decrypt its encrypted internal strings.", "S0632": " GrimAgent  : GrimAgent can use a decryption algorithm for strings based on Rotate on Right (RoR) and Rotate on Left (RoL) functionality.", "S0499": " Hancitor  : Hancitor has decoded Base64 encoded URLs to insert a recipient\u2019s name into the filename of the Word document. Hancitor has also extracted executables from ZIP files.", "S0394": " HiddenWasp  : HiddenWasp uses a cipher to implement a decoding function.", "G0126": " Higaisa  : Higaisa used certutil to decode Base64 binaries at runtime and a 16-byte XOR key to decrypt data.", "S0601": " Hildegard  : Hildegard has decrypted ELF files with AES.", "G0072": " Honeybee  : Honeybee drops a Word file containing a Base64-encoded file in it that is read, decoded, and dropped to the disk by the macro.", "S0434": " Imminent Monitor  : Imminent Monitor has decoded malware components that are then dropped to the system.", "S0604": " Industroyer  : Industroyer decrypts code to connect to a remote C2 server.", "S0260": " InvisiMole  : InvisiMole can decrypt, unpack and load a DLL from its resources, or from blobs encrypted with Data Protection API, two-key triple DES, and variations of the XOR cipher.", "S0581": " IronNetInjector  : IronNetInjector has the ability to decrypt embedded .NET and PE payloads.", "S0189": " ISMInjector  : ISMInjector uses the  command to decode a payload file.", "S0585": " Kerrdown  : Kerrdown can decode, decrypt, and decompress multiple layers of shellcode.", "S0487": " Kessel  : Kessel has decrypted the binary's configuration once the  function was launched.", "S0526": " KGH_SPY  : KGH_SPY can decrypt encrypted strings and write them to a newly created folder.", "S0641": " Kobalos  : Kobalos decrypts strings right after the initial communication, but before the authentication process. ", "S0356": " KONNI  : KONNI has used certutil to download and decode base64 encoded strings. ", "S0236": " Kwampirs  : Kwampirs decrypts and extracts a copy of its main DLL payload when executing.", "G0065": " Leviathan  : Leviathan has used a DLL known as SeDll to decrypt and execute other JavaScript backdoors.", "S0395": " LightNeuron  : LightNeuron has used AES and XOR to decrypt configuration files and commands.", "S0513": " LiteDuke  : LiteDuke has the ability to decrypt and decode multiple layers of obfuscation.", "S0447": " Lokibot  : Lokibot has decoded and decrypted its stages multiple times using hard-coded keys to deliver the final payload, and has decoded its server response hex string using XOR.", "S0582": " LookBack  : LookBack has a function that decrypts malicious data.", "S0532": " Lucifer  : Lucifer can decrypt its C2 address upon execution.", "S0409": " Machete  : Machete\u2019s downloaded data is decrypted using AES.", "S0576": " MegaCortex  : MegaCortex has used a Base64 key to decode its components.", "G0045": " menuPass  : menuPass has used certutil in a macro to decode base64-encoded content contained in a dropper document attached to an email. The group has also used  to decode files on the victim\u2019s machine when dropping UPPERCUT.", "S0443": " MESSAGETAP  : After checking for the existence of two files, keyword_parm.txt and parm.txt, MESSAGETAP XOR decodes and read the contents of the files. ", "S0455": " Metamorfo  : Upon execution, Metamorfo has unzipped itself after being downloaded to the system and has performed string decryption. ", "S0280": " MirageFox  : MirageFox has a function for decrypting data containing C2 configuration information.", "G0021": " Molerats  : Molerats decompresses ZIP files once on the victim machine.", "S0284": " More_eggs  : More_eggs will decode malware components that are then dropped to the system.", "G0069": " MuddyWater  : MuddyWater decoded base64-encoded PowerShell commands using a VBS file.", "S0637": " NativeZone  : NativeZone can decrypt and decode embedded  Cobalt Strike beacon stage shellcode.", "S0457": " Netwalker  : Netwalker's PowerShell script can decode and decrypt multiple layers of obfuscation, leading to the Netwalker DLL being loaded into memory.", "S0353": " NOKKI  : NOKKI uses a unique, custom de-obfuscation technique.", "G0049": " OilRig  : A OilRig macro has run a PowerShell command to decode file contents. OilRig has also used certutil to decode base64-encoded files on victims.", "S0439": " Okrum  : Okrum's loader can decrypt the backdoor code, embedded within the loader or within a legitimate PNG file. A custom XOR cipher or RC4 is used for decryption.", "S0052": " OnionDuke  : OnionDuke can use a custom decryption algorithm to decrypt strings.", "S0264": " OopsIE  : OopsIE concatenates then decompresses multiple resources to load an embedded .Net Framework assembly.", "S0402": " OSX/Shlayer  : OSX/Shlayer can base64-decode and AES-decrypt downloaded payloads. Versions of OSX/Shlayer pass encrypted and password-protected code to  and then write the payload to the  folder.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell can use a decryption mechanism to process a user supplied password and allow execution.", "S0517": " Pillowmint  : Pillowmint has been decompressed by included shellcode prior to being launched.    ", "S0501": " PipeMon  : PipeMon can decrypt password-protected executables.", "S0013": " PlugX  : PlugX decompresses and decrypts itself using the Microsoft API call RtlDecompressBuffer.", "S0428": " PoetRAT  : PoetRAT has used LZMA and base64 libraries to decode obfuscated scripts.", "S0518": " PolyglotDuke  : PolyglotDuke can use a custom algorithm to decrypt strings used by the malware.", "S0223": " POWERSTATS  : POWERSTATS can deobfuscate the main backdoor code.", "S0279": " Proton  : Proton uses an encrypted file to store commands and configuration values.", "S0613": " PS1  : PS1 can use an XOR key to decrypt a PowerShell loader and payload binary.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY has used PowerShell to decode base64-encoded assembly.", "S0650": " QakBot  : QakBot can deobfuscate and re-assemble code strings for execution.", "S0269": " QUADAGENT  : QUADAGENT uses AES and a preshared key to decrypt the custom Base64 routine used to encode strings and scripts.", "S0565": " Raindrop  : Raindrop decrypted its Cobalt Strike payload using an AES-256 encryption algorithm in CBC mode with a unique key per sample.", "S0629": " RainyDay  : RainyDay can decrypt its payload via a XOR key.", "S0458": " Ramsay  : Ramsay can extract its agent from the body of a malicious document.  ", "S0495": " RDAT  : RDAT can deobfuscate the base64-encoded and AES-encrypted files downloaded from the C2 server.  ", "S0511": " RegDuke  : RegDuke can decrypt strings with a key either stored in the Registry or hardcoded in the code.", "S0375": " Remexi  : Remexi decrypts the configuration data using XOR with 25-character keys.", "S0496": " REvil  : REvil can decode encrypted strings to enable execution of commands and payloads.", "S0258": " RGDoor  : RGDoor decodes Base64 strings and decrypts strings using a custom XOR algorithm.", "S0448": " Rising Sun  : Rising Sun decrypted itself using a single-byte XOR scheme. Additionally, Rising Sun can decrypt its configuration data at runtime.  ", "G0106": " Rocke  : Rocke has extracted tar.gz files after downloading them from a C2 server.", "S0270": " RogueRobin  : RogueRobin decodes an embedded executable using base64 and decompresses it.", "G0034": " Sandworm Team  : Sandworm Team's VBS backdoor can decode Base64-encoded data and save it to the %TEMP% folder. The group also decrypted received information using the Triple DES algorithm and decompresses it using GZip.", "S0461": " SDBbot  : SDBbot has the ability to decrypt and decompress its payload to enable code execution.", "S0596": " ShadowPad  : ShadowPad has decrypted a binary blob to start execution.", "S0140": " Shamoon  : Shamoon decrypts ciphertext using an XOR cipher and a base64-encoded string.    ", "S0546": " SharpStage  : SharpStage has decompressed data received from the C2 server.", "S0444": " ShimRat  : ShimRat has decompressed its core DLL using shellcode once an impersonated antivirus component was running on a system.", "S0589": " Sibot  : Sibot can decrypt data received from a C2 and save to a file.", "S0610": " SideTwist  : SideTwist can decode and decrypt messages received from C2.", "S0623": " Siloscape  : Siloscape has decrypted the password of the C2 server with a simple byte by byte XOR. Siloscape also writes both an archive of Tor and the  binary to disk from data embedded within the payload using Visual Studio\u2019s Resource Manager.", "S0468": " Skidmap  : Skidmap has the ability to download, unpack, and decrypt tar.gz files . ", "S0226": " Smoke Loader  : Smoke Loader deobfuscates its code.", "S0615": " SombRAT  : SombRAT can run  to decrypt and upload files from storage.", "S0516": " SoreFang  : SoreFang can decode and decrypt exfiltrated data sent to C2.", "S0543": " Spark  : Spark has used a custom XOR algorithm to decrypt the payload. ", "S0390": " SQLRat  : SQLRat has scripts that are responsible for deobfuscating additional scripts.", "S0188": " Starloader  : Starloader decrypts and executes shellcode from a file called Stars.jps.", "S0603": " Stuxnet  : Stuxnet decrypts resources that are loaded into memory and executed.", "S0562": " SUNSPOT  : SUNSPOT decrypts SUNBURST, which was stored in AES128-CBC encrypted blobs.  ", "S0011": " Taidoor  : Taidoor can use a stream cipher to decrypt stings used by the malware.", "S0560": " TEARDROP  : TEARDROP was decoded using a custom rolling XOR algorithm to execute a customized Cobalt Strike payload.", "G0027": " Threat Group-3390  : During execution, Threat Group-3390 malware deobfuscates and decompresses code that was encoded with Metasploit\u2019s shikata_ga_nai encoder as well as compressed with LZNT1 compression.", "S0266": " TrickBot  : TrickBot decodes the configuration data and modules.", "G0081": " Tropic Trooper  : Tropic Trooper used shellcode with an XOR algorithm to decrypt a payload. Tropic Trooper also decrypted image files which contained a payload.", "S0436": " TSCookie  : TSCookie has the ability to decrypt, load, and execute a DLL and its resources.", "S0647": " Turian  : Turian has the ability to use a XOR decryption key to extract C2 server domains and IP addresses.", "G0010": " Turla  : Turla has used a custom decryption routine, which pulls key and salt values from other artifacts such as a WMI filter or PowerShell Profile, to decode encrypted PowerShell payloads.", "S0263": " TYPEFRAME  : One TYPEFRAME variant decrypts an archive using an RC4 key, then decompresses and installs the decrypted malicious DLL module. Another variant decodes the embedded file by XORing it with the value \"0x35\".", "S0386": " Ursnif  : Ursnif has used crypto key information stored in the Registry to decrypt Tor clients dropped to disk.", "S0476": " Valak  : Valak has the ability to decode and decrypt downloaded files.", "S0636": " VaporRage  : VaporRage can deobfuscate XOR-encoded shellcode prior to execution.", "S0257": " VERMIN  : VERMIN decrypts code, strings, and commands to use once it's on the victim's machine.", "S0180": " Volgmer  : Volgmer deobfuscates its strings and APIs once its executed.", "S0612": " WastedLocker  : WastedLocker's custom cryptor, CryptOne, used an XOR based algorithm to decrypt the payload.", "S0579": " Waterbear  : Waterbear has the ability to decrypt its RC4 encrypted payload for execution.", "S0515": " WellMail  : WellMail can decompress scripts received from C2.", "S0514": " WellMess  : WellMess can decode and decrypt data received from C2.", "S0466": " WindTail  : WindTail has the ability to decrypt strings using hard-coded AES keys.", "S0430": " Winnti for Linux  : Winnti for Linux has decoded XOR encoded strings holding its configuration upon execution.", "G0090": " WIRTE  : WIRTE has decoded a base64 encoded document which was embedded in a VBS script.", "S0653": " xCaon  : xCaon has decoded strings from the C2 server before executing commands. ", "S0388": " YAHOYAH  : YAHOYAH decrypts downloaded files before execution.", "S0251": " Zebrocy  : Zebrocy decodes its secondary payload and writes it to the victim\u2019s machine. Zebrocy also uses AES and XOR to decrypt strings and payloads.", "S0230": " ZeroT  : ZeroT shellcode decrypts and decompresses its RC4-encrypted payload.", "S0330": " Zeus Panda  : Zeus Panda decrypts strings in the code during the execution process.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used the AES256 algorithm with a SHA1 derived key to decrypt exploit code."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1140", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Host intrusion prevention systems, Network intrusion detection system, Signature-based detection"], "contributors": ["Matthew Demaske, Adaptforward; Red Canary"], "version": "1.1", "created": "14 December 2017", "lastmodified": "09 July 2020"}, {"techniquename": "VDSO Hijacking", "detection": "Monitor for malicious usage of system calls, such as ptrace and mmap, that can be used to attach to, manipulate memory, then redirect a processes' execution path. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.       Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "description": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via Ptrace System Calls. However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).   Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. "}, "id": "T1055.014", "subtechniqueof": "T1055", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Linux"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.0", "created": "14 January 2020", "lastmodified": "20 June 2020"}, {"techniquename": "Extra Window Memory Injection", "detection": "Monitor for API calls related to enumerating and manipulating EWM such as GetWindowLong  and SetWindowLong . Malware associated with this technique have also used SendNotifyMessage  to trigger the associated window procedure and eventual malicious injection. ", "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.  Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as  and . More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.   Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. "}, "procedureexamples": {"S0091": " Epic  : Epic has overwritten the function pointer in the extra window memory of Explorer's Shell_TrayWnd in order to execute malicious code in the context of the explorer.exe process.", "S0177": " Power Loader  : Power Loader overwrites Explorer\u2019s Shell_TrayWnd extra window memory to redirect execution to a NTDLL function that is abused to assemble and execute a return-oriented programming (ROP) chain and create a malicious thread within Explorer.exe."}, "id": "T1055.011", "subtechniqueof": "T1055", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.0", "created": "14 January 2020", "lastmodified": "10 November 2020"}, {"techniquename": "Process Doppelg\u00e4nging", "detection": "Monitor and analyze calls to , , , and other rarely used functions indicative of TxF activity. Process Doppelg\u00e4nging also invokes an outdated and undocumented implementation of the Windows process loader via calls to  and  as well as API calls used to modify memory within another process, such as .  Scan file objects reported during the PsSetCreateProcessNotifyRoutine,  which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access.  Also consider comparing file objects loaded in memory to the corresponding file on disk. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.", "description": "Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process. Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations.  To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened.  To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. Adversaries may abuse TxF to a perform a file-less variation of Process Injection. Similar to Process Hollowing, process doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as , , and . Process Doppelg\u00e4nging is implemented in 4 steps :This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelg\u00e4nging may evade detection from security products since the execution is masked under a legitimate process. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. "}, "procedureexamples": {"S0534": " Bazar  : Bazar can inject into a target process using process doppelg\u00e4nging.", "G0077": " Leafminer  : Leafminer has used Process Doppelg\u00e4nging to evade security software while deploying tools on compromised systems. ", "S0242": " SynAck  : SynAck abuses NTFS transactions to launch and conceal malicious processes."}, "id": "T1055.013", "subtechniqueof": "T1055", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM, User"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.0", "created": "14 January 2020", "lastmodified": "09 February 2021"}, {"techniquename": "Process Hollowing", "detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as , //, and those that can be used to modify memory within another process, such as /, may be used for this technique.Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as , which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as  or   before being written to, realigned to the injected code, and resumed via , , , then  respectively.This is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. "}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has used process hollowing to create and manipulate processes through sections of unmapped memory by reallocating that space with its malicious code. ", "S0373": " Astaroth  : Astaroth can create a new process in a suspended state from a targeted legitimate process in order to unmap its memory and replace it with malicious code.", "S0344": " Azorult  : Azorult can decrypt the payload into memory, create a new suspended process of itself, then inject a decrypted payload to the new process and resume new process execution.", "S0128": " BADNEWS  : BADNEWS has a command to download an .exe and use process hollowing to inject it into a new process.", "S0234": " Bandook  : Bandook has been launched by starting iexplore.exe and replacing it with Bandook's payload.", "S0534": " Bazar  : Bazar can inject into a target process including Svchost, Explorer, and cmd using process hollowing.", "S0127": " BBSRAT  : BBSRAT has been seen loaded into msiexec.exe through process hollowing to hide its execution.", "S0154": " Cobalt Strike  : Cobalt Strike can use process hollowing for execution.", "S0354": " Denis  : Denis performed process hollowing through the API calls CreateRemoteThread, ResumeThread, and Wow64SetThreadContext.", "S0567": " Dtrack  : Dtrack has used process hollowing shellcode to target a predefined list of processes from .", "S0038": " Duqu  : Duqu is capable of loading executable code via process hollowing.", "G0078": " Gorgon Group  : Gorgon Group malware can use process hollowing to inject one of its trojans into another process.", "S0189": " ISMInjector  : ISMInjector hollows out a newly created process RegASM.exe and injects its payload into the hollowed process.", "S0447": " Lokibot  : Lokibot has used process hollowing to inject itself into legitimate Windows process. ", "G0045": " menuPass  : menuPass has used process hollowing in iexplore.exe to load the RedLeaves implant.", "S0198": " NETWIRE  : The NETWIRE payload has been injected into benign Microsoft executables via process hollowing.", "S0229": " Orz  : Some Orz versions have an embedded DLL known as MockDll that uses process hollowing and Regsvr32 to execute another payload.", "G0040": " Patchwork  : A Patchwork payload uses process hollowing to hide the UAC bypass vulnerability exploitation inside svchost.exe.", "S0650": " QakBot  : QakBot can use process hollowing to execute its main payload.", "S0226": " Smoke Loader  : Smoke Loader spawns a new copy of c:\\windows\\syswow64\\explorer.exe and then replaces the executable code in memory with malware.", "G0027": " Threat Group-3390  : A Threat Group-3390 tool can spawn svchost.exe and inject the payload into that process.", "S0266": " TrickBot  : TrickBot injects into the svchost.exe process.", "S0386": " Ursnif  : Ursnif has used process hollowing to inject into child processes."}, "id": "T1055.012", "subtechniqueof": "T1055", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.1", "created": "14 January 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Proc Memory", "detection": "File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. Proc memory injection involves enumerating the memory of a process via the /proc filesystem () then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes\u2019 stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes\u2019 memory map within  can be overwritten using dd. Other techniques such as Dynamic Linker Hijacking may be used to populate a target process with more available gadgets. Similar to Process Hollowing, proc memory injection may target child processes (such as a backgrounded copy of sleep). Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. ", "M1022": " Restrict File and Directory Permissions  : Restrict the permissions on sensitive files such as  or . "}, "id": "T1055.009", "subtechniqueof": "T1055", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Linux"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.0", "created": "14 January 2020", "lastmodified": "20 June 2020"}, {"techniquename": "Ptrace System Calls", "detection": "Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.       Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values. Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: ) then invoking that memory with  to set the register containing the next instruction to execute. Ptrace system call injection can also be done with /, which copy data to a specific address in the target processes\u2019 memory (ex: the current address of the next instruction).  Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. ", "M1026": " Privileged Account Management  : Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor. "}, "id": "T1055.008", "subtechniqueof": "T1055", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Linux"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.1", "created": "14 January 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Thread Local Storage", "detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as , //, and those that can be used to modify memory within another process, such as /, may be used for this technique.Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "description": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process\u2019 memory space using other Process Injection techniques such as Process Hollowing.Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. "}, "procedureexamples": {"S0386": " Ursnif  : Ursnif has injected code into target processes via thread local storage callbacks."}, "id": "T1055.005", "subtechniqueof": "T1055", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.1", "created": "14 January 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Asynchronous Procedure Call", "detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as //, /, and those that can be used to modify memory within another process, such as /, may be used for this technique.Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. APC injection is commonly performed by attaching malicious code to the APC Queue  of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A handle to an existing victim process is first created with native Windows API calls such as . At this point  can be used to invoke a function (such as  pointing to a malicious DLL). A variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.  AtomBombing  is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. "}, "procedureexamples": {"S0438": " Attor  : Attor performs the injection by attaching its code into the APC queue using NtQueueApcThread API.", "S0484": " Carberp  : Carberp has queued an APC routine to explorer.exe by calling ZwQueueApcThread.", "G0061": " FIN8  : FIN8 has injected malicious code into a new svchost.exe process.", "S0483": " IcedID  : IcedID has used  to inject itself into remote processes.", "S0260": " InvisiMole  : InvisiMole can inject its code into a trusted process via the APC queue.", "S0517": " Pillowmint  : Pillowmint has used the NtQueueApcThread syscall to inject code into svchost.exe.", "S0199": " TURNEDUP  : TURNEDUP is capable of injecting code into the APC queue of a created Rundll32 process as part of an \"Early Bird injection.\""}, "id": "T1055.004", "subtechniqueof": "T1055", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.1", "created": "14 January 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Thread Execution Hijacking", "detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as , //, and those that can be used to modify memory within another process, such as /, may be used for this technique.Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as . At this point the process can be suspended then written to, realigned to the injected code, and resumed via , , , , then  respectively.This is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. "}, "procedureexamples": {"S0168": " Gazer  : Gazer performs thread execution hijacking to inject its orchestrator into a running thread from a remote process.", "S0094": " Trojan.Karagany  : Trojan.Karagany can inject a suspended thread of its own process into a new process and initiate via the  API.", "S0579": " Waterbear  : Waterbear can use thread injection to inject shellcode into the process of security software."}, "id": "T1055.003", "subtechniqueof": "T1055", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.1", "created": "14 January 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Portable Executable Injection", "detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as  and those that can be used to modify memory within another process, such as /, may be used for this technique.Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as  and , then invoked with  or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. "}, "procedureexamples": {"S0030": " Carbanak  : Carbanak downloads an executable and injects it directly into a new process.", "G0078": " Gorgon Group  : Gorgon Group malware can download a remote access tool, ShiftyBug, and inject into another process.", "S0342": " GreyEnergy  : GreyEnergy has a module to inject a PE binary into a remote process.", "S0260": " InvisiMole  : InvisiMole can inject its backdoor as a portable executable into a target process.  ", "G0106": " Rocke  : Rocke's miner, \"TermsHost.exe\", evaded defenses by injecting itself into Windows processes, including Notepad.exe.  ", "S0330": " Zeus Panda  : Zeus Panda checks processes on the system and if they meet the necessary requirements, it injects into that process."}, "id": "T1055.002", "subtechniqueof": "T1055", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.1", "created": "14 January 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Dynamic-link Library Injection", "detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as  and those that can be used to modify memory within another process, such as /, may be used for this technique.Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as  and , then invoked with  (which calls the  API responsible for loading the DLL).  Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of ). Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. "}, "procedureexamples": {"S0456": " Aria-body  : Aria-body has the ability to inject itself into another process such as rundll32.exe and dllhost.exe.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has dropped legitimate software onto a compromised host and used it to execute malicious DLLs.", "S0089": " BlackEnergy  : BlackEnergy injects its DLL component into svchost.exe.", "S0484": " Carberp  : Carberp's bootkit can inject a malicious DLL into the address space of running processes.", "S0335": " Carbon  : Carbon has a command to inject code into a process.", "S0154": " Cobalt Strike  : Cobalt Strike has the ability to load DLLs via reflective injection.", "S0126": " ComRAT  : ComRAT has injected its orchestrator DLL into explorer.exe. ComRAT has also injected its communications module into the victim's default browser to make C2 connections appear less suspicious as all network connections will be initiated by the browser process.", "S0575": " Conti  : Conti has loaded an encrypted DLL into memory and then executes it.", "S0021": " Derusbi  : Derusbi injects itself into the secure shell (SSH) process.", "S0038": " Duqu  : Duqu will inject itself into different processes to evade detection. The selection of the target process is influenced by the security software that is installed on the system (Duqu will inject into different processes depending on which security suite is installed on the infected host).", "S0024": " Dyre  : Dyre injects into other processes to load modules.", "S0081": " Elise  : Elise injects DLL files into iexplore.exe.", "S0082": " Emissary  : Emissary injects its DLL file into a newly spawned Internet Explorer process.", "S0367": " Emotet  : Emotet has been observed injecting in to Explorer.exe and other processes. ", "S0182": " FinFisher  : FinFisher injects itself into various processes depending on whether it is low integrity or high integrity.", "S0460": " Get2  : Get2 has the ability to inject DLLs into processes.", "S0135": " HIDEDRV  : HIDEDRV injects a DLL for Downdelph into the explorer.exe process.", "S0581": " IronNetInjector  : IronNetInjector has the ability to inject a DLL into running processes, including the IronNetInjector DLL into explorer.exe.", "S0265": " Kazuar  : If running in a Windows environment, Kazuar saves a DLL to disk that is injected into the explorer.exe process to execute the payload. Kazuar can also be configured to inject and execute within specific processes.", "S0250": " Koadic  : Koadic can perform process injection by using a reflective DLL.", "G0032": " Lazarus Group  : A Lazarus Group malware sample performs reflective DLL injection.", "G0065": " Leviathan  : Leviathan has utilized techniques like reflective DLL loading to write a DLL into memory and load a shell that provides backdoor access to the victim.", "S0167": " Matryoshka  : Matryoshka uses reflective DLL injection to inject the malicious library and execute the RAT.", "S0449": " Maze  : Maze has injected the malware DLL into a target process.  ", "S0576": " MegaCortex  : MegaCortex loads  into a newly created  process.", "S0455": " Metamorfo  : Metamorfo has injected a malicious DLL into the Windows Media Player process (wmplayer.exe).", "S0457": " Netwalker  : The Netwalker DLL has been injected reflectively into the memory of a legitimate running process.   ", "S0501": " PipeMon  : PipeMon can inject its modules into various processes using reflective DLL loading.", "S0012": " PoisonIvy  : PoisonIvy can inject a malicious DLL into a process.", "S0194": " PowerSploit  : PowerSploit contains a collection of CodeExecution modules that inject code (DLL, shellcode) into a process.", "S0613": " PS1  : PS1 can inject its payload DLL Into memory.", "S0192": " Pupy  : Pupy can migrate into another process using reflective DLL injection.", "G0024": " Putter Panda  : An executable dropped onto victims by Putter Panda aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe).", "S0458": " Ramsay  : Ramsay can use  to deploy components. ", "S0055": " RARSTONE  : After decrypting itself in memory, RARSTONE downloads a DLL file from its C2 server and loads it in the memory space of a hidden Internet Explorer process. This \"downloaded\" file is actually not dropped onto the system.", "S0241": " RATANKBA  : RATANKBA performs a reflective DLL injection using a given pid.", "S0125": " Remsec  : Remsec can perform DLL injection.", "S0461": " SDBbot  : SDBbot has the ability to inject a downloaded DLL into a newly created rundll32.exe process.", "S0596": " ShadowPad  : ShadowPad has injected a DLL into svchost.exe.", "S0273": " Socksbot  : Socksbot creates a suspended svchost process and injects its DLL into it.", "S0615": " SombRAT  : SombRAT can execute , , and  to inject a DLL  from disk, storage, or memory respectively.", "S0603": " Stuxnet  : Stuxnet injects an entire DLL into an existing, newly created, or preselected trusted process.", "S0018": " Sykipot  : Sykipot injects itself into running instances of outlook.exe, iexplore.exe, or firefox.exe.", "G0092": " TA505  : TA505 has been seen injecting a DLL into winword.exe.", "S0011": " Taidoor  : Taidoor can perform DLL loading.", "S0467": " TajMahal  : TajMahal has the ability to inject DLLs for malicious plugins into running processes.", "G0081": " Tropic Trooper  : Tropic Trooper has injected a DLL backdoor into dllhost.exe and svchost.exe.", "G0010": " Turla  : Turla has used Metasploit to perform reflective DLL injection in order to escalate privileges.", "G0102": " Wizard Spider  : Wizard Spider has injected malicious DLLs into memory with read, write, and execute permissions.", "S0412": " ZxShell  : ZxShell is injected into a shared SVCHOST process. "}, "id": "T1055.001", "subtechniqueof": "T1055", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["User"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.1", "created": "14 January 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Exploitation for Privilege Escalation", "detection": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of  for attempts to hide execution or evidence of Discovery. Consider monitoring for the presence or loading (ex: Sysmon Event ID 6) of known vulnerable drivers that adversaries may drop and exploit to execute code in kernel mode.Higher privileges are often necessary to perform additional actions such as some methods of . Look for additional activity that may indicate an adversary has gained higher privileges.", "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.Adversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist. ", "M1038": " Execution Prevention  : Consider blocking the execution of known vulnerable drivers that adversaries may exploit to execute code in kernel mode. Validate driver block rules in audit mode to ensure stability prior to production deployment.", "M1050": " Exploit Protection  : Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring.  Many of these protections depend on the architecture and target application binary for compatibility and may not work for software components targeted for privilege escalation.", "M1019": " Threat Intelligence Program  : Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization.", "M1051": " Update Software  : Update software regularly by employing patch management for internal enterprise endpoints and servers."}, "procedureexamples": {"G0007": " APT28  : APT28 has exploited CVE-2014-4076, CVE-2015-2387, CVE-2015-1701, CVE-2017-0263 to escalate privileges.", "G0050": " APT32  : APT32 has used CVE-2016-7255 to escalate privileges.", "G0064": " APT33  : APT33 has used a publicly available exploit for CVE-2017-0213 to escalate privileges on a local system.", "S0484": " Carberp  : Carberp has exploited multiple Windows vulnerabilities (CVE-2010-2743, CVE-2010-3338, CVE-2010-4398, CVE-2008-1084) and a .NET Runtime Optimization vulnerability for privilege escalation.", "G0080": " Cobalt Group  : Cobalt Group has used exploits to increase their levels of rights and privileges.", "S0154": " Cobalt Strike  : Cobalt Strike can exploit vulnerabilities such as MS14-058.", "S0050": " CosmicDuke  : CosmicDuke attempts to exploit privilege escalation vulnerabilities CVE-2010-0232 or CVE-2010-4398.", "S0363": " Empire  : Empire can exploit vulnerabilities such as MS16-032 and MS16-135.", "G0037": " FIN6  : FIN6 has used tools to exploit Windows vulnerabilities in order to escalate privileges. The tools targeted CVE-2013-3660, CVE-2011-2005, and CVE-2010-4398, all of which could allow local users to access kernel-level privileges.", "G0061": " FIN8  : FIN8 has exploited the CVE-2016-0167 local vulnerability.", "S0601": " Hildegard  : Hildegard has used the BOtB tool which exploits CVE-2019-5736. ", "S0260": " InvisiMole  : InvisiMole has exploited CVE-2007-5633 vulnerability in the speedfan.sys driver to obtain kernel mode privileges.", "S0044": " JHUHUGIT  : JHUHUGIT has exploited CVE-2015-1701 and CVE-2015-2387 to escalate privileges.", "G0068": " PLATINUM  : PLATINUM has leveraged a zero-day vulnerability to escalate privileges.", "S0378": " PoshC2  : PoshC2 contains modules for local privilege escalation exploits such as CVE-2016-9192 and CVE-2016-0099.", "S0654": " ProLock  : ProLock can use CVE-2019-0859 to escalate privileges on a compromised host.", "S0125": " Remsec  : Remsec has a plugin to drop and execute vulnerable Outpost Sandbox or avast! Virtualization drivers in order to gain kernel mode privileges.", "S0623": " Siloscape  : Siloscape has leveraged a vulnerability in Windows containers to perform an Escape to Host.", "S0603": " Stuxnet  : Stuxnet used MS10-073 and an undisclosed Task Scheduler vulnerability to escalate privileges on local Windows machines.", "G0027": " Threat Group-3390  : Threat Group-3390 has used CVE-2014-6324 to escalate privileges.", "G0131": " Tonto Team  : Tonto Team has exploited CVE-2019-0803 and MS16-032 to escalate privileges.", "G0010": " Turla  : Turla has exploited vulnerabilities in the VBoxDrv.sys driver to obtain kernel mode privileges.", "G0107": " Whitefly  : Whitefly has used an open-source tool to exploit a known Windows privilege escalation vulnerability (CVE-2016-0051) on unpatched computers.    ", "S0176": " Wingbird  : Wingbird exploits CVE-2016-4117 to allow an executable to gain escalated privileges.", "S0658": " XCSSET  : XCSSET has used a zero-day exploit in the ssh launchdaemon to elevate privileges and bypass SIP.", "G0128": " ZIRCONIUM  : ZIRCONIUM has exploited CVE-2017-0005 for local privilege escalation."}, "id": "T1068", "subtechniques": ["No sub-techniques"], "tactics": ["Privilege Escalation"], "platforms": ["Containers, Linux, Windows, macOS"], "permissionsrequired": ["User"], "effectivepermissions": ["User"], "contributors": ["Idan Revivo, @idanr86, Team Nautilus Aqua Security; Joas Antonio dos Santos, @C0d3Cr4zy, Inmetrics; Yaniv Agman, @AgmanYaniv, Team Nautilus Aqua Security"], "version": "1.3", "created": "31 May 2017", "lastmodified": "22 April 2021"}, {"techniquename": "Group Policy Modification", "detection": "It is possible to detect GPO modifications by monitoring directory service changes using Windows event logs. Several events may be logged for such GPO modifications, including:GPO abuse will often be accompanied by some other behavior such as , which will have events associated with it to detect. Subsequent permission value modifications, like those to SeEnableDelegationPrivilege, can also be searched for in events associated with privileges assigned to new logons (Event ID 4672) and assignment of user rights (Event ID 4704).", "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path . Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.Malicious GPO modifications can be used to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution,  and more. Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.For example, publicly available scripts such as  can be leveraged to automate the creation of a malicious Scheduled Task/Job by modifying GPO settings, in this case modifying . In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in , to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.", "mitigations": {"M1047": " Audit  : Identify and correct GPO permissions abuse opportunities (ex: GPO modification privileges) using auditing tools such as BloodHound (version 1.5.1 and later).", "M1018": " User Account Management  : Consider implementing WMI and security filtering to further tailor which users and computers a GPO will apply to."}, "procedureexamples": {"S0554": " Egregor  : Egregor can modify the GPO to evade detection. ", "S0363": " Empire  : Empire can use  to modify a GPO that will install and execute a malicious Scheduled Task/Job.", "G0119": " Indrik Spider  : Indrik Spider has used Group Policy Objects to deploy batch scripts."}, "id": "T1484.001", "subtechniqueof": "T1484", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "contributors": ["Itamar Mizrahi, Cymptom; Tristan Bennett, Seamless Intelligence"], "version": "1.0", "created": "28 December 2020", "lastmodified": "09 February 2021"}, {"techniquename": "Domain Trust Modification", "detection": "Monitor for modifications to domain trust settings, such as when a user or application modifies the federation settings on the domain or updates domain authentication from Managed to Federated via ActionTypes  and . This may also include monitoring for Event ID 307 which can be correlated to relevant Event ID 510 with the same Instance ID for change details.Monitor for PowerShell commands such as: , or .", "description": "Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.Manipulating the domain trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, this may be used to forge SAML Tokens, without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate.", "mitigations": {"M1026": " Privileged Account Management  : Use the principal of least privilege and protect administrative access to domain trusts."}, "procedureexamples": {"G0016": " APT29  : APT29 changed domain federation trust settings using Azure AD administrative permissions to configure the domain to accept authorization tokens signed by their own SAML signing certificate."}, "id": "T1484.002", "subtechniqueof": "T1484", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Azure AD, Windows"], "permissionsrequired": ["Administrator"], "contributors": ["Blake Strom, Microsoft 365 Defender"], "version": "1.0", "created": "28 December 2020", "lastmodified": "11 January 2021"}, {"techniquename": "Escape to Host", "detection": "Monitor for the deployment of suspicious or unknown container images and pods in your environment, particularly containers running as root. Additionally, monitor for unexpected usage of syscalls such as  (as well as resulting process activity) that may indicate an attempt to escape from a privileged container to host. In Kubernetes, monitor for cluster-level events associated with changing containers' volume configurations.", "description": "Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.There are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host\u2019s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host, or utilizing a privileged container to run commands on the underlying host. Adversaries may also escape via Exploitation for Privilege Escalation, such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.Gaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host.", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Consider utilizing seccomp, seccomp-bpf, or a similar solution that restricts certain system calls such as mount.", "M1038": " Execution Prevention  : Use read-only containers and minimal images when possible to prevent the running of commands.", "M1026": " Privileged Account Management  : Ensure containers are not running as root by default."}, "procedureexamples": {"S0600": " Doki  : Doki\u2019s container was configured to bind the host root directory.", "S0601": " Hildegard  : Hildegard has used the BOtB tool that can break out of containers.  ", "S0623": " Siloscape  : Siloscape maps the host\u2019s C drive to the container by creating a global symbolic link to the host through the calling of .", "G0139": " TeamTNT  : TeamTNT has deployed privileged containers that mount the filesystem of victim machine."}, "id": "T1611", "subtechniques": ["No sub-techniques"], "tactics": ["Privilege Escalation"], "platforms": ["Containers, Linux, Windows"], "permissionsrequired": ["Administrator, User, root"], "contributors": ["Alfredo Oliveira, Trend Micro; Ariel Shuper, Cisco; Daniel Prizmant, Palo Alto Networks; David Fiser, @anu4is, Trend Micro; Idan Frimark, Cisco; Joas Antonio dos Santos, @C0d3Cr4zy, Inmetrics; Magno Logan, @magnologan, Trend Micro; Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team; Yuval Avrahami, Palo Alto Networks"], "version": "1.1", "created": "30 March 2021", "lastmodified": "15 October 2021"}, {"techniquename": "Process Injection", "detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as , //, /, and those that can be used to modify memory within another process, such as /, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.       Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. For example, on Windows 10, Attack Surface Reduction (ASR) rules may prevent Office applications from code injection. ", "M1026": " Privileged Account Management  : Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."}, "procedureexamples": {"S0469": " ABK  : ABK has the ability to inject shellcode into svchost.exe.", "S0331": " Agent Tesla  : Agent Tesla can inject into known, vulnerable binaries on targeted hosts. ", "G0050": " APT32  : APT32 malware has injected a Cobalt Strike beacon into Rundll32.exe.", "G0067": " APT37  : APT37 injects its malware variant, ROKRAT, into the cmd.exe process.", "G0096": " APT41  : APT41 malware TIDYELF loaded the main WINTERLOVE component by injecting it into the iexplore.exe process.", "S0438": " Attor  : Attor's dispatcher can inject itself into running processes to gain higher privileges and to evade detection.", "S0347": " AuditCred  : AuditCred can inject code from files to other running processes.", "S0473": " Avenger  : Avenger has the ability to inject shellcode into svchost.exe.", "S0093": " Backdoor.Oldrea  : Backdoor.Oldrea injects itself into explorer.exe.", "S0534": " Bazar  : Bazar can inject code through calling .", "S0470": " BBK  : BBK has the ability to inject shellcode into svchost.exe.", "S0348": " Cardinal RAT  : Cardinal RAT injects into a newly spawned process created from a native Windows executable.", "G0080": " Cobalt Group  : Cobalt Group has injected code into trusted processes.", "S0154": " Cobalt Strike  : Cobalt Strike can inject a variety of payloads into processes dynamically chosen by the adversary.", "S0024": " Dyre  : Dyre has the ability to directly inject its code into the web browser process.", "S0554": " Egregor  : Egregor can inject its payload into iexplore.exe process.", "S0363": " Empire  : Empire contains multiple modules for injecting into processes, such as .", "S0168": " Gazer  : Gazer injects its communication module into an Internet accessible process through which it performs C2.", "S0032": " gh0st RAT  : gh0st RAT can inject malicious code into process created by the \"Command_Create&Inject\" function.", "S0561": " GuLoader  : GuLoader has the ability to inject shellcode into a donor processes that is started in a suspended state. GuLoader has previously used RegAsm as a donor process.", "G0072": " Honeybee  : Honeybee uses a batch file to load a DLL into the svchost.exe process.", "S0376": " HOPLIGHT  : HOPLIGHT has injected into running processes.   ", "S0040": " HTRAN  : HTRAN can inject into into running processes.", "S0398": " HyperBro  : HyperBro can run shellcode it injects into a newly created process.", "S0260": " InvisiMole  : InvisiMole can inject itself into another process to avoid detection including use of a technique called ListPlanting that customizes the sorting algorithm in a ListView structure.", "S0581": " IronNetInjector  : IronNetInjector can use an IronPython scripts to load a .NET injector to inject a payload into its own or a remote process.", "S0044": " JHUHUGIT  : JHUHUGIT performs code injection injecting its own functions to browser processes.", "S0201": " JPIN  : JPIN can inject content into lsass.exe to load a module.", "G0094": " Kimsuky  : Kimsuky has used Win7Elevate to inject malicious code into explorer.exe.", "S0247": " NavRAT  : NavRAT copies itself into a running Internet Explorer process to evade detection.", "S0198": " NETWIRE  : NETWIRE can inject code into system processes including notepad.exe, svchost.exe, and vbc.exe.", "G0116": " Operation Wocao  : Operation Wocao has injected code into a selected process, which in turn launches a command as a child process of the original.", "G0068": " PLATINUM  : PLATINUM has used various methods of process injection including hot patching.", "S0378": " PoshC2  : PoshC2 contains multiple modules for injecting into processes, such as .", "S0650": " QakBot  : QakBot can inject itself into processes including explore.exe, Iexplore.exe, and Mobsync.exe.", "S0332": " Remcos  : Remcos has a command to hide itself through injecting into another process.", "S0496": " REvil  : REvil can inject itself into running processes on a compromised host.", "S0446": " Ryuk  : Ryuk has injected itself into remote processes to encrypt files using a combination of , , and .", "S0596": " ShadowPad  : ShadowPad has injected an install module into a newly created process.", "G0104": " Sharpshooter  : Sharpshooter has leveraged embedded shellcode to inject a downloader into the memory of Word.", "G0091": " Silence  : Silence has injected a DLL library containing a Trojan into the fwmain32.exe process.", "S0633": " Sliver  : Sliver can inject code into local and remote processes.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA can inject into running processes on a compromised host.", "S0226": " Smoke Loader  : Smoke Loader injects into the Internet Explorer process.", "S0380": " StoneDrill  : StoneDrill has relied on injecting its payload directly into the process memory of the victim's preferred browser.", "S0266": " TrickBot  : TrickBot has used  Native API functions to inject code into legitimate processes such as .", "S0436": " TSCookie  : TSCookie has the ability to inject code into the svchost.exe, iexplorer.exe, explorer.exe, and default browser processes.", "G0010": " Turla  : Turla has also used PowerSploit's  to reflectively load a PowerShell payload into a random process on the victim system.", "S0579": " Waterbear  : Waterbear can inject decrypted shellcode into the LanmanServer service.", "S0206": " Wiarp  : Wiarp creates a backdoor through which remote attackers can inject files into running processes.", "S0176": " Wingbird  : Wingbird performs multiple process injections to hijack system processes and execute malicious code."}, "id": "T1055", "subtechniques": ["T1055.001", "T1055.002", "T1055.003", "T1055.004", "T1055.005", "T1055.008", "T1055.009", "T1055.011", "T1055.012", "T1055.013", "T1055.014"], "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Anti-virus, Application control"], "capecid": ["CAPEC-640"], "contributors": ["Anastasios Pingios; Christiaan Beek, @ChristiaanBeek; Ryan Becwar"], "version": "1.2", "created": "31 May 2017", "lastmodified": "18 October 2021"}, {"techniquename": "SID-History Injection", "detection": "Examine data in user\u2019s SID-History attributes using the PowerShell  cmdlet , especially users who have SID-History values from the same domain.  Also monitor account management events on Domain Controllers for successful and failed changes to SID-History.  Monitor for Windows API calls to the  function. ", "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.  An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).With Domain Administrator (or equivalent) rights, harvested or well-known SID values  may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, SMB/Windows Admin Shares, or Windows Remote Management.", "mitigations": {"M1015": " Active Directory Configuration  : Clean up SID-History attributes after legitimate account migration is complete.Consider applying SID Filtering to interforest trusts, such as forest trusts and external trusts, to exclude SID-History from requests to access domain resources. SID Filtering ensures that any authentication requests over a trust only contain SIDs of security principals from the trusted domain (i.e preventing the trusted domain from claiming a user has membership in groups outside of the domain).SID Filtering of forest trusts is enabled by default, but may have been disabled in some cases to allow a child domain to transitively access forest trusts. SID Filtering of external trusts is automatically enabled on all created external trusts using Server 2003 or later domain controllers.   However note that SID Filtering is not automatically applied to legacy trusts or may have been deliberately disabled to allow inter-domain access to resources.SID Filtering can be applied by: "}, "procedureexamples": {"S0363": " Empire  : Empire can add a SID-History to a user if on a domain controller.", "S0002": " Mimikatz  : Mimikatz's  module can appended any SID or user/group account to a user's SID-History. Mimikatz also utilizes SID-History Injection to expand the scope of other components such as generated Kerberos Golden Tickets and DCSync beyond a single domain."}, "id": "T1134.005", "subtechniqueof": "T1134", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["Alain Homewood, Insomnia Security; Vincent Le Toux"], "version": "1.0", "created": "18 February 2020", "lastmodified": "09 February 2021"}, {"techniquename": "Parent PID Spoofing", "detection": "Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process.Monitor and analyze API calls to /, specifically those from user/potentially malicious processes and with parameters explicitly assigning PPIDs (ex: the Process Creation Flags of 0x8XXX, indicating that the process is being created with extended startup information). Malicious use of / may also be proceeded by a call to , which may be necessary to update process creation attributes. This may generate false positives from normal UAC elevation behavior, so compare to a system baseline/understanding of normal system activity if possible.", "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the  API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via  or ) rather than the current user context.Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of PowerShell/Rundll32 to be  rather than an Office document delivered as part of Spearphishing Attachment. This spoofing could be executed via Visual Basic within a malicious Office document or any code that can perform Native API.Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as ), causing the new process to be elevated via the inherited access token.", "procedureexamples": {"S0154": " Cobalt Strike  : Cobalt Strike can spawn processes with alternate PPIDs.", "S0501": " PipeMon  : PipeMon can use parent PID spoofing to elevate privileges."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1134.004", "subtechniqueof": "T1134", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "defensebypassed": ["Heuristic Detection, Host forensic analysis"], "contributors": ["Wayne Silva, F-Secure Countercept"], "version": "1.0", "created": "18 February 2020", "lastmodified": "09 February 2021"}, {"techniquename": "Make and Impersonate Token", "detection": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the  command. Detailed command-line logging is not enabled by default in Windows.If an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.Analysts can also monitor for use of Windows APIs such as  and  and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.", "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the  function. The function will return a copy of the new session's access token and the adversary can use  to assign the token to a thread.", "mitigations": {"M1026": " Privileged Account Management  : Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create a token object.  Also define who can create a process level token to only the local and network service through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Replace a process level token.Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command .", "M1018": " User Account Management  : An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require.  "}, "procedureexamples": {"S0154": " Cobalt Strike  : Cobalt Strike can make tokens from known credentials."}, "id": "T1134.003", "subtechniqueof": "T1134", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "effectivepermissions": ["SYSTEM"], "defensebypassed": ["File system access controls, System access controls, Windows User Account Control"], "version": "1.0", "created": "18 February 2020", "lastmodified": "18 February 2020"}, {"techniquename": "Create Process with Token", "detection": "If an adversary is using a standard command-line shell (i.e. ), analysts may detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the  command or similar artifacts. Detailed command-line logging is not enabled by default in Windows.If an adversary is using a payload that calls the Windows token APIs directly, analysts may detect token manipulation only through careful analysis of user activity, examination of running processes, and correlation with other endpoint and network behavior.Analysts can also monitor for use of Windows APIs such as  and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.", "description": "Adversaries may create a new process with a different token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as  and .Creating processes with a different token may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used (ex: gathered via other means such as Token Impersonation/Theft or Make and Impersonate Token).", "mitigations": {"M1026": " Privileged Account Management  : Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create a token object.  Also define who can create a process level token to only the local and network service through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Replace a process level token.Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command .", "M1018": " User Account Management  : An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require."}, "procedureexamples": {"S0456": " Aria-body  : Aria-body has the ability to execute a process using .", "S0344": " Azorult  : Azorult can call WTSQueryUserToken and CreateProcessAsUser to start a new process with local system privileges.", "S0239": " Bankshot  : Bankshot grabs a user token using WTSQueryUserToken and then creates a process by impersonating a logged-on user.", "S0363": " Empire  : Empire can use  to make tokens.", "S0356": " KONNI  : KONNI has duplicated the token of a high integrity process to spawn an instance of cmd.exe under an impersonated user.", "G0032": " Lazarus Group  : Lazarus Group keylogger KiloAlfa obtains user tokens from interactive sessions to execute itself with API call  under that user's context.", "S0501": " PipeMon  : PipeMon can attempt to gain administrative privileges using token impersonation.", "S0378": " PoshC2  : PoshC2 can use Invoke-RunAs to make tokens.", "S0496": " REvil  : REvil can launch an instance of itself with administrative rights using runas.", "G0010": " Turla  : Turla RPC backdoors can impersonate or steal process tokens before executing commands.   ", "S0412": " ZxShell  : ZxShell has a command called RunAs, which creates a new process as another user or process context. "}, "id": "T1134.002", "subtechniqueof": "T1134", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "defensebypassed": ["File system access controls, System access controls, Windows User Account Control"], "contributors": ["Vadim Khrykov"], "version": "1.1", "created": "18 February 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Domain Policy Modification", "detection": "It may be possible to detect domain policy modifications using Windows event logs. Group policy modifications, for example, may be logged under a variety of Windows event IDs for modifying, creating, undeleting, moving, and deleting directory service objects (Event ID 5136, 5137, 5138, 5139, 5141 respectively). Monitor for modifications to domain trust settings, such as when a user or application modifies the federation settings on the domain or updates domain authentication from Managed to Federated via ActionTypes  and . This may also include monitoring for Event ID 307 which can be correlated to relevant Event ID 510 with the same Instance ID for change details.Consider monitoring for commands/cmdlets and command-line arguments that may be leveraged to modify domain policy settings. Some domain policy modifications, such as changes to federation settings, are likely to be rare.", "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.With sufficient permissions, adversaries can modify domain policy settings. Since domain configuration settings control many of the interactions within the Active Directory (AD) environment, there are a great number of potential attacks that can stem from this abuse. Examples of such abuse include modifying GPOs to push a malicious Scheduled Task to computers throughout the domain environment or modifying domain trusts to include an adversary controlled domain where they can control access tokens that will subsequently be accepted by victim domain resources. Adversaries can also change configuration settings within the AD environment to implement a Rogue Domain Controller.Adversaries may temporarily modify domain policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.", "mitigations": {"M1047": " Audit  : Identify and correct GPO permissions abuse opportunities (ex: GPO modification privileges) using auditing tools such as BloodHound (version 1.5.1 and later).", "M1026": " Privileged Account Management  : Use least privilege and protect administrative access to the Domain Controller and Active Directory Federation Services (AD FS) server. Do not create service accounts with administrative privileges.", "M1018": " User Account Management  : Consider implementing WMI and security filtering to further tailor which users and computers a GPO will apply to."}, "id": "T1484", "subtechniques": ["T1484.001", "T1484.002"], "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Azure AD, Windows"], "permissionsrequired": ["Administrator, User"], "defensebypassed": ["File system access controls, System access controls"], "version": "2.0", "created": "07 March 2019", "lastmodified": "09 February 2021"}, {"techniquename": "Token Impersonation/Theft", "detection": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the  command. Detailed command-line logging is not enabled by default in Windows.Analysts can also monitor for use of Windows APIs such as , , and  and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.", "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using . The token can then be used with  to allow the calling thread to impersonate a logged on user's security context, or with  to assign the impersonated token to a thread.An adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.", "mitigations": {"M1026": " Privileged Account Management  : Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create a token object.  Also define who can create a process level token to only the local and network service through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Replace a process level token.Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command .", "M1018": " User Account Management  : An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require.  "}, "procedureexamples": {"G0007": " APT28  : APT28 has used CVE-2015-1701 to access the SYSTEM token and copy it into the current process as part of privilege escalation.", "S0456": " Aria-body  : Aria-body has the ability to duplicate a token from ntprint.exe.", "S0570": " BitPaymer  : BitPaymer can use the tokens of users to create processes on infected systems.", "S0154": " Cobalt Strike  : Cobalt Strike can steal access tokens from exiting processes.", "G0061": " FIN8  : FIN8 has used a malicious framework designed to impersonate the lsass.exe/vmtoolsd.exe token.", "S0182": " FinFisher  : FinFisher uses token manipulation with NtFilterToken as part of UAC bypass.", "S0439": " Okrum  : Okrum can impersonate a logged-on user's security context using a call to the ImpersonateLoggedOnUser API.", "S0192": " Pupy  : Pupy can obtain a list of SIDs and provide the option for selecting process tokens to impersonate.", "S0496": " REvil  : REvil can obtain the token from the user that launched the explorer.exe process to avoid affecting the desktop of the SYSTEM user.", "S0140": " Shamoon  : Shamoon can impersonate tokens using , , and .", "S0623": " Siloscape  : Siloscape impersonates the main thread of  by calling .", "S0603": " Stuxnet  : Stuxnet attempts to impersonate an anonymous token to enumerate bindings in the service control manager."}, "id": "T1134.001", "subtechniqueof": "T1134", "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "defensebypassed": ["File system access controls, System access controls, Windows User Account Control"], "version": "1.0", "created": "18 February 2020", "lastmodified": "26 March 2020"}, {"techniquename": "Sudo and Sudo Caching", "detection": "On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the  and  directives in the  file.", "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.Within Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The  command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" Since sudo was made for the system administrator, it has some useful configuration features such as a , which is the amount of time in minutes between instances of  before it will re-prompt for a password. This is because  has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at  with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a  variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).The sudoers file, , describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like  . Elevated privileges are required to edit this file though.Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, 's timestamp can be monitored to see if it falls within the  range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if  is disabled, adversaries can do this from any tty for that user.In the wild, malware has disabled  to potentially make scripting easier by issuing  . In order for this change to be reflected, the malware also issued . As of macOS Sierra, the sudoers file has  enabled by default.", "mitigations": {"M1028": " Operating System Configuration  : Ensuring that the  setting is enabled will prevent this leakage across tty sessions.", "M1026": " Privileged Account Management  : By requiring a password, even if an adversary can get terminal access, they must know the password to run anything in the sudoers file. Setting the  to 0 will require the user to input their password every time  is executed.", "M1022": " Restrict File and Directory Permissions  : The sudoers file should be strictly edited such that passwords are always required and that users can't spawn risky processes as users with higher privilege."}, "procedureexamples": {"S0154": " Cobalt Strike  : Cobalt Strike can use  to run a command.", "S0281": " Dok  : Dok adds  to the  file.", "S0279": " Proton  : Proton modifies the tty_tickets line in the sudoers file."}, "id": "T1548.003", "subtechniqueof": "T1548", "tactics": ["Privilege Escalation", "Defense Evasion"], "platforms": ["Linux, macOS"], "permissionsrequired": ["User"], "effectivepermissions": ["root"], "version": "1.0", "created": "30 January 2020", "lastmodified": "27 March 2020"}, {"techniquename": "Elevated Execution with Prompt", "detection": "Consider monitoring for  executions which may indicate that  is being executed. MacOS system logs may also indicate when  is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.", "description": "Adversaries may leverage the  API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.Adversaries may abuse  to obtain root privileges in order to install malicious software on victims and install persistence mechanisms. This technique may be combined with Masquerading to trick the user into granting escalated privileges to malicious code. This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.", "mitigations": {"M1038": " Execution Prevention  : System settings can prevent applications from running that haven't been downloaded through the Apple Store which may help mitigate some of these issues. Not allowing unsigned applications from being run may also mitigate some risk."}, "procedureexamples": {"S0402": " OSX/Shlayer  : OSX/Shlayer can escalate privileges to root by asking the user for credentials."}, "id": "T1548.004", "subtechniqueof": "T1548", "tactics": ["Privilege Escalation", "Defense Evasion"], "platforms": ["macOS"], "permissionsrequired": ["Administrator, User"], "effectivepermissions": ["root"], "contributors": ["Erika Noerenberg, @gutterchurl, Carbon Black; Jimmy Astle, @AstleJimmy, Carbon Black"], "version": "1.0", "created": "30 January 2020", "lastmodified": "27 March 2020"}, {"techniquename": "Access Token Manipulation", "detection": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the  command. Detailed command-line logging is not enabled by default in Windows.If an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior. There are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g.,  , , and ). Please see the referenced Windows API pages for more information.Query systems for process and thread token information and look for inconsistencies such as user owns processes impersonating the local SYSTEM account.Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process.", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.Any standard user can use the  command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "mitigations": {"M1026": " Privileged Account Management  : Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create a token object.  Also define who can create a process level token to only the local and network service through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Replace a process level token.Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command .", "M1018": " User Account Management  : An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require.  "}, "procedureexamples": {"S0622": " AppleSeed  : AppleSeed can gain system level privilege by passing  to the  API.", "G0108": " Blue Mockingbird  : Blue Mockingbird has used JuicyPotato to abuse the  token privilege to escalate from web application pool accounts to NT Authority\\SYSTEM.", "S0625": " Cuba  : Cuba has used  and  to elevate privileges.", "S0038": " Duqu  : Duqu examines running system processes for tokens that have specific system privileges. If it finds one, it will copy the token and store it for later use. Eventually it will start new processes with the stored token attached. It can also steal tokens to acquire administrative privileges.", "S0363": " Empire  : Empire can use PowerSploit's  to manipulate access tokens.", "G0037": " FIN6  : FIN6 has used has used Metasploit\u2019s named-pipe impersonation technique to escalate privileges.", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can adjust token privileges.", "S0607": " KillDisk  : KillDisk has attempted to get the access token of a process by calling . If KillDisk gets the access token, then it attempt to modify the token privileges with .", "S0576": " MegaCortex  : MegaCortex can enable  and adjust token privileges.", "S0378": " PoshC2  : PoshC2 can use Invoke-TokenManipulation for manipulating tokens.", "S0194": " PowerSploit  : PowerSploit's  Exfiltration module can be used to manipulate tokens.", "S0446": " Ryuk  : Ryuk has attempted to adjust its token privileges to have the .", "S0633": " Sliver  : Sliver has the ability to manipulate user tokens on targeted Windows systems.", "S0058": " SslMM  : SslMM contains a feature to manipulate process privileges and tokens.", "S0562": " SUNSPOT  : SUNSPOT modified its security token to grants itself debugging privileges by adding ."}, "id": "T1134", "subtechniques": ["T1134.001", "T1134.002", "T1134.003", "T1134.004", "T1134.005"], "tactics": ["Defense Evasion", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "effectivepermissions": ["SYSTEM"], "defensebypassed": ["File system access controls, Heuristic Detection, Host forensic analysis, System access controls, Windows User Account Control"], "capecid": ["CAPEC-633"], "contributors": ["Jared Atkinson, @jaredcatkinson; Robby Winchester, @robwinchester3; Tom Ueltschi @c_APT_ure; Travis Smith, Tripwire"], "version": "2.0", "created": "14 December 2017", "lastmodified": "17 October 2021"}, {"techniquename": "Setuid and Setgid", "detection": "Monitor the file system for files that have the setuid or setgid bits set. Monitor for execution of utilities, like chmod, and their command-line arguments to look for setuid or setguid bits being set.", "description": "An adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different user\u2019s context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively. . Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn\u2019t need the elevated privileges.Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via . The  program can set these bits with via bitmasking,  or via shorthand naming, .Adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future..", "mitigations": {"M1028": " Operating System Configuration  : Applications with known vulnerabilities or known shell escapes should not have the setuid or setgid bits set to reduce potential damage if an application is compromised. Additionally, the number of programs with setuid or setgid bits set should be minimized across a system."}, "procedureexamples": {"S0401": " Exaramel for Linux  : Exaramel for Linux can execute commands with high privileges via a specific binary with setuid functionality.", "S0276": " Keydnap  : Keydnap adds the setuid flag to a binary so it can easily elevate in the future."}, "id": "T1548.001", "subtechniqueof": "T1548", "tactics": ["Privilege Escalation", "Defense Evasion"], "platforms": ["Linux, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "30 January 2020", "lastmodified": "27 March 2020"}, {"techniquename": "Bypass User Account Control", "detection": "There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of  and unusual loaded DLLs through , which indicate attempts to gain access to higher privileged processes.Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. For example:Analysts should monitor these Registry settings for unauthorized changes.", "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box.   An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.", "mitigations": {"M1047": " Audit  : Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate.", "M1026": " Privileged Account Management  : Remove users from the local administrator group on systems.", "M1051": " Update Software  : Consider updating Windows to the latest version and patch level to utilize the latest protective measures against UAC bypass.", "M1052": " User Account Control  : Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as DLL Search Order Hijacking."}, "procedureexamples": {"S0584": " AppleJeus  : AppleJeus has presented the user with a UAC prompt to elevate privileges while installing.", "G0016": " APT29  : APT29 has bypassed UAC.", "G0067": " APT37  : APT37 has a function in the initial dropper to bypass Windows UAC in order to execute the next payload with higher privileges.", "S0129": " AutoIt backdoor  : AutoIt backdoor attempts to escalate privileges by bypassing User Access Control.", "S0640": " Avaddon  : Avaddon bypasses UAC using the CMSTPLUA COM interface. ", "S0606": " Bad Rabbit  : Bad Rabbit has attempted to bypass UAC and gain elevated administrative privileges.", "S0570": " BitPaymer  : BitPaymer can suppress UAC prompts by setting the  registry key on Windows 10 or  on Windows 7 and launching the  process, which launches BitPaymer with elevated privileges.", "S0089": " BlackEnergy  : BlackEnergy attempts to bypass default User Access Control (UAC) settings by exploiting a backward-compatibility setting found in Windows 7 and later.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used a Windows 10 specific tool and xxmm to bypass UAC for privilege escalation.", "G0080": " Cobalt Group  : Cobalt Group has bypassed UAC.", "S0154": " Cobalt Strike  : Cobalt Strike can use a number of known techniques to bypass Windows UAC.", "S0527": " CSPY Downloader  : CSPY Downloader can bypass UAC using the SilentCleanup task to execute the binary with elevated privileges.", "S0134": " Downdelph  : Downdelph bypasses UAC to escalate privileges by using a custom \"RedirectEXE\" shim database.", "S0363": " Empire  : Empire includes various modules to attempt to bypass UAC for escalation of privileges.", "G0120": " Evilnum  : Evilnum has used PowerShell to bypass UAC.", "S0182": " FinFisher  : FinFisher performs UAC bypass.", "S0531": " Grandoreiro  : Grandoreiro can bypass UAC by registering as the default handler for .MSC files.", "S0132": " H1N1  : H1N1 bypasses user access control by using a DLL hijacking vulnerability in the Windows Update Standalone Installer (wusa.exe).", "G0072": " Honeybee  : Honeybee uses a combination of NTWDBLIB.dll and cliconfg.exe to bypass UAC protections using DLL hijacking.", "S0260": " InvisiMole  : InvisiMole can use fileless UAC bypass and create an elevated COM object to escalate privileges.", "S0250": " Koadic  : Koadic has 2 methods for elevating integrity. It can bypass UAC through eventvwr.exe and sdclt.exe.", "S0356": " KONNI  : KONNI bypassed UAC with the \"AlwaysNotify\" settings.", "S0447": " Lokibot  : Lokibot has utilized multiple techniques to bypass UAC.", "G0069": " MuddyWater  : MuddyWater uses various techniques to bypass UAC.", "G0040": " Patchwork  : Patchwork bypassed User Access Control (UAC).", "S0501": " PipeMon  : PipeMon installer can use UAC bypass techniques to install the payload.", "S0254": " PLAINTEE  : An older variant of PLAINTEE performs UAC bypass.", "S0378": " PoshC2  : PoshC2 can utilize multiple methods to bypass UAC.", "S0192": " Pupy  : Pupy can bypass Windows UAC through either DLL hijacking, eventvwr, or appPaths.", "S0458": " Ramsay  : Ramsay can use UACMe for privilege escalation.    ", "S0332": " Remcos  : Remcos has a command for UAC bypassing.", "S0148": " RTM  : RTM can attempt to run the program as admin, then show a fake error message and a legitimate UAC bypass prompt to the user in an attempt to socially engineer the user into escalating privileges.", "S0074": " Sakula  : Sakula contains UAC bypass code for both 32- and 64-bit systems.", "S0140": " Shamoon  : Shamoon attempts to disable UAC remote restrictions by modifying the Registry.", "S0444": " ShimRat  : ShimRat has hijacked the cryptbase.dll within migwiz.exe to escalate privileges. This prevented the User Access Control window from appearing.", "G0027": " Threat Group-3390  : A Threat Group-3390 tool can use a public UAC bypass method to elevate privileges.", "S0116": " UACMe  : UACMe contains many methods for bypassing Windows User Account Control on multiple versions of the operating system.", "S0612": " WastedLocker  : WastedLocker can perform a UAC bypass if it is not executed with administrator rights or if the infected host runs Windows Vista or later.", "S0230": " ZeroT  : Many ZeroT samples can perform UAC bypass by using eventvwr.exe to execute a malicious file."}, "id": "T1548.002", "subtechniqueof": "T1548", "tactics": ["Privilege Escalation", "Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "effectivepermissions": ["Administrator"], "defensebypassed": ["Windows User Account Control"], "contributors": ["Casey Smith; Stefan Kanthak"], "version": "2.0", "created": "30 January 2020", "lastmodified": "22 July 2020"}, {"techniquename": "Traffic Signaling", "detection": "Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.The Wake-on-LAN magic packet consists of 6 bytes of  followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.", "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.    To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement. ", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable Wake-on-LAN if it is not needed within an environment.", "M1037": " Filter Network Traffic  : Mitigation of some variants of this technique could be achieved through the use of stateful firewalls, depending upon how it is implemented."}, "procedureexamples": {"S0220": " Chaos  : Chaos provides a reverse shell is triggered upon receipt of a packet with a special string, sent to any port.", "S0641": " Kobalos  : Kobalos is triggered by an incoming TCP connection to a legitimate service from a specific source port. ", "S0587": " Penquin  : Penquin will connect to C2 only after sniffing a \"magic packet\" value in TCP or UDP packets matching specific conditions.", "S0446": " Ryuk  : Ryuk has used Wake-on-Lan to power on turned off systems for lateral movement.", "S0519": " SYNful Knock  : SYNful Knock can be sent instructions via special packets to change its functionality. Code for new functionality can be included in these messages.", "S0221": " Umbreon  : Umbreon provides additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet.", "S0430": " Winnti for Linux  : Winnti for Linux has used a passive listener, capable of identifying a specific magic value before executing tasking, as a secondary command and control (C2) mechanism."}, "id": "T1205", "subtechniques": ["T1205.001"], "tactics": ["Defense Evasion", "Persistence", "Command and Control"], "platforms": ["Linux, Network, Windows, macOS"], "permissionsrequired": ["User"], "requiresnetwork": ["Yes"], "defensebypassed": ["Defensive network service scanning"], "contributors": ["Josh Day, Gigamon"], "version": "2.2", "created": "18 April 2018", "lastmodified": "17 February 2021"}, {"techniquename": "Abuse Elevation Control Mechanism", "detection": "Monitor the file system for files that have the setuid or setgid bits set. Also look for any process API calls for behavior that may be indicative of  and unusual loaded DLLs through , which indicate attempts to gain access to higher privileged processes. On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo).Consider monitoring for  executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the  and  directives in the  file.There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. Analysts should monitor Registry settings for unauthorized changes.", "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.", "mitigations": {"M1047": " Audit  : Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate.", "M1038": " Execution Prevention  : System settings can prevent applications from running that haven't been downloaded from legitimate repositories which may help mitigate some of these issues. Not allowing unsigned applications from being run may also mitigate some risk.", "M1028": " Operating System Configuration  : Applications with known vulnerabilities or known shell escapes should not have the setuid or setgid bits set to reduce potential damage if an application is compromised. Additionally, the number of programs with setuid or setgid bits set should be minimized across a system. Ensuring that the sudo tty_tickets setting is enabled will prevent this leakage across tty sessions.", "M1026": " Privileged Account Management  : Remove users from the local administrator group on systems.By requiring a password, even if an adversary can get terminal access, they must know the password to run anything in the sudoers file. Setting the timestamp_timeout to 0 will require the user to input their password every time sudo is executed.", "M1022": " Restrict File and Directory Permissions  : The sudoers file should be strictly edited such that passwords are always required and that users can't spawn risky processes as users with higher privilege.", "M1052": " User Account Control  : Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as DLL Search Order Hijacking."}, "id": "T1548", "subtechniques": ["T1548.001", "T1548.002", "T1548.003", "T1548.004"], "tactics": ["Privilege Escalation", "Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "version": "1.0", "created": "30 January 2020", "lastmodified": "22 July 2020"}, {"techniquename": "IIS Components", "detection": "Monitor for creation and/or modification of files (especially DLLs on webservers) that could be abused as malicious ISAPI extensions/filters or IIS modules. Changes to  could indicate an IIS module installation.Monitor execution and command-line arguments of , which may be abused to install malicious IIS modules.", "description": "Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: , , and (optionally) . IIS modules may also be installed to extend IIS web servers.Adversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts.Adversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports , or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.", "mitigations": {"M1047": " Audit  : Regularly check installed IIS components to verify the integrity of the web server and identify if unexpected changes have been made.", "M1045": " Code Signing  : Ensure IIS DLLs and binaries are signed by the correct application developers.", "M1038": " Execution Prevention  : Restrict unallowed ISAPI extensions and filters from running by specifying a list of ISAPI extensions and filters that can run on IIS.", "M1026": " Privileged Account Management  : Do not allow administrator accounts that have permissions to add IIS components to be used for day-to-day operations that may expose these permissions to potential adversaries and/or other unprivileged systems."}, "procedureexamples": {"S0072": " OwaAuth  : OwaAuth has been loaded onto Exchange servers and disguised as an ISAPI filter (owaauth.dll). The IIS w3wp.exe process then loads the malicious DLL.", "S0258": " RGDoor  : RGDoor establishes persistence on webservers as an IIS module."}, "id": "T1505.004", "subtechniqueof": "T1505", "tactics": ["Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["Wes Hurd"], "version": "1.0", "created": "03 June 2021", "lastmodified": "17 October 2021"}, {"techniquename": "Port Knocking", "detection": "Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.", "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.", "mitigations": {"M1037": " Filter Network Traffic  : Mitigation of some variants of this technique could be achieved through the use of stateful firewalls, depending upon how it is implemented."}, "procedureexamples": {"G0056": " PROMETHIUM  : PROMETHIUM has used a script that configures the knockd service and firewall to only accept C2 connections from systems that use a specified sequence of knock ports."}, "id": "T1205.001", "subtechniqueof": "T1205", "tactics": ["Defense Evasion", "Persistence", "Command and Control"], "platforms": ["Linux, Network, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.1", "created": "01 July 2020", "lastmodified": "21 October 2020"}, {"techniquename": "Web Shell", "detection": "Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:  Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as spawning cmd.exe or accessing files that are not in the Web directory.File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script.Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. ", "description": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (ex: China Chopper Web shell client). ", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Consider disabling functions from web technologies such as PHP\u2019s  that may be abused for web shells.", "M1018": " User Account Management  : Enforce the principle of least privilege by limiting privileges of user accounts so only authorized accounts can modify the web directory."}, "procedureexamples": {"G0007": " APT28  : APT28 has used a modified and obfuscated version of the reGeorg web shell to maintain persistence on a target's Outlook Web Access (OWA) server.", "G0016": " APT29  : APT29 has installed web shells on exploited Microsoft Exchange servers.", "G0050": " APT32  : APT32 has used Web shells to maintain access to victim websites.", "G0082": " APT38  : APT38 has used web shells for persistence or to ensure redundant access.", "G0087": " APT39  : APT39 has installed ANTAK and ASPXSPY web shells.", "S0073": " ASPXSpy  : ASPXSpy is a Web shell. The ASPXTool version used by Threat Group-3390 has been deployed to accessible servers running Internet Information Services (IIS).", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has used web shells to establish an initial foothold and for lateral movement within a victim's system.", "S0020": " China Chopper  : China Chopper's server component is a Web Shell payload.", "G0009": " Deep Panda  : Deep Panda uses Web shells on publicly accessible Web servers to access victim networks.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 commonly created Web shells on victims' publicly accessible email and web servers, which they used to maintain access to a victim network and download additional malicious files.", "G0117": " Fox Kitten  : Fox Kitten has installed web shells on compromised hosts to maintain access.", "G0093": " GALLIUM  : GALLIUM used Web shells to persist in victim environments and assist in execution and exfiltration.", "G0125": " HAFNIUM  : HAFNIUM has deployed multiple web shells on compromised servers including SIMPLESEESHARP, SPORTSBALL, China Chopper, and ASPXSpy.", "G0094": " Kimsuky  : Kimsuky has used modified versions of open source PHP web shells to maintain access, often adding \"Dinosaur\" references within the code.", "G0065": " Leviathan  : Leviathan relies on web shells for an initial foothold as well as persistence into the victim's systems.", "G0049": " OilRig  : OilRig has used web shells, often to maintain access to a victim network.", "G0116": " Operation Wocao  : Operation Wocao has used their own web shells, as well as those previously placed on target systems by other threat actors, for reconnaissance and lateral movement.", "S0072": " OwaAuth  : OwaAuth is a Web shell that appears to be exclusively used by Threat Group-3390. It is installed as an ISAPI filter on Exchange servers and shares characteristics with the China Chopper Web shell.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell can gain remote access and execution on target web servers.", "G0034": " Sandworm Team  : Sandworm Team has used webshells including P.A.S. Webshell to maintain access to victim networks.", "S0185": " SEASHARPEE  : SEASHARPEE is a Web shell.", "S0578": " SUPERNOVA  : SUPERNOVA is a Web shell.", "G0088": " TEMP.Veles  : TEMP.Veles has planted Web shells on Outlook Exchange servers.", "G0027": " Threat Group-3390  : Threat Group-3390 has used a variety of Web shells.", "G0131": " Tonto Team  : Tonto Team has used a first stage web shell after compromising a vulnerable Exchange server.", "G0081": " Tropic Trooper  : Tropic Trooper has started a web service in the target host and wait for the adversary to connect, acting as a web shell.    ", "G0123": " Volatile Cedar  : Volatile Cedar can inject web shell code into a server. "}, "id": "T1505.003", "subtechniqueof": "T1505", "tactics": ["Persistence"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Adversary access to Web server with vulnerability or account to upload and serve the Web shell file."], "permissionsrequired": ["SYSTEM, User"], "capecid": ["CAPEC-650"], "contributors": ["Arnim Rupp, Deutsche Lufthansa AG"], "version": "1.2", "created": "13 December 2019", "lastmodified": "26 July 2021"}, {"techniquename": "Transport Agent", "detection": "Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.", "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. Adversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events. Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary. ", "mitigations": {"M1047": " Audit  : Regularly check component software on critical services that adversaries may target for persistence to verify the integrity of the systems and identify if unexpected changes have been made. ", "M1045": " Code Signing  : Ensure all application component binaries are signed by the correct application developers. ", "M1026": " Privileged Account Management  : Do not allow administrator accounts that have permissions to add component software on these services to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems. "}, "procedureexamples": {"S0395": " LightNeuron  : LightNeuron has used a malicious Microsoft Exchange transport agent for persistence."}, "id": "T1505.002", "subtechniqueof": "T1505", "tactics": ["Persistence"], "platforms": ["Linux, Windows"], "permissionsrequired": ["Administrator, SYSTEM, root"], "contributors": ["Christoffer Str\u00f6mblad; ESET"], "version": "1.0", "created": "12 December 2019", "lastmodified": "18 October 2021"}, {"techniquename": "SQL Stored Procedures", "detection": "On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.", "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).Adversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers. To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server. Microsoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.). Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands. ", "mitigations": {"M1047": " Audit  : Regularly check component software on critical services that adversaries may target for persistence to verify the integrity of the systems and identify if unexpected changes have been made. ", "M1045": " Code Signing  : Ensure all application component binaries are signed by the correct application developers. ", "M1026": " Privileged Account Management  : Do not allow administrator accounts that have permissions to add component software on these services to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems. "}, "procedureexamples": {"G0034": " Sandworm Team  : Sandworm Team has used various MS-SQL stored procedures. ", "S0603": " Stuxnet  : Stuxnet used xp_cmdshell to store and execute SQL code."}, "id": "T1505.001", "subtechniqueof": "T1505", "tactics": ["Persistence"], "platforms": ["Linux, Windows"], "permissionsrequired": ["Administrator, SYSTEM, root"], "contributors": ["Carlos Borges, @huntingneo, CIP; Kaspersky; Lucas da Silva Pereira, @vulcanunsec, CIP"], "version": "1.0", "created": "12 December 2019", "lastmodified": "25 March 2020"}, {"techniquename": "TFTP Boot", "detection": "Consider comparing a copy of the network device configuration and system image against a known-good version to discover unauthorized changes to system boot, startup configuration, or the running OS.  The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor.  Review command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration.  Check boot information including system uptime, image booted, and startup configuration to determine if results are consistent with expected behavior in the environment.  Monitor unusual connections or connection attempts to the device that may specifically target TFTP or other file-sharing protocols.", "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.Adversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with Modify System Image to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to ROMMONkit and may result in the network device running a modified image. ", "mitigations": {"M1047": " Audit  : Periodically check the integrity of the running configuration and system image to ensure they have not been modified.    ", "M1046": " Boot Integrity  : Enable secure boot features to validate the digital signature of the boot environment and system image using a special purpose hardware device. If the validation check fails, the device will fail to boot preventing loading of unauthorized software.  ", "M1035": " Limit Access to Resource Over Network  : Restrict use of protocols without encryption or authentication mechanisms. Limit access to administrative and management interfaces from untrusted network sources. ", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific protocols, such as TFTP, can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific technique used by a particular adversary or tool, and will likely be different across various network configurations. ", "M1028": " Operating System Configuration  : Follow vendor device hardening best practices to disable unnecessary and unused features and services, avoid using default configurations and passwords, and introduce logging and auditing for detection.", "M1026": " Privileged Account Management  : Use of Authentication, Authorization, and Accounting (AAA) systems will limit actions administrators can perform and provide a history of user actions to detect unauthorized use and abuse. TACACS+ can keep control over which commands administrators are permitted to use through the configuration of authentication and command authorization.  "}, "id": "T1542.005", "subtechniqueof": "T1542", "tactics": ["Defense Evasion", "Persistence"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "20 October 2020", "lastmodified": "22 October 2020"}, {"techniquename": "Server Software Component", "detection": "Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.Process monitoring may be used to detect servers components that perform suspicious actions such as running cmd.exe or accessing files. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network.  ", "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.", "mitigations": {"M1047": " Audit  : Regularly check component software on critical services that adversaries may target for persistence to verify the integrity of the systems and identify if unexpected changes have been made.", "M1045": " Code Signing  : Ensure all application component binaries are signed by the correct application developers.", "M1042": " Disable or Remove Feature or Program  : Consider disabling software components from servers when possible to prevent abuse by adversaries.", "M1026": " Privileged Account Management  : Do not allow administrator accounts that have permissions to add component software on these services to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.", "M1018": " User Account Management  : Enforce the principle of least privilege by limiting privileges of user accounts so only authorized accounts can modify and/or add server software components."}, "id": "T1505", "subtechniques": ["T1505.001", "T1505.002", "T1505.003", "T1505.004"], "tactics": ["Persistence"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, root"], "version": "1.2", "created": "28 June 2019", "lastmodified": "18 October 2021"}, {"techniquename": "ROMMONkit", "detection": "There are no documented means for defenders to validate the operation of the ROMMON outside of vendor support. If a network device is suspected of being compromised, contact the vendor to assist in further investigation.", "description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. ROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to TFTP Boot, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.", "mitigations": {"M1047": " Audit  : Periodically check the integrity of system image to ensure it has not been modified.    ", "M1046": " Boot Integrity  : Enable secure boot features to validate the digital signature of the boot environment and system image using a special purpose hardware device. If the validation check fails, the device will fail to boot preventing loading of unauthorized software.  ", "M1031": " Network Intrusion Prevention  : Network intrusion detection and prevention systems that use network signatures to identify traffic for specific protocols, such as TFTP, can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific technique used by a particular adversary or tool, and will likely be different across various network configurations.  "}, "id": "T1542.004", "subtechniqueof": "T1542", "tactics": ["Defense Evasion", "Persistence"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "20 October 2020", "lastmodified": "22 October 2020"}, {"techniquename": "Bootkit", "detection": "Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.", "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).  The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.", "mitigations": {"M1046": " Boot Integrity  : Use Trusted Platform Module technology and a secure or trusted boot process to prevent system integrity from being compromised.  ", "M1026": " Privileged Account Management  : Ensure proper permissions are in place to help prevent adversary access to privileged accounts necessary to install a bootkit."}, "procedureexamples": {"G0007": " APT28  : APT28 has deployed a bootkit along with Downdelph to ensure its persistence on the victim. The bootkit shares code with some variants of BlackEnergy.", "G0096": " APT41  : APT41 deployed Master Boot Record bootkits on Windows systems to hide their malware and maintain persistence on victim systems.", "S0114": " BOOTRASH  : BOOTRASH is a Volume Boot Record (VBR) bootkit that uses the VBR to maintain persistence.", "S0484": " Carberp  : Carberp has installed a bootkit on the system to maintain persistence.", "S0182": " FinFisher  : Some FinFisher variants incorporate an MBR rootkit.", "G0032": " Lazarus Group  : Lazarus Group malware WhiskeyAlfa-Three modifies sector 0 of the Master Boot Record (MBR) to ensure that the malware will persist even if a victim machine shuts down.", "S0112": " ROCKBOOT  : ROCKBOOT is a Master Boot Record (MBR) bootkit that uses the MBR to establish persistence.", "S0266": " TrickBot  : TrickBot can implant malicious code into a compromised device's firmware."}, "id": "T1542.003", "subtechniqueof": "T1542", "tactics": ["Persistence", "Defense Evasion"], "platforms": ["Linux, Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "defensebypassed": ["Anti-virus, File monitoring, Host intrusion prevention systems"], "capecid": ["CAPEC-552"], "version": "1.1", "created": "19 December 2019", "lastmodified": "17 September 2020"}, {"techniquename": "System Firmware", "detection": "System firmware manipulation may be detected.  Dump and inspect BIOS images on vulnerable systems and compare against known good images.  Analyze differences to determine if malicious changes have occurred. Log attempts to read/write to BIOS and compare against known patching behavior.Likewise, EFI modules can be collected and compared against a known-clean list of EFI executable binaries to detect potentially malicious modules. The CHIPSEC framework can be used for analysis to determine if firmware modifications have been performed.   ", "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.   System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.", "mitigations": {"M1046": " Boot Integrity  : Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification. Use Trusted Platform Module technology.  Move system's root of trust to hardware to prevent tampering with the SPI flash memory. Technologies such as Intel Boot Guard can assist with this. ", "M1026": " Privileged Account Management  : Prevent adversary access to privileged accounts or access necessary to perform this technique.", "M1051": " Update Software  : Patch the BIOS and EFI as necessary."}, "procedureexamples": {"S0047": " Hacking Team UEFI Rootkit  : Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems. ", "S0397": " LoJax  : LoJax is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems. ", "S0001": " Trojan.Mebromi  : Trojan.Mebromi performs BIOS modification and can download and execute a file as well as protect itself from removal."}, "id": "T1542.001", "subtechniqueof": "T1542", "tactics": ["Persistence", "Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "defensebypassed": ["Anti-virus, File monitoring, Host intrusion prevention systems"], "capecid": ["CAPEC-532"], "contributors": ["Jean-Ian Boutin, ESET; McAfee; Ryan Becwar"], "version": "1.0", "created": "19 December 2019", "lastmodified": "19 May 2020"}, {"techniquename": "Pre-OS Boot", "detection": "Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes. Take snapshots of boot records and firmware and compare against known good images. Log changes to boot records, BIOS, and EFI, which can be performed by API calls, and compare against known good behavior and patching.Disk check, forensic utilities, and data from device drivers (i.e. processes and API calls) may reveal anomalies that warrant deeper investigation. ", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.", "mitigations": {"M1046": " Boot Integrity  : Use Trusted Platform Module technology and a secure or trusted boot process to prevent system integrity from being compromised. Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification.  ", "M1026": " Privileged Account Management  : Ensure proper permissions are in place to help prevent adversary access to privileged accounts necessary to perform these actions", "M1051": " Update Software  : Patch the BIOS and EFI as necessary."}, "id": "T1542", "subtechniques": ["T1542.001", "T1542.002", "T1542.003", "T1542.004", "T1542.005"], "tactics": ["Defense Evasion", "Persistence"], "platforms": ["Linux, Network, Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "defensebypassed": ["Anti-virus, File monitoring, Host intrusion prevention systems"], "version": "1.1", "created": "13 November 2019", "lastmodified": "22 October 2020"}, {"techniquename": "Component Firmware", "detection": "Data and telemetry from use of device drivers (i.e. processes and API calls) and/or provided by SMART (Self-Monitoring, Analysis and Reporting Technology)   disk monitoring may reveal malicious manipulations of components. Otherwise, this technique may be difficult to detect since malicious activity is taking place on system components possibly outside the purview of OS security and integrity mechanisms.Disk check and forensic utilities  may reveal indicators of malicious firmware such as strings, unexpected disk partition table entries, or blocks of otherwise unusual memory that warrant deeper investigation. Also consider comparing components, including hashes of component firmware and behavior, against known good images.", "description": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking.Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.", "procedureexamples": {"G0020": " Equation  : Equation is known to have the capability to overwrite the firmware on hard drives from some manufacturers. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1542.002", "subtechniqueof": "T1542", "tactics": ["Persistence", "Defense Evasion"], "platforms": ["Windows"], "systemrequirements": ["Ability to update component device firmware from the host operating system."], "permissionsrequired": ["SYSTEM"], "defensebypassed": ["Anti-virus, File monitoring, Host intrusion prevention systems"], "version": "1.0", "created": "19 December 2019", "lastmodified": "23 March 2020"}, {"techniquename": "Add-ins", "detection": "Monitor and validate the Office trusted locations on the file system and audit the Registry entries relevant for enabling add-ins.Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior", "description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.  There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. Add-ins can be used to obtain persistence because they can be set to execute code when an Office application starts. ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk. "}, "procedureexamples": {"G0019": " Naikon  : Naikon has used the RoyalRoad exploit builder to drop a second stage loader, intel.wll, into the Word Startup folder on the compromised host."}, "id": "T1137.006", "subtechniqueof": "T1137", "tactics": ["Persistence"], "platforms": ["Office 365, Windows"], "permissionsrequired": ["Administrator, User"], "version": "1.1", "created": "07 November 2019", "lastmodified": "16 August 2021"}, {"techniquename": "Office Template Macros", "detection": "Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Modification to base templates, like Normal.dotm, should also be investigated since the base templates should likely not contain VBA macros. Changes to the Office macro security settings should also be investigated.", "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. Office Visual Basic for Applications (VBA) macros  can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded. Shared templates may also be stored and pulled from remote locations. Word Normal.dotm location:Excel Personal.xlsb location:Adversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under , or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location. An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk. ", "M1042": " Disable or Remove Feature or Program  : Follow Office macro security best practices suitable for your environment. Disable Office VBA macros from executing.Disable Office add-ins. If they are required, follow best practices for securing them by requiring them to be signed and disabling user notification for allowing add-ins. For some add-ins types (WLL, VBA) additional mitigation is likely required as disabling add-ins in the Office Trust Center does not disable WLL nor does it prevent VBA code from executing. "}, "procedureexamples": {"S0475": " BackConfig  : BackConfig has the ability to use hidden columns in Excel spreadsheets to store executable files or commands for VBA macros.", "S0154": " Cobalt Strike  : Cobalt Strike has the ability to use an Excel Workbook to execute additional code by enabling Office to trust macros and execute code without user permission.", "G0069": " MuddyWater  : MuddyWater has used a Word Template, Normal.dotm, for persistence."}, "id": "T1137.001", "subtechniqueof": "T1137", "tactics": ["Persistence"], "platforms": ["Office 365, Windows"], "permissionsrequired": ["Administrator, User"], "version": "1.1", "created": "07 November 2019", "lastmodified": "16 August 2021"}, {"techniquename": "Outlook Forms", "detection": "Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. SensePost, whose tool  can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior.", "description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.Once malicious forms have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk. ", "M1051": " Update Software  : For the Outlook methods, blocking macros may be ineffective as the Visual Basic engine used for these features is separate from the macro scripting engine. Microsoft has released patches to try to address each issue. Ensure KB3191938 which blocks Outlook Visual Basic and displays a malicious code warning, KB4011091 which disables custom forms by default, and KB4011162 which removes the legacy Home Page feature, are applied to systems."}, "procedureexamples": {"S0358": " Ruler  : Ruler can be used to automate the abuse of Outlook Forms to establish persistence."}, "id": "T1137.003", "subtechniqueof": "T1137", "tactics": ["Persistence"], "platforms": ["Office 365, Windows"], "permissionsrequired": ["Administrator, User"], "version": "1.1", "created": "07 November 2019", "lastmodified": "16 August 2021"}, {"techniquename": "Outlook Rules", "detection": "Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. This PowerShell script is ineffective in gathering rules with modified  and  properties caused by adversaries using a Microsoft Exchange Server Messaging API Editor (MAPI Editor), so only examination with the Exchange Administration tool MFCMapi can reveal these mail forwarding rules. SensePost, whose tool  can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior.", "description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.Once malicious rules have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk. ", "M1051": " Update Software  : For the Outlook methods, blocking macros may be ineffective as the Visual Basic engine used for these features is separate from the macro scripting engine. Microsoft has released patches to try to address each issue. Ensure KB3191938 which blocks Outlook Visual Basic and displays a malicious code warning, KB4011091 which disables custom forms by default, and KB4011162 which removes the legacy Home Page feature, are applied to systems."}, "procedureexamples": {"S0358": " Ruler  : Ruler can be used to automate the abuse of Outlook Rules to establish persistence. "}, "id": "T1137.005", "subtechniqueof": "T1137", "tactics": ["Persistence"], "platforms": ["Office 365, Windows"], "permissionsrequired": ["Administrator, User"], "contributors": ["Microsoft Security"], "version": "1.1", "created": "07 November 2019", "lastmodified": "15 October 2021"}, {"techniquename": "Outlook Home Page", "detection": "Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. SensePost, whose tool  can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior.", "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.Once malicious home pages have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk. ", "M1051": " Update Software  : For the Outlook methods, blocking macros may be ineffective as the Visual Basic engine used for these features is separate from the macro scripting engine. Microsoft has released patches to try to address each issue. Ensure KB3191938 which blocks Outlook Visual Basic and displays a malicious code warning, KB4011091 which disables custom forms by default, and KB4011162 which removes the legacy Home Page feature, are applied to systems."}, "procedureexamples": {"G0049": " OilRig  : OilRig has abused the Outlook Home Page feature for persistence. OilRig has also used CVE-2017-11774 to roll back the initial patch designed to protect against Home Page abuse.", "S0358": " Ruler  : Ruler can be used to automate the abuse of Outlook Home Pages to establish persistence. "}, "id": "T1137.004", "subtechniqueof": "T1137", "tactics": ["Persistence"], "platforms": ["Office 365, Windows"], "permissionsrequired": ["Administrator, User"], "version": "1.1", "created": "07 November 2019", "lastmodified": "16 August 2021"}, {"techniquename": "Office Application Startup", "detection": "Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously.Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence.Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. SensePost, whose tool  can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.", "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page. These persistence mechanisms can work within Outlook or be used through Office 365.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk. ", "M1042": " Disable or Remove Feature or Program  : Follow Office macro security best practices suitable for your environment. Disable Office VBA macros from executing.Disable Office add-ins. If they are required, follow best practices for securing them by requiring them to be signed and disabling user notification for allowing add-ins. For some add-ins types (WLL, VBA) additional mitigation is likely required as disabling add-ins in the Office Trust Center does not disable WLL nor does it prevent VBA code from executing. ", "M1054": " Software Configuration  : For the Office Test method, create the Registry key used to execute it and set the permissions to \"Read Control\" to prevent easy access to the key without administrator permissions or requiring Privilege Escalation. ", "M1051": " Update Software  : For the Outlook methods, blocking macros may be ineffective as the Visual Basic engine used for these features is separate from the macro scripting engine. Microsoft has released patches to try to address each issue. Ensure KB3191938 which blocks Outlook Visual Basic and displays a malicious code warning, KB4011091 which disables custom forms by default, and KB4011162 which removes the legacy Home Page feature, are applied to systems."}, "procedureexamples": {"G0050": " APT32  : APT32 have replaced Microsoft Outlook's VbaProject.OTM file to install a backdoor macro for persistence.", "G0047": " Gamaredon Group  : Gamaredon Group has inserted malicious macros into existing documents, providing persistence when they are reopened. Gamaredon Group has loaded the group's previously delivered VBA project by relaunching Microsoft Outlook with the  option, once the Application.Startup event is received."}, "id": "T1137", "subtechniques": ["T1137.001", "T1137.002", "T1137.003", "T1137.004", "T1137.005", "T1137.006"], "tactics": ["Persistence"], "platforms": ["Office 365, Windows"], "permissionsrequired": ["Administrator, User"], "contributors": ["Loic Jaquemet; Microsoft Threat Intelligence Center (MSTIC); Nick Carr, Mandiant; Praetorian; Ricardo Dias; Sahar Shukrun"], "version": "1.3", "created": "14 December 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Office Test", "detection": "Monitor for the creation of the Office Test Registry key. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Since v13.52, Autoruns can detect tasks set up using the Office Test Registry key.Consider monitoring Office processes for anomalous DLL loads.", "description": "Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.There exist user and global Registry keys for the Office Test feature:Adversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk. ", "M1054": " Software Configuration  : Create the Registry key used to execute it and set the permissions to \"Read Control\" to prevent easy access to the key without administrator permissions or requiring Privilege Escalation."}, "procedureexamples": {"G0007": " APT28  : APT28 has used the Office Test persistence mechanism within Microsoft Office by adding the Registry key  to execute code."}, "id": "T1137.002", "subtechniqueof": "T1137", "tactics": ["Persistence"], "platforms": ["Office 365, Windows"], "systemrequirements": ["Office 2007, 2010, 2013, and 2016"], "permissionsrequired": ["Administrator, User"], "version": "1.1", "created": "07 November 2019", "lastmodified": "16 August 2021"}, {"techniquename": "Modify Authentication Process", "detection": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: ) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.Monitor for calls to  that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll). Monitor PAM configuration and module paths (ex: ) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.Monitor for suspicious additions to the /Library/Security/SecurityAgentPlugins directory.Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.  Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).", "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.", "mitigations": {"M1032": " Multi-factor Authentication  : Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs. ", "M1028": " Operating System Configuration  : Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory (C:\\Windows\\System32\\ by default) of a domain controller and/or local computer with a corresponding entry in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages. ", "M1026": " Privileged Account Management  : Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. Limit access to the root account and prevent users from modifying protected components through proper privilege separation (ex SELinux, grsecurity, AppArmor, etc.) and limiting Privilege Escalation opportunities.", "M1025": " Privileged Process Integrity  : Enabled features, such as Protected Process Light (PPL), for LSA.", "M1022": " Restrict File and Directory Permissions  : Restrict write access to the /Library/Security/SecurityAgentPlugins directory."}, "procedureexamples": {"S0377": " Ebury  : Ebury can intercept private keys using a trojanized  function.", "S0487": " Kessel  : Kessel has trojanized the "}, "id": "T1556", "subtechniques": ["T1556.001", "T1556.002", "T1556.003", "T1556.004"], "tactics": ["Credential Access", "Defense Evasion", "Persistence"], "platforms": ["Linux, Network, Windows, macOS"], "contributors": ["Chris Ross @xorrior"], "version": "2.0", "created": "11 February 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Password Filter DLL", "detection": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: ) and correlate then investigate the DLL files these files reference.Password filters will also show up as an autorun and loaded DLL in lsass.exe.", "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.", "mitigations": {"M1028": " Operating System Configuration  : Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory (C:\\Windows\\System32\\ by default) of a domain controller and/or local computer with a corresponding entry in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages."}, "procedureexamples": {"S0125": " Remsec  : Remsec harvests plain-text credentials as a password filter registered on domain controllers.", "G0041": " Strider  : Strider has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to acquire credentials any time a domain, local user, or administrator logs in or changes a password."}, "id": "T1556.002", "subtechniqueof": "T1556", "tactics": ["Credential Access", "Defense Evasion", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["Vincent Le Toux"], "version": "2.0", "created": "11 February 2020", "lastmodified": "20 April 2021"}, {"techniquename": "Pluggable Authentication Modules", "detection": "Monitor PAM configuration and module paths (ex: ) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).", "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is , which retrieves, sets, and verifies account authentication information in  and .Adversaries may modify components of the PAM system to create backdoors. PAM components, such as , can be patched to accept arbitrary adversary supplied values as legitimate credentials.Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.", "mitigations": {"M1032": " Multi-factor Authentication  : Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information.", "M1026": " Privileged Account Management  : Limit access to the root account and prevent users from modifying PAM components through proper privilege separation (ex SELinux, grsecurity, AppArmor, etc.) and limiting Privilege Escalation opportunities."}, "procedureexamples": {"S0377": " Ebury  : Ebury can deactivate PAM modules to tamper with the sshd configuration.", "S0468": " Skidmap  : Skidmap has the ability to replace the pam_unix.so file on an infected machine with its own malicious version that accepts a specific backdoor password for all users."}, "id": "T1556.003", "subtechniqueof": "T1556", "tactics": ["Credential Access", "Defense Evasion", "Persistence"], "platforms": ["Linux, macOS"], "permissionsrequired": ["root"], "contributors": ["George Allen, VMware Carbon Black; Scott Knight, @sdotknight, VMware Carbon Black"], "version": "2.0", "created": "26 June 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Network Device Authentication", "detection": "Consider verifying the checksum of the operating system file and verifying the image of the operating system in memory.Detection of this behavior may be difficult, detection efforts may be focused on closely related adversary behaviors, such as .", "description": "Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.Modify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control. ", "M1026": " Privileged Account Management  : Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints."}, "procedureexamples": {"S0519": " SYNful Knock  : SYNful Knock has the capability to add its own custom backdoor password when it modifies the operating system of the affected network device."}, "id": "T1556.004", "subtechniqueof": "T1556", "tactics": ["Credential Access", "Defense Evasion", "Persistence"], "platforms": ["Network"], "permissionsrequired": ["Administrator"], "version": "2.0", "created": "19 October 2020", "lastmodified": "20 April 2021"}, {"techniquename": "Domain Controller Authentication", "detection": "Monitor for calls to  that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll).Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g. a user has an active login session but has not entered the building or does not have VPN access). ", "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.", "mitigations": {"M1032": " Multi-factor Authentication  : Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs. ", "M1026": " Privileged Account Management  : Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. ", "M1025": " Privileged Process Integrity  : Enabled features, such as Protected Process Light (PPL), for LSA."}, "procedureexamples": {"G0114": " Chimera  : Chimera's malware has altered the NTLM authentication program on domain controllers to allow Chimera to login without a valid credential.   ", "S0007": " Skeleton Key  : Skeleton Key is used to patch an enterprise domain controller authentication process with a backdoor password. It allows adversaries to bypass the standard authentication system to use a defined password for all accounts authenticating to that domain controller."}, "id": "T1556.001", "subtechniqueof": "T1556", "tactics": ["Credential Access", "Defense Evasion", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "version": "2.0", "created": "11 February 2020", "lastmodified": "20 April 2021"}, {"techniquename": "Implant Internal Image", "detection": "Monitor interactions with images and containers by users to identify ones that are added or modified anomalously.In containerized environments, changes may be detectable by monitoring the Docker daemon logs or setting up and monitoring Kubernetes audit logs depending on registry configuration. ", "description": "Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim\u2019s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.A tool has been developed to facilitate planting backdoors in cloud container images. If an attacker has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a Web Shell.", "mitigations": {"M1047": " Audit  : Periodically check the integrity of images and containers used in cloud deployments to ensure they have not been modified to include malicious software.", "M1045": " Code Signing  : Several cloud service providers support content trust models that require container images be signed by trusted sources.", "M1026": " Privileged Account Management  : Limit permissions associated with creating and modifying platform images or containers based on the principle of least privilege."}, "id": "T1525", "subtechniques": ["No sub-techniques"], "tactics": ["Persistence"], "platforms": ["Containers, IaaS"], "permissionsrequired": ["User"], "contributors": ["Praetorian; Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team"], "version": "2.0", "created": "04 September 2019", "lastmodified": "12 April 2021"}, {"techniquename": "Dynamic Linker Hijacking", "detection": "Monitor for changes to environment variables and files associated with loading shared libraries such as  and , as well as the commands to implement these changes.Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.", "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as  on Linux or  on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.On Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the  command,  function, or  function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s .On Linux, adversaries may set  to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program.  can be set via the environment variable or  file. Libraries specified by  are loaded and mapped into memory by  and  respectively.  On macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the  environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program. ", "mitigations": {"M1038": " Execution Prevention  : Adversaries may use new payloads to execute this technique. Identify and block potentially malicious software executed through hijacking by using application control solutions also capable of blocking libraries loaded by legitimate software.", "M1028": " Operating System Configuration  : When System Integrity Protection (SIP) is enabled in macOS, the aforementioned environment variables are ignored when executing protected binaries. Third-party applications can also leverage Apple\u2019s Hardened Runtime, ensuring these environment variables are subject to imposed restrictions. Admins can add restrictions to applications by setting the setuid and/or setgid bits, use entitlements, or have a __RESTRICT segment in the Mach-O binary."}, "procedureexamples": {"G0096": " APT41  : APT41 has configured payloads to load via LD_PRELOAD.  ", "S0377": " Ebury  : Ebury has injected its dynamic library into descendent processes of sshd via LD_PRELOAD.", "S0394": " HiddenWasp  : HiddenWasp adds itself as a shared object to the LD_PRELOAD environment variable.", "S0601": " Hildegard  : Hildegard has modified /etc/ld.so.preload to intercept shared library import functions.", "G0106": " Rocke  : Rocke has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.  ", "S0658": " XCSSET  : XCSSET adds malicious file paths to the  and  environment variables to execute malicious code."}, "id": "T1574.006", "subtechniqueof": "T1574", "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["Linux, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-13,", "CAPEC-640"], "version": "2.0", "created": "13 March 2020", "lastmodified": "27 April 2021"}, {"techniquename": "DLL Search Order Hijacking", "detection": "Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of  and  redirection files that do not correlate with software updates are suspicious.", "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. Adversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.", "mitigations": {"M1047": " Audit  : Use auditing tools capable of detecting DLL search order hijacking opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for DLL hijacking weaknesses.Use the program sxstrace.exe that is included with Windows along with manual inspection to check manifest files for side-by-side problems in software.", "M1038": " Execution Prevention  : Adversaries may use new DLLs to execute this technique. Identify and block potentially malicious software executed through search order hijacking by using application control solutions capable of blocking DLLs loaded by legitimate software.", "M1044": " Restrict Library Loading  : Disallow loading of remote DLLs. This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+.Enable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. )to be used before local directory DLLs (e.g. a user's home directory)The Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration > [Policies] > Administrative Templates > MSS (Legacy): MSS: (SafeDllSearchMode) Enable Safe DLL search mode. The associated Windows Registry key for this is located at "}, "procedureexamples": {"G0096": " APT41  : APT41 has used search order hijacking to execute malicious payloads, such as Winnti RAT.", "S0373": " Astaroth  : Astaroth can launch itself via DLL Search Order Hijacking.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has executed DLL search order hijacking.", "S0415": " BOOSTWRITE  : BOOSTWRITE has exploited the loading of the legitimate Dwrite.dll file by actually loading the gdi library, which then loads the gdiplus library and ultimately loads the local Dwrite dll.", "S0631": " Chaes  : Chaes has used search order hijacking to load a malicious DLL.", "S0538": " Crutch  : Crutch can persist via DLL search order hijacking on Google Chrome, Mozilla Firefox, or Microsoft OneDrive.", "S0134": " Downdelph  : Downdelph uses search order hijacking of the Windows executable sysprep.exe to escalate privileges.", "S0363": " Empire  : Empire contains modules that can discover and exploit various DLL hijacking opportunities.", "G0120": " Evilnum  : Evilnum has used the malware variant, TerraTV, to load a malicious DLL placed in the TeamViewer directory, instead of the original Windows DLL located in a system folder. ", "S0182": " FinFisher  : A FinFisher variant uses DLL search order hijacking.", "S0009": " Hikit  : Hikit has used DLL Search Order Hijacking to load  as a persistence mechanism.", "S0070": " HTTPBrowser  : HTTPBrowser abuses the Windows DLL load order by using a legitimate Symantec anti-virus binary, VPDN_LU.exe, to load a malicious DLL that mimics a legitimate Symantec DLL, navlu.dll.", "S0260": " InvisiMole  : InvisiMole can be launched by using DLL search order hijacking in which the wrapper DLL is placed in the same folder as explorer.exe and loaded during startup into the Windows Explorer process instead of the legitimate library.", "S0530": " Melcoz  : Melcoz can use DLL hijacking to bypass security controls.", "G0045": " menuPass  : menuPass has used DLL search order hijacking.", "S0280": " MirageFox  : MirageFox is likely loaded via DLL hijacking into a legitimate McAfee binary.", "S0194": " PowerSploit  : PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit DLL hijacking opportunities in services and processes.", "S0113": " Prikormka  : Prikormka uses DLL search order hijacking for persistence by saving itself as ntshrui.dll to the Windows directory so it will load before the legitimate ntshrui.dll saved in the System32 subdirectory.", "S0458": " Ramsay  : Ramsay can hijack outdated Windows application dependencies with malicious versions of its own DLL payload.  ", "S0153": " RedLeaves  : RedLeaves is launched through use of DLL search order hijacking to load a malicious dll.", "G0048": " RTM  : RTM has used search order hijacking to force TeamViewer to load a malicious DLL.", "G0027": " Threat Group-3390  : Threat Group-3390 has performed DLL search order hijacking to execute their payload.", "G0131": " Tonto Team  : Tonto Team abuses a legitimate and signed Microsoft executable to launch a malicious DLL.", "S0612": " WastedLocker  : WastedLocker has performed DLL hijacking before execution.", "S0109": " WEBC2  : Variants of WEBC2 achieve persistence by using DLL search order hijacking, usually by copying the DLL file to  ().", "G0107": " Whitefly  : Whitefly has used search order hijacking to run the loader Vcrodat.    "}, "id": "T1574.001", "subtechniqueof": "T1574", "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["Windows"], "capecid": ["CAPEC-471"], "contributors": ["Stefan Kanthak; Travis Smith, Tripwire"], "version": "1.1", "created": "13 March 2020", "lastmodified": "26 April 2021"}, {"techniquename": "DLL Side-Loading", "detection": "Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so) as well as the introduction of new files/programs. Track DLL metadata, such as a hash, and compare DLLs that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).Side-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "mitigations": {"M1013": " Application Developer Guidance  : When possible, include hash values in manifest files to help prevent side-loading of malicious libraries.", "M1051": " Update Software  : Update software regularly to include patches that fix DLL side-loading vulnerabilities."}, "procedureexamples": {"G0073": " APT19  : APT19 launched an HTTP malware variant and a Port 22 malware variant using a legitimate executable that loaded the malicious DLL.", "G0022": " APT3  : APT3 has been known to side load DLLs with a valid version of Chrome with one of their tools.", "G0050": " APT32  : APT32 ran legitimately-signed executables from Symantec and McAfee which load a malicious DLL. The group also side-loads its backdoor by dropping a library and a legitimate, signed executable (AcroTranscoder).", "G0096": " APT41  : APT41 used legitimate executables to perform DLL side-loading of their malware. ", "S0128": " BADNEWS  : BADNEWS typically loads its DLL file into a legitimate signed Java or VMware executable.", "S0127": " BBSRAT  : DLL side-loading has been used to execute BBSRAT through a legitimate Citrix executable, ssonsvr.exe. The Citrix executable was dropped along with BBSRAT by the dropper.", "G0098": " BlackTech  : BlackTech has used DLL side loading by giving DLLs hardcoded names and placing them in searched directories. ", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used legitimate applications to side-load malicious DLLs.", "G0114": " Chimera  : Chimera has used side loading to place malicious DLLs in memory.", "S0354": " Denis  : Denis exploits a security vulnerability to load a fake DLL and execute its code.", "S0624": " Ecipekac  : Ecipekac can abuse the legitimate application policytool.exe to load a malicious DLL.", "S0554": " Egregor  : Egregor has used DLL side-loading to execute its payload. ", "S0182": " FinFisher  : FinFisher uses DLL side-loading to load malicious programs.", "G0093": " GALLIUM  : GALLIUM used DLL side-loading to covertly load PoisonIvy into memory on the victim machine.", "S0032": " gh0st RAT  : A gh0st RAT variant has used DLL side-loading.", "S0477": " Goopy  : Goopy has the ability to side-load malicious DLLs with legitimate applications from Kaspersky, Microsoft, and Google.", "G0126": " Higaisa  : Higaisa\u2019s JavaScript file used a legitimate Microsoft Office 2007 package to side-load the  dynamic link library.", "S0070": " HTTPBrowser  : HTTPBrowser has used DLL side-loading.", "S0398": " HyperBro  : HyperBro has used a legitimate application to sideload a DLL to decrypt, decompress, and run a payload.", "S0528": " Javali  : Javali can use DLL side-loading to load malicious DLLs into legitimate executables.", "S0585": " Kerrdown  : Kerrdown can use DLL side-loading to load malicious DLLs.", "S0582": " LookBack  : LookBack side loads its communications module as a DLL into the  loader.", "G0045": " menuPass  : menuPass has used DLL side-loading to launch versions of Mimikatz and PwDump6 as well as UPPERCUT.", "S0455": " Metamorfo  : Metamorfo has side-loaded its malicious DLL file. ", "G0129": " Mustang Panda  : Mustang Panda has used a legitimately signed executable to execute a malicious payload within a DLL file.", "G0019": " Naikon  : Naikon has used DLL side-loading to load malicious DLL's into legitimate executables.", "S0630": " Nebulae  : Nebulae can use DLL side-loading to gain execution.", "G0040": " Patchwork  : A Patchwork .dll that contains BADNEWS is loaded and executed using DLL side-loading.", "S0013": " PlugX  : PlugX has used DLL side-loading to evade anti-virus.", "S0629": " RainyDay  : RainyDay can use side-loading to run malicious executables.", "S0074": " Sakula  : Sakula uses DLL side-loading, typically using a digitally signed sample of Kaspersky Anti-Virus (AV) 6.0 for Windows Workstations or McAfee's Outlook Scan About Box to load malicious DLL files.", "G0121": " Sidewinder  : Sidewinder has used DLL side-loading to drop and execute malicious payloads including the hijacking of the legitimate Windows application file rekeywiz.exe.", "S0098": " T9000  : During the T9000 installation process, it drops a copy of the legitimate Microsoft binary igfxtray.exe. The executable contains a side-loading weakness which is used to load a portion of the malware.", "G0027": " Threat Group-3390  : Threat Group-3390 has used DLL side-loading, including by using legitimate Kaspersky antivirus variants in which the DLL acts as a stub loader that loads and executes the shell code.", "G0081": " Tropic Trooper  : Tropic Trooper has been known to side-load DLLs using a valid version of a Windows Address Book and Windows Defender executable with one of their tools.", "S0579": " Waterbear  : Waterbear has used DLL side loading to import and load a malicious DLL loader. ", "S0176": " Wingbird  : Wingbird side loads a malicious file, sspisrv.dll, in part of a spoofed lssas.exe service.", "S0230": " ZeroT  : ZeroT has used DLL side-loading to load malicious payloads."}, "id": "T1574.002", "subtechniqueof": "T1574", "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["Windows"], "defensebypassed": ["Anti-virus, Application control"], "capecid": ["CAPEC-641"], "version": "2.0", "created": "13 March 2020", "lastmodified": "26 April 2021"}, {"techniquename": "COR_PROFILER", "detection": "For detecting system and user scope abuse of the COR_PROFILER, monitor the Registry for changes to COR_ENABLE_PROFILING, COR_PROFILER, and COR_PROFILER_PATH that correspond to system and user environment variables that do not correlate to known developer tools. Extra scrutiny should be placed on suspicious modification of these Registry keys by command line tools like wmic.exe, setx.exe, and , monitoring for command-line arguments indicating a change to COR_PROFILER variables may aid in detection. For system, user, and process scope abuse of the COR_PROFILER, monitor for new suspicious unmanaged profiling DLLs loading into .NET processes shortly after the CLR causing abnormal process behavior. Consider monitoring for DLL files that are associated with COR_PROFILER environment variables.", "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook and Impair Defenses provided by .NET processes.", "mitigations": {"M1038": " Execution Prevention  : Identify and block potentially malicious unmanaged COR_PROFILER profiling DLLs  by using application control solutions like AppLocker that are capable of auditing and/or blocking unapproved DLLs.", "M1024": " Restrict Registry Permissions  : Ensure proper permissions are set for Registry hives to prevent users from modifying keys associated with COR_PROFILER.", "M1018": " User Account Management  : Limit the privileges of user accounts so that only authorized administrators can edit system environment variables."}, "procedureexamples": {"G0108": " Blue Mockingbird  : Blue Mockingbird has used wmic.exe and Windows Registry modifications to set the COR_PROFILER environment variable to execute a malicious DLL whenever a process loads the .NET CLR."}, "id": "T1574.012", "subtechniqueof": "T1574", "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "contributors": ["Jesse Brown, Red Canary"], "version": "1.0", "created": "24 June 2020", "lastmodified": "30 August 2021"}, {"techniquename": "Dylib Hijacking", "detection": "Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. Run path dependent libraries can include , , and . Other special keywords are recognized by the macOS loader are , , and . These loader instructions can be examined for individual binaries or frameworks using the  command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.", "description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with , which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the  function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path. Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Set directory access controls to prevent file writes to the search paths for applications, both in the folders where applications are run from and the standard dylib folders."}, "procedureexamples": {"S0363": " Empire  : Empire has a dylib hijacker module that generates a malicious dylib given the path to a legitimate dylib of a vulnerable application."}, "id": "T1574.004", "subtechniqueof": "T1574", "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["macOS"], "defensebypassed": ["Application control"], "capecid": ["CAPEC-471"], "version": "2.0", "created": "16 March 2020", "lastmodified": "27 April 2021"}, {"techniquename": "Executable Installer File Permissions Weakness", "detection": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.", "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the  directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.   If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.", "mitigations": {"M1047": " Audit  : Use auditing tools capable of detecting file system permissions abuse opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for service file system permissions weaknesses.", "M1052": " User Account Control  : Turn off UAC's privilege elevation for standard users  to automatically deny elevation requests, add: . Consider enabling installer detection for all users by adding: . This will prompt for a password for installation and also log the attempt. To disable installer detection, instead add: . This may prevent potential elevation of privileges through exploitation during the process of UAC detecting the installer, but will allow the installation process to continue without being logged.  ", "M1018": " User Account Management  : Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Deny execution from user directories such as file download directories and temp directories where able."}, "id": "T1574.005", "subtechniqueof": "T1574", "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "effectivepermissions": ["Administrator, SYSTEM, User"], "contributors": ["Stefan Kanthak; Travis Smith, Tripwire"], "version": "1.0", "created": "13 March 2020", "lastmodified": "26 March 2020"}, {"techniquename": "Path Interception by Search Order Hijacking", "detection": "Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike DLL Search Order Hijacking, the search order differs depending on the method that is used to execute the program.    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.For example, \"example.exe\" runs \"cmd.exe\" with the command-line argument . An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then  will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. Search order hijacking is also a common practice for hijacking DLL loads and is covered in DLL Search Order Hijacking.", "mitigations": {"M1047": " Audit  : Find and eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them. Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate.Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries. Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations.", "M1038": " Execution Prevention  : Adversaries will likely need to place new binaries in locations to be executed through this weakness. Identify and block potentially malicious software executed path interception by using application control tools, like Windows Defender Application Control, AppLocker, or Software Restriction Policies where appropriate.", "M1022": " Restrict File and Directory Permissions  : Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory  and system directories, such as , to reduce places where malicious files could be placed for execution. Require that all executables be placed in write-protected directories."}, "procedureexamples": {"S0363": " Empire  : Empire contains modules that can discover and exploit search order hijacking vulnerabilities.", "S0194": " PowerSploit  : PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit search order hijacking vulnerabilities."}, "id": "T1574.008", "subtechniqueof": "T1574", "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM, User"], "effectivepermissions": ["Administrator, SYSTEM, User"], "capecid": ["CAPEC-159"], "contributors": ["Stefan Kanthak"], "version": "1.0", "created": "13 March 2020", "lastmodified": "17 September 2020"}, {"techniquename": "Path Interception by PATH Environment Variable", "detection": "Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory,  (e.g., ), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.For example, if  precedes C:\\Windows\\system32 is in the PATH environment variable, a program that is named net.exe and placed in  will be called instead of the Windows system \"net\" when \"net\" is executed from the command-line.", "mitigations": {"M1047": " Audit  : Find and eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them. Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate.Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries. Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations.", "M1038": " Execution Prevention  : Adversaries will likely need to place new binaries in locations to be executed through this weakness. Identify and block potentially malicious software executed path interception by using application control tools, like Windows Defender Application Control, AppLocker, or Software Restriction Policies where appropriate.", "M1022": " Restrict File and Directory Permissions  : Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory  and system directories, such as , to reduce places where malicious files could be placed for execution. Require that all executables be placed in write-protected directories."}, "procedureexamples": {"S0363": " Empire  : Empire contains modules that can discover and exploit path interception opportunities in the PATH environment variable.", "S0194": " PowerSploit  : PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit path interception opportunities in the PATH environment variable."}, "id": "T1574.007", "subtechniqueof": "T1574", "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["Windows"], "defensebypassed": ["Application control"], "capecid": ["CAPEC-13,", "CAPEC-38"], "contributors": ["Stefan Kanthak"], "version": "1.0", "created": "13 March 2020", "lastmodified": "16 September 2020"}, {"techniquename": "Path Interception by Unquoted Path", "detection": "Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.Service paths  and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  vs. ).  (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is , an adversary may create a program at  that will be run instead of the intended program.  This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.", "mitigations": {"M1047": " Audit  : Find and eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them. Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate.Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries. Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations.", "M1038": " Execution Prevention  : Adversaries will likely need to place new binaries in locations to be executed through this weakness. Identify and block potentially malicious software executed path interception by using application control tools, like Windows Defender Application Control, AppLocker, or Software Restriction Policies where appropriate.", "M1022": " Restrict File and Directory Permissions  : Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory  and system directories, such as , to reduce places where malicious files could be placed for execution. Require that all executables be placed in write-protected directories."}, "procedureexamples": {"S0363": " Empire  : Empire contains modules that can discover and exploit unquoted path vulnerabilities.", "S0194": " PowerSploit  : PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit unquoted path vulnerabilities."}, "id": "T1574.009", "subtechniqueof": "T1574", "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["Windows"], "capecid": ["CAPEC-38"], "contributors": ["Stefan Kanthak"], "version": "1.1", "created": "13 March 2020", "lastmodified": "17 September 2020"}, {"techniquename": "Services Registry Permissions Weakness", "detection": "Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.  Look for changes to services that do not correlate with known software, patch cycles, etc. Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.Monitor processes and command-line arguments for actions that could be done to modify services. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Services may also be changed through Windows system management tools such as  and , so additional logging may need to be configured to gather the appropriate data.", "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under . The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions. If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).Adversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the  key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.The  key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL. If the  key is not already present and if an adversary-controlled user has the  permission, adversaries may create the  key in the service\u2019s Registry tree to point to a malicious DLL.Adversaries may also add the  key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities. Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using .", "mitigations": {"M1024": " Restrict Registry Permissions  : Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation. "}, "id": "T1574.011", "subtechniqueof": "T1574", "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "effectivepermissions": ["SYSTEM"], "defensebypassed": ["Application control"], "capecid": ["CAPEC-478"], "contributors": ["Matthew Demaske, Adaptforward; Travis Smith, Tripwire"], "version": "1.1", "created": "13 March 2020", "lastmodified": "14 October 2021"}, {"techniquename": "Services File Permissions Weakness", "detection": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques. ", "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.", "mitigations": {"M1047": " Audit  : Use auditing tools capable of detecting file system permissions abuse opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for service file system permissions weaknesses.", "M1052": " User Account Control  : Turn off UAC's privilege elevation for standard users to automatically deny elevation requests, add: . Consider enabling installer detection for all users by adding: . This will prompt for a password for installation and also log the attempt. To disable installer detection, instead add: . This may prevent potential elevation of privileges through exploitation during the process of UAC detecting the installer, but will allow the installation process to continue without being logged.", "M1018": " User Account Management  : Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Deny execution from user directories such as file download directories and temp directories where able."}, "procedureexamples": {"S0089": " BlackEnergy  : One variant of BlackEnergy locates existing driver services that have been disabled and drops its driver component into one of those service's paths, replacing the legitimate executable. The malware then sets the hijacked service to start automatically to establish persistence."}, "id": "T1574.010", "subtechniqueof": "T1574", "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "effectivepermissions": ["Administrator, SYSTEM, User"], "capecid": ["CAPEC-17"], "contributors": ["Stefan Kanthak; Travis Smith, Tripwire"], "version": "1.0", "created": "12 March 2020", "lastmodified": "16 September 2020"}, {"techniquename": "Component Object Model Hijacking", "detection": "There are opportunities to detect COM hijacking by searching for Registry references that have been replaced and through Registry operations (ex: ) replacing known binary paths with unknown paths or otherwise malicious content. Even though some third-party applications define user COM objects, the presence of objects within HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\ may be anomalous and should be investigated since user objects will be loaded prior to machine objects in HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID. Registry entries for existing COM objects may change infrequently. When an entry with a known good path and binary is replaced or changed to an unusual value to point to an unknown binary in a new location, then it may indicate suspicious behavior and should be investigated.  Likewise, if software DLL loads are collected and analyzed, any unusual DLL load that can be correlated with a COM object Registry modification may indicate COM hijacking has been performed. ", "description": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.  References to various COM objects are stored in the Registry. Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection. ", "procedureexamples": {"S0045": " ADVSTORESHELL  : Some variants of ADVSTORESHELL achieve persistence by registering the payload as a Shell Icon Overlay handler COM object.", "G0007": " APT28  : APT28 has used COM hijacking for persistence by replacing the legitimate  object with a payload.", "S0127": " BBSRAT  : BBSRAT has been seen persisting via COM hijacking through replacement of the COM object for MruPidlList  or Microsoft WBEM New Event Subsystem  depending on the system's CPU architecture.", "S0126": " ComRAT  : ComRAT samples have been seen which hijack COM objects for persistence by replacing the path to shell32.dll in registry location .", "S0044": " JHUHUGIT  : JHUHUGIT has used COM hijacking to establish persistence by hijacking a class named MMDeviceEnumerator and also by registering the payload as a Shell Icon Overlay handler COM object ({{3543619C-D563-43f7-95EA-4DA7E1CC396A}}).", "S0356": " KONNI  : KONNI has modified ComSysApp service to load the malicious DLL payload.", "S0256": " Mosquito  : Mosquito uses COM hijacking as a method of persistence."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1546.015", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["User"], "contributors": ["Elastic"], "version": "1.0", "created": "16 March 2020", "lastmodified": "10 November 2020"}, {"techniquename": "Hijack Execution Flow", "detection": "Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Monitor for changes to environment variables, as well as the commands to implement these changes.Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.  Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.", "mitigations": {"M1013": " Application Developer Guidance  : When possible, include hash values in manifest files to help prevent side-loading of malicious libraries.", "M1047": " Audit  : Use auditing tools capable of detecting hijacking opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for hijacking weaknesses.Use the program sxstrace.exe that is included with Windows along with manual inspection to check manifest files for side-loading vulnerabilities in software.Find and eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them. Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate.Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries. Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations.", "M1038": " Execution Prevention  : Adversaries may use new payloads to execute this technique. Identify and block potentially malicious software executed through hijacking by using application control solutions also capable of blocking libraries loaded by legitimate software.", "M1022": " Restrict File and Directory Permissions  : Install software in write-protected locations. Set directory access controls to prevent file writes to the search paths for applications, both in the folders where applications are run from and the standard library folders.", "M1044": " Restrict Library Loading  : Disallow loading of remote DLLs. This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+.Enable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. )to be used before local directory DLLs (e.g. a user's home directory)The Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration > [Policies] > Administrative Templates > MSS (Legacy): MSS: (SafeDllSearchMode) Enable Safe DLL search mode. The associated Windows Registry key for this is located at ", "M1024": " Restrict Registry Permissions  : Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.", "M1051": " Update Software  : Update software regularly to include patches that fix DLL side-loading vulnerabilities.", "M1052": " User Account Control  : Turn off UAC's privilege elevation for standard users  to automatically deny elevation requests, add: . Consider enabling installer detection for all users by adding: . This will prompt for a password for installation and also log the attempt. To disable installer detection, instead add: . This may prevent potential elevation of privileges through exploitation during the process of UAC detecting the installer, but will allow the installation process to continue without being logged.  ", "M1018": " User Account Management  : Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Deny execution from user directories such as file download directories and temp directories where able.Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory  and system directories, such as , to reduce places where malicious files could be placed for execution."}, "procedureexamples": {"S0354": " Denis  : Denis replaces the nonexistent Windows DLL \"msfte.dll\" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe.", "S0567": " Dtrack  : One of Dtrack can replace the normal flow of a program execution with malicious code.", "S0444": " ShimRat  : ShimRat can hijack the cryptbase.dll within migwiz.exe to escalate privileges and bypass UAC controls."}, "id": "T1574", "subtechniques": ["T1574.001", "T1574.002", "T1574.004", "T1574.005", "T1574.006", "T1574.007", "T1574.008", "T1574.009", "T1574.010", "T1574.011", "T1574.012"], "tactics": ["Persistence", "Privilege Escalation", "Defense Evasion"], "platforms": ["Linux, Windows, macOS"], "defensebypassed": ["Anti-virus, Application control"], "version": "1.1", "created": "12 March 2020", "lastmodified": "14 October 2021"}, {"techniquename": "Emond", "detection": "Monitor emond rules creation by checking for files created or modified in  and .", "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at  will load any rules from the  directory and take action once an explicitly defined event takes place.The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path , specified in the Launch Daemon configuration file at.Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the Launch Daemon service.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Consider disabling emond by removing the Launch Daemon plist file."}, "id": "T1546.014", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["macOS"], "permissionsrequired": ["Administrator"], "contributors": ["Ivan Sinyakov"], "version": "1.0", "created": "24 January 2020", "lastmodified": "24 March 2020"}, {"techniquename": "Image File Execution Options Injection", "detection": "Monitor for abnormal usage of the GFlags tool as well as common processes spawned under abnormal parents and/or with creation flags indicative of debugging such as  and . Monitor Registry values associated with IFEOs, as well as silent process exit monitoring, for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as  and . ", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., ). IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.  IFEOs are represented as  values in the Registry under  where  is the binary on which the debugger is attached. IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).   Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in .  Similar to Accessibility Features, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with Remote Desktop Protocol will cause the \"debugger\" program to be executed with SYSTEM privileges. Similar to Process Injection, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.  Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.Malware may also use IFEO to Impair Defenses by registering invalid debuggers that redirect and effectively disable various system and security applications.  ", "procedureexamples": {"S0461": " SDBbot  : SDBbot has the ability to use image file execution options for persistence if it detects it is running with admin privileges on a Windows version newer than Windows 7.", "S0559": " SUNBURST  : SUNBURST created an Image File Execution Options (IFEO) Debugger registry value for the process  to trigger the installation of Cobalt Strike.", "G0088": " TEMP.Veles  : TEMP.Veles has modified and added entries within  to maintain persistence. "}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1546.012", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["Oddvar Moe, @oddvarmoe"], "version": "1.1", "created": "24 January 2020", "lastmodified": "10 November 2020"}, {"techniquename": "PowerShell Profile", "detection": "Locations where  can be stored should be monitored for new profiles or modifications.  Example profile locations include:Monitor abnormal PowerShell commands, unusual loading of PowerShell drives or modules, and/or execution of unknown programs.", "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  () is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.  Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the  flag is used when it is launched.  An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. ", "mitigations": {"M1045": " Code Signing  : Enforce execution of only signed PowerShell scripts. Sign profiles to avoid them from being modified.", "M1022": " Restrict File and Directory Permissions  : Making PowerShell profiles immutable and only changeable by certain administrators will limit the ability for adversaries to easily create user level persistence.", "M1054": " Software Configuration  : Avoid PowerShell profiles if not needed. Use the -No Profile flag with when executing PowerShell scripts remotely to prevent local profiles and scripts from being executed."}, "procedureexamples": {"G0010": " Turla  : Turla has used PowerShell profiles to maintain persistence on an infected machine."}, "id": "T1546.013", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "contributors": ["Allen DeRyke, ICE"], "version": "1.0", "created": "24 January 2020", "lastmodified": "24 March 2020"}, {"techniquename": "AppCert DLLs", "detection": "Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.  Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location.  Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the  Registry key under  are loaded into every process that calls the ubiquitously used application programming interface (API) functions , , , , or . Similar to Process Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity. ", "mitigations": {"M1038": " Execution Prevention  : Adversaries install new AppCertDLL binaries to execute this technique. Identify and block potentially malicious software executed through AppCertDLLs functionality by using application control  tools, like Windows Defender Application Control, AppLocker,   or Software Restriction Policies  where appropriate. "}, "procedureexamples": {"G0072": " Honeybee  : Honeybee's service-based DLL implant can execute a downloaded file with parameters specified using .", "S0196": " PUNCHBUGGY  : PUNCHBUGGY can establish using a AppCertDLLs Registry key."}, "id": "T1546.009", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "effectivepermissions": ["Administrator, SYSTEM"], "version": "1.0", "created": "24 January 2020", "lastmodified": "10 November 2020"}, {"techniquename": "Application Shimming", "detection": "There are several public tools available that will detect shims that are currently available :Monitor process execution for sdbinst.exe and command-line arguments for potential indications of application shim abuse.", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:Custom databases are stored in:To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  Shims can also be abused to establish persistence by continuously being invoked by affected programs.", "mitigations": {"M1051": " Update Software  : Microsoft released an optional patch update - KB3045645 - that will remove the \"auto-elevate\" flag within the sdbinst.exe. This will prevent use of application shimming to bypass UAC.", "M1052": " User Account Control  : Changing UAC settings to \"Always Notify\" will give the user more visibility when UAC elevation is requested, however, this option will not be popular among users due to the constant UAC interruptions."}, "procedureexamples": {"G0046": " FIN7  : FIN7 has used application shim databases for persistence.", "S0517": " Pillowmint  : Pillowmint has used a malicious shim database to maintain persistence.", "S0461": " SDBbot  : SDBbot has the ability to use application shimming for persistence if it detects it is running as admin on Windows XP or 7, by creating a shim database to patch services.exe.", "S0444": " ShimRat  : ShimRat has installed shim databases in the  folder."}, "id": "T1546.011", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "24 January 2020", "lastmodified": "10 November 2020"}, {"techniquename": "Screensaver", "detection": "Monitor process execution and command-line parameters of .scr files. Monitor changes to screensaver configuration changes in the Registry that may not correlate with typical user behavior.Tools such as Sysinternals Autoruns can be used to detect changes to the screensaver binary path in the Registry. Suspicious paths and PE files may indicate outliers among legitimate screensavers in a network and should be investigated.", "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in , and   on 64-bit Windows systems, along with screensavers included with base Windows installations.The following screensaver settings are stored in the Registry () and could be manipulated to achieve persistence:Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity. ", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Use Group Policy to disable screensavers if they are unnecessary.", "M1038": " Execution Prevention  : Block .scr files from being executed from non-standard locations."}, "procedureexamples": {"S0168": " Gazer  : Gazer can establish persistence through the system screensaver by configuring it to execute the malware."}, "id": "T1546.002", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["User"], "contributors": ["Bartosz Jerzman"], "version": "1.0", "created": "24 January 2020", "lastmodified": "23 March 2020"}, {"techniquename": "LC_LOAD_DYLIB Addition", "detection": "Monitor processes for those that may be used to modify binary headers. Monitor file systems for changes to application binaries and invalid checksums/signatures. Changes to binaries that do not line up with application updates or patches are also extremely suspicious.", "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies.  There are tools available to perform these changes.Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019t checked at load time. ", "mitigations": {"M1047": " Audit  : Binaries can also be baselined for what dynamic libraries they require, and if an app requires a new dynamic library that wasn\\u2019t included as part of an update, it should be investigated.", "M1045": " Code Signing  : Enforce that all binaries be signed by the correct Apple Developer IDs.", "M1038": " Execution Prevention  : Allow applications via known hashes."}, "id": "T1546.006", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "24 January 2020", "lastmodified": "30 March 2021"}, {"techniquename": "AppInit DLLs", "detection": "Monitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process. Monitor the AppInit_DLLs Registry values for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as  and . Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs.  Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the  value in the Registry keys  or  are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.  Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. ", "mitigations": {"M1038": " Execution Prevention  : Adversaries can install new AppInit DLLs binaries to execute this technique. Identify and block potentially malicious software executed through AppInit DLLs functionality by using application control  tools, like Windows Defender Application Control, AppLocker,   or Software Restriction Policies  where appropriate. ", "M1051": " Update Software  : Upgrade to Windows 8 or later and enable secure boot."}, "procedureexamples": {"G0087": " APT39  : APT39 has used malware to set  in the Registry key  in order to establish persistence.", "S0107": " Cherry Picker  : Some variants of Cherry Picker use AppInit_DLLs to achieve persistence by creating the following Registry key: ", "S0458": " Ramsay  : Ramsay can insert itself into the address space of other applications using the AppInit DLL Registry key.    ", "S0098": " T9000  : If a victim meets certain criteria, T9000 uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys:  and ."}, "id": "T1546.010", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Windows"], "systemrequirements": ["Secure boot disabled on systems running Windows 8 and later"], "permissionsrequired": ["Administrator"], "effectivepermissions": ["Administrator, SYSTEM"], "version": "1.0", "created": "24 January 2020", "lastmodified": "10 November 2020"}, {"techniquename": "Windows Management Instrumentation Event Subscription", "detection": "Monitor WMI event subscription entries, comparing current WMI event subscriptions to known good subscriptions for each host. Tools such as Sysinternals Autoruns may also be used to detect WMI changes that could be attempts at persistence.   Monitor for the creation of new WMI , , and  events. Event ID 5861 is logged on Windows 10 systems when new  events are created.Monitor processes and command-line arguments that can be used to register WMI persistence, such as the   cmdlet , as well as those that result from the execution of subscriptions (i.e. spawning from the WmiPrvSe.exe WMI Provider Host process).", "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.   Adversaries may also compile WMI scripts into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.  WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent malware from abusing WMI to attain persistence.", "M1026": " Privileged Account Management  : Prevent credential overlap across systems of administrator and privileged accounts.", "M1018": " User Account Management  : By default, only administrators are allowed to connect remotely using WMI; restrict other users that are allowed to connect, or disallow all users from connecting remotely to WMI."}, "procedureexamples": {"S0202": " adbupd  : adbupd can use a WMI script to achieve persistence.", "G0016": " APT29  : APT29 has used WMI event subscriptions for persistence.", "G0064": " APT33  : APT33 has attempted to use WMI event subscriptions to establish persistence on compromised hosts.", "G0108": " Blue Mockingbird  : Blue Mockingbird has used mofcomp.exe to establish WMI Event Subscription persistence mechanisms configured from a *.mof file.", "G0061": " FIN8  : FIN8 has used WMI event subscriptions for persistence.", "G0065": " Leviathan  : Leviathan has used WMI for persistence.", "G0129": " Mustang Panda  : Mustang Panda's custom ORat tool uses a WMI event consumer to maintain persistence.", "S0378": " PoshC2  : PoshC2 has the ability to persist on a system using WMI events.", "S0150": " POSHSPY  : POSHSPY uses a WMI event subscription to establish persistence.", "S0371": " POWERTON  : POWERTON can use WMI for persistence.", "S0511": " RegDuke  : RegDuke can persist using a WMI consumer that is launched every time a process named WINWORD.EXE is started.", "S0053": " SeaDuke  : SeaDuke uses an event filter in WMI code to execute a previously dropped executable shortly after system startup.", "G0010": " Turla  : Turla has used WMI event filters and consumers to establish persistence."}, "id": "T1546.003", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["Brent Murphy, Elastic; David French, Elastic"], "version": "1.2", "created": "24 January 2020", "lastmodified": "16 October 2021"}, {"techniquename": "Unix Shell Configuration Modification", "detection": "While users may customize their shell profile files, there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.Monitor for changes to  and , these files should only be modified by system administrators. MacOS users can leverage Endpoint Security Framework file events monitoring these specific files. For most Linux and macOS systems, a list of file paths for valid shell options available on a system are located in the  file.", "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system () and the user\u2019s home directory () to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the  and  files. These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into , , or  which are sourced when a user opens a command-line interface or connects remotely. Since the system only executes the first existing file in the listed order, adversaries have used  to ensure execution. Adversaries have also leveraged the  file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface. Some malware targets the termination of a program to trigger execution, adversaries can use the  file to execute malicious commands at the end of a session. For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using , , , and . The login shell then configures the user environment with  and . The interactive shell uses the  to configure the user environment. Upon exiting,  and  are executed. For legacy programs, macOS executes  on startup.", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Making these files immutable and only changeable by certain administrators will limit the ability for adversaries to easily create user level persistence."}, "procedureexamples": {"S0362": " Linux Rabbit  : Linux Rabbit maintains persistence on an infected machine through rc.local and .bashrc files. "}, "id": "T1546.004", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Linux, macOS"], "permissionsrequired": ["Administrator, User"], "contributors": ["Robert Wilson; Tony Lambert, Red Canary"], "version": "2.1", "created": "24 January 2020", "lastmodified": "20 August 2021"}, {"techniquename": "Trap", "detection": "Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.", "description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The  command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like  and .Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format  where \"command list\" will be executed when \"signals\" are received.", "id": "T1546.005", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Linux, macOS"], "permissionsrequired": ["Administrator, User"], "version": "1.0", "created": "24 January 2020", "lastmodified": "24 March 2020"}, {"techniquename": "Accessibility Features", "detection": "Changes to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc., are suspicious. Command line invocation of tools capable of modifying the Registry for associated keys are also suspicious. Utility arguments and the binaries themselves should be monitored for changes. Monitor Registry keys within .", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.Two common accessibility programs are , launched when the shift key is pressed five times and , launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in , and it must be protected by Windows File or Resource Protection (WFP/WRP).  The Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., ) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges. Other accessibility features exist that may also be leveraged in a similar fashion: ", "mitigations": {"M1038": " Execution Prevention  : Adversaries can replace accessibility features binaries with alternate binaries to execute this technique. Identify and block potentially malicious software executed through accessibility features functionality by using application control  tools, like Windows Defender Application Control, AppLocker,   or Software Restriction Policies  where appropriate. ", "M1035": " Limit Access to Resource Over Network  : If possible, use a Remote Desktop Gateway to manage connections and security configuration of RDP within a network.", "M1028": " Operating System Configuration  : To use this technique remotely, an adversary must use it in conjunction with RDP. Ensure that Network Level Authentication is enabled to force the remote desktop session to authenticate before the session is created and the login screen displayed. It is enabled by default on Windows Vista and later."}, "procedureexamples": {"G0016": " APT29  : APT29 used sticky-keys to obtain unauthenticated, privileged console access.", "G0022": " APT3  : APT3 replaces the Sticky Keys binary  for persistence.", "G0096": " APT41  : APT41 leveraged sticky keys to establish persistence. ", "G0001": " Axiom  : Axiom actors have been known to use the Sticky Keys replacement within RDP sessions to obtain persistence.", "G0009": " Deep Panda  : Deep Panda has used the sticky-keys technique to bypass the RDP login screen on remote systems during intrusions.", "S0363": " Empire  : Empire can leverage WMI debugging to remotely replace binaries like sethc.exe, Utilman.exe, and Magnify.exe with cmd.exe.", "G0117": " Fox Kitten  : Fox Kitten has used sticky keys to launch a command prompt."}, "id": "T1546.008", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "effectivepermissions": ["SYSTEM"], "capecid": ["CAPEC-558"], "contributors": ["Paul Speulstra, AECOM Global Security Operations Center"], "version": "1.0", "created": "24 January 2020", "lastmodified": "13 May 2020"}, {"techniquename": "Windows Service", "detection": "Monitor processes and command-line arguments for actions that could create or modify services. Command-line invocation of tools capable of adding or modifying services may be unusual, depending on how systems are typically used in a particular environment. Services may also be modified through Windows system management tools such as  and , so additional logging may need to be configured to gather the appropriate data. Remote access tools with built-in features may also interact directly with the Windows API to perform these functions outside of typical system utilities. Collect service utility execution and service binary path arguments used for analysis. Service binary paths may even be changed to execute commands or scripts.  Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Service information is stored in the Registry at . Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence.  Creation of new services may generate an alterable event (ex: Event ID 4697 and/or 7045 ). New, benign services may be created during installation of new software.Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and Reg. Adversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.An adversary may also incorporate Masquerading by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution. ", "mitigations": {"M1047": " Audit  : Use auditing tools capable of detecting privilege and service abuse opportunities on systems within an enterprise and correct them. ", "M1018": " User Account Management  : Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations. "}, "procedureexamples": {"S0504": " Anchor  : Anchor can establish persistence by creating a service.  ", "S0584": " AppleJeus  : AppleJeus can install itself as a service. ", "G0073": " APT19  : An APT19 Port 22 malware variant registers itself as a service.", "G0022": " APT3  : APT3 has a tool that creates a new service for persistence.", "G0050": " APT32  : APT32 modified Windows Services to ensure PowerShell scripts were loaded on the system. APT32 also creates a Windows service to establish persistence.", "G0082": " APT38  : APT38 has installed a new Windows service to establish persistence.", "G0096": " APT41  : APT41 modified legitimate Windows services to install malware backdoors. APT41 created the StorSyncSvc service to provide persistence for Cobalt Strike.", "S0438": " Attor  : Attor's dispatcher can establish persistence by registering a new service.", "S0347": " AuditCred  : AuditCred is installed as a new service on the system.", "S0239": " Bankshot  : Bankshot can terminate a specific process by its process id.", "S0127": " BBSRAT  : BBSRAT can modify service configurations.", "S0570": " BitPaymer  : BitPaymer has attempted to install itself as a service to maintain persistence.", "S0089": " BlackEnergy  : One variant of BlackEnergy creates a new service using either a hard-coded or randomly generated name.", "G0108": " Blue Mockingbird  : Blue Mockingbird has made their XMRIG payloads persistent as a Windows Service.", "S0204": " Briba  : Briba installs a service pointing to a malicious DLL dropped to disk.", "G0008": " Carbanak  : Carbanak malware installs itself as a service to provide persistence and SYSTEM privileges.", "S0335": " Carbon  : Carbon establishes persistence by creating a service and naming it based off the operating system version running on the current machine.", "S0261": " Catchamas  : Catchamas adds a new service named NetAdapter to establish persistence.", "G0080": " Cobalt Group  : Cobalt Group has created new services to establish persistence.", "S0154": " Cobalt Strike  : Cobalt Strike can install a new service.", "S0608": " Conficker  : Conficker copies itself into the  directory and registers as a service.", "S0050": " CosmicDuke  : CosmicDuke uses Windows services typically named \"javamtsup\" for persistence.", "S0046": " CozyCar  : One persistence mechanism used by CozyCar is to register itself as a Windows service.", "S0625": " Cuba  : Cuba can modify services by using the  and  functions. ", "G0105": " DarkVishnya  : DarkVishnya created new services for shellcode loaders distribution.", "S0567": " Dtrack  : Dtrack can add a service called WBService to establish persistence.", "S0038": " Duqu  : Duqu creates a new service that loads a malicious driver when the system starts. When Duqu is active, the operating system believes that the driver is legitimate, as it has been signed with a valid private key.", "S0024": " Dyre  : Dyre registers itself as a service by adding several Registry keys.", "S0081": " Elise  : Elise configures itself as a service.", "S0082": " Emissary  : Emissary is capable of configuring itself as a service.", "S0367": " Emotet  : Emotet has been observed creating new services to maintain persistence.  ", "S0363": " Empire  : Empire can utilize built-in modules to modify service binaries and restore them to their original state.", "S0343": " Exaramel for Windows  : The Exaramel for Windows dropper creates and starts a Windows service named wsmprovav with the description \"Windows Check AV.\"", "S0181": " FALLCHILL  : FALLCHILL has been installed as a Windows service.", "G0046": " FIN7  : FIN7 created new Windows services and added them to the startup directories for persistence.", "S0182": " FinFisher  : FinFisher creates a new Windows service with the malicious executable for persistence.", "S0032": " gh0st RAT  : gh0st RAT can create a new service to establish persistence.", "S0493": " GoldenSpy  : GoldenSpy has established persistence by running in the background as an autostart service. ", "S0342": " GreyEnergy  : GreyEnergy chooses a service, drops a DLL file, and writes it to that serviceDLL Registry key.", "S0071": " hcdLoader  : hcdLoader installs itself as a service for persistence.", "G0072": " Honeybee  : Honeybee has batch files that modify the system service COMSysApp to load a malicious DLL.", "S0203": " Hydraq  : Hydraq creates new services to establish persistence.", "S0604": " Industroyer  : Industroyer can use an arbitrary system service to load at system boot for persistence and replaces the ImagePath registry value of a Windows service with a new backdoor binary. ", "S0259": " InnaputRAT  : Some InnaputRAT variants create a new Windows service to establish persistence.", "S0260": " InvisiMole  : InvisiMole can register a Windows service named CsPower as part of its execution chain, and a Windows service named clr_optimization_v2.0.51527_X86 to achieve persistence.", "S0044": " JHUHUGIT  : JHUHUGIT has registered itself as a service to establish persistence.", "S0265": " Kazuar  : Kazuar can install itself as a new service.", "G0004": " Ke3chang  : Ke3chang backdoor RoyalDNS established persistence through adding a service called .", "S0387": " KeyBoy  : KeyBoy installs a service pointing to a malicious DLL dropped to disk.", "G0094": " Kimsuky  : Kimsuky has created new services for persistence.", "S0236": " Kwampirs  : Kwampirs creates a new service named WmiApSrvEx to establish persistence.", "G0032": " Lazarus Group  : Several Lazarus Group malware families install themselves as new services on victims.", "S0451": " LoudMiner  : LoudMiner can automatically launch a Linux virtual machine as a service at startup if the AutoStart option is enabled in the VBoxVmService configuration file.", "S0149": " MoonWind  : MoonWind installs itself as a new service with automatic startup to establish persistence. The service checks every 60 seconds to determine if the malware is running; if not, it will spawn a new instance.", "S0205": " Naid  : Naid creates a new service to establish.", "S0630": " Nebulae  : Nebulae can create a service to establish persistence.", "S0210": " Nerex  : Nerex creates a Registry subkey that registers a new service.", "S0118": " Nidiran  : Nidiran can create a new service named msamger (Microsoft Security Accounts Manager).", "S0439": " Okrum  : To establish persistence, Okrum can install itself as a new service named NtmSsvc.", "S0501": " PipeMon  : PipeMon can establish persistence by registering a malicious DLL as an alternative Print Processor which is loaded when the print spooler service starts.", "S0013": " PlugX  : PlugX can be added as a service to establish persistence. PlugX also has a module to change service configurations as well as start, control, and delete services.", "S0012": " PoisonIvy  : PoisonIvy creates a Registry subkey that registers a new service. PoisonIvy also creates a Registry entry modifying the Logical Disk Manager service to point to a malicious DLL dropped to disk.", "S0194": " PowerSploit  : PowerSploit contains a collection of Privesc-PowerUp modules that can discover and replace/modify service binaries, paths, and configs.", "G0056": " PROMETHIUM  : PROMETHIUM has created new services and modified existing services for persistence.", "S0029": " PsExec  : PsExec can leverage Windows services to escalate privileges from administrator to SYSTEM with the  argument.", "S0481": " Ragnar Locker  : Ragnar Locker has used sc.exe to create a new service for the VirtualBox driver.", "S0629": " RainyDay  : RainyDay can use services to establish persistence.", "S0169": " RawPOS  : RawPOS installs itself as a service to maintain persistence.", "S0495": " RDAT  : RDAT has created a service when it is installed on the victim machine.  ", "S0172": " Reaver  : Reaver installs itself as a new service.", "S0074": " Sakula  : Some Sakula samples install themselves as services for persistence by calling WinExec with the  argument.", "S0345": " Seasalt  : Seasalt is capable of installing itself as a service.", "S0140": " Shamoon  : Shamoon creates a new service named \"ntssrv\" to execute the payload. Newer versions create the \"MaintenaceSrv\" and \"hdv_725x\" services.", "S0444": " ShimRat  : ShimRat has installed a Windows service to maintain persistence on victim machines.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has created a service on victim machines named \"TaskFrame\" to establish persistence.", "S0142": " StreamEx  : StreamEx establishes persistence by installing a new service pointing to its DLL and setting the service to auto-start.", "S0491": " StrongPity  : StrongPity has created new services and modified existing services for persistence.", "S0603": " Stuxnet  : Stuxnet uses a driver registered as a boot start service as the main load-point.", "S0164": " TDTESS  : If running as administrator, TDTESS installs itself as a new service named bmwappushservice to establish persistence.", "G0139": " TeamTNT  : TeamTNT uses malware that adds cryptocurrency miners as a service.", "S0560": " TEARDROP  : TEARDROP ran as a Windows service from the  folder.", "G0027": " Threat Group-3390  : A Threat Group-3390 tool can create a new service, naming it after the config information, to gain persistence.", "S0004": " TinyZBot  : TinyZBot can install as a Windows service for persistence.", "S0266": " TrickBot  : TrickBot establishes persistence by creating an autostart service that allows it to run whenever the machine boots.", "G0081": " Tropic Trooper  : Tropic Trooper has installed a service pointing to a malicious DLL dropped to disk.", "S0263": " TYPEFRAME  : TYPEFRAME variants can add malicious DLL modules as new services.TYPEFRAME can also delete services from the victim\u2019s machine.", "S0386": " Ursnif  : Ursnif has registered itself as a system service in the Registry for automatic execution at system startup.", "S0180": " Volgmer  : Volgmer installs a copy of itself in a randomly selected service, then overwrites the ServiceDLL entry in the service's Registry entry. Some Volgmer variants also install .dll files as services with names generated by a list of hard-coded strings.", "S0366": " WannaCry  : WannaCry creates the service \"mssecsvc2.0\" with the display name \"Microsoft Security Center (2.0) Service.\"", "S0612": " WastedLocker  : WastedLocker created and established a service that runs until the encryption process is complete. ", "S0206": " Wiarp  : Wiarp creates a backdoor through which remote attackers can create a service.", "S0176": " Wingbird  : Wingbird uses services.exe to register a new autostart service named \"Audit Service\" using a copy of the local lsass.exe file.", "S0141": " Winnti for Windows  : Winnti for Windows sets its DLL file as a new service in the Registry to establish persistence.", "G0102": " Wizard Spider  : Wizard Spider has installed TrickBot as a service named ControlServiceA in order to establish persistence.", "S0230": " ZeroT  : ZeroT can add a new service to ensure PlugX persists on the system when delivered as another payload onto the system.", "S0086": " ZLib  : ZLib creates Registry keys to allow itself to run as various services.", "S0350": " zwShell  : zwShell has established persistence by adding itself as a new service.", "S0412": " ZxShell  : ZxShell can create a new service using the service parser function ProcessScCommand. "}, "id": "T1543.003", "subtechniqueof": "T1543", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "effectivepermissions": ["Administrator, SYSTEM"], "capecid": ["CAPEC-478,", "CAPEC-550,", "CAPEC-551"], "contributors": ["Matthew Demaske, Adaptforward; Pedro Harrison; Travis Smith, Tripwire"], "version": "1.1", "created": "17 January 2020", "lastmodified": "16 September 2020"}, {"techniquename": "Change Default File Association", "detection": "Collect and analyze changes to Registry keys that associate file extensions to default applications for execution and correlate with unknown process launch activity or unusual file types for that process.User file association preferences are stored under  and override associations configured under . Changes to a user's preference will occur under this entry's subkeys.Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.", "description": "Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access   or by administrators using the built-in assoc utility.  Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.System file associations are listed under , for example . The entries point to a handler for that extension located at . The various commands are then listed as subkeys underneath the shell key at . For example:  * The values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands. ", "procedureexamples": {"G0094": " Kimsuky  : Kimsuky has a HWP document stealer module which changes the default program association in the registry to open HWP documents."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1546.001", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM, User"], "capecid": ["CAPEC-556"], "contributors": ["Stefan Kanthak; Travis Smith, Tripwire"], "version": "1.0", "created": "24 January 2020", "lastmodified": "24 January 2020"}, {"techniquename": "Launch Daemon", "detection": "Monitor for new files added to the  folder. The System LaunchDaemons are protected by SIP.Some legitimate LaunchDaemons point to unsigned code that could be exploited. For Launch Daemons with the  parameter set to true, ensure the  parameter points to signed code or executables are in alignment with enterprise policy. Some parameters are interchangeable with others, such as  and  parameters but one must be present.", "description": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in  and . Required Launch Daemons parameters include a  to identify the task,  to provide a path to the executable, and  to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.Adversaries may install a Launch Daemon configured to execute at startup by using the  parameter set to  and the  parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.Additionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as  to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.", "mitigations": {"M1047": " Audit  : Use auditing tools capable of detecting folder permissions abuse opportunities on systems, especially reviewing changes made to folders by third-party software.", "M1018": " User Account Management  : Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create new Launch Daemons."}, "procedureexamples": {"S0584": " AppleJeus  : AppleJeus has placed a plist file within the  folder and launched it manually.", "S0482": " Bundlore  : Bundlore can persist via a LaunchDaemon.", "S0497": " Dacls  : Dacls can establish persistence via a Launch Daemon.", "S0451": " LoudMiner  : LoudMiner adds plist files with the naming format  in the  folder with the RunAtLoad and KeepAlive keys set to .", "S0352": " OSX_OCEANLOTUS.D  : If running with  permissions, OSX_OCEANLOTUS.D can create a persistence file in the folder .", "S0595": " ThiefQuest  : When running with root privileges after a Launch Agent is installed, ThiefQuest installs a plist file to the  folder with the  key set to  establishing persistence as a Launch Daemon. ", "S0658": " XCSSET  : XCSSET uses the ssh launchdaemon to elevate privileges, bypass system controls, and enable remote access to the victim."}, "id": "T1543.004", "subtechniqueof": "T1543", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["macOS"], "permissionsrequired": ["Administrator"], "effectivepermissions": ["Administrator, root"], "capecid": ["CAPEC-550,", "CAPEC-551"], "version": "1.2", "created": "17 January 2020", "lastmodified": "07 October 2021"}, {"techniquename": "Netsh Helper DLL", "detection": "It is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the  registry key for any new or suspicious entries that do not correlate with known system files or benign software. ", "description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.  The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at .Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality. ", "procedureexamples": {"S0108": " netsh  : netsh can be used as a persistence proxy technique to execute a helper DLL when netsh.exe is executed."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1546.007", "subtechniqueof": "T1546", "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["Matthew Demaske, Adaptforward"], "version": "1.0", "created": "24 January 2020", "lastmodified": "24 March 2020"}, {"techniquename": "Event Triggered Execution", "detection": "Monitoring for additions or modifications of mechanisms that could be used to trigger event-based execution, especially the addition of abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network. Also look for changes that do not line up with updates, patches, or other planned administrative activity. These mechanisms may vary by OS, but are typically stored in central repositories that store configuration information such as the Windows Registry, Common Information Model (CIM), and/or specific named files, the last of which can be hashed and compared to known good values. Monitor for processes, API/System calls, and other common ways of manipulating these event repositories. Tools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.  Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement. ", "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. ", "id": "T1546", "subtechniques": ["T1546.001", "T1546.002", "T1546.003", "T1546.004", "T1546.005", "T1546.006", "T1546.007", "T1546.008", "T1546.009", "T1546.010", "T1546.011", "T1546.012", "T1546.013", "T1546.014", "T1546.015"], "tactics": ["Privilege Escalation", "Persistence"], "platforms": ["Linux, Windows, macOS"], "version": "1.1", "created": "22 January 2020", "lastmodified": "16 October 2021"}, {"techniquename": "Local Account", "detection": "Monitor for processes and command-line parameters associated with local account creation, such as  ,  , and  . Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system.  Perform regular audits of local system accounts to detect suspicious accounts that may have been created by an adversary.", "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the  command can be used to create a local account. On macOS systems the  command can be used to create a local account.Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts.", "M1026": " Privileged Account Management  : Limit the usage of local administrator accounts to be used for day-to-day operations that may expose them to potential adversaries."}, "procedureexamples": {"G0022": " APT3  : APT3 has been known to create or enable accounts, such as .", "G0087": " APT39  : APT39 has created accounts on multiple compromised hosts to perform actions within the network.", "G0096": " APT41  : APT41 created user accounts and adds them to the User and Admin groups. ", "S0274": " Calisto  : Calisto has the capability to add its own account to the victim's machine.", "S0030": " Carbanak  : Carbanak can create a Windows account.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 created accounts on victims, including administrator accounts, some of which appeared to be tailored to each individual staging target.", "S0363": " Empire  : Empire has a module for creating a local user if permissions allow.", "S0143": " Flame  : Flame can create backdoor accounts with login \"HelpAssistant\" on domain connected systems if appropriate rights are available.", "G0117": " Fox Kitten  : Fox Kitten has created a local user account with administrator privileges.", "S0493": " GoldenSpy  : GoldenSpy can create new users on an infected system.   ", "S0394": " HiddenWasp  : HiddenWasp creates a user account as a means to provide initial persistence to the compromised machine.", "S0601": " Hildegard  : Hildegard has created a user named \"monerodaemon\".", "G0077": " Leafminer  : Leafminer used a tool called Imecab to set up a persistent remote access account on the victim machine.", "S0084": " Mis-Type  : Mis-Type may create a temporary user on the system named \"Lost_{{Unique Identifier}}.\"", "S0039": " Net  : The  commands in Net can be used to create a local account.", "S0192": " Pupy  : Pupy can user PowerView to execute \"net user\" commands and create local system accounts.", "S0085": " S-Type  : S-Type may create a temporary user on the system named \"Lost_{{Unique Identifier}}\" with the password \"pond~!@6\"{{Unique Identifier}}.\"", "S0382": " ServHelper  : ServHelper has created a new user and added it to the \"Remote Desktop Users\" and \"Administrators\" groups.", "S0649": " SMOKEDHAM  : SMOKEDHAM has created user accounts and added them to local Admin groups.", "G0139": " TeamTNT  : TeamTNT has created local privileged users on victim machines.", "S0412": " ZxShell  : ZxShell has a feature to create local user accounts."}, "id": "T1136.001", "subtechniqueof": "T1136", "tactics": ["Persistence"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator"], "version": "1.1", "created": "28 January 2020", "lastmodified": "12 August 2021"}, {"techniquename": "Cloud Account", "detection": "Collect usage logs from cloud user and administrator accounts to identify unusual activity in the creation of new accounts and assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins.", "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.Adversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts.", "M1030": " Network Segmentation  : Configure access controls and firewalls to limit access to critical systems and domain controllers. Most cloud environments support separate virtual private cloud (VPC) instances that enable further segmentation of cloud systems.", "M1026": " Privileged Account Management  : Do not allow privileged accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."}, "id": "T1136.003", "subtechniqueof": "T1136", "tactics": ["Persistence"], "platforms": ["Azure AD, Google Workspace, IaaS, Office 365"], "permissionsrequired": ["Administrator"], "contributors": ["Microsoft Threat Intelligence Center (MSTIC); Praetorian"], "version": "1.1", "created": "29 January 2020", "lastmodified": "16 March 2021"}, {"techniquename": "Create or Modify System Process", "detection": "Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.  Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Monitor for changes to files associated with system-level processes.", "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.  On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges. .  ", "mitigations": {"M1047": " Audit  : Use auditing tools capable of detecting privilege and service abuse opportunities on systems within an enterprise and correct them.", "M1033": " Limit Software Installation  : Restrict software installation to trusted repositories only and be cautious of orphaned software packages.", "M1022": " Restrict File and Directory Permissions  : Restrict read/write access to system-level process files to only select privileged users who have a legitimate need to manage system services.", "M1018": " User Account Management  : Limit privileges of user accounts and groups so that only authorized administrators can interact with system-level process changes and service configurations."}, "procedureexamples": {"S0401": " Exaramel for Linux  : Exaramel for Linux has a hardcoded location that it uses to achieve persistence if the startup system is Upstart or System V and it is running as root."}, "id": "T1543", "subtechniques": ["T1543.001", "T1543.002", "T1543.003", "T1543.004"], "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "10 January 2020", "lastmodified": "03 November 2021"}, {"techniquename": "Create Account", "detection": "Monitor for processes and command-line parameters associated with account creation, such as  or . Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system and domain controller.  Perform regular audits of domain and local system accounts to detect suspicious accounts that may have been created by an adversary.Collect usage logs from cloud administrator accounts to identify unusual activity in the creation of new accounts and assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins.", "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts.", "M1030": " Network Segmentation  : Configure access controls and firewalls to limit access to domain controllers and systems used to create and manage accounts.", "M1028": " Operating System Configuration  : Protect domain controllers by ensuring proper security configuration for critical servers.", "M1026": " Privileged Account Management  : Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."}, "procedureexamples": {"G0119": " Indrik Spider  : Indrik Spider used  to add a new user to the system.", "G0034": " Sandworm Team  : Sandworm Team added a login to a SQL Server with ."}, "id": "T1136", "subtechniques": ["T1136.001", "T1136.002", "T1136.003"], "tactics": ["Persistence"], "platforms": ["Azure AD, Google Workspace, IaaS, Linux, Office 365, Windows, macOS"], "permissionsrequired": ["Administrator"], "contributors": ["Microsoft Threat Intelligence Center (MSTIC); Praetorian"], "version": "2.2", "created": "14 December 2017", "lastmodified": "12 August 2021"}, {"techniquename": "Systemd Service", "detection": "Systemd service unit files may be detected by auditing file creation and modification events within the , , and  directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of \u2018systemd\u2019, a parent process ID of 1, and will usually execute as the \u2018root\u2019 user.Suspicious systemd services can also be identified by comparing results against a trusted system baseline. Malicious systemd services may be detected by using the systemctl utility to examine system wide services: . Analyze the contents of  files present on the file system and ensure that they refer to legitimate, expected executables.Auditing the execution and command-line arguments of the 'systemctl' utility, as well related utilities such as  may reveal malicious systemd service execution.", "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.Systemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the  and  directories and have the file extension . Each service unit file may contain numerous directives that can execute system commands:Adversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at system boot.While adversaries typically require root privileges to create/modify service unit files in the  and  directories, low privilege users can create/modify service unit files in directories such as  to achieve user-level persistence.", "mitigations": {"M1033": " Limit Software Installation  : Restrict software installation to trusted repositories only and be cautious of orphaned software packages.", "M1026": " Privileged Account Management  : The creation and modification of systemd service unit files is generally reserved for administrators such as the Linux root user and other users with superuser privileges. ", "M1022": " Restrict File and Directory Permissions  : Restrict read/write access to systemd unit files to only select privileged users who have a legitimate need to manage system services.", "M1018": " User Account Management  : Limit user access to system utilities such as 'systemctl' to only users who have a legitimate need."}, "procedureexamples": {"S0401": " Exaramel for Linux  : Exaramel for Linux has a hardcoded location under systemd that it uses to achieve persistence if it is running as root.", "S0410": " Fysbis  : Fysbis has established persistence using a systemd service.", "S0601": " Hildegard  : Hildegard has started a monero service.", "S0192": " Pupy  : Pupy can be used to establish persistence using a systemd service.", "G0106": " Rocke  : Rocke has installed a systemd service script to maintain persistence.  ", "G0139": " TeamTNT  : TeamTNT has established persistence through the creation of a cryptocurrency mining system service."}, "id": "T1543.002", "subtechniqueof": "T1543", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Linux"], "permissionsrequired": ["User, root"], "capecid": ["CAPEC-550,", "CAPEC-551"], "contributors": ["Tony Lambert, Red Canary"], "version": "1.2", "created": "17 January 2020", "lastmodified": "09 October 2020"}, {"techniquename": "Launch Agent", "detection": "Monitor Launch Agent creation through additional plist files and utilities such as Objective-See\u2019s  KnockKnock application. Launch Agents also require files on disk for persistence which can also be monitored via other file monitoring applications.Ensure Launch Agent's  key pointing to executables located in the  or  folders are in alignment with enterprise policy. Ensure all Launch Agents with the  key set to  are in alignment with policy. ", "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in , , and .  Property list files use the , , and  keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.Launch Agents can also be executed using the Launchctl command.Adversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the  or  keys set to . The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions. ", "procedureexamples": {"S0482": " Bundlore  : Bundlore can persist via a LaunchAgent.", "S0274": " Calisto  : Calisto adds a .plist file to the /Library/LaunchAgents folder to maintain persistence.", "S0369": " CoinTicker  : CoinTicker creates user launch agents named .espl.plist and com.apple.[random string].plist to establish persistence. ", "S0492": " CookieMiner  : CookieMiner has installed multiple new Launch Agents in order to maintain persistence for cryptocurrency mining software.", "S0235": " CrossRAT  : CrossRAT creates a Launch Agent on macOS.", "S0497": " Dacls  : Dacls can establish persistence via a LaunchAgent.", "S0281": " Dok  : Dok installs two LaunchAgents to redirect all network traffic with a randomly generated name for each plist file maintaining the format .", "S0277": " FruitFly  : FruitFly persists via a Launch Agent.", "S0276": " Keydnap  : Keydnap uses a Launch Agent to persist.", "S0162": " Komplex  : The Komplex trojan creates a persistent launch agent called with  with .", "S0282": " MacSpy  : MacSpy persists via a Launch Agent.", "S0198": " NETWIRE  : NETWIRE can use launch agents for persistence.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D can create a persistence file in the folder .", "S0279": " Proton  : Proton persists via Launch Agent.", "S0595": " ThiefQuest  : ThiefQuest installs a launch item using an embedded encrypted launch agent property list template. The plist file is installed in the  folder and configured with the path to the persistent binary located in the  folder."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1543.001", "subtechniqueof": "T1543", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["macOS"], "permissionsrequired": ["Administrator, User"], "version": "1.3", "created": "17 January 2020", "lastmodified": "03 November 2021"}, {"techniquename": "Domain Account", "detection": "Monitor for processes and command-line parameters associated with domain account creation, such as . Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows domain controller.  Perform regular audits of domain accounts to detect suspicious accounts that may have been created by an adversary.", "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the  command can be used to create a domain account.Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts.", "M1030": " Network Segmentation  : Configure access controls and firewalls to limit access to domain controllers and systems used to create and manage accounts.", "M1028": " Operating System Configuration  : Protect domain controllers by ensuring proper security configuration for critical servers.", "M1026": " Privileged Account Management  : Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."}, "procedureexamples": {"S0363": " Empire  : Empire has a module for creating a new domain user if permissions allow.", "G0093": " GALLIUM  : GALLIUM created high-privileged domain user accounts to maintain access to victim networks.", "G0125": " HAFNIUM  : HAFNIUM has created and granted privileges to domain accounts.", "S0039": " Net  : The  commands in Net can be used to create a domain account.", "S0029": " PsExec  : PsExec has the ability to remotely create accounts on target systems.", "S0192": " Pupy  : Pupy can user PowerView to execute \"net user\" commands and create domain accounts.", "G0034": " Sandworm Team  : Sandworm Team has created new domain accounts on an ICS access server."}, "id": "T1136.002", "subtechniqueof": "T1136", "tactics": ["Persistence"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "28 January 2020", "lastmodified": "23 March 2020"}, {"techniquename": "Browser Extensions", "detection": "Inventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates.Monitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation.On macOS, monitor the command line for usage of the profiles tool, such as . Additionally, all installed extensions maintain a  file in the  directory. Ensure all listed files are in alignment with approved extensions.", "description": "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.Previous to macOS 11, adversaries could silently install browser extensions via the command line using the  tool to install malicious  files. In macOS 11+, the use of the  tool can no longer install configuration profiles, however  files can be planted and installed with user interaction.Once the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials) and be used as an installer for a RAT for persistence.There have also been instances of botnets using a persistent backdoor through malicious Chrome extensions. There have also been similar examples of extensions being used for command & control.", "mitigations": {"M1047": " Audit  : Ensure extensions that are installed are the intended ones as many malicious extensions will masquerade as legitimate ones.", "M1038": " Execution Prevention  : Set a browser extension allow or deny list as appropriate for your security policy. ", "M1033": " Limit Software Installation  : Only install browser extensions from trusted sources that can be verified. Browser extensions for some browsers can be controlled through Group Policy. Change settings to prevent the browser from installing extensions without sufficient permissions.", "M1051": " Update Software  : Ensure operating systems and browsers are using the most current version. ", "M1017": " User Training  : Close out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."}, "procedureexamples": {"S0482": " Bundlore  : Bundlore can install malicious browser extensions that are used to hijack user searches.", "S0531": " Grandoreiro  : Grandoreiro can use malicious browser extensions to steal cookies and other user information.", "G0094": " Kimsuky  : Kimsuky has used Google Chrome browser extensions to infect victims and to steal passwords and cookies.", "S0402": " OSX/Shlayer  : OSX/Shlayer can install malicious Safari browser extensions to serve ads."}, "id": "T1176", "subtechniques": ["No sub-techniques"], "tactics": ["Persistence"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Chris Ross @xorrior; Justin Warner, ICEBRG"], "version": "1.2", "created": "16 January 2018", "lastmodified": "27 April 2021"}, {"techniquename": "Startup Items", "detection": "The  folder can be monitored for changes. Similarly, the programs that are actually executed from this mechanism should be checked against a whitelist.Monitor processes that are executed during the bootup process to check for unusual or unknown applications and behavior.", "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. This is technically a deprecated technology (superseded by Launch Daemon), and thus the appropriate folder,  isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), , reside in the top-level directory. An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism . Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Since StartupItems are deprecated, preventing all users from writing to the  directory would prevent any startup items from getting registered."}, "procedureexamples": {"S0283": " jRAT  : jRAT can list and manage startup entries."}, "id": "T1037.005", "subtechniqueof": "T1037", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["macOS"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "15 January 2020", "lastmodified": "24 March 2020"}, {"techniquename": "Network Logon Script", "detection": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.", "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.  Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Restrict write access to logon scripts to specific administrators."}, "id": "T1037.003", "subtechniqueof": "T1037", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "version": "1.0", "created": "10 January 2020", "lastmodified": "24 March 2020"}, {"techniquename": "Compromise Client Software Binary", "detection": "Collect and analyze signing certificate metadata and check signature validity on software that executes within the environment. Look for changes to client software that do not correlate with known software or patch cycles. Consider monitoring for anomalous behavior from client applications, such as atypical module loads, file reads/writes, or network connections.", "description": "Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers.Adversaries may make modifications to client software binaries to carry out malicious tasks when those applications are in use. For example, an adversary may copy source code for the client software, add a backdoor, compile for the target, and replace the legitimate application binary (or support files) with the backdoored one. Since these applications may be routinely executed by the user, the adversary can leverage this for persistent access to the host.", "mitigations": {"M1045": " Code Signing  : Ensure all application component binaries are signed by the correct application developers."}, "procedureexamples": {"S0486": " Bonadan  : Bonadan has maliciously altered the OpenSSH binary on targeted systems to create a backdoor.", "S0377": " Ebury  : Ebury has been embedded into modified OpenSSH binaries to gain persistent access to SSH credential information.", "S0604": " Industroyer  : Industroyer has used a Trojanized version of the Windows Notepad application for an additional backdoor persistence mechanism.", "S0487": " Kessel  : Kessel has maliciously altered the OpenSSH binary on targeted systems to create a backdoor.", "S0641": " Kobalos  : Kobalos replaced the SSH client with a trojanized SSH client to steal credentials on compromised systems.", "S0595": " ThiefQuest  : ThiefQuest searches through the  folder looking for executable files. For each executable, ThiefQuest prepends a copy of itself to the beginning of the file. When the file is executed, the ThiefQuest code is executed first. ThiefQuest creates a hidden file, copies the original target executable to the file, then executes the new hidden file to maintain the appearance of normal behavior. ", "S0658": " XCSSET  : XCSSET uses a malicious browser application to replace the legitimate browser in order to continuously capture credentials, monitor web traffic, and download additional modules."}, "id": "T1554", "subtechniques": ["No sub-techniques"], "tactics": ["Persistence"], "platforms": ["Linux, Windows, macOS"], "contributors": ["CrowdStrike Falcon OverWatch"], "version": "1.0", "created": "11 February 2020", "lastmodified": "19 October 2021"}, {"techniquename": "RC Scripts", "detection": "Monitor for unexpected changes to RC scripts in the  directory. Monitor process execution resulting from RC scripts for unusual or unknown applications or behavior.Monitor for  file creation. Although types of RC scripts vary for each Unix-like distribution, several execute  if present. ", "description": "Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system\u2019s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.Adversaries can establish persistence by adding a malicious binary path or shell commands to , , and other RC scripts specific to the Unix-like distribution. Upon reboot, the system executes the script's contents as root, resulting in persistence.Adversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as IoT or embedded systems.Several Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of Launchd.  This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts. To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Limit privileges of user accounts so only authorized users can edit the rc.common file."}, "procedureexamples": {"S0394": " HiddenWasp  : HiddenWasp installs reboot persistence by adding itself to .", "S0278": " iKitten  : iKitten adds an entry to the rc.common file for persistence."}, "id": "T1037.004", "subtechniqueof": "T1037", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Linux, macOS"], "permissionsrequired": ["root"], "version": "2.0", "created": "15 January 2020", "lastmodified": "27 April 2021"}, {"techniquename": "Logon Script (Mac)", "detection": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.", "description": "Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike Startup Items, a login hook executes as the elevated root user.Adversaries may use these login hooks to maintain persistence on a single system. Access to login hook scripts may allow an adversary to insert additional malicious code. There can only be one login hook at a time though and depending on the access configuration of the hooks, either local credentials or an administrator account may be necessary. ", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Restrict write access to logon scripts to specific administrators."}, "id": "T1037.002", "subtechniqueof": "T1037", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["macOS"], "version": "1.0", "created": "10 January 2020", "lastmodified": "27 March 2020"}, {"techniquename": "Login Items", "detection": "All login items created via shared file lists are viewable by using the System Preferences GUI or in the  file. These locations should be monitored and audited for known good applications.Otherwise, login Items are located in  within an application bundle, so these paths should be monitored as well. Monitor applications that leverage login items with either the LSUIElement or LSBackgroundOnly key in the Info.plist file set to true.Monitor processes that start at login for unusual or unknown applications. Usual applications for login items could include what users add to configure their user environment, such as email, chat, or music applications, or what administrators include for organization settings and protections. Check for running applications from login items that also have abnormal behavior,, such as establishing network connections.", "description": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call .Login items installed using the Service Management Framework leverage , are not visible in the System Preferences, and can only be removed by the application that created them. Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder. Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.Adversaries can utilize AppleScript and Native API calls to create a login item to spawn malicious executables. Prior to version 10.5 on macOS, adversaries can add login items by using AppleScript to send an Apple events to the \"System Events\" process, which has an AppleScript dictionary for manipulating login items. Adversaries can use a command such as . This command adds the path of the malicious executable to the login item file list located in . Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.", "procedureexamples": {"S0281": " Dok  : Dok uses AppleScript to install a login Item by sending Apple events to the  process.", "S0198": " NETWIRE  : NETWIRE can persist via startup options for Login items."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1547.015", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "05 October 2021", "lastmodified": "18 October 2021"}, {"techniquename": "Logon Script (Windows)", "detection": "Monitor for changes to Registry values associated with Windows logon scrips, nameley .Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.", "description": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the  Registry key.Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. ", "mitigations": {"M1024": " Restrict Registry Permissions  : Ensure proper permissions are set for Registry hives to prevent users from modifying keys for logon scripts that may lead to persistence."}, "procedureexamples": {"G0007": " APT28  : An APT28 loader Trojan adds the Registry key  to establish persistence.", "S0438": " Attor  : Attor's dispatcher can establish persistence via adding a Registry key with a logon script .", "G0080": " Cobalt Group  : Cobalt Group has added persistence by registering the file name for the next stage malware under .", "S0044": " JHUHUGIT  : JHUHUGIT has registered a Windows shell script under the Registry key  to establish persistence.", "S0526": " KGH_SPY  : KGH_SPY has the ability to set the  Registry key to execute logon scripts.", "S0251": " Zebrocy  : Zebrocy performs persistence with a logon script via adding to the Registry key ."}, "id": "T1037.001", "subtechniqueof": "T1037", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "version": "1.0", "created": "10 January 2020", "lastmodified": "24 March 2020"}, {"techniquename": "Boot or Logon Initialization Scripts", "detection": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.", "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Restrict write access to logon scripts to specific administrators.", "M1024": " Restrict Registry Permissions  : Ensure proper permissions are set for Registry hives to prevent users from modifying keys for logon scripts that may lead to persistence."}, "procedureexamples": {"G0106": " Rocke  : Rocke has installed an \"init.d\" startup script to maintain persistence.    "}, "id": "T1037", "subtechniques": ["T1037.001", "T1037.002", "T1037.003", "T1037.004", "T1037.005"], "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Linux, Windows, macOS"], "capecid": ["CAPEC-564"], "version": "2.1", "created": "31 May 2017", "lastmodified": "27 April 2021"}, {"techniquename": "Active Setup", "detection": "Monitor Registry key additions and/or modifications to .Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the Active Setup Registry locations and startup folders. Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.", "description": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level.Adversaries may abuse Active Setup by creating a key under  and setting a malicious value for . This value will serve as the program that will be executed when a user logs into the computer.Adversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "procedureexamples": {"S0012": " PoisonIvy  : PoisonIvy creates a Registry key in the Active Setup pointing to a malicious executable."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1547.014", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "contributors": ["Bencherchali Nasreddine, @nas_bench, ELIT Security Team (DSSD)"], "version": "1.0", "created": "18 December 2020", "lastmodified": "05 March 2021"}, {"techniquename": "Print Processors", "detection": "Monitor process API calls to  and . New print processor DLLs are written to the print processor directory. Also monitor Registry writes to  or  as they pertain to print processor installations.Monitor for abnormal DLLs that are loaded by spoolsv.exe. Print processors that do not correlate with known good software or patching may be suspicious.", "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot. Adversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the  API call with an account that has  enabled. Alternatively, a print processor can be registered to the print spooler service by adding the  Registry key that points to the DLL. For the print processor to be correctly installed, it must be located in the system print-processor directory that can be found with the  API call. After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run. The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.", "mitigations": {"M1018": " User Account Management  : Limit user accounts that can load or unload device drivers by disabling ."}, "procedureexamples": {"S0501": " PipeMon  : The PipeMon installer has modified the Registry key  to install PipeMon as a Print Processor."}, "id": "T1547.012", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["Mathieu Tartare, ESET"], "version": "1.0", "created": "05 October 2020", "lastmodified": "09 October 2020"}, {"techniquename": "XDG Autostart Entries", "detection": "Malicious XDG autostart entries may be detected by auditing file creation and modification events within the  and  directories. Depending on individual configurations, defenders may need to query the environment variables  or  to determine the paths of Autostart entries. Autostart entry files not associated with legitimate packages may be considered suspicious. Suspicious entries can also be identified by comparing entries to a trusted system baseline.Suspicious processes or scripts spawned in this manner will have a parent process of the desktop component implementing the XDG specification and will execute as the logged on user.", "description": "Adversaries may modify XDG autostart entries to execute programs or commands during system boot. Linux desktop environments that are XDG compliant implement functionality for XDG autostart entries. These entries will allow an application to automatically start during the startup of a desktop environment after user logon. By default, XDG autostart entries are stored within the  or  directories and have a .desktop file extension.Within an XDG autostart entry file, the  key specifies if the entry is an application (type 1), link (type 2) or directory (type 3). The  key indicates an arbitrary name assigned by the creator and the  key indicates the application and command line arguments to execute.Adversaries may use XDG autostart entries to maintain persistence by executing malicious commands and payloads, such as remote access tools, during the startup of a desktop environment. Commands included in XDG autostart entries with execute after user logon in the context of the currently logged on user. Adversaries may also use Masquerading to make XDG autostart entries look as if they are associated with legitimate programs.", "mitigations": {"M1033": " Limit Software Installation  : Restrict software installation to trusted repositories only and be cautious of orphaned software packages.", "M1022": " Restrict File and Directory Permissions  : Restrict write access to XDG autostart entries to only select privileged users.", "M1018": " User Account Management  : Limit privileges of user accounts so only authorized privileged users can create and modify XDG autostart entries."}, "procedureexamples": {"S0410": " Fysbis  : Fysbis has installed itself as an autostart entry under  to establish persistence.", "S0198": " NETWIRE  : NETWIRE can use XDG Autostart Entries to establish persistence."}, "id": "T1547.013", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Linux"], "permissionsrequired": ["User, root"], "contributors": ["Tony Lambert, Red Canary"], "version": "1.0", "created": "10 September 2019", "lastmodified": "10 November 2020"}, {"techniquename": "Kernel Modules and Extensions", "detection": "Loading, unloading, and manipulating modules on Linux systems can be detected by monitoring for the following commands: , , , , or   LKMs are typically loaded into  and have had the extension .ko (\"kernel object\") since version 2.6 of the Linux kernel. Adversaries may run commands on the target system before loading a malicious module in order to ensure that it is properly compiled.  Adversaries may also execute commands to identify the exact version of the running Linux kernel and/or download multiple versions of the same .ko (kernel object) files to use the one appropriate for the running system. Many LKMs require Linux headers (specific to the target kernel) in order to compile properly.\u00a0These are typically obtained through the operating systems package manager and installed like a normal package. On Ubuntu and Debian based systems this can be accomplished by running:  On RHEL and CentOS based systems this can be accomplished by running: On macOS, monitor for execution of  commands and user installed kernel extensions performing abnormal and/or potentially malicious activity (such as creating network connections). Monitor for new rows added in the  table. KextPolicy stores a list of user approved (non Apple) kernel extensions and a partial history of loaded kernel modules in a SQLite database, .", "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. \u00a0When used maliciously, LKMs can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0). \u00a0Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. Kernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through  and  commands. Since macOS Catalina 10.15, kernel extensions have been deprecated on macOS systems.Adversaries can use LKMs and kexts to covertly persist on a system and elevate privileges. Examples have been found in the wild and there are some open source projects.      ", "mitigations": {"M1049": " Antivirus/Antimalware  : Common tools for detecting Linux rootkits include: rkhunter , chrootkit , although rootkits may be designed to evade certain detection tools.", "M1038": " Execution Prevention  : Application control and software restriction tools, such as SELinux, KSPP, grsecurity MODHARDEN, and Linux kernel tuning can aid in restricting kernel module loading. Since macOS High Sierra 10.13, Secure Kernel Extension Loading (SKEL) can also be used to restrict the loading of kernel modules.", "M1026": " Privileged Account Management  : Limit access to the root account and prevent users from loading kernel modules and extensions through proper privilege separation and limiting Privilege Escalation opportunities."}, "procedureexamples": {"S0502": " Drovorub  : Drovorub can use kernel modules to establish persistence.", "S0468": " Skidmap  : Skidmap has the ability to install several loadable kernel modules (LKMs) on infected machines."}, "id": "T1547.006", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Linux, macOS"], "permissionsrequired": ["root"], "contributors": ["Anastasios Pingios; Jeremy Galloway; Red Canary; Wayne Silva, F-Secure Countercept"], "version": "1.2", "created": "24 January 2020", "lastmodified": "19 October 2021"}, {"techniquename": "LSASS Driver", "detection": "With LSA Protection enabled, monitor the event logs (Events 3033 and 3063) for failed attempts to load LSA plug-ins and drivers.  Also monitor DLL load operations in lsass.exe. Utilize the Sysinternals Autoruns/Autorunsc utility  to examine loaded drivers associated with the LSA. ", "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.", "mitigations": {"M1043": " Credential Access Protection  : On Windows 10 and Server 2016, enable Windows Defender Credential Guard  to run lsass.exe in an isolated virtualized environment without any device drivers. ", "M1025": " Privileged Process Integrity  : On Windows 8.1 and Server 2012 R2, enable LSA Protection by setting the Registry key  to .  LSA Protection ensures that LSA plug-ins and drivers are only loaded if they are digitally signed with a Microsoft signature and adhere to the Microsoft Security Development Lifecycle (SDL) process guidance. ", "M1044": " Restrict Library Loading  : Ensure safe DLL search mode is enabled  to mitigate risk that lsass.exe loads a malicious code library. "}, "procedureexamples": {"S0208": " Pasam  : Pasam establishes by infecting the Security Accounts Manager (SAM) DLL to load a malicious DLL dropped to disk.", "S0176": " Wingbird  : Wingbird drops a malicious file (sspisrv.dll) alongside a copy of lsass.exe, which is used to register a service that loads sspisrv.dll as a driver. The payload of the malicious driver (located in its entry-point function) is executed when loaded by lsass.exe before the spoofed service becomes unstable and crashes."}, "id": "T1547.008", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["Vincent Le Toux"], "version": "1.0", "created": "24 January 2020", "lastmodified": "25 March 2020"}, {"techniquename": "Re-opened Applications", "detection": "Monitoring the specific plist files associated with reopening applications can indicate when an application has registered itself to be reopened.", "description": "Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at  and . An adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine .", "mitigations": {"M1042": " Disable or Remove Feature or Program  : This feature can be disabled entirely with the following terminal command: .", "M1017": " User Training  : Holding the Shift key while logging in prevents apps from opening automatically. "}, "id": "T1547.007", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "24 January 2020", "lastmodified": "24 January 2020"}, {"techniquename": "Plist Modification", "detection": "Monitor for common command-line editors used to modify plist files located in auto-run locations, such as , , and an application's . Monitor for plist file modification immediately followed by code execution from  and . Also, monitor for significant changes to any path pointers in a modified plist.Identify new services executed from plist modified in the previous user's session. ", "description": "Adversaries can modify property list files (plist files) to execute their code as part of establishing persistence. Plist files are used by macOS applications to store properties and configuration settings for applications and services. Applications use information plist files, , to tell the operating system how to handle the application at runtime using structured metadata in the form of keys and values. Plist files are formatted in XML and based on Apple's Core Foundation DTD and can be saved in text or binary format. Adversaries can modify paths to executed binaries, add command line arguments, and insert key/pair values to plist files in auto-run locations which execute upon user logon or system startup. Through modifying plist files in these locations, adversaries can also execute a malicious dynamic library (dylib) by adding a dictionary containing the  key combined with a path to a malicious dylib under the  key in a plist file. Upon user logon, the plist is called for execution and the malicious dylib is executed within the process space. Persistence can also be achieved by modifying the  key in the application's  file.", "mitigations": {"M1013": " Application Developer Guidance  : Ensure applications are using Apple's developer guidance which enables hardened runtime.", "M1022": " Restrict File and Directory Permissions  : Prevent plist files from being modified by users by making them read-only.", "M1017": " User Training  : Holding the shift key during login prevents apps from opening automatically."}, "procedureexamples": {"S0658": " XCSSET  : XCSSET uses the  command to modify the , , and  keys in the  file."}, "id": "T1547.011", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["macOS"], "permissionsrequired": ["Administrator, User"], "version": "1.1", "created": "24 January 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Security Support Provider", "detection": "Monitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key  with AuditLevel = 8.  ", "description": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.The SSP configuration is stored in two Registry keys:  and . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.", "mitigations": {"M1025": " Privileged Process Integrity  : Windows 8.1, Windows Server 2012 R2, and later versions may make LSA run as a Protected Process Light (PPL) by setting the Registry key , which requires all SSP DLLs to be signed by Microsoft.  "}, "procedureexamples": {"S0363": " Empire  : Empire can enumerate Security Support Providers (SSPs) as well as utilize PowerSploit's  and  to install malicious SSPs and log authentication events.", "S0002": " Mimikatz  : The Mimikatz credential dumper contains an implementation of an SSP.", "S0194": " PowerSploit  : PowerSploit's  Persistence module can be used to establish by installing a SSP DLL."}, "id": "T1547.005", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "24 January 2020", "lastmodified": "25 March 2020"}, {"techniquename": "Shortcut Modification", "detection": "Since a shortcut's target path likely will not change, modifications to shortcut files that do not correlate with known software changes, patches, removal, etc., may be suspicious. Analysis should attempt to relate shortcut file change or creation events to other potentially suspicious events based on known adversary behavior such as process launches of unknown executables that make network connections.Monitor for LNK files created with a Zone Identifier value greater than 1, which may indicate that the LNK file originated from outside of the network.", "description": "Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.", "mitigations": {"M1018": " User Account Management  : Limit permissions for who can create symbolic links in Windows to appropriate groups such as Administrators and necessary groups for virtualization. This can be done through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create symbolic links. "}, "procedureexamples": {"G0016": " APT29  : APT29 drops a Windows shortcut file for execution.", "G0087": " APT39  : APT39 has modified LNK shortcuts.", "S0373": " Astaroth  : Astaroth's initial payload is a malicious .LNK file. ", "S0031": " BACKSPACE  : BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.", "S0534": " Bazar  : Bazar can establish persistence by writing shortcuts to the Windows Startup folder.", "S0089": " BlackEnergy  : The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder.", "S0244": " Comnie  : Comnie establishes persistence via a .lnk file in the victim\u2019s startup path.", "G0012": " Darkhotel  : Darkhotel has dropped an mspaint.lnk shortcut to disk which launches a shell script that downloads and executes a file.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 manipulated .lnk files to gather user credentials in conjunction with Forced Authentication.", "S0363": " Empire  : Empire can persist by modifying a .LNK file to include a backdoor.", "S0267": " FELIXROOT  : FELIXROOT creates a .LNK file for persistence.", "S0168": " Gazer  : Gazer can establish persistence by creating a .lnk file in the Start menu or by modifying existing .lnk files to execute the malware through cmd.exe.", "G0078": " Gorgon Group  : Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence.", "S0531": " Grandoreiro  : Grandoreiro can write or modify browser shortcuts to enable launching of malicious browser extensions. ", "S0170": " Helminth  : Helminth establishes persistence by creating a shortcut.", "S0260": " InvisiMole  : InvisiMole can use a .lnk shortcut for the Control Panel to establish persistence.", "S0265": " Kazuar  : Kazuar adds a .lnk file to the Windows startup folder.", "S0356": " KONNI  : A version of KONNI drops a Windows shortcut on the victim\u2019s machine to establish persistence.", "G0032": " Lazarus Group  : A Lazarus Group malware sample adds persistence on the system by creating a shortcut in the user\u2019s Startup folder.", "G0065": " Leviathan  : Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.", "S0652": " MarkiRAT  : MarkiRAT can modify the shortcut that launches Telegram by replacing its path with the malicious payload to launch with the legitimate executable.", "S0339": " Micropsia  : Micropsia creates a shortcut to maintain persistence.", "S0439": " Okrum  : Okrum can establish persistence by creating a .lnk shortcut to itself in the Startup folder.", "S0172": " Reaver  : Reaver creates a shortcut file and saves it in a Startup folder to establish persistence.", "S0153": " RedLeaves  : RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence.", "S0270": " RogueRobin  : RogueRobin establishes persistence by creating a shortcut (.LNK file) in the Windows startup folder to run a script each time the user logs in.", "S0085": " S-Type  : S-Type may create the file , which points to the malicious msdtc.exe file already created in the %CommonFiles% directory.", "S0053": " SeaDuke  : SeaDuke is capable of persisting via a .lnk file stored in the Startup directory.", "S0028": " SHIPSHAPE  : SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder.", "S0035": " SPACESHIP  : SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder.", "S0058": " SslMM  : To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut.", "S0603": " Stuxnet  : Stuxnet used copies of .lnk shortcuts to propagate through removable media.", "S0004": " TinyZBot  : TinyZBot can create a shortcut in the Windows startup folder for persistence."}, "id": "T1547.009", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "capecid": ["CAPEC-132"], "contributors": ["Bobby, Filar, Elastic; David French, Elastic; Travis Smith, Tripwire"], "version": "1.1", "created": "24 January 2020", "lastmodified": "13 April 2021"}, {"techniquename": "Time Providers", "detection": "Baseline values and monitor/analyze activity related to modifying W32Time information in the Registry, including application programming interface (API) calls such as  and  as well as execution of the W32tm.exe utility.  There is no restriction on the number of custom time providers registrations, though each may require a DLL payload written to disk. The Sysinternals Autoruns tool may also be used to analyze auto-starting locations, including DLLs listed as time providers. ", "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.  W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients. Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  .  The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed. Adversaries may abuse this architecture to establish persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account. ", "mitigations": {"M1022": " Restrict File and Directory Permissions  : Consider using Group Policy to configure and block additions/modifications to W32Time DLLs. ", "M1024": " Restrict Registry Permissions  : Consider using Group Policy to configure and block modifications to W32Time parameters in the Registry. "}, "id": "T1547.003", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "contributors": ["Scott Lundgren, @5twenty9, Carbon Black"], "version": "1.0", "created": "24 January 2020", "lastmodified": "25 March 2020"}, {"techniquename": "Winlogon Helper DLL", "detection": "Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.   New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious.Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in  and  are used to manage additional helper programs and functionalities that support Winlogon.  Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: Adversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.", "mitigations": {"M1038": " Execution Prevention  : Identify and block potentially malicious software that may be executed through the Winlogon helper process by using application control  tools like AppLocker   that are capable of auditing and/or blocking unknown DLLs.", "M1018": " User Account Management  : Limit the privileges of user accounts so that only authorized administrators can perform Winlogon helper changes."}, "procedureexamples": {"S0534": " Bazar  : Bazar can use Winlogon Helper DLL to establish persistence.", "S0351": " Cannon  : Cannon adds the Registry key  to establish persistence.", "S0200": " Dipsind  : A Dipsind variant registers as a Winlogon Event Notify DLL to establish persistence.", "S0168": " Gazer  : Gazer can establish persistence by setting the value \"Shell\" with \"explorer.exe, %malware_pathfile%\" under the Registry key .", "S0387": " KeyBoy  : KeyBoy issues the command  to achieve persistence. ", "S0375": " Remexi  : Remexi achieves persistence using Userinit by adding the Registry key .", "G0081": " Tropic Trooper  : Tropic Trooper has created the Registry key  and sets the value to establish persistence.", "G0010": " Turla  : Turla established persistence by adding a Shell value under the Registry key .", "G0102": " Wizard Spider  : Wizard Spider has established persistence using Userinit by adding the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon."}, "id": "T1547.004", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "capecid": ["CAPEC-579"], "contributors": ["Praetorian"], "version": "1.0", "created": "24 January 2020", "lastmodified": "21 April 2020"}, {"techniquename": "BITS Jobs", "detection": "BITS runs as a service and its status can be checked with the Sc query utility (). Active BITS tasks can be enumerated using the  tool ().Monitor usage of the  tool (especially the \u2018Transfer\u2019, 'Create', 'AddFile', 'SetNotifyFlags', 'SetNotifyCmdLine', 'SetMinRetryDelay', 'SetCustomHeaders', and 'Resume' command options) Admin logs, PowerShell logs, and the Windows Event log for BITS activity. Also consider investigating more detailed information about jobs by parsing the BITS job database.Monitor and analyze network activity generated by BITS. BITS jobs use HTTP(S) and SMB for remote connections and are tethered to the creating user and will only function when that user is logged on (this rule applies even if a user attaches the job to a service account).", "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.The interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool.Adversaries may abuse BITS to download, execute, and even clean up after running malicious code. BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).BITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol.", "mitigations": {"M1037": " Filter Network Traffic  : Modify network and/or host firewall rules, as well as other network controls, to only allow legitimate BITS traffic.", "M1028": " Operating System Configuration  : Consider reducing the default BITS job lifetime in Group Policy or by editing the  and  Registry values in .", "M1018": " User Account Management  : Consider limiting access to the BITS interface to specific users or groups."}, "procedureexamples": {"G0087": " APT39  : APT39 has used the BITS protocol to exfiltrate stolen data from a compromised host.", "G0096": " APT41  : APT41 used BITSAdmin to download and install payloads.", "S0534": " Bazar  : Bazar has been downloaded via Windows BITS functionality.", "S0190": " BITSAdmin  : BITSAdmin can be used to create BITS Jobs to launch a malicious process.", "S0154": " Cobalt Strike  : Cobalt Strike can download a hosted \"beacon\" payload using BITSAdmin.", "S0554": " Egregor  : Egregor has used BITSadmin to download and execute malicious DLLs.", "S0201": " JPIN  : A JPIN variant downloads the backdoor payload via the BITS service.", "G0065": " Leviathan  : Leviathan has used BITSAdmin to download additional tools.", "S0652": " MarkiRAT  : MarkiRAT can use BITS Utility to connect with the C2 server.", "G0040": " Patchwork  : Patchwork has used BITS jobs to download malicious payloads.", "S0654": " ProLock  : ProLock can use BITS jobs to download its malicious payload.", "S0333": " UBoatRAT  : UBoatRAT takes advantage of the /SetNotifyCmdLine option in BITSAdmin to ensure it stays running on a system to maintain persistence."}, "id": "T1197", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion", "Persistence"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM, User"], "defensebypassed": ["Firewall, Host forensic analysis"], "contributors": ["Brent Murphy, Elastic; David French, Elastic; Red Canary; Ricardo Dias"], "version": "1.2", "created": "18 April 2018", "lastmodified": "13 April 2021"}, {"techniquename": "Authentication Package", "detection": "Monitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key  with AuditLevel = 8.  ", "description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location  with the key value of . The binary will then be executed by the system when the authentication packages are loaded.", "mitigations": {"M1025": " Privileged Process Integrity  : Windows 8.1, Windows Server 2012 R2, and later versions, may make LSA run as a Protected Process Light (PPL) by setting the Registry key , which requires all DLLs loaded by LSA to be signed by Microsoft.  "}, "procedureexamples": {"S0143": " Flame  : Flame can use Windows Authentication Packages for persistence."}, "id": "T1547.002", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "version": "1.0", "created": "24 January 2020", "lastmodified": "25 March 2020"}, {"techniquename": "Boot or Logon Autostart Execution", "detection": "Monitor for additions or modifications of mechanisms that could be used to trigger autostart execution, such as relevant additions to the Registry. Look for changes that are not correlated with known updates, patches, or other planned administrative activity. Tools such as Sysinternals Autoruns may also be used to detect system autostart configuration changes that could be attempts at persistence.  Changes to some autostart configuration settings may happen under normal conditions when legitimate software is installed. Suspicious program execution as autostart programs may show up as outlier processes that have not been seen before when compared against historical data.To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL.Monitor for abnormal usage of utilities and command-line parameters involved in kernel modification or driver installation.", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.\u00a0 These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.", "procedureexamples": {"S0651": " BoxCaon  : BoxCaon established persistence by setting the  registry key to point to its executable.", "S0567": " Dtrack  : Dtrack\u2019s RAT makes a persistent target file with auto execution on the host start.", "S0653": " xCaon  : xCaon has added persistence via the Registry key  which causes the malware to run each time any user logs in."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1547", "subtechniques": ["T1547.001", "T1547.002", "T1547.003", "T1547.004", "T1547.005", "T1547.006", "T1547.007", "T1547.008", "T1547.009", "T1547.010", "T1547.011", "T1547.012", "T1547.013", "T1547.014", "T1547.015"], "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, User, root"], "capecid": ["CAPEC-564"], "version": "1.1", "created": "23 January 2020", "lastmodified": "19 October 2021"}, {"techniquename": "Registry Run Keys / Startup Folder", "detection": "Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders.  Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.Changes to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.  These programs will be executed under the context of the user and will have the account's associated permissions level.Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is . The startup folder path for all users is .The following run keys are created by default on Windows systems:Run keys may exist under multiple hives. The  is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.  For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx:  The following Registry keys can be used to set startup folder items for persistence:The following Registry keys can control automatic startup of services during boot:Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  and  subkeys can automatically launch programs.Programs listed in the load value of the registry key  run when any user logs on.By default, the multistring  value of the registry key  is set to . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL achieves persistence by adding itself to the  Registry key.", "S0331": " Agent Tesla  : Agent Tesla can add itself to the Registry as a startup program to establish persistence. ", "S0622": " AppleSeed  : AppleSeed has the ability to create the Registry key name  at  to establish persistence.", "G0026": " APT18  : APT18 establishes persistence via the  key.", "G0073": " APT19  : An APT19 HTTP malware variant establishes persistence by setting the Registry key .", "G0007": " APT28  : APT28 has deployed malware that has copied itself to the startup directory for persistence.", "G0016": " APT29  : APT29 added Registry Run keys to establish persistence.", "G0022": " APT3  : APT3 places scripts in the startup folder for persistence.", "G0050": " APT32  : APT32 established persistence using Registry Run keys, both to execute PowerShell and VBS scripts as well as to execute their backdoor directly.", "G0064": " APT33  : APT33 has deployed a tool known as DarkComet to the Startup folder of a victim, and used Registry run keys to gain persistence.", "G0067": " APT37  : APT37's has added persistence via the Registry key .", "G0087": " APT39  : APT39 has maintained persistence using the startup folder.", "G0096": " APT41  : APT41 created and modified startup files for persistence. APT41 added a registry key in  to establish persistence for Cobalt Strike.", "S0456": " Aria-body  : Aria-body has established persistence via the Startup folder or Run Registry key.", "S0373": " Astaroth  : Astaroth creates a startup item for persistence. ", "S0640": " Avaddon  : Avaddon uses registry run keys for persistence.", "S0414": " BabyShark  : BabyShark has added a Registry key to ensure all future macros are enabled for Microsoft Word and Excel as well as for additional persistence.", "S0093": " Backdoor.Oldrea  : Backdoor.Oldrea adds Registry Run keys to achieve persistence.", "S0031": " BACKSPACE  : BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.", "S0128": " BADNEWS  : BADNEWS installs a registry Run key to establish persistence.", "S0337": " BadPatch  : BadPatch establishes a foothold by adding a link to the malware executable in the startup folder.", "S0534": " Bazar  : Bazar can create or add files to Registry Run Keys to establish persistence.", "S0127": " BBSRAT  : BBSRAT has been loaded through DLL side-loading of a legitimate Citrix executable that is set to persist through the Registry Run key location .", "S0268": " Bisonal  : Bisonal adds itself to the Registry key  for persistence.", "S0570": " BitPaymer  : BitPaymer has set the run key  for persistence.", "S0089": " BlackEnergy  : The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder.", "S0635": " BoomBox  : BoomBox can establish persistence by writing the Registry value  to .", "S0204": " Briba  : Briba creates run key Registry entries pointing to malicious DLLs dropped to disk.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used a batch script that adds a Registry Run key to establish malware persistence.", "S0471": " build_downer  : build_downer has the ability to add itself to the Registry Run key for persistence.", "S0030": " Carbanak  : Carbanak stores a configuration files in the startup directory to automatically execute commands in order to persist across reboots.", "S0484": " Carberp  : Carberp has maintained persistence by placing itself inside the current user's startup folder.", "S0348": " Cardinal RAT  : Cardinal RAT establishes Persistence by setting the   Registry key to point to its executable.", "S0631": " Chaes  : Chaes has added persistence via the Registry key .", "S0144": " ChChes  : ChChes establishes persistence by adding a Registry Run key.", "G0080": " Cobalt Group  : Cobalt Group has used Registry Run keys for persistence. The group has also set a Startup path to launch the PowerShell shell command and download Cobalt Strike.", "S0338": " Cobian RAT  : Cobian RAT creates an autostart Registry key to ensure persistence.", "S0244": " Comnie  : Comnie achieves persistence by adding a shortcut of itself to the startup path in the Registry.", "S0608": " Conficker  : Conficker adds Registry Run keys to establish persistence.", "S0137": " CORESHELL  : CORESHELL has established persistence by creating autostart extensibility point (ASEP) Registry entries in the Run key and other Registry keys, as well as by creating shortcuts in the Internet Explorer Quick Start folder.", "S0046": " CozyCar  : One persistence mechanism used by CozyCar is to set itself to be executed at system startup by adding a Registry value under one of the following Registry keys:    ", "S0115": " Crimson  : Crimson can add Registry run keys for persistence.", "S0235": " CrossRAT  : CrossRAT uses run keys for persistence on Windows", "G0070": " Dark Caracal  : Dark Caracal's version of Bandook adds a registry key to  for persistence.", "S0334": " DarkComet  : DarkComet adds several Registry entries to enable automatic execution at every system startup.", "G0012": " Darkhotel  : Darkhotel has been known to establish persistence by adding programs to the Run Registry key.", "S0186": " DownPaper  : DownPaper uses PowerShell to add a Registry Run key in order to establish persistence.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 added the registry value ntdll to the Registry Run key to establish persistence.", "S0062": " DustySky  : DustySky achieves persistence by creating a Registry entry in .", "S0081": " Elise  : If establishing persistence by installation as a new service fails, one variant of Elise establishes persistence for the created .exe file by setting the following Registry key: . Other variants have set the following Registry keys for persistence:  and .", "S0082": " Emissary  : Variants of Emissary have added Run Registry keys to establish persistence.", "S0367": " Emotet  : Emotet has been observed adding the downloaded payload to the  key to maintain persistence.", "S0363": " Empire  : Empire can modify the registry run keys  and  for persistence.", "S0396": " EvilBunny  : EvilBunny has created Registry keys for persistence in .  ", "S0152": " EvilGrab  : EvilGrab adds a Registry Run key for ctfmon.exe to establish persistence.", "S0568": " EVILNUM  : EVILNUM can achieve persistence through the Registry Run key.", "S0512": " FatDuke  : FatDuke has used  to establish persistence.", "S0267": " FELIXROOT  : FELIXROOT adds a shortcut file to the startup folder for persistence.", "G0051": " FIN10  : FIN10 has established persistence by using the Registry option in PowerShell Empire to add a Run key.", "G0037": " FIN6  : FIN6 has used Registry Run keys to establish persistence for its downloader tools known as HARDTACK and SHIPBREAD.", "G0046": " FIN7  : FIN7 malware has created Registry Run and RunOnce keys to establish persistence, and has also added items to the Startup folder.", "S0355": " Final1stspy  : Final1stspy creates a Registry Run key to establish persistence.", "S0182": " FinFisher  : FinFisher establishes persistence by creating the Registry key .", "S0036": " FLASHFLOOD  : FLASHFLOOD achieves persistence by making an entry in the Registry's Run key.", "G0047": " Gamaredon Group  : Gamaredon Group tools have registered Run keys in the registry to give malicious VBS files persistence.", "S0168": " Gazer  : Gazer can establish persistence by creating a .lnk file in the Start menu.", "S0032": " gh0st RAT  : gh0st RAT has added a Registry Run key to establish persistence.", "S0249": " Gold Dragon  : Gold Dragon establishes persistence in the Startup folder.", "G0078": " Gorgon Group  : Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence.", "S0531": " Grandoreiro  : Grandoreiro can use run keys and create link files in the startup folder for persistence.", "S0417": " GRIFFON  : GRIFFON has used a persistence module that stores the implant inside the Registry, which executes at logon.", "S0632": " GrimAgent  : GrimAgent can set persistence with a Registry run key.", "S0561": " GuLoader  : GuLoader can establish persistence via the Registry under .", "S0499": " Hancitor  : Hancitor  has added Registry Run keys to establish persistence.", "S0170": " Helminth  : Helminth establishes persistence by creating a shortcut in the Start Menu folder.", "S0087": " Hi-Zor  : Hi-Zor creates a Registry Run key to establish persistence.", "G0126": " Higaisa  : Higaisa added a spoofed binary to the start-up folder for persistence.", "G0072": " Honeybee  : Honeybee uses a batch file that configures the ComSysApp service to autostart in order to establish persistence.", "S0070": " HTTPBrowser  : HTTPBrowser has established persistence by setting the  key value for  to the path of the executable. It has also used the Registry entry  to establish persistence.", "S0483": " IcedID  : IcedID has established persistence by creating a Registry run key.", "G0100": " Inception  : Inception has maintained persistence by modifying Registry run key value  .", "S0259": " InnaputRAT  : Some InnaputRAT variants establish persistence by modifying the Registry key .", "S0260": " InvisiMole  : InvisiMole can place a lnk file in the Startup Folder to achieve persistence.", "S0015": " Ixeshe  : Ixeshe can achieve persistence by adding itself to the  Registry key.", "S0389": " JCry  : JCry has created payloads in the Startup directory to maintain persistence. ", "S0044": " JHUHUGIT  : JHUHUGIT has used a Registry Run key to establish persistence by executing JavaScript code within the rundll32.exe process.", "S0088": " Kasidet  : Kasidet creates a Registry Run key to establish persistence.", "S0265": " Kazuar  : Kazuar adds a sub-key under several Registry run keys.", "G0004": " Ke3chang  : Several Ke3chang backdoors achieved persistence by adding a Run key.", "G0094": " Kimsuky  : Kimsuky has placed scripts in the startup folder for persistence.", "S0356": " KONNI  : A version of KONNI drops a Windows shortcut into the Startup folder to establish persistence.", "G0032": " Lazarus Group  : Lazarus Group malware attempts to maintain persistence by saving itself in the Start menu folder or by adding a Registry Run key.", "G0065": " Leviathan  : Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.", "S0513": " LiteDuke  : LiteDuke can create persistence by adding a shortcut in the  Registry key.", "S0397": " LoJax  : LoJax has modified the Registry key  from  to  in order to execute its payload during Windows startup.", "S0582": " LookBack  : LookBack sets up a Registry Run key to establish a persistence mechanism.", "S0532": " Lucifer  : Lucifer can persist by setting Registry key values  and .", "S0409": " Machete  : Machete used the startup folder for persistence.", "G0059": " Magic Hound  : Magic Hound malware has used Registry Run keys to establish persistence.", "S0652": " MarkiRAT  : MarkiRAT can drop its payload into the Startup directory to ensure it automatically runs when the compromised system is started.", "S0167": " Matryoshka  : Matryoshka can establish persistence by adding Registry Run keys.", "S0449": " Maze  : Maze has created a file named \"startup_vrun.bat\" in the Startup folder of a virtual machine to establish persistence.", "S0500": " MCMD  : MCMD can use Registry Run Keys for persistence.", "S0455": " Metamorfo  : Metamorfo has configured persistence to the Registry ket  and used .LNK files in the startup folder to achieve persistence.", "S0080": " Mivast  : Mivast creates the following Registry entry: .", "S0553": " MoleNet  : MoleNet can achieve persitence on the infected machine by setting the Registry run key. ", "G0021": " Molerats  : Molerats saved malicious files within the AppData and Startup folders to maintain persistence.", "S0256": " Mosquito  : Mosquito establishes persistence under the Registry key .", "G0069": " MuddyWater  : MuddyWater has added Registry Run key  to establish persistence.", "G0129": " Mustang Panda  : Mustang Panda has created the registry key  to maintain persistence.", "G0019": " Naikon  : Naikon has modified a victim's Windows Run registry to establish persistence.", "S0228": " NanHaiShu  : NanHaiShu modifies the %regrun% Registry to point itself to an autostart mechanism.", "S0336": " NanoCore  : NanoCore creates a RunOnce key in the Registry to execute its VBS scripts each time the user logs on to the machine.", "S0247": " NavRAT  : NavRAT creates a Registry key to ensure a file gets executed upon reboot in order to establish persistence.", "S0630": " Nebulae  : Nebulae can achieve persistence through a Registry Run key.", "S0034": " NETEAGLE  : The \"SCOUT\" variant of NETEAGLE achieves persistence by adding itself to the  Registry key.", "S0198": " NETWIRE  : NETWIRE creates a Registry start-up entry to establish persistence.", "S0385": " njRAT  : njRAT has added persistence via the Registry key  and dropped a shortcut in .", "S0353": " NOKKI  : NOKKI has established persistence by writing the payload to the Registry key .", "S0644": " ObliqueRAT  : ObliqueRAT can gain persistence by a creating a shortcut in the infected user's Startup directory.", "S0340": " Octopus  : Octopus achieved persistence by placing a malicious executable in the startup directory. ", "S0439": " Okrum  : Okrum establishes persistence by creating a .lnk shortcut to itself in the Startup folder. ", "G0040": " Patchwork  : Patchwork has added the path of its second-stage malware to the startup folder to achieve persistence. One of its file stealers has also persisted by adding a Registry Run key.", "S0124": " Pisloader  : Pisloader establishes persistence via a Registry Run key.", "S0254": " PLAINTEE  : PLAINTEE gains persistence by adding the Registry key .", "S0013": " PlugX  : PlugX adds Run key entries in the Registry to establish persistence.", "S0428": " PoetRAT  : PoetRAT has added a registry key in the ", "S0012": " PoisonIvy  : PoisonIvy creates run key Registry entries pointing to a malicious executable dropped to disk.", "S0139": " PowerDuke  : PowerDuke achieves persistence by using various Registry Run keys.", "S0441": " PowerShower  : PowerShower sets up persistence with a Registry run key.", "S0145": " POWERSOURCE  : POWERSOURCE achieves persistence by setting a Registry Run key, with the path depending on whether the victim account has user or administrator access.", "S0194": " PowerSploit  : PowerSploit's  Persistence argument can be used to establish via the  Registry key.", "S0371": " POWERTON  : POWERTON can install a Registry Run key for persistence.", "S0113": " Prikormka  : Prikormka adds itself to a Registry Run key with the name guidVGA or guidVSA.", "G0056": " PROMETHIUM  : PROMETHIUM has used Registry run keys to establish persistence.", "S0147": " Pteranodon  : Pteranodon copies itself to the Startup folder to establish persistence.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY has been observed using a Registry Run key.", "S0192": " Pupy  : Pupy adds itself to the startup folder or adds itself to the Registry key  for persistence.", "G0024": " Putter Panda  : A dropper used by Putter Panda installs itself into the ASEP Registry key  with a value named McUpdate.", "S0650": " QakBot  : QakBot can maintain persistence by creating an auto-run Registry key.", "S0458": " Ramsay  : Ramsay has created Registry Run keys to establish persistence.", "S0172": " Reaver  : Reaver creates a shortcut file and saves it in a Startup folder to establish persistence.", "S0153": " RedLeaves  : RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence. If this fails, it attempts to add Registry Run keys.", "S0332": " Remcos  : Remcos can add itself to the Registry key  for persistence.", "S0375": " Remexi  : Remexi utilizes Run Registry keys in the HKLM hive as a persistence mechanism.", "S0379": " Revenge RAT  : Revenge RAT creates a Registry key at  to survive a system reboot.", "S0433": " Rifdoor  : Rifdoor has created a new registry entry at  with a value of .", "G0106": " Rocke  : Rocke's miner has created UPX-packed files in the Windows Start Menu Folder.    ", "S0270": " RogueRobin  : RogueRobin created a shortcut in the Windows startup folder to launch a PowerShell script each time the user logs in to establish persistence.", "S0090": " Rover  : Rover persists by creating a Registry entry in .", "S0148": " RTM  : RTM tries to add a Registry Run key under the name \"Windows Update\" to establish persistence.", "G0048": " RTM  : RTM has used Registry run keys to establish persistence for the RTM Trojan and other tools, such as a modified version of TeamViewer remote desktop software.", "S0253": " RunningRAT  : RunningRAT adds itself to the Registry key  to establish persistence upon reboot.", "S0446": " Ryuk  : Ryuk has used the Windows command line to create a Registry entry under  to establish persistence.", "S0085": " S-Type  : S-Type may create a .lnk file to itself that is saved in the Start menu folder. It may also create the Registry key .", "S0074": " Sakula  : Most Sakula samples maintain persistence by setting the Registry Run key  in the HKLM or HKCU hive, with the Registry value and file name varying by sample.", "S0461": " SDBbot  : SDBbot has the ability to add a value to the Registry Run key to establish persistence if it detects it is running with regular user privilege. ", "S0053": " SeaDuke  : SeaDuke is capable of persisting via the Registry Run key or a .lnk file stored in the Startup directory.", "S0345": " Seasalt  : Seasalt creates a Registry entry to ensure infection after reboot under .", "S0382": " ServHelper  : ServHelper may attempt to establish persistence via the  run key.", "G0104": " Sharpshooter  : Sharpshooter's first-stage downloader installed Rising Sun to the startup folder .    ", "S0546": " SharpStage  : SharpStage has the ability to create persistence for the malware using the Registry autorun key and startup folder. ", "S0444": " ShimRat  : ShimRat has installed a registry based start-up key  to maintain persistence should other methods fail.", "S0028": " SHIPSHAPE  : SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder.", "G0121": " Sidewinder  : Sidewinder has added paths to executables in the Registry to establish persistence.", "G0091": " Silence  : Silence has used , , and the Startup folder to establish persistence.  ", "S0226": " Smoke Loader  : Smoke Loader adds a Registry Run key for persistence and adds a script in the Startup folder to deploy the payload.", "S0649": " SMOKEDHAM  : SMOKEDHAM has used  to create a Registry Run key.", "S0159": " SNUGRIDE  : SNUGRIDE establishes persistence through a Registry Run key.", "S0035": " SPACESHIP  : SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder.", "S0058": " SslMM  : To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut.", "S0491": " StrongPity  : StrongPity can use the  Registry key for persistence.", "S0018": " Sykipot  : Sykipot has been known to establish persistence by adding programs to the Run Registry key.", "S0011": " Taidoor  : Taidoor has modified the  key for persistence.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE can copy itself into the current user\u2019s Startup folder as \"Narrator.exe\" for persistence.", "G0139": " TeamTNT  : TeamTNT has added batch scripts to the startup folder.", "G0027": " Threat Group-3390  : A Threat Group-3390 tool can add the binary\u2019s path to the Registry key  to add persistence.", "S0131": " TINYTYPHON  : TINYTYPHON installs itself under Registry Run key to establish persistence.", "S0004": " TinyZBot  : TinyZBot can create a shortcut in the Windows startup folder for persistence.", "S0266": " TrickBot  : TrickBot establishes persistence in the Startup folder.", "S0094": " Trojan.Karagany  : Trojan.Karagany can create a link to itself in the Startup folder to automatically start itself upon system restart.", "G0081": " Tropic Trooper  : Tropic Trooper has created shortcuts in the Startup folder to establish persistence.", "S0178": " Truvasys  : Truvasys adds a Registry Run key to establish persistence.", "S0647": " Turian  : Turian can establish persistence by adding Registry Run keys.", "G0010": " Turla  : A Turla Javascript backdoor added a local_update_check value under the Registry key  to establish persistence. Additionally, a Turla custom executable containing Metasploit shellcode is saved to the Startup folder to gain persistence.", "S0199": " TURNEDUP  : TURNEDUP is capable of writing to a Registry Run key to establish.", "S0386": " Ursnif  : Ursnif has used Registry Run keys to establish automatic execution at system startup.", "S0136": " USBStealer  : USBStealer registers itself under a Registry Run key with the name \"USB Disk Security.\"", "S0207": " Vasport  : Vasport copies itself to disk and creates an associated run key Registry entry to establish.", "S0442": " VBShower  : VBShower used  to maintain persistence.", "G0112": " Windshift  : Windshift has created LNK files in the Startup folder to establish persistence.", "G0102": " Wizard Spider  : Wizard Spider has established persistence via the Registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run and a shortcut within the startup folder.", "S0341": " Xbash  : Xbash can create a Startup item for persistence if it determines it is on a Windows system.", "S0251": " Zebrocy  : Zebrocy creates an entry in a Registry Run key for the malware to execute on startup.", "S0330": " Zeus Panda  : Zeus Panda adds persistence by creating Registry Run keys.", "G0128": " ZIRCONIUM  : ZIRCONIUM has created a Registry Run key named  to establish persistence for a malicious Python binary."}, "mitigations": {"mitigations": "This type of attack technique cannot be easily mitigated with preventive controls since\n                                    it is based on the abuse of system features."}, "id": "T1547.001", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "capecid": ["CAPEC-270"], "contributors": ["Oddvar Moe, @oddvarmoe"], "version": "1.1", "created": "23 January 2020", "lastmodified": "06 January 2021"}, {"techniquename": "Port Monitors", "detection": "Monitor process API calls to . Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to . Run the Autoruns utility, which checks for this Registry key as a persistence mechanism ", "description": "Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the  API call to set a DLL to be loaded at startup.  This DLL can be located in  and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions.  Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to . The Registry key contains entries for the following:Adversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.", "id": "T1547.010", "subtechniqueof": "T1547", "tactics": ["Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "effectivepermissions": ["SYSTEM"], "contributors": ["Stefan Kanthak; Travis Smith, Tripwire"], "version": "1.0", "created": "24 January 2020", "lastmodified": "24 January 2020"}, {"techniquename": "SSH Authorized Keys", "detection": "Use file integrity monitoring to detect changes made to the  file for each user on a system. Monitor for suspicious processes modifying the  file.Monitor for changes to and suspicious processes modifiying .", "description": "Adversaries may modify the SSH  file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The  file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under . Users may edit the system\u2019s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under .Adversaries may modify SSH  files directly with scripts or shell commands to add their own adversary-supplied public keys. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH. ", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable SSH if it is not necessary on a host or restrict SSH access for specific users/groups using .", "M1022": " Restrict File and Directory Permissions  : Restrict access to the  file."}, "procedureexamples": {"S0482": " Bundlore  : Bundlore creates a new key pair with  and drops the newly created user key in  to enable remote login.", "S0468": " Skidmap  : Skidmap has the ability to add the public key of its handlers to the  file to maintain persistence on an infected host.", "G0139": " TeamTNT  : TeamTNT has added RSA keys in .", "S0658": " XCSSET  : XCSSET will create an ssh key if necessary with the  command. XCSSET will upload a private key file to the server to remotely access the host without a password. "}, "id": "T1098.004", "subtechniqueof": "T1098", "tactics": ["Persistence"], "platforms": ["Linux, macOS"], "permissionsrequired": ["Administrator, User"], "contributors": ["Tony Lambert, Red Canary"], "version": "1.0", "created": "24 June 2020", "lastmodified": "25 June 2020"}, {"techniquename": "Account Manipulation", "detection": "Collect events that correlate with changes to account objects and/or permissions on systems and the domain, such as event IDs 4738, 4728 and 4670. Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems. Especially flag events where the subject and target accounts differ or that include additional flags such as changing a password without knowledge of the old password.Monitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.Monitor for unusual permissions changes that may indicate excessively broad permissions being granted to compromised accounts.", "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts.", "M1030": " Network Segmentation  : Configure access controls and firewalls to limit access to critical systems and domain controllers. Most cloud environments support separate virtual private cloud (VPC) instances that enable further segmentation of cloud systems.", "M1028": " Operating System Configuration  : Protect domain controllers by ensuring proper security configuration for critical servers to limit access by potentially unnecessary protocols and services, such as SMB file sharing.", "M1026": " Privileged Account Management  : Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."}, "procedureexamples": {"G0022": " APT3  : APT3 has been known to add created accounts to local admin groups to maintain elevated access.", "S0274": " Calisto  : Calisto adds permissions and remote logins to all users.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 added newly created accounts to the administrators group to maintain elevated access.", "G0032": " Lazarus Group  : Lazarus Group malware WhiskeyDelta-Two contains a function that attempts to rename the administrator\u2019s account.", "S0002": " Mimikatz  : The Mimikatz credential dumper has been extended to include Skeleton Key domain controller authentication bypass functionality. The  and  modules can also manipulate the password hash of an account without knowing the clear text value.", "G0034": " Sandworm Team  : Sandworm Team used the  command in MS-SQL to create a link between a created account and other servers in the network.", "S0649": " SMOKEDHAM  : SMOKEDHAM has added created user accounts to local Admin groups."}, "id": "T1098", "subtechniques": ["T1098.001", "T1098.002", "T1098.003", "T1098.004"], "tactics": ["Persistence"], "platforms": ["Azure AD, Google Workspace, IaaS, Linux, Office 365, Windows, macOS"], "contributors": ["Jannie Li, Microsoft Threat Intelligence\u202fCenter\u202f(MSTIC); Praetorian; Tim MalcomVetter"], "version": "2.2", "created": "31 May 2017", "lastmodified": "18 October 2021"}, {"techniquename": "Additional Cloud Credentials", "detection": "Monitor Azure Activity Logs for Service Principal and Application modifications. Monitor for the usage of APIs that create or import SSH keys, particularly by unexpected users or accounts such as the root account.Monitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.", "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.Adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD. These credentials include both x509 keys and passwords. With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.In infrastructure-as-a-service (IaaS) environments, after gaining access through Cloud Accounts, adversaries may generate or import their own SSH keys using either the  or  API in AWS or the  command in GCP. This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts. Consider enforcing multi-factor authentication for the  and  API calls through IAM policies.", "M1030": " Network Segmentation  : Configure access controls and firewalls to limit access to critical systems and domain controllers. Most cloud environments support separate virtual private cloud (VPC) instances that enable further segmentation of cloud systems.", "M1026": " Privileged Account Management  : Do not allow domain administrator or root accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."}, "procedureexamples": {"G0016": " APT29  : APT29 has added credentials to OAuth Applications and Service Principals. "}, "id": "T1098.001", "subtechniqueof": "T1098", "tactics": ["Persistence"], "platforms": ["Azure AD, IaaS"], "permissionsrequired": ["Administrator, User"], "contributors": ["Expel; Jannie Li, Microsoft Threat Intelligence\u202fCenter\u202f(MSTIC); Oleg Kolesnikov, Securonix"], "version": "2.2", "created": "19 January 2020", "lastmodified": "08 March 2021"}, {"techniquename": "Windows Management Instrumentation", "detection": "Monitor network traffic for WMI connections; the use of WMI in environments that do not typically use WMI may be suspect. Perform process monitoring to capture command-line arguments of \"wmic\" and detect commands that are used to perform remote behavior. ", "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model (DCOM) and Windows Remote Management (WinRM).  Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.  An adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as remote Execution of files as part of Lateral Movement.  ", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to block processes created by WMI commands from running. Note: many legitimate tools and applications utilize WMI for command execution. ", "M1038": " Execution Prevention  : Use application control configured to block execution of  if it is not required for a given system or network to prevent potential misuse by adversaries. For example, in Windows 10 and Windows Server 2016 and above, Windows Defender Application Control (WDAC) policy rules may be applied to block the  application and to prevent abuse.", "M1026": " Privileged Account Management  : Prevent credential overlap across systems of administrator and privileged accounts. ", "M1018": " User Account Management  : By default, only administrators are allowed to connect remotely using WMI. Restrict other users who are allowed to connect, or disallow all users to connect remotely to WMI."}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla has used wmi queries to gather information from the system. ", "G0016": " APT29  : APT29 used WMI to steal credentials and execute backdoors at a future time. They have also used WMI for the remote execution of files for lateral movement.", "G0050": " APT32  : APT32 used WMI to deploy their tools on remote machines and to gather information about the Outlook process.", "G0096": " APT41  : APT41 used WMI in several ways, including for execution of commands via WMIEXEC as well as for persistence via PowerSploit.", "S0373": " Astaroth  : Astaroth uses WMIC to execute payloads. ", "S0640": " Avaddon  : Avaddon uses wmic.exe to delete shadow copies.", "S0534": " Bazar  : Bazar can execute a WMI query to gather information about the installed antivirus engine.", "S0089": " BlackEnergy  : A BlackEnergy 2 plug-in uses WMI to gather victim host details.", "G0108": " Blue Mockingbird  : Blue Mockingbird has used wmic.exe to set environment variables.", "G0114": " Chimera  : Chimera has used WMIC to execute remote commands.", "S0154": " Cobalt Strike  : Cobalt Strike can use WMI to deliver a payload to a remote host.", "S0488": " CrackMapExec  : CrackMapExec can execute remote commands using Windows Management Instrumentation.  ", "S0616": " DEATHRANSOM  : DEATHRANSOM has the ability to use WMI to delete volume shadow copies.", "G0009": " Deep Panda  : The Deep Panda group is known to utilize WMI for lateral movement.", "S0062": " DustySky  : The DustySky dropper uses Windows Management Instrumentation to extract information about the operating system and whether an anti-virus is active.", "S0605": " EKANS  : EKANS can use Windows Mangement Instrumentation (WMI) calls to execute operations.", "S0367": " Emotet  : Emotet has used WMI to execute powershell.exe.", "S0363": " Empire  : Empire can use WMI to deliver a payload to a remote host. ", "S0396": " EvilBunny  : EvilBunny has used WMI to gather information about the system.", "S0568": " EVILNUM  : EVILNUM has used the Windows Management Instrumentation (WMI) tool to enumerate infected machines.", "S0267": " FELIXROOT  : FELIXROOT uses WMI to query the Windows Registry.", "G0037": " FIN6  : FIN6 has used WMI to automate the remote execution of PowerShell scripts.  ", "G0046": " FIN7  : FIN7 has used WMI to install malware on targeted systems.", "G0061": " FIN8  : FIN8's malicious spearphishing payloads use WMI to launch malware and spawn cmd.exe execution. FIN8 has also used WMIC for lateral movement as well as during and post compromise cleanup activities.", "S0618": " FIVEHANDS  : FIVEHANDS can use WMI to delete files on a  target machine.", "S0381": " FlawedAmmyy  : FlawedAmmyy leverages WMI to enumerate anti-virus on the victim.", "G0101": " Frankenstein  : Frankenstein has used WMI queries to check if various security applications were running, as well as the operating system version.", "G0093": " GALLIUM  : GALLIUM used WMI for execution to assist in lateral movement as well as for installing tools across multiple assets.", "S0237": " GravityRAT  : GravityRAT collects various information via WMI requests, including CPU information in the Win32_Processor entry (Processor ID, Name, Manufacturer and the clock speed).", "S0151": " HALFBAKED  : HALFBAKED can use WMI queries to gather system information.", "S0617": " HELLOKITTY  : HELLOKITTY can use WMI to delete volume shadow copies.", "S0376": " HOPLIGHT  : HOPLIGHT has used WMI to recompile the Managed Object Format (MOF) files in the WMI repository. ", "S0483": " IcedID  : IcedID has used WMI to execute binaries.", "S0357": " Impacket  : Impacket's wmiexec module can be used to execute commands through WMI.", "G0119": " Indrik Spider  : Indrik Spider has used WMIC to execute commands on remote computers. ", "S0283": " jRAT  : jRAT uses WMIC to identify anti-virus products installed on the victim\u2019s machine and to obtain firewall details.", "S0265": " Kazuar  : Kazuar obtains a list of running processes through WMI querying.", "S0250": " Koadic  : Koadic can use WMI to execute commands.", "S0156": " KOMPROGO  : KOMPROGO is capable of running WMI queries.", "G0032": " Lazarus Group  : Lazarus Group malware SierraAlfa uses the Windows Management Instrumentation Command-line application wmic to start itself on a target system during lateral movement.", "G0065": " Leviathan  : Leviathan has used WMI for execution.", "S0532": " Lucifer  : Lucifer can use WMI to log into remote machines for propagation.", "S0449": " Maze  : Maze has used WMI to attempt to delete the shadow volumes on a machine, and to connect a virtual machine to the network domain of the victim organization's network. ", "G0045": " menuPass  : menuPass has used a modified version of pentesting script wmiexec.vbs, which logs into a remote machine using WMI.", "S0339": " Micropsia  : Micropsia searches for anti-virus software and firewall products installed on the victim\u2019s machine using WMI.", "S0553": " MoleNet  : MoleNet can perform WMI commands on the system.", "S0256": " Mosquito  : Mosquito's installer uses WMI to search for antivirus display names.", "G0069": " MuddyWater  : MuddyWater has used malware that leveraged WMI for execution and querying host information.", "G0129": " Mustang Panda  : Mustang Panda has executed PowerShell scripts via WMI.", "G0019": " Naikon  : Naikon has used WMIC.exe for lateral movement.", "S0457": " Netwalker  : Netwalker can use WMI to delete Shadow Volumes. ", "S0368": " NotPetya  : NotPetya can use  to help propagate itself across a network.", "S0340": " Octopus  : Octopus has used wmic.exe for local discovery information.", "G0049": " OilRig  : OilRig has used WMI for execution.", "S0365": " Olympic Destroyer  : Olympic Destroyer uses WMI to help propagate itself across a network.", "S0264": " OopsIE  : OopsIE uses WMI to perform discovery techniques.", "G0116": " Operation Wocao  : Operation Wocao has used WMI to execute commands.", "S0378": " PoshC2  : PoshC2 has a number of modules that use WMI to execute tasks.", "S0194": " PowerSploit  : PowerSploit's  CodeExecution module uses WMI to execute and retrieve the output from a PowerShell payload.", "S0223": " POWERSTATS  : POWERSTATS can use WMI queries to retrieve data from compromised hosts.", "S0184": " POWRUNER  : POWRUNER may use WMI when collecting information about a victim.", "S0654": " ProLock  : ProLock can use WMIC to execute scripts on targeted hosts.", "S0650": " QakBot  : QakBot can execute WMI queries to gather information.", "S0241": " RATANKBA  : RATANKBA uses WMI to perform process monitoring.", "S0375": " Remexi  : Remexi executes received commands with wmic.exe (for WMI commands). ", "S0496": " REvil  : REvil can use WMI to monitor for and kill specific processes listed in its configuration file.", "S0270": " RogueRobin  : RogueRobin uses various WMI queries to check if the sample is running in a sandbox.", "G0034": " Sandworm Team  : Sandworm Team has used VBScript to run WMI queries. ", "S0546": " SharpStage  : SharpStage can use WMI for execution.", "S0589": " Sibot  : Sibot has used WMI to discover network connections and configurations. Sibot has also used the Win32_Process class to execute a malicious DLL.", "G0038": " Stealth Falcon  : Stealth Falcon malware gathers system information via Windows Management Instrumentation (WMI).", "S0380": " StoneDrill  : StoneDrill has used the WMI command-line (WMIC) utility to run tasks.", "S0603": " Stuxnet  : Stuxnet used WMI with an  token to execute on a remote share.", "S0559": " SUNBURST  : SUNBURST used the WMI query  to retrieve a driver listing.", "G0027": " Threat Group-3390  : A Threat Group-3390 tool can use WMI to execute a binary.", "S0386": " Ursnif  : Ursnif droppers have used WMI classes to execute PowerShell commands.", "S0476": " Valak  : Valak can use  in a scheduled task to launch plugins and for execution.", "S0366": " WannaCry  : WannaCry utilizes  to delete shadow copies.", "G0112": " Windshift  : Windshift has used WMI to collect information about target machines.", "G0102": " Wizard Spider  : Wizard Spider has used WMI and LDAP queries for network discovery and to move laterally.", "S0251": " Zebrocy  : One variant of Zebrocy uses WMI queries to gather information."}, "id": "T1047", "subtechniques": ["No sub-techniques"], "tactics": ["Execution"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "supportsremote": ["Yes"], "contributors": ["@ionstorm"], "version": "1.2", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Exchange Email Delegate Permissions", "detection": "Monitor for unusual Exchange and Office 365 email account permissions changes that may indicate excessively broad permissions being granted to compromised accounts.Enable the UpdateFolderPermissions action for all logon types. The mailbox audit log will forward folder permission modification events to the Unified Audit Log. Create rules to alert on ModifyFolderPermissions operations where the Anonymous or Default user is assigned permissions other than None. A larger than normal volume of emails sent from an account and similar phishing emails sent from \u202freal accounts within a network may be a sign that an account was compromised and attempts to leverage access with modified email permissions is occurring.", "description": "Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The  PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.Adversaries may also assign mailbox folder permissions through individual folder permissions or roles. Adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user\u2019s mail folders.This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can assign more access rights to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts.", "M1026": " Privileged Account Management  : Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."}, "procedureexamples": {"G0007": " APT28  : APT28 has used a Powershell cmdlet to grant the  role to a compromised account.", "G0016": " APT29  : APT29 added their own devices as allowed IDs for active sync using , allowing it to obtain copies of victim mailboxes. It also added additional permissions (such as Mail.Read and Mail.ReadWrite) to compromised Application or Service Principals.", "G0059": " Magic Hound  : Magic Hound granted compromised email accounts read access to the email boxes of additional targeted accounts. The group then was able to authenticate to the intended victim's OWA (Outlook Web Access) portal and read hundreds of email communications for information on Middle East organizations. "}, "id": "T1098.002", "subtechniqueof": "T1098", "tactics": ["Persistence"], "platforms": ["Office 365, Windows"], "permissionsrequired": ["Administrator"], "contributors": ["Jannie Li, Microsoft Threat Intelligence\u202fCenter\u202f(MSTIC); Microsoft Detection and Response Team (DART); Mike Burns, Mandiant; Naveen Vijayaraghavan, Nilesh Dherange (Gurucul)"], "version": "1.1", "created": "19 January 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Add Office 365 Global Administrator Role", "detection": "Collect usage logs from cloud administrator accounts to identify unusual activity in the assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins. ", "description": "An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role. This account modification may immediately follow Create Account or other malicious account activity.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication for user and privileged accounts.", "M1026": " Privileged Account Management  : Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."}, "id": "T1098.003", "subtechniqueof": "T1098", "tactics": ["Persistence"], "platforms": ["Office 365"], "permissionsrequired": ["Administrator"], "contributors": ["Microsoft Threat Intelligence Center (MSTIC)"], "version": "1.0", "created": "19 January 2020", "lastmodified": "24 March 2020"}, {"techniquename": "Service Execution", "detection": "Changes to service Registry entries and command line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool .", "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager () is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as  and Net.PsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and  can accept remote servers as arguments and may be used to conduct remote execution.Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to block processes created by PsExec from running. ", "M1026": " Privileged Account Management  : Ensure that permissions disallow services that run at a higher permissions level from being created or interacted with by a user with a lower permission level.", "M1022": " Restrict File and Directory Permissions  : Ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level."}, "procedureexamples": {"S0504": " Anchor  : Anchor can create and execute services to load its payload.", "G0050": " APT32  : APT32's backdoor has used Windows services as a way to execute its malicious payload. ", "G0082": " APT38  : APT38 has created new services or modified existing ones to run executables, commands, or scripts.", "G0087": " APT39  : APT39 has used post-exploitation tools including RemCom and the Non-sucking Service Manager (NSSM) to execute processes.", "G0096": " APT41  : APT41 used  svchost.exe and Net to execute a system service installed to launch a Cobalt Strike BEACON loader.", "S0438": " Attor  : Attor's dispatcher can be executed as a service.", "S0606": " Bad Rabbit  : Bad Rabbit drops a file named into the Windows directory and is executed through SCManager and .", "S0127": " BBSRAT  : BBSRAT can start, stop, or delete services.", "G0108": " Blue Mockingbird  : Blue Mockingbird has executed custom-compiled XMRIG miner DLLs by configuring them to execute via the \"wercplsupport\" service.   ", "G0114": " Chimera  : Chimera has used PsExec to deploy beacons on compromised systems.", "S0154": " Cobalt Strike  : Cobalt Strike can use PsExec to execute a payload on a remote host. It can also use Service Control Manager to start new services.", "S0363": " Empire  : Empire can use PsExec to execute a payload on a remote host.", "G0037": " FIN6  : FIN6 has created Windows services to execute encoded PowerShell commands.", "S0032": " gh0st RAT  : gh0st RAT can execute its service if the Service key exists. If the key does not exist, gh0st RAT will create and run the service.", "G0072": " Honeybee  : Honeybee launches a DLL file that gets executed as a service using svchost.exe", "S0376": " HOPLIGHT  : HOPLIGHT has used svchost.exe to execute a malicious DLL .", "S0203": " Hydraq  : Hydraq uses svchost.exe to execute a malicious DLL included in a new service group.", "S0398": " HyperBro  : HyperBro has the ability to start and stop a specified service.", "S0357": " Impacket  : Impacket contains various modules emulating other service execution tools such as PsExec.", "S0260": " InvisiMole  : InvisiMole has used Windows services as a way to execute its malicious payload.", "G0004": " Ke3chang  : Ke3chang has used a tool known as RemoteExec (similar to PsExec) to remotely execute batch scripts and binaries.", "S0250": " Koadic  : Koadic can run a command on another machine using PsExec.", "S0451": " LoudMiner  : LoudMiner started the cryptomining virtual machine as a service on the infected machine.", "S0039": " Net  : The  and  commands can be used in Net to execute or stop Windows services.", "S0056": " Net Crawler  : Net Crawler uses PsExec to perform remote service manipulation to execute a copy of itself as part of lateral movement.", "S0457": " Netwalker  : Operators deploying Netwalker have used psexec and certutil to retrieve the Netwalker payload.", "S0368": " NotPetya  : NotPetya can use PsExec to help propagate itself across a network.", "S0439": " Okrum  : Okrum's loader can create a new service named NtmsSvc to execute the payload.", "S0365": " Olympic Destroyer  : Olympic Destroyer utilizes PsExec to help propagate itself across a network.", "G0116": " Operation Wocao  : Operation Wocao has created services on remote systems for execution purposes.", "S0378": " PoshC2  : PoshC2 contains an implementation of PsExec for remote execution.", "S0238": " Proxysvc  : Proxysvc registers itself as a service on the victim\u2019s machine to run as a standalone process.", "S0029": " PsExec  : Microsoft Sysinternals PsExec is a popular administration tool that can be used to execute binaries on remote systems using a temporary Windows service.", "S0192": " Pupy  : Pupy uses PsExec to execute a payload or commands on a remote host.", "S0583": " Pysa  : Pysa has used PsExec to copy and execute the ransomware.", "S0481": " Ragnar Locker  : Ragnar Locker has used sc.exe to execute a service that it creates.", "S0166": " RemoteCMD  : RemoteCMD can execute commands remotely by creating a new service on the remote system.", "S0140": " Shamoon  : Shamoon creates a new service named \"ntssrv\" to execute the payload. Shamoon can also spread via PsExec.", "G0091": " Silence  : Silence has used Winexe to install a service on the remote system.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA has the capability to start services.", "S0491": " StrongPity  : StrongPity can install a service to execute itself as a service.", "S0612": " WastedLocker  : WastedLocker can execute itself as a service.", "S0191": " Winexe  : Winexe installs a service on the remote system, executes the command, then uninstalls the service.", "S0176": " Wingbird  : Wingbird uses services.exe to register a new autostart service named \"Audit Service\" using a copy of the local lsass.exe file.", "G0102": " Wizard Spider  : Wizard Spider has used services.exe to execute scripts and executables during lateral movement within a victim network.", "S0123": " xCmd  : xCmd can be used to execute binaries on remote systems by creating and starting a service."}, "id": "T1569.002", "subtechniqueof": "T1569", "tactics": ["Execution"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, SYSTEM"], "supportsremote": ["Yes"], "version": "1.1", "created": "10 March 2020", "lastmodified": "30 August 2021"}, {"techniquename": "User Execution", "detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to  in payloads.Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).", "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.While User Execution frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent executable files from running unless they meet a prevalence, age, or trusted list criteria and to prevent Office applications from creating potentially malicious executable content by blocking malicious code from being written to disk. Note: cloud-delivered protection must be enabled to use certain rules. ", "M1038": " Execution Prevention  : Application control may be able to prevent the running of executables masquerading as other files.", "M1031": " Network Intrusion Prevention  : If a link is being visited by a user, network intrusion prevention systems and systems designed to scan and remove malicious downloads can be used to block activity.", "M1021": " Restrict Web-Based Content  : If a link is being visited by a user, block unknown or unused files in transit by default that should not be downloaded or by policy from suspicious sites as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some download scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious files.", "M1017": " User Training  : Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."}, "id": "T1204", "subtechniques": ["T1204.001", "T1204.002", "T1204.003"], "tactics": ["Execution"], "platforms": ["Containers, IaaS, Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Oleg Skulkin, Group-IB"], "version": "1.4", "created": "18 April 2018", "lastmodified": "26 August 2021"}, {"techniquename": "Malicious Image", "detection": "Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.", "description": "Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via Upload Malware, and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.Adversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex: Match Legitimate Name or Location).", "mitigations": {"M1047": " Audit  : Audit images deployed within the environment to ensure they do not contain any malicious components.", "M1045": " Code Signing  : Utilize a trust model such as Docker Content Trust with digital signatures to ensure runtime verification of the integrity and publisher of specific image tags.", "M1031": " Network Intrusion Prevention  : Network prevention intrusion systems and systems designed to scan and remove malicious downloads can be used to block activity.", "M1017": " User Training  : Train users to be aware of the existence of malicious images and how to avoid deploying instances and containers from them."}, "procedureexamples": {"G0139": " TeamTNT  : TeamTNT relies on users to download and execute malicious Docker images."}, "id": "T1204.003", "subtechniqueof": "T1204", "tactics": ["Execution"], "platforms": ["Containers, IaaS"], "permissionsrequired": ["User"], "contributors": ["Center for Threat-Informed Defense (CTID); Vishwas Manral, McAfee"], "version": "1.1", "created": "30 March 2021", "lastmodified": "26 August 2021"}, {"techniquename": "Malicious Link", "detection": "Inspect network traffic for indications that a user visited a malicious site, such as links included in phishing campaigns directed at your organization.Anti-virus can potentially detect malicious documents and files that are downloaded from a link and executed on the user's computer.", "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.", "mitigations": {"M1031": " Network Intrusion Prevention  : If a link is being visited by a user, network intrusion prevention systems and systems designed to scan and remove malicious downloads can be used to block activity.", "M1021": " Restrict Web-Based Content  : If a link is being visited by a user, block unknown or unused files in transit by default that should not be downloaded or by policy from suspicious sites as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some download scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious files.", "M1017": " User Training  : Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."}, "procedureexamples": {"S0584": " AppleJeus  : AppleJeus's spearphishing links required user interaction to navigate to the malicious website.", "G0007": " APT28  : APT28 has tricked unwitting recipients into clicking on malicious hyperlinks within emails crafted to resemble trustworthy senders.", "G0016": " APT29  : APT29 has used various forms of spearphishing attempting to get a user to click on a malicous link.", "G0022": " APT3  : APT3 has lured victims into clicking malicious links delivered through spearphishing.", "G0050": " APT32  : APT32 has lured targets to download a Cobalt Strike beacon by including a malicious link within spearphishing emails.", "G0064": " APT33  : APT33 has lured users to click links to malicious HTML applications delivered via spearphishing emails.", "G0087": " APT39  : APT39 has sent spearphishing emails in an attempt to lure users to click on a malicious link.", "S0475": " BackConfig  : BackConfig has compromised victims via links to URLs hosting malicious content.", "S0534": " Bazar  : Bazar can gain execution after a user clicks on a malicious link to decoy landing pages hosted on Google Docs.", "G0098": " BlackTech  : BlackTech has used e-mails with malicious links to lure victims into installing malware.  ", "G0080": " Cobalt Group  : Cobalt Group has sent emails containing malicious links that require users to execute a file or macro to infect the victim machine.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 has used various forms of spearphishing in attempts to get users to open links.", "G0066": " Elderwood  : Elderwood has leveraged multiple types of spearphishing in order to attempt to get a user to open links.", "S0367": " Emotet  : Emotet has relied upon users clicking on a malicious link delivered through spearphishing.", "G0120": " Evilnum  : Evilnum has sent spearphishing emails designed to trick the recipient into opening malicious shortcut links which downloads a .LNK file.", "G0085": " FIN4  : FIN4 has lured victims to click malicious links delivered via spearphishing emails (often sent from compromised accounts).", "G0046": " FIN7  : FIN7 has used malicious links to lure victims into downloading malware.", "G0061": " FIN8  : FIN8 has used emails with malicious links to lure victims into installing malware.", "S0531": " Grandoreiro  : Grandoreiro has used malicious links to gain execution on victim machines.", "S0561": " GuLoader  : GuLoader has relied upon users clicking on links to malicious documents.", "S0499": " Hancitor  : Hancitor has relied upon users clicking on a malicious link delivered through phishing.", "S0528": " Javali  : Javali has achieved execution through victims clicking links to malicious websites.", "S0585": " Kerrdown  : Kerrdown has gained execution through victims opening malicious links.", "G0065": " Leviathan  : Leviathan has sent spearphishing email links attempting to get a user to click.", "G0095": " Machete  : Machete has has relied on users opening malicious links delivered through spearphishing to execute malware.", "G0059": " Magic Hound  : Magic Hound has attempted to lure victims into opening malicious links embedded in emails.", "S0530": " Melcoz  : Melcoz has gained execution through victims opening malicious links.", "G0103": " Mofang  : Mofang's spearphishing emails required a user to click the link to connect to a compromised website.", "G0021": " Molerats  : Molerats has sent malicious links via email trick users into opening a RAR archive and running an executable. ", "G0069": " MuddyWater  : MuddyWater has distributed URLs in phishing e-mails that link to lure documents.", "G0129": " Mustang Panda  : Mustang Panda has sent malicious links directing victims to a Google Drive folder.", "S0198": " NETWIRE  : NETWIRE has been executed through convincing victims into clicking malicious links.", "G0014": " Night Dragon  : Night Dragon enticed users to click on links in spearphishing emails to download malware.", "S0644": " ObliqueRAT  : ObliqueRAT has gained execution on targeted systems through luring users to click on links to malicious URLs.", "G0049": " OilRig  : OilRig has delivered malicious links to achieve execution on the target system.", "G0040": " Patchwork  : Patchwork has used spearphishing with links to try to get users to click, download and open malicious files.", "S0435": " PLEAD  : PLEAD has been executed via malicious links in e-mails.", "S0453": " Pony  : Pony has attempted to lure targets into clicking links in spoofed emails from legitimate banks.  ", "S0650": " QakBot  : QakBot has gained execution through users opening malicious links.", "G0034": " Sandworm Team  : Sandworm Team has tricked unwitting recipients into clicking on malicious hyperlinks within emails crafted to resemble trustworthy senders.", "G0121": " Sidewinder  : Sidewinder has lured targets to click on malicious links to gain execution in the target environment.", "S0649": " SMOKEDHAM  : SMOKEDHAM has relied upon users clicking on a malicious link delivered through phishing.", "S0646": " SpicyOmelette  : SpicyOmelette has been executed through malicious links within spearphishing emails.", "G0092": " TA505  : TA505 has used lures to get users to click links in emails and attachments. For example, TA505 makes their malware look like legitimate Microsoft Word documents, .pdf and/or .lnk files. ", "G0134": " Transparent Tribe  : Transparent Tribe has directed users to open URLs hosting malicious content.", "S0436": " TSCookie  : TSCookie has been executed via malicious links embedded in e-mails spoofing the Ministries of Education, Culture, Sports, Science and Technology of Japan.", "G0010": " Turla  : Turla has used spearphishing via a link to get users to download and run their malware.", "G0112": " Windshift  : Windshift has used links embedded in e-mails to lure victims into executing malicious code.", "G0102": " Wizard Spider  : Wizard Spider has lured victims into clicking a malicious link delivered through spearphishing.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used malicious links in e-mails to lure victims into downloading malware."}, "id": "T1204.001", "subtechniqueof": "T1204", "tactics": ["Execution"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.0", "created": "11 March 2020", "lastmodified": "11 March 2020"}, {"techniquename": "Launchctl", "detection": "Every Launch Agent and Launch Daemon must have a corresponding plist file on disk which can be monitored. Monitor for recently modified or created plist files with a significant change to the executable path executed with the command-line  command. Plist files are located in the root, system, and users  or  folders. Monitor command-line execution of the  command immediately followed by abnormal network connections. s or s with executable paths pointing to  and  folders locations are potentially suspicious. When removing s or s ensure the services are unloaded prior to deleting plist files.", "description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.Adversaries use launchctl to execute commands and programs as Launch Agents or Launch Daemons. Common subcommands include: ,, and . Adversaries can use scripts or manually run the commands  or  to execute Launch Agents or Launch Daemons.", "mitigations": {"M1018": " User Account Management  : Prevent users from installing their own launch agents or launch daemons."}, "procedureexamples": {"S0584": " AppleJeus  : AppleJeus has loaded a plist file using the  command.", "S0274": " Calisto  : Calisto uses launchctl to enable screen sharing on the victim\u2019s machine.", "S0451": " LoudMiner  : LoudMiner launched the QEMU services in the  folder using . It also uses  to unload all Launch Daemons when updating to a newer version of LoudMiner.    ", "S0658": " XCSSET  : XCSSET loads a system level launchdaemon using the  command from ."}, "id": "T1569.001", "subtechniqueof": "T1569", "tactics": ["Execution"], "platforms": ["macOS"], "permissionsrequired": ["User, root"], "version": "1.1", "created": "10 March 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Malicious File", "detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to  in payloads.Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).", "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.Adversaries may employ various forms of Masquerading on the file to increase the likelihood that a user will open it.While Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, various Attack Surface Reduction (ASR) rules can be enabled to prevent the execution of potentially malicious executable files (such as those that have been downloaded and executed by Office applications/scripting interpreters/email clients or that do not meet specific prevalence, age, or trusted list criteria). Note: cloud-delivered protection must be enabled for certain rules. ", "M1038": " Execution Prevention  : Application control may be able to prevent the running of executables masquerading as other files.", "M1017": " User Training  : Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."}, "procedureexamples": {"G0018": " admin@338  : admin@338 has attempted to get victims to launch malicious Microsoft Word attachments delivered via spearphishing emails.", "S0331": " Agent Tesla  : Agent Tesla has been executed through malicious e-mail attachments ", "G0130": " Ajax Security Team  : Ajax Security Team has lured victims into executing malicious files.", "G0138": " Andariel  : Andariel has attempted to lure victims into enabling malicious macros within email attachments.", "S0584": " AppleJeus  : AppleJeus has required user execution of a malicious MSI installer.", "S0622": " AppleSeed  : AppleSeed can achieve execution through users running malicious file attachments distributed via email.", "G0099": " APT-C-36  : APT-C-36 has prompted victims to accept macros in order to execute the subsequent payload.", "G0005": " APT12  : APT12 has attempted to get victims to open malicious Microsoft Word and PDF attachment sent via spearphishing.", "G0073": " APT19  : APT19 attempted to get users to launch malicious attachments delivered via spearphishing emails.", "G0007": " APT28  : APT28 attempted to get users to click on Microsoft Office attachments containing malicious macro scripts.", "G0016": " APT29  : APT29 has used various forms of spearphishing attempting to get a user to open attachments, including, but not limited to, malicious Microsoft Word documents, .pdf, and .lnk files.  ", "G0013": " APT30  : APT30 has relied on users to execute malicious file attachments delivered via spearphishing emails.", "G0050": " APT32  : APT32 has attempted to lure users to execute a malicious dropper delivered via a spearphishing attachment.", "G0064": " APT33  : APT33 has used malicious e-mail attachments to lure victims into executing malware.", "G0067": " APT37  : APT37 has sent spearphishing attachments attempting to get a user to open them.", "G0082": " APT38  : APT38  has attempted to lure victims into enabling malicious macros within email attachments.", "G0087": " APT39  : APT39 has sent spearphishing emails in an attempt to lure users to click on a malicious attachment.", "S0373": " Astaroth  : Astaroth has used malicious files including VBS, LNK, and HTML for execution.", "S0606": " Bad Rabbit  : Bad Rabbit has been executed through user installation of an executable disguised as a flash installer.", "S0642": " BADFLICK  : BADFLICK has relied upon users clicking on a malicious attachment delivered through spearphishing.", "S0234": " Bandook  : Bandook has used lure documents to convince the user to enable macros. ", "G0098": " BlackTech  : BlackTech has used e-mails with malicious documents to lure victims into installing malware.  ", "S0520": " BLINDINGCAN  : BLINDINGCAN has lured victims into executing malicious macros embedded within Microsoft Office documents.", "S0635": " BoomBox  : BoomBox has gained execution through user interaction with a malicious file.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has attempted to get users to launch malicious Microsoft Word attachments delivered via spearphishing emails.", "S0482": " Bundlore  : Bundlore has attempted to get users to execute a malicious .app file that looks like a Flash Player update.", "S0348": " Cardinal RAT  : Cardinal RAT lures victims into executing malicious macros embedded within Microsoft Excel documents.", "S0465": " CARROTBALL  : CARROTBALL has been executed through users being lured into opening malicious e-mail attachments.", "S0631": " Chaes  : Chaes requires the user to click on the malicious Word document to execute the next part of the attack. ", "G0080": " Cobalt Group  : Cobalt Group has sent emails containing malicious attachments that require users to execute a file or macro to infect the victim machine.", "S0527": " CSPY Downloader  : CSPY Downloader has been delivered via malicious documents with embedded macros.", "G0070": " Dark Caracal  : Dark Caracal makes their malware look like Flash Player, Office, or PDF documents in order to entice a user to click on it.", "G0012": " Darkhotel  : Darkhotel has sent spearphishing emails in an attempt to lure users into clicking on a malicious attachments.", "G0079": " DarkHydrus  : DarkHydrus has sent malware that required users to hit the enable button in Microsoft Excel to allow an .iqy file to be downloaded.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 has used various forms of spearphishing in attempts to get users to open attachments.", "S0384": " Dridex  : Dridex has relied upon users clicking on a malicious attachment delivered through spearphishing.", "G0066": " Elderwood  : Elderwood has leveraged multiple types of spearphishing in order to attempt to get a user to open attachments.", "S0367": " Emotet  : Emotet has relied upon users clicking on a malicious attachment delivered through spearphishing.", "S0634": " EnvyScout  : EnvyScout has been executed through malicious files attached to e-mails.", "G0137": " Ferocious Kitten  : Ferocious Kitten has attempted to convince victims to enable malicious content within a spearphishing email by including an odd decoy message.", "G0085": " FIN4  : FIN4 has lured victims to launch malicious attachments delivered via spearphishing emails (often sent from compromised accounts).", "G0037": " FIN6  : FIN6 has used malicious documents to lure victims into allowing execution of PowerShell scripts.", "G0046": " FIN7  : FIN7 lured victims to double-click on images in the attachments they sent which would then execute the hidden LNK file.", "G0061": " FIN8  : FIN8 has used malicious e-mail attachments to lure victims into executing malware.", "G0101": " Frankenstein  : Frankenstein has used trojanized Microsoft Word documents sent via email, which prompted the victim to enable macros.", "G0084": " Gallmaker  : Gallmaker sent victims a lure document with a warning that asked victims to \"enable content\" for execution.", "G0047": " Gamaredon Group  : Gamaredon Group has attempted to get users to click on Office attachments with malicious macros embedded.", "G0078": " Gorgon Group  : Gorgon Group attempted to get users to launch malicious Microsoft Office attachments delivered via spearphishing emails.", "S0531": " Grandoreiro  : Grandoreiro has infected victims via malicious attachments.", "S0561": " GuLoader  : The GuLoader executable has been retrieved via embedded macros in malicious Word documents.", "S0499": " Hancitor  : Hancitor has used malicious Microsoft Word documents, sent via email, which prompted the victim to enable macros.", "G0126": " Higaisa  : Higaisa used malicious e-mail attachments to lure victims into executing LNK files.", "S0483": " IcedID  : IcedID has been executed through Word documents with malicious embedded macros.", "G0100": " Inception  : Inception lured victims into clicking malicious files for machine reconnaissance and to execute malware.", "G0136": " IndigoZebra  : IndigoZebra sent spearphishing emails containing malicious attachments that urged recipients to review modifications in the file which would trigger the attack.", "G0119": " Indrik Spider  : Indrik Spider has attempted to get users to click on a malicious zipped file. ", "S0260": " InvisiMole  : InvisiMole can deliver trojanized versions of software and documents, relying on user execution.", "S0528": " Javali  : Javali has achieved execution through victims opening malicious attachments, including MSI files with embedded VBScript.", "S0389": " JCry  : JCry has achieved execution by luring users to click on a file that appeared to be an Adobe Flash Player update installer. ", "S0648": " JSS Loader  : JSS Loader has been executed through malicious attachments contained in spearphishing emails.", "S0585": " Kerrdown  : Kerrdown has gained execution through victims opening malicious files.", "S0526": " KGH_SPY  : KGH_SPY has been spread through Word documents containing malicious macros.", "G0094": " Kimsuky  : Kimsuky has used attempted to lure victims into opening malicious e-mail attachments.", "G0032": " Lazarus Group  : Lazarus Group has attempted to get users to launch a malicious Microsoft Word attachment delivered via a spearphishing email.", "G0065": " Leviathan  : Leviathan has sent spearphishing attachments attempting to get a user to click.", "S0447": " Lokibot  : Lokibot has tricked recipients into enabling malicious macros by getting victims to click \"enable content\" in email attachments.", "G0095": " Machete  : Machete has relied on users opening malicious attachments delivered through spearphishing to execute malware.", "G0059": " Magic Hound  : Magic Hound has attempted to lure victims into opening malicious email attachments.", "G0045": " menuPass  : menuPass has attempted to get victims to open malicious files such as Windows Shortcuts (.lnk) and/or Microsoft Office documents, sent via email as part of spearphishing campaigns.", "S0455": " Metamorfo  : Metamorfo requires the user to double-click the executable to run the malicious HTA file or to download a malicious installer. ", "G0103": " Mofang  : Mofang's malicious spearphishing attachments required a user to open the file after receiving.", "G0021": " Molerats  : Molerats has sent malicious files via email that tricked users into clicking Enable Content to run an embedded macro and to download malicious archives.", "G0069": " MuddyWater  : MuddyWater has attempted to get users to enable macros and launch malicious Microsoft Word documents delivered via spearphishing emails.  ", "G0129": " Mustang Panda  : Mustang Panda has sent malicious files requiring direct victim interaction to execute.", "G0019": " Naikon  : Naikon has convinced victims to open malicious attachments to execute malware.", "S0637": " NativeZone  : NativeZone can display an RTF document to the user  to enable execution of  Cobalt Strike stage shellcode.", "S0198": " NETWIRE  : NETWIRE has been executed through luring victims into opening malicious documents.", "G0133": " Nomadic Octopus  : Nomadic Octopus as attempted to lure victims into clicking on malicious attachments within spearphishing emails.", "S0340": " Octopus  : Octopus has relied upon users clicking on a malicious attachment delivered through spearphishing.", "G0049": " OilRig  : OilRig has delivered macro-enabled documents that required targets to click the \"enable content\" button to execute the payload on the system.", "S0402": " OSX/Shlayer  : OSX/Shlayer relies on users mounting and executing a malicious DMG file.", "G0040": " Patchwork  : Patchwork embedded a malicious macro in a Word document and lured the victim to click on an icon to execute the malware.", "G0068": " PLATINUM  : PLATINUM has attempted to get users to open malicious files by sending spearphishing emails with attachments to victims.", "S0435": " PLEAD  : PLEAD has been executed via malicious e-mail attachments.", "S0428": " PoetRAT  : PoetRAT has used spearphishing attachments to infect victims.", "S0453": " Pony  : Pony has attempted to lure targets into downloading an attached executable (ZIP, RAR, or CAB archives) or document (PDF or other MS Office format).", "G0056": " PROMETHIUM  : PROMETHIUM has attempted to get users to execute compromised installation files for legitimate software including compression applications, security software, browsers, file recovery applications, and other tools and utilities.", "S0650": " QakBot  : QakBot has gained execution through users opening malicious attachments.", "S0458": " Ramsay  : Ramsay has been executed through malicious e-mail attachments.", "G0075": " Rancor  : Rancor attempted to get users to click on an embedded macro within a Microsoft Office Excel document to launch their malware.", "S0496": " REvil  : REvil has been executed via malicious MS Word e-mail attachments.", "S0433": " Rifdoor  : Rifdoor has been executed from malicious Excel or Word documents containing macros.", "S0148": " RTM  : RTM has relied on users opening malicious email attachments, decompressing the attached archive, and double-clicking the executable within.", "G0048": " RTM  : RTM has attempted to lure victims into opening e-mail attachments to execute malicious code.", "G0034": " Sandworm Team  : Sandworm Team has tricked unwitting recipients into clicking on spearphishing attachments and enabling malicious macros embedded within files.", "G0104": " Sharpshooter  : Sharpshooter has sent malicious DOC and PDF files to targets so that they can be opened by a user.", "G0121": " Sidewinder  : Sidewinder has lured targets to click on malicious files to gain execution in the target environment.", "G0091": " Silence  : Silence attempts to get users to launch malicious attachments delivered via spearphishing emails.", "S0390": " SQLRat  : SQLRat relies on users clicking on an embedded image to execute the scripts.", "S0491": " StrongPity  : StrongPity has been executed via compromised installation files for legitimate software including compression applications, security software, browsers, file recovery applications, and other tools and utilities.", "S0464": " SYSCON  : SYSCON has been executed by luring victims to open malicious e-mail attachments.", "G0062": " TA459  : TA459 has attempted to get victims to open malicious Microsoft Word attachment sent via spearphishing.", "G0092": " TA505  : TA505 has used lures to get users to enable content in malicious attachments and execute malicious files contained in archives. For example, TA505 makes their malware look like legitimate Microsoft Word documents, .pdf and/or .lnk files. ", "G0127": " TA551  : TA551 has prompted users to enable macros within spearphishing attachments to install malware.", "S0011": " Taidoor  : Taidoor has relied upon a victim to click on a malicious email attachment.", "G0089": " The White Company  : The White Company has used phishing lure documents that trick users into opening them and infecting their computers.", "G0131": " Tonto Team  : Tonto Team has relied on user interaction to open their spearphishing attachments.", "G0134": " Transparent Tribe  : Transparent Tribe has used weaponized documents in e-mail to compromise targeted systems.", "S0266": " TrickBot  : TrickBot has attempted to get users to launch malicious documents to deliver its payload. ", "G0081": " Tropic Trooper  : Tropic Trooper has lured victims into executing malware via malicious e-mail attachments.", "S0263": " TYPEFRAME  : A Word document delivering TYPEFRAME prompts the user to enable macro execution.", "S0476": " Valak  : Valak has been executed via Microsoft Word documents containing malicious macros.", "G0107": " Whitefly  : Whitefly has used malicious .exe or .dll files disguised as documents or images.", "G0112": " Windshift  : Windshift has used e-mail attachments to lure victims into executing malicious code.", "G0102": " Wizard Spider  : Wizard Spider has lured victims to execute malware with spearphishing attachments containing macros to download either Emotet, Bokbot, TrickBot, or Bazar."}, "id": "T1204.002", "subtechniqueof": "T1204", "tactics": ["Execution"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "version": "1.1", "created": "11 March 2020", "lastmodified": "21 July 2021"}, {"techniquename": "System Services", "detection": "Monitor for command line invocations of tools capable of modifying services that doesn\u2019t correspond to normal usage patterns and known software, patch cycles, etc. Also monitor for changes to executables and other files associated with services. Changes to Windows services may also be reflected in the Registry.", "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to block processes created by PsExec from running. ", "M1026": " Privileged Account Management  : Ensure that permissions disallow services that run at a higher permissions level from being created or interacted with by a user with a lower permission level.", "M1022": " Restrict File and Directory Permissions  : Ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level.", "M1018": " User Account Management  : Prevent users from installing their own launch agents or launch daemons."}, "id": "T1569", "subtechniques": ["T1569.001", "T1569.002"], "tactics": ["Execution"], "platforms": ["Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User, root"], "supportsremote": ["Yes"], "version": "1.1", "created": "10 March 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Software Deployment Tools", "detection": "Detection methods will vary depending on the type of third-party software or system and how it is typically used. The same investigation process can be applied here as with other potentially malicious activities where the distribution vector is initially unknown but the resulting activity follows a discernible pattern. Analyze the process execution trees, historical activities from the third-party application (such as what types of files are usually pushed), and the resulting activities or events from the file/binary/script pushed to systems. Often these third-party applications will have logs of their own that can be collected and correlated with other data from the environment. Ensure that third-party application logs are on-boarded to the enterprise logging system and the logs are regularly reviewed. Audit software deployment logs and look for suspicious or unauthorized activity. A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious. Monitor account login activity on these applications to detect suspicious/abnormal usage.Perform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.", "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, HBSS, Altiris, etc.).Access to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose.", "mitigations": {"M1015": " Active Directory Configuration  : Ensure proper system and access isolation for critical network systems through use of group policy.", "M1032": " Multi-factor Authentication  : Ensure proper system and access isolation for critical network systems through use of multi-factor authentication.", "M1030": " Network Segmentation  : Ensure proper system isolation for critical network systems through use of firewalls.", "M1027": " Password Policies  : Verify that account credentials that may be used to access deployment systems are unique and not used throughout the enterprise network.", "M1026": " Privileged Account Management  : Grant access to application deployment systems only to a limited number of authorized administrators.", "M1029": " Remote Data Storage  : If the application deployment system can be configured to deploy only signed binaries, then ensure that the trusted signing certificates are not co-located with the application deployment system and are instead located on a system that cannot be accessed remotely or to which remote access is tightly controlled.", "M1051": " Update Software  : Patch deployment systems regularly to prevent potential remote access through Exploitation for Privilege Escalation.", "M1018": " User Account Management  : Ensure that any accounts used by third-party providers to access these systems are traceable to the third-party and are not used throughout the network or used by other third-party providers in the same environment. Ensure there are regular reviews of accounts provisioned to these systems to verify continued business need, and ensure there is governance to trace de-provisioning of access that is no longer required. Ensure proper system and access isolation for critical network systems through use of account privilege separation.", "M1017": " User Training  : Have a strict approval policy for use of deployment systems."}, "procedureexamples": {"G0050": " APT32  : APT32 compromised McAfee ePO to move laterally by distributing malware as a software deployment task.", "G0091": " Silence  : Silence has used RAdmin, a remote software tool used to remotely control workstations and ATMs.", "G0028": " Threat Group-1314  : Threat Group-1314 actors used a victim's endpoint management platform, Altiris, for lateral movement.", "S0041": " Wiper  : It is believed that a patch management system for an anti-virus product commonly installed among targeted companies was used to distribute the Wiper malware."}, "id": "T1072", "subtechniques": ["No sub-techniques"], "tactics": ["Execution", "Lateral Movement"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "supportsremote": ["Yes"], "capecid": ["CAPEC-187"], "contributors": ["Shane Tully, @securitygypsy"], "version": "2.1", "created": "31 May 2017", "lastmodified": "11 December 2020"}, {"techniquename": "Shared Modules", "detection": "Monitoring DLL module loads may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows modules load functions are common and may be difficult to distinguish from malicious behavior. Legitimate software will likely only need to load routine, bundled DLL modules or Windows system DLLs such that deviation from known module loads may be suspicious. Limiting DLL module loads to  and  directories will protect against module loads from unsafe paths. Correlation of other events with behavior surrounding module loads using API monitoring and suspicious DLLs written to disk will provide additional context to an event that may assist in determining if it is due to malicious behavior.", "description": "Adversaries may execute malicious payloads via loading shared modules. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like , , etc. of the Win32 API. The module loader can load DLLs:Adversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, malware may execute share modules to load additional components or features.", "mitigations": {"M1038": " Execution Prevention  : Identify and block potentially malicious software executed through this technique by using application control tools capable of preventing unknown DLLs from being loaded."}, "procedureexamples": {"S0373": " Astaroth  : Astaroth uses the LoadLibraryExW() function to load additional modules. ", "S0438": " Attor  : Attor's dispatcher can execute additional plugins by loading the respective DLLs.", "S0520": " BLINDINGCAN  : BLINDINGCAN has loaded and executed DLLs in memory during runtime on a victim machine.", "S0415": " BOOSTWRITE  : BOOSTWRITE has used the DWriteCreateFactory() function to load additional modules.", "S0567": " Dtrack  : Dtrack contains a function that calls  and .", "S0032": " gh0st RAT  : gh0st RAT can load DLLs into memory.", "S0203": " Hydraq  : Hydraq creates a backdoor through which remote attackers can load and call DLL functions.", "S0607": " KillDisk  : KillDisk loads and executes functions from a DLL.", "S0455": " Metamorfo  : Metamorfo had used AutoIt to load and execute the DLL payload. ", "S0501": " PipeMon  : PipeMon has used call to  to load its installer. PipeMon loads its modules using reflective loading or custom shellcode.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY can load a DLL using the LoadLibrary API.", "S0603": " Stuxnet  : Stuxnet calls LoadLibrary then executes exports from a DLL.", "S0467": " TajMahal  : TajMahal has the ability to inject the  call template DLL into running processes."}, "id": "T1129", "subtechniques": ["No sub-techniques"], "tactics": ["Execution"], "platforms": ["Windows"], "permissionsrequired": ["User"], "contributors": ["Stefan Kanthak"], "version": "2.1", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Container Orchestration Job", "detection": "Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments. ", "description": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.In Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks. An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.", "mitigations": {"M1026": " Privileged Account Management  : Ensure containers are not running as root by default.", "M1018": " User Account Management  : Limit privileges of user accounts and remediate privilege escalation vectors so only authorized administrators can create container orchestration jobs."}, "id": "T1053.007", "subtechniqueof": "T1053", "tactics": ["Execution", "Persistence", "Privilege Escalation"], "platforms": ["Containers"], "permissionsrequired": ["User"], "supportsremote": ["Yes"], "contributors": ["Center for Threat-Informed Defense (CTID); Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team"], "version": "1.1", "created": "29 March 2021", "lastmodified": "27 July 2021"}, {"techniquename": "Systemd Timers", "detection": "Systemd timer unit files may be detected by auditing file creation and modification events within the , , and  directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of \u2018systemd\u2019, a parent process ID of 1, and will usually execute as the \u2018root\u2019 user.Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: . Analyze the contents of corresponding  files present on the file system and ensure that they refer to legitimate, expected executables.Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.", "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension  that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the  command line utility, which operates over SSH.Each  file must have a corresponding  file with the same name, e.g.,  and .  files are Systemd Service unit files that are managed by the systemd system and service manager. Privileged timers are written to  and  while user level are written to .An adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence. Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.", "mitigations": {"M1026": " Privileged Account Management  : Limit access to the root account and prevent users from creating and/or modifying systemd timer unit files. ", "M1022": " Restrict File and Directory Permissions  : Restrict read/write access to systemd  unit files to only select privileged users who have a legitimate need to manage system services.", "M1018": " User Account Management  : Limit user access to system utilities such as 'systemctl' or 'systemd-run' to users who have a legitimate need."}, "id": "T1053.006", "subtechniqueof": "T1053", "tactics": ["Execution", "Persistence", "Privilege Escalation"], "platforms": ["Linux"], "permissionsrequired": ["User, root"], "supportsremote": ["Yes"], "contributors": ["SarathKumar Rajendran, Trimble Inc"], "version": "1.1", "created": "12 October 2020", "lastmodified": "27 July 2021"}, {"techniquename": "Cron", "detection": "Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc.  Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. ", "description": "Adversaries may abuse the  utility to perform task scheduling for initial or recurring execution of malicious code. The  utility is a time-based job scheduler for Unix-like operating systems.  The  file contains the schedule of cron entries to be run and the specified times for execution. Any  files are stored in operating system-specific file paths.An adversary may use  in Linux or Unix environments to execute programs at system startup or on a scheduled basis for persistence. ", "mitigations": {"M1047": " Audit  : Review changes to the  schedule.  execution can be reviewed within the  directory. To validate the location of the  log file, check the syslog config at  or  ", "M1018": " User Account Management  :  permissions are controlled by . If there is a  file, then the user or users that need to use  will need to be listed in the file.  is used to explicitly disallow users from using cron. If neither files exist, then only the super user is allowed to run cron."}, "procedureexamples": {"S0504": " Anchor  : Anchor can install itself as a cron job.", "G0082": " APT38  : APT38 has used cron to create pre-scheduled and periodic background jobs on a Linux system.", "S0401": " Exaramel for Linux  : Exaramel for Linux uses crontab for persistence if it does not have root privileges.", "S0163": " Janicab  : Janicab used a cron job for persistence on Mac devices.", "S0599": " Kinsing  : Kinsing has used crontab to download and run shell scripts every minute to ensure persistence.", "S0198": " NETWIRE  : NETWIRE can use crontabs to establish persistence.", "S0587": " Penquin  : Penquin can use Cron to create periodic and pre-scheduled background jobs.", "G0106": " Rocke  : Rocke installed a cron job that downloaded and executed files from the C2.", "S0468": " Skidmap  : Skidmap has installed itself via crontab.", "S0374": " SpeakUp  : SpeakUp uses cron tasks to ensure persistence. ", "S0341": " Xbash  : Xbash can create a cronjob for persistence if it determines it is on a Linux system."}, "id": "T1053.003", "subtechniqueof": "T1053", "tactics": ["Execution", "Persistence", "Privilege Escalation"], "platforms": ["Linux, macOS"], "permissionsrequired": ["User"], "version": "1.1", "created": "03 December 2019", "lastmodified": "23 August 2021"}, {"techniquename": "At (Linux)", "detection": "Monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the  command and ensure IP addresses stored in the  and  variables, machines that created the jobs, are trusted hosts. All  jobs are stored in .Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "description": "Adversaries may abuse the at utility to perform task scheduling for initial, recurring, or future execution of malicious code. The at command within Linux operating systems enables administrators to schedule tasks.An adversary may use at in Linux environments to execute programs at system startup or on a scheduled basis for persistence. at can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.Adversaries may also abuse at to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, at may also be used for Privilege Escalation if the binary is allowed to run as superuser via .", "mitigations": {"M1047": " Audit  : Scheduled tasks using  can be audited locally, or through centrally collected logging, using syslog, or auditd events from the host. ", "M1018": " User Account Management  : Users account-level access to  can be managed using  and  files. Users listed in the at.allow are enabled to schedule actions using at, whereas users listed in at.deny file disabled from the utility."}, "id": "T1053.001", "subtechniqueof": "T1053", "tactics": ["Execution", "Persistence", "Privilege Escalation"], "platforms": ["Linux"], "supportsremote": ["Yes"], "version": "1.1", "created": "03 December 2019", "lastmodified": "15 October 2021"}, {"techniquename": "Component Object Model", "detection": "Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via  or , may also proceed malicious use.Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. ", "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE). Remote COM execution is facilitated by Remote Services such as  Distributed Component Object Model (DCOM).Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and Visual Basic. Specific COM objects also exist to directly perform functions beyond code execution, such as creating a Scheduled Task/Job, fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Ensure all COM alerts and Protected View are enabled.", "M1026": " Privileged Account Management  : Modify Registry settings (directly or using Dcomcnfg.exe) in  associated with the process-wide security of individual COM applications.Modify Registry settings (directly or using Dcomcnfg.exe) in  associated with system-wide security defaults for all COM applications that do no set their own process-wide security. "}, "procedureexamples": {"G0047": " Gamaredon Group  : Gamaredon Group malware can insert malicious macros into documents using a  object.   ", "S0260": " InvisiMole  : InvisiMole can use the ,  and  COM interfaces to schedule a task.", "G0069": " MuddyWater  : MuddyWater has used malware that has the capability to execute malicious code via COM, DCOM, and Outlook.", "S0223": " POWERSTATS  : POWERSTATS can use DCOM (targeting the 127.0.0.1 loopback address) to execute additional payloads on compromised hosts.", "S0458": " Ramsay  : Ramsay can use the Windows COM API to schedule tasks and maintain persistence.", "S0266": " TrickBot  : TrickBot used COM to setup scheduled task for persistence.", "S0386": " Ursnif  : Ursnif droppers have used COM objects to execute the malware's full executable payload."}, "id": "T1559.001", "subtechniqueof": "T1559", "tactics": ["Execution"], "platforms": ["Windows"], "supportsremote": ["Yes"], "version": "1.1", "created": "12 February 2020", "lastmodified": "26 July 2021"}, {"techniquename": "At (Windows)", "detection": "Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including: Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as  and , so additional logging may need to be configured to gather the appropriate data.", "description": "Adversaries may abuse the  utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. An adversary may use  in Windows environments to execute programs at system startup or on a scheduled basis for persistence. at can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).Note: The  command line utility has been deprecated in current versions of Windows in favor of .", "mitigations": {"M1047": " Audit  : Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for permission weaknesses in scheduled tasks that could be used to escalate privileges.  Windows operating system also creates a registry key specifically associated with the creation of a scheduled task on the destination host at: Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\At1. ", "M1028": " Operating System Configuration  : Configure settings for scheduled tasks to force tasks to run under the context of the authenticated account instead of allowing them to run as SYSTEM. The associated Registry key is located at . The setting can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > Security Options: Domain Controller: Allow server operators to schedule tasks, set to disabled.  ", "M1026": " Privileged Account Management  : Configure the Increase Scheduling Priority option to only allow the Administrators group the rights to schedule a priority process. This can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Increase scheduling priority. ", "M1018": " User Account Management  : Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems. "}, "procedureexamples": {"G0026": " APT18  : APT18 actors used the native at Windows task scheduler tool to use scheduled tasks for execution on a victim network.", "S0110": " at  : at can be used to schedule a task on a system.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used at to register a scheduled task to execute malware during lateral movement.", "S0488": " CrackMapExec  : CrackMapExec can set a scheduled task on the target system to execute commands remotely using at.", "S0233": " MURKYTOP  : MURKYTOP has the capability to schedule remote AT jobs.", "G0027": " Threat Group-3390  : Threat Group-3390 actors use at to schedule tasks to run self-extracting RAR archives, which install HTTPBrowser or PlugX on other victims on a network."}, "id": "T1053.002", "subtechniqueof": "T1053", "tactics": ["Execution", "Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "supportsremote": ["Yes"], "version": "1.0", "created": "27 November 2019", "lastmodified": "24 March 2020"}, {"techniquename": "Scheduled Task/Job", "detection": "Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges).", "mitigations": {"M1047": " Audit  : Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for permission weaknesses in scheduled tasks that could be used to escalate privileges. ", "M1028": " Operating System Configuration  : Configure settings for scheduled tasks to force tasks to run under the context of the authenticated account instead of allowing them to run as SYSTEM. The associated Registry key is located at . The setting can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > Security Options: Domain Controller: Allow server operators to schedule tasks, set to disabled. ", "M1026": " Privileged Account Management  : Configure the Increase Scheduling Priority option to only allow the Administrators group the rights to schedule a priority process. This can be can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Increase scheduling priority. ", "M1018": " User Account Management  : Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems."}, "procedureexamples": {"S0447": " Lokibot  : Lokibot's second stage DLL has set a timer using \"timeSetEvent\" to schedule its next execution.", "S0125": " Remsec  : Remsec schedules the execution one of its modules by creating a new scheduler task."}, "id": "T1053", "subtechniques": ["T1053.001", "T1053.002", "T1053.003", "T1053.004", "T1053.005", "T1053.006", "T1053.007"], "tactics": ["Execution", "Persistence", "Privilege Escalation"], "platforms": ["Containers, Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "effectivepermissions": ["Administrator, SYSTEM, User"], "supportsremote": ["Yes"], "capecid": ["CAPEC-557"], "contributors": ["Alain Homewood, Insomnia Security; Leo Loobeek, @leoloobeek; Prashant Verma, Paladion; Travis Smith, Tripwire"], "version": "2.1", "created": "31 May 2017", "lastmodified": "15 October 2021"}, {"techniquename": "Dynamic Data Exchange", "detection": "Monitor processes for abnormal behavior indicative of DDE abuse, such as Microsoft Office applications loading DLLs and other modules not typically associated with the application or these applications spawning unusual processes (such as cmd.exe).OLE and Office Open XML files can be scanned for \u2018DDEAUTO', \u2018DDE\u2019, and other strings indicative of DDE execution.", "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by Component Object Model, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.   Microsoft Office documents can be poisoned with DDE commands  , directly or through embedded files , and used to deliver execution via Phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros.  DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a Command and Scripting Interpreter. DDE execution can be invoked remotely via Remote Services such as Distributed Component Object Model (DCOM).", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Ensure Protected View is enabled.", "M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent DDE attacks and spawning of child processes from Office programs.", "M1042": " Disable or Remove Feature or Program  : Registry keys specific to Microsoft Office feature control security can be set to disable automatic DDE/OLE execution.  Microsoft also created, and enabled by default, Registry keys to completely disable DDE execution in Word and Excel.", "M1054": " Software Configuration  : Consider disabling embedded files in Office programs, such as OneNote, that do not work with Protected View."}, "procedureexamples": {"G0007": " APT28  : APT28 has delivered JHUHUGIT and Koadic by executing PowerShell commands through DDE in Word documents.", "G0067": " APT37  : APT37 has used Windows DDE for execution of commands and a malicious VBS.", "G0080": " Cobalt Group  : Cobalt Group has sent malicious Word OLE compound documents to victims.", "G0046": " FIN7  : FIN7 spear phishing campaigns have included malicious Word documents with DDE execution.", "G0084": " Gallmaker  : Gallmaker attempted to exploit Microsoft\u2019s DDE protocol in order to gain access to victim machines and for execution.", "S0237": " GravityRAT  : GravityRAT has been delivered via Word documents using DDE for execution.", "S0391": " HAWKBALL  : HAWKBALL has used an OLE object that uses Equation Editor to drop the embedded shellcode.", "S0387": " KeyBoy  : KeyBoy uses the Dynamic Data Exchange (DDE) protocol to download remote payloads.", "G0065": " Leviathan  : Leviathan has utilized OLE as a method to insert malicious content inside various phishing documents. ", "G0069": " MuddyWater  : MuddyWater has used malware that can execute PowerShell scripts via DDE.", "G0040": " Patchwork  : Patchwork leveraged the DDE protocol to deliver their malware.", "S0428": " PoetRAT  : PoetRAT was delivered with documents using DDE to execute malicious code.", "S0223": " POWERSTATS  : POWERSTATS can use DDE to execute additional payloads on compromised hosts.", "S0458": " Ramsay  : Ramsay has been delivered using OLE objects in malicious documents.  ", "S0148": " RTM  : RTM can search for specific strings within browser tabs using a Dynamic Data Exchange mechanism.", "G0104": " Sharpshooter  : Sharpshooter has sent malicious Word OLE documents to victims.", "G0121": " Sidewinder  : Sidewinder has used the ActiveXObject utility to create OLE objects to obtain execution through Internet Explorer.", "G0092": " TA505  : TA505 has leveraged malicious Word documents that abused DDE.", "S0476": " Valak  : Valak can execute tasks via OLE."}, "id": "T1559.002", "subtechniqueof": "T1559", "tactics": ["Execution"], "platforms": ["Windows"], "permissionsrequired": ["User"], "supportsremote": ["Yes"], "version": "1.1", "created": "12 February 2020", "lastmodified": "26 July 2021"}, {"techniquename": "Native API", "detection": "Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and may be difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient. Utilization of the Windows APIs may involve processes loading/accessing system DLLs associated with providing called functions (ex: ntdll.dll, kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity. ", "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.Native API functions (such as ) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.  For example, functions such as the Windows API  or GNU  will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office VBA macros from calling Win32 APIs. ", "M1038": " Execution Prevention  : Identify and block potentially malicious software executed that may be executed through this technique by using application control  tools, like Windows Defender Application Control, AppLocker,   or Software Restriction Policies  where appropriate. "}, "procedureexamples": {"S0045": " ADVSTORESHELL  : ADVSTORESHELL is capable of starting a process using CreateProcess.", "S0622": " AppleSeed  : AppleSeed has the ability to use multiple dynamically resolved API calls.", "G0067": " APT37  : APT37 leverages the Windows API calls: VirtualAlloc(), WriteProcessMemory(), and CreateRemoteThread() for process injection.", "G0082": " APT38  : APT38 has used the Windows API to execute code within a victim's system. ", "S0456": " Aria-body  : Aria-body has the ability to launch files using .", "S0438": " Attor  : Attor's dispatcher has used CreateProcessW API for execution.", "S0640": " Avaddon  : Avaddon has used the Windows Crypto API to generate an AES key.", "S0638": " Babuk  : Babuk can use multiple Windows API calls for actions on compromised hosts including discovery and execution.", "S0475": " BackConfig  : BackConfig can leverage API functions such as  and  in the process of downloading and executing files.", "S0606": " Bad Rabbit  : Bad Rabbit has used various Windows API calls.", "S0128": " BADNEWS  : BADNEWS has a command to download an .exe and execute it via CreateProcess API. It can also run with ShellExecute.", "S0234": " Bandook  : Bandook has used the ShellExecuteW() function call. ", "S0239": " Bankshot  : Bankshot creates processes using the Windows API calls: CreateProcessA() and CreateProcessAsUserA().", "S0534": " Bazar  : Bazar can use various APIs to allocate memory and facilitate code execution/injection.", "S0470": " BBK  : BBK has the ability to use the  API to add a sub-process for execution via cmd.", "S0574": " BendyBear  : BendyBear can load and execute modules and Windows Application Programming (API) calls using standard shellcode API hashing.", "S0570": " BitPaymer  : BitPaymer has used dynamic API resolution to avoid identifiable strings within the binary, including .", "S0521": " BloodHound  : BloodHound can use .NET API calls in the SharpHound ingestor component to pull Active Directory data.", "S0651": " BoxCaon  : BoxCaon has used Windows API calls to obtain information about the compromised host.", "S0471": " build_downer  : build_downer has the ability to use the  API to execute malware on a compromised host.", "S0484": " Carberp  : Carberp has used the NtQueryDirectoryFile and ZwQueryDirectoryFile functions to hide files and directories.", "S0631": " Chaes  : Chaes used the  API function with read permissions to access downloaded payloads. ", "G0114": " Chimera  : Chimera has used direct Windows system calls by leveraging Dumpert.", "S0611": " Clop  : Clop has used built-in API functions such as WNetOpenEnumW(), WNetEnumResourceW(), WNetCloseEnum(), GetProcAddress(), and VirtualAlloc().", "S0154": " Cobalt Strike  : Cobalt Strike's Beacon payload is capable of running shell commands without  and PowerShell commands without ", "S0126": " ComRAT  : ComRAT can load a PE file from memory or the file system and execute it with .", "S0575": " Conti  : Conti has used API calls during execution. ", "S0625": " Cuba  : Cuba has used several built-in API functions for discovery like GetIpNetTable and NetShareEnum. ", "S0354": " Denis  : Denis used the , , and  APIs to avoid debugging. Denis used  and  to dynamically resolve APIs. Denis also used the  API as part of a process hollowing process.  ", "S0384": " Dridex  : Dridex has used the  function to avoid malware analysis as part of its anti-debugging technique. ", "S0554": " Egregor  : Egregor has used the Windows API to make detection more difficult. ", "S0363": " Empire  : Empire contains a variety of enumeration modules that have an option to use API calls to carry out tasks.", "S0396": " EvilBunny  : EvilBunny has used various API calls as part of its checks to see if the malware is running in a sandbox.  ", "S0569": " Explosive  : Explosive has a function to call the OpenClipboard wrapper.  ", "S0512": " FatDuke  : FatDuke can call  to open the default browser on the URL localhost.", "G0047": " Gamaredon Group  : Gamaredon Group malware has used  to launch additional malicious components.", "S0032": " gh0st RAT  : gh0st RAT has used the InterlockedExchange, SeShutdownPrivilege, and ExitWindowsEx Windows API functions.", "S0493": " GoldenSpy  : GoldenSpy can execute remote commands in the Windows command shell using the  API.    ", "S0477": " Goopy  : Goopy has the ability to  enumerate the infected system's user name via .", "G0078": " Gorgon Group  : Gorgon Group malware can leverage the Windows API call, CreateProcessA(), for execution.", "S0531": " Grandoreiro  : Grandoreiro can execute through the  API.", "S0632": " GrimAgent  : GrimAgent can use Native API including  and .", "S0561": " GuLoader  : GuLoader can use a number of different APIs for discovery and execution.", "S0499": " Hancitor  : Hancitor has used  and  to interpret and execute shellcode.", "S0391": " HAWKBALL  : HAWKBALL has leveraged several Windows API calls to create processes, gather disk information, and detect debugger activity.", "G0126": " Higaisa  : Higaisa has called various native OS APIs.", "S0431": " HotCroissant  : HotCroissant can perform dynamic DLL importing and API lookups using  and  on obfuscated strings.", "S0398": " HyperBro  : HyperBro has the ability to run an application () or script/file () via API.", "S0537": " HyperStack  : HyperStack can use Windows API's  and  to detect incoming connections and connect to remote shares.", "S0483": " IcedID  : IcedID has called , , , and  to inject itself into a remote process.", "S0434": " Imminent Monitor  : Imminent Monitor has leveraged CreateProcessW() call to execute the debugger.", "S0259": " InnaputRAT  : InnaputRAT uses the API call ShellExecuteW for execution.", "S0260": " InvisiMole  : InvisiMole can use winapiexec tool for indirect execution of   and .", "S0607": " KillDisk  : KillDisk has called the Windows API to retrieve the hard disk handle and shut down the machine.", "S0395": " LightNeuron  : LightNeuron is capable of starting a process using CreateProcess.", "S0447": " Lokibot  : Lokibot has used LoadLibrary(), GetProcAddress() and CreateRemoteThread() API functions to execute its shellcode.", "S0652": " MarkiRAT  : MarkiRAT can run the ShellExecuteW API via the Windows Command Shell.", "S0449": " Maze  : Maze has used several Windows API functions throughout the encryption process including IsDebuggerPresent, TerminateProcess, Process32FirstW, among others.    ", "S0576": " MegaCortex  : After escalating privileges, MegaCortex calls , , and other Win32 APIs.", "G0045": " menuPass  : menuPass has used native APIs including , , , and .", "S0455": " Metamorfo  : Metamorfo has used native WINAPI calls.", "S0256": " Mosquito  : Mosquito leverages the CreateProcess() and LoadLibrary() calls to execute files with the .dll and .exe extensions.", "S0630": " Nebulae  : Nebulae has the ability to use  to execute a process.", "S0457": " Netwalker  : Netwalker can use Windows API functions to inject the ransomware DLL.", "S0198": " NETWIRE  : NETWIRE can use Native API including  , and .", "S0385": " njRAT  : njRAT has used the ShellExecute() function within a script.", "G0116": " Operation Wocao  : Operation Wocao has used the CreateProcessA and ShellExecute API function to launch commands after being injected into a selected process.", "S0517": " Pillowmint  : Pillowmint has used multiple native Windows APIs to execute and conduct process injections.", "S0501": " PipeMon  : PipeMon's first stage has been executed by a call to  with the decryption password in an argument. PipeMon has used a call to  to load its installer.", "S0013": " PlugX  : PlugX can use the Windows API function CreateProcess to execute another process.", "S0518": " PolyglotDuke  : PolyglotDuke can use  and  to load and execute code.", "S0453": " Pony  : Pony has used several Windows functions for various purposes.    ", "S0650": " QakBot  : QakBot can use  to help delete malicious strings from memory.", "S0629": " RainyDay  : The file collection tool used by RainyDay can utilize native API including  for folder monitoring.", "S0458": " Ramsay  : Ramsay can use Windows API functions such as , , and  during its collection and file storage operations. Ramsay can execute its embedded components via  and .", "S0416": " RDFSNIFFER  : RDFSNIFFER has used several Win32 API functions to interact with the victim machine.", "S0496": " REvil  : REvil can use Native API for execution and to retrieve active services.", "S0448": " Rising Sun  : Rising Sun used dynamic API resolutions to various Windows APIs by leveraging LoadLibrary() and GetProcAddress().", "S0148": " RTM  : RTM can use the  and  functions to search for specific strings within browser history.", "S0446": " Ryuk  : Ryuk has used multiple native APIs including  to run executables, to create folders, and , , and  for process injection.", "G0104": " Sharpshooter  : Sharpshooter's first-stage downloader resolved various Windows libraries and APIs, including LoadLibraryA(), GetProcAddress(), and CreateProcessA().  ", "S0444": " ShimRat  : ShimRat has used Windows API functions to install the service and shim.    ", "S0445": " ShimRatReporter  : ShimRatReporter used several Windows API functions to gather information from the infected system.", "S0610": " SideTwist  : SideTwist can use , , and  to gather information.", "G0091": " Silence  : Silence has leveraged the Windows API, including using CreateProcess() or ShellExecute(), to perform a variety of tasks.", "S0623": " Siloscape  : Siloscape makes various native API calls.", "S0627": " SodaMaster  : SodaMaster can use  to access the Registry.", "S0615": " SombRAT  : SombRAT has the ability to respawn itself using  and .", "S0603": " Stuxnet  : Stuxnet uses the SetSecurityDescriptorDacl API to reduce object integrity levels.", "S0562": " SUNSPOT  : SUNSPOT used Windows API functions such as  and  as part of the SUNBURST injection process. ", "S0242": " SynAck  : SynAck parses the export tables of system DLLs to locate and call various Windows API functions.", "S0011": " Taidoor  : Taidoor has the ability to use native APIs for execution including , , and .", "S0595": " ThiefQuest  : ThiefQuest uses various API to perform behaviors such as executing payloads and performing local enumeration.", "S0266": " TrickBot  : TrickBot uses the Windows API call, CreateProcessW(), to manage execution flow. TrickBot has also used  API functions to perform Process Injection.", "G0081": " Tropic Trooper  : Tropic Trooper has used multiple Windows APIs including HttpInitialize, HttpCreateHttpHandle, and HttpAddUrl.", "G0010": " Turla  : Turla and its RPC backdoors have used APIs calls for various tasks related to subverting AMSI and accessing then executing commands through RPC and/or named pipes.", "S0386": " Ursnif  : Ursnif has used  to create child processes.", "S0180": " Volgmer  : Volgmer executes payloads using the Windows API call CreateProcessW().", "S0612": " WastedLocker  : WastedLocker's custom crypter, CryptOne, leveraged the VirtualAlloc() API function to help execute the payload.", "S0579": " Waterbear  : Waterbear can leverage API functions for execution.", "S0466": " WindTail  : WindTail can invoke Apple APIs , , and (string) .", "S0161": " XAgentOSX  : XAgentOSX contains the execFile function to execute a specified file on the system using the NSTask:launch method.", "S0653": " xCaon  : xCaon has leveraged native OS function calls to retrieve  victim's network adapter's  information using GetAdapterInfo() API. "}, "id": "T1106", "subtechniques": ["No sub-techniques"], "tactics": ["Execution"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Gordon Long, Box, Inc., @ethicalhax; Stefan Kanthak"], "version": "2.1", "created": "31 May 2017", "lastmodified": "18 October 2021"}, {"techniquename": "Scheduled Task", "detection": "Monitor process execution from the  in Windows 10 and the Windows Task Scheduler  for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including: Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.", "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The  can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.The deprecated at utility could also be abused by adversaries (ex: At (Windows)), though  can not access tasks created with  or the Control Panel.An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).", "mitigations": {"M1047": " Audit  : Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for permission weaknesses in scheduled tasks that could be used to escalate privileges. ", "M1028": " Operating System Configuration  : Configure settings for scheduled tasks to force tasks to run under the context of the authenticated account instead of allowing them to run as SYSTEM. The associated Registry key is located at HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\SubmitControl. The setting can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > Security Options: Domain Controller: Allow server operators to schedule tasks, set to disabled. ", "M1026": " Privileged Account Management  : Configure the Increase Scheduling Priority option to only allow the Administrators group the rights to schedule a priority process. This can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Increase scheduling priority. ", "M1018": " User Account Management  : Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems. "}, "procedureexamples": {"S0331": " Agent Tesla  : Agent Tesla  has achieved persistence via scheduled tasks. ", "S0504": " Anchor  : Anchor can create a scheduled task for persistence.", "S0584": " AppleJeus  : AppleJeus has created a scheduled SYSTEM task that runs when a user logs in.", "G0099": " APT-C-36  : APT-C-36 has used a macro function to set scheduled tasks, disguised as those used by Google.", "G0016": " APT29  : APT29 used  and  to create new tasks on remote hosts as part of lateral movement. They have manipulated scheduled tasks by updating an existing legitimate task to execute their tools and then returned the scheduled task to its original configuration. APT29 also created a scheduled task to maintain SUNSPOT persistence when the host booted during the 2020 SolarWinds intrusion. They previously used named and hijacked scheduled tasks to also establish persistence.", "G0022": " APT3  : An APT3 downloader creates persistence by creating the following scheduled task: .", "G0050": " APT32  : APT32 has used scheduled tasks to persist on victim systems.", "G0064": " APT33  : APT33 has created a scheduled task to execute a .vbe file multiple times a day.", "G0067": " APT37  : APT37 has created scheduled tasks to run malicious scripts on a compromised host.", "G0082": " APT38  : APT38 has used Task Scheduler to run programs at system startup or on a scheduled basis for persistence.", "G0087": " APT39  : APT39 has created scheduled tasks for persistence.", "G0096": " APT41  : APT41 used a compromised account to create a scheduled task on a system.", "S0438": " Attor  : Attor's installer plugin can schedule a new task that loads the dispatcher on boot/logon.", "S0414": " BabyShark  : BabyShark has used scheduled tasks to maintain persistence.", "S0475": " BackConfig  : BackConfig has the ability to use scheduled tasks to repeatedly execute malicious payloads on a compromised host.", "S0606": " Bad Rabbit  : Bad Rabbit\u2019s  file creates a scheduled task to launch a malicious executable.", "S0128": " BADNEWS  : BADNEWS creates a scheduled task to establish by executing a malicious payload every subsequent minute.", "S0534": " Bazar  : Bazar can create a scheduled task for persistence.", "G0108": " Blue Mockingbird  : Blue Mockingbird has used Windows Scheduled Tasks to establish persistence on local and remote hosts.", "S0360": " BONDUPDATER  : BONDUPDATER persists using a scheduled task that executes every minute.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used schtasks to register a scheduled task to execute malware during lateral movement.", "S0335": " Carbon  : Carbon creates several tasks for later execution to continue persistence on the victim\u2019s machine.", "G0114": " Chimera  : Chimera has used scheduled tasks to invoke Cobalt Strike including through batch script  and to maintain persistence.", "G0080": " Cobalt Group  : Cobalt Group has created Windows tasks to establish persistence.", "S0126": " ComRAT  : ComRAT has used a scheduled task to launch its PowerShell loader.", "S0050": " CosmicDuke  : CosmicDuke uses scheduled tasks typically named \"Watchmon Service\" for persistence.", "G0132": " CostaRicto  : CostaRicto has used scheduled tasks to download backdoor tools.", "S0046": " CozyCar  : One persistence mechanism used by CozyCar is to register itself as a scheduled task.", "S0538": " Crutch  : Crutch has the ability to persist using scheduled tasks.", "S0527": " CSPY Downloader  : CSPY Downloader can use the schtasks utility to bypass UAC.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used scheduled tasks to automatically log out of created accounts every 8 hours as well as to execute malicious files.", "S0038": " Duqu  : Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.", "S0024": " Dyre  : Dyre has the ability to achieve persistence by adding a new task in the task scheduler to run every minute.", "S0367": " Emotet  : Emotet has maintained persistence through a scheduled task. ", "S0363": " Empire  : Empire has modules to interact with the Windows task scheduler.", "S0396": " EvilBunny  : EvilBunny has executed commands via scheduled tasks.", "G0051": " FIN10  : FIN10 has established persistence by using S4U tasks as well as the Scheduled Task option in PowerShell Empire.", "G0037": " FIN6  : FIN6 has used scheduled tasks to establish persistence for various malware it uses, including downloaders known as HARDTACK and SHIPBREAD and FrameworkPOS.", "G0046": " FIN7  : FIN7 malware has created scheduled tasks to establish persistence.", "G0061": " FIN8  : FIN8 has used scheduled tasks to maintain RDP backdoors.", "G0117": " Fox Kitten  : Fox Kitten has used Scheduled Tasks for persistence and to load and execute a reverse proxy binary.", "G0101": " Frankenstein  : Frankenstein has established persistence through a scheduled task using the command: , named \"WinUpdate\".   ", "G0093": " GALLIUM  : GALLIUM established persistence for PoisonIvy by created a scheduled task.", "G0047": " Gamaredon Group  : Gamaredon Group has created a scheduled task to launch an executable every 10 minutes. ", "S0168": " Gazer  : Gazer can establish persistence by creating a scheduled task.", "S0588": " GoldMax  : GoldMax has used scheduled tasks to maintain persistence.", "S0477": " Goopy  : Goopy has the ability to maintain persistence by creating scheduled tasks set to run every hour. ", "S0237": " GravityRAT  : GravityRAT creates a scheduled task to ensure it is re-executed everyday.", "S0417": " GRIFFON  : GRIFFON has used  for persistence. ", "S0632": " GrimAgent  : GrimAgent has the ability to set persistence using the Task Scheduler.", "S0170": " Helminth  : Helminth has used a scheduled task for persistence.", "G0126": " Higaisa  : Higaisa dropped and added  to scheduled tasks.", "S0431": " HotCroissant  : HotCroissant has attempted to install a scheduled task named \"Java Maintenance64\" on startup to establish persistence.", "S0483": " IcedID  : IcedID has created a scheduled task that executes every hour to establish persistence.", "S0260": " InvisiMole  : InvisiMole has used scheduled tasks named  and  to establish persistence.", "S0581": " IronNetInjector  : IronNetInjector has used a task XML file named  to run an IronPython script when a user logs in or when specific system events are created.", "S0189": " ISMInjector  : ISMInjector creates scheduled tasks to establish persistence.", "S0044": " JHUHUGIT  : JHUHUGIT has registered itself as a scheduled task to run each time the current user logs in.", "S0648": " JSS Loader  : JSS Loader has the ability to launch scheduled tasks to establish persistence.", "S0447": " Lokibot  : Lokibot embedded the commands  inside a batch script. ", "S0532": " Lucifer  : Lucifer has established persistence by creating the following scheduled task .", "S0409": " Machete  : The different components of Machete are executed by Windows Task Scheduler.", "G0095": " Machete  : Machete has created scheduled tasks to maintain Machete's persistence.", "S0167": " Matryoshka  : Matryoshka can establish persistence by adding a Scheduled Task named \"Microsoft Boost Kernel Optimization\".", "S0449": " Maze  : Maze has created scheduled tasks using name variants such as \"Windows Update Security\", \"Windows Update Security Patches\", and \"Google Chrome Security Update\", to launch Maze at a specific time.", "S0500": " MCMD  : MCMD can use scheduled tasks for persistence.", "G0045": " menuPass  : menuPass has used a script (atexec.py) to execute a command on a target machine via Task Scheduler.", "G0021": " Molerats  : Molerats has created scheduled tasks to persistently run VBScripts.", "G0069": " MuddyWater  : MuddyWater has used scheduled tasks to establish persistence.", "G0129": " Mustang Panda  : Mustang Panda has created a scheduled task to execute additional malicious software, as well as maintain persistence.", "G0019": " Naikon  : Naikon has used schtasks.exe for lateral movement in compromised networks.", "S0198": " NETWIRE  : NETWIRE can create a scheduled task to establish persistence.", "S0368": " NotPetya  : NotPetya creates a task to reboot the system one hour after infection.", "G0049": " OilRig  : OilRig has created scheduled tasks that run a VBScript to execute a payload on victim machines.", "S0439": " Okrum  : Okrum's installer can attempt to achieve persistence by creating a scheduled task.", "S0264": " OopsIE  : OopsIE creates a scheduled task to run itself every three minutes.", "G0116": " Operation Wocao  : Operation Wocao has used scheduled tasks to execute malicious PowerShell code on remote systems.", "G0040": " Patchwork  : A Patchwork file stealer can run a TaskScheduler DLL to add persistence.", "S0194": " PowerSploit  : PowerSploit's  Persistence argument can be used to establish via a Scheduled Task/Job.", "S0223": " POWERSTATS  : POWERSTATS has established persistence through a scheduled task using the command .", "S0184": " POWRUNER  : POWRUNER persists through a scheduled task that executes it every minute.", "S0147": " Pteranodon  : Pteranodon schedules tasks to invoke its components in order to establish persistence.", "S0650": " QakBot  : QakBot has the ability to create scheduled tasks for persistence.", "S0269": " QUADAGENT  : QUADAGENT creates a scheduled task to maintain persistence on the victim\u2019s machine.", "S0262": " QuasarRAT  : QuasarRAT contains a .NET wrapper DLL for creating and managing scheduled tasks for maintaining persistence upon reboot.", "S0629": " RainyDay  : RainyDay can use scheduled tasks to achieve persistence.", "S0458": " Ramsay  : Ramsay can schedule tasks via the Windows COM API to maintain persistence.   ", "G0075": " Rancor  : Rancor launched a scheduled task to gain persistence using the  command.", "S0375": " Remexi  : Remexi utilizes scheduled tasks as a persistence mechanism.", "S0166": " RemoteCMD  : RemoteCMD can execute commands remotely by creating a new schedule task on the remote system", "S0379": " Revenge RAT  : Revenge RAT schedules tasks to run malicious scripts at different intervals.", "S0148": " RTM  : RTM tries to add a scheduled task to establish persistence.", "S0446": " Ryuk  : Ryuk can remotely create a scheduled task to execute itself on a system.", "S0111": " schtasks  : schtasks is used to schedule tasks on a Windows system to run at a specific date and time.", "S0382": " ServHelper  : ServHelper contains modules that will use schtasks to carry out malicious operations.", "S0140": " Shamoon  : Shamoon copies an executable payload to the target system by using SMB/Windows Admin Shares and then scheduling an unnamed task to execute the malware.", "S0546": " SharpStage  : SharpStage has a persistence component to write a scheduled task for the payload. ", "S0589": " Sibot  : Sibot has been executed via a scheduled task.", "G0091": " Silence  : Silence has used scheduled tasks to stage its operation.", "S0226": " Smoke Loader  : Smoke Loader launches a scheduled task.", "S0516": " SoreFang  : SoreFang can gain persistence through use of scheduled tasks.", "S0390": " SQLRat  : SQLRat has created scheduled tasks in .", "G0038": " Stealth Falcon  : Stealth Falcon malware creates a scheduled task entitled \"IE Web Cache\" to execute a malicious file hourly.", "S0603": " Stuxnet  : Stuxnet schedules a network job to execute two minutes after host infection.", "G0088": " TEMP.Veles  : TEMP.Veles has used scheduled task XML triggers.", "S0266": " TrickBot  : TrickBot creates a scheduled task on the system that provides persistence.", "S0476": " Valak  : Valak has used scheduled tasks to execute additional payloads and to gain persistence on a compromised host.", "G0102": " Wizard Spider  : Wizard Spider has used scheduled tasks establish persistence for TrickBot and other malware.", "S0248": " yty  : yty establishes persistence by creating a scheduled task with the command .", "S0251": " Zebrocy  : Zebrocy has a command to create a scheduled task for persistence.", "S0350": " zwShell  : zwShell has used SchTasks for execution."}, "id": "T1053.005", "subtechniqueof": "T1053", "tactics": ["Execution", "Persistence", "Privilege Escalation"], "platforms": ["Windows"], "permissionsrequired": ["Administrator"], "supportsremote": ["Yes"], "version": "1.0", "created": "27 November 2019", "lastmodified": "30 December 2020"}, {"techniquename": "Inter-Process Communication", "detection": "Monitor for strings in files/commands, loaded DLLs/libraries, or spawned processes that are associated with abuse of IPC mechanisms.", "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. Adversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows Dynamic Data Exchange or Component Object Model. Higher level execution mediums, such as those of Command and Scripting Interpreters, may also leverage underlying IPC mechanisms. Adversaries may also use Remote Services such as Distributed Component Object Model to facilitate remote IPC execution.", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Ensure all COM alerts and Protected View are enabled.", "M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent DDE attacks and spawning of child processes from Office programs.", "M1042": " Disable or Remove Feature or Program  : Registry keys specific to Microsoft Office feature control security can be set to disable automatic DDE/OLE execution.  Microsoft also created, and enabled by default, Registry keys to completely disable DDE execution in Word and Excel.", "M1026": " Privileged Account Management  : Modify Registry settings (directly or using Dcomcnfg.exe) in  associated with the process-wide security of individual COM applications.Modify Registry settings (directly or using Dcomcnfg.exe) in  associated with system-wide security defaults for all COM applications that do no set their own process-wide security. ", "M1054": " Software Configuration  : Consider disabling embedded files in Office programs, such as OneNote, that do not work with Protected View."}, "procedureexamples": {"S0537": " HyperStack  : HyperStack can connect to the IPC$ share on remote machines."}, "id": "T1559", "subtechniques": ["T1559.001", "T1559.002"], "tactics": ["Execution"], "platforms": ["Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "supportsremote": ["Yes"], "version": "1.1", "created": "12 February 2020", "lastmodified": "15 October 2021"}, {"techniquename": "Deploy Container", "detection": "Monitor for suspicious or unknown container images and pods in your environment. Deploy logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application pods to detect malicious activity at the cluster level. In Docker, the daemon log provides insight into remote API calls, including those that deploy containers. Logs for management services or applications used to deploy containers other than the native technologies themselves should also be monitored.", "description": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment.Containers can be deployed by various means, such as via Docker's  and  APIs or via a web application such as the Kubernetes dashboard or Kubeflow. Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.", "mitigations": {"M1035": " Limit Access to Resource Over Network  : Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API, Kubernetes API Server, and container orchestration web applications.", "M1030": " Network Segmentation  : Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls.", "M1018": " User Account Management  : Enforce the principle of least privilege by limiting container dashboard access to only the necessary users."}, "procedureexamples": {"S0600": " Doki  : Doki was run through a deployed container.", "S0599": " Kinsing  : Kinsing was run through a deployed Ubuntu container.", "G0139": " TeamTNT  : TeamTNT has deployed different types of containers into victim environments to facilitate execution."}, "id": "T1610", "subtechniques": ["No sub-techniques"], "tactics": ["Defense Evasion", "Execution"], "platforms": ["Containers"], "permissionsrequired": ["User, root"], "supportsremote": ["Yes"], "contributors": ["Alfredo Oliveira, Trend Micro; Ariel Shuper, Cisco; Center for Threat-Informed Defense (CTID); Idan Frimark, Cisco; Magno Logan, @magnologan, Trend Micro; Pawan Kinger, @kingerpawan, Trend Micro; Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team"], "version": "1.0", "created": "29 March 2021", "lastmodified": "14 April 2021"}, {"techniquename": "Python", "detection": "Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.", "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the  interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.Python comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.", "mitigations": {"M1049": " Antivirus/Antimalware  : Anti-virus can be used to automatically quarantine suspicious files. ", "M1047": " Audit  : Inventory systems for unauthorized Python installations.", "M1038": " Execution Prevention  : Denylist Python where not required.", "M1033": " Limit Software Installation  : Prevent users from installing Python where not required."}, "procedureexamples": {"G0016": " APT29  : APT29 has developed malware variants written in Python.", "G0067": " APT37  : APT37 has used Python scripts to execute payloads.", "G0087": " APT39  : APT39 has used a command line utility and a network scanner written in python.", "S0234": " Bandook  : Bandook can support commands to execute Python-based payloads.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has made use of Python-based remote access tools.", "S0482": " Bundlore  : Bundlore has used Python scripts to execute payloads.", "S0631": " Chaes  : Chaes has used Python scripts for execution and the installation of additional files. ", "S0154": " Cobalt Strike  : Cobalt Strike can use Python to perform execution.", "S0369": " CoinTicker  : CoinTicker executes a Python script to download its second stage.", "S0492": " CookieMiner  : CookieMiner has used python scripts on the user\u2019s system, as well as the Python variant of the Empire agent, EmPyre.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used various types of scripting to perform operations, including Python scripts. The group was observed installing Python 2.7 on a victim.", "S0547": " DropBook  : DropBook is a Python-based backdoor compiled with PyInstaller.", "S0377": " Ebury  : Ebury has used Python to implement its DGA.   ", "S0581": " IronNetInjector  : IronNetInjector can use IronPython scripts to load payloads with the help of a .NET injector.", "S0387": " KeyBoy  : KeyBoy uses Python scripts for installing files and performing execution.", "S0276": " Keydnap  : Keydnap uses Python for scripting to execute additional commands.", "G0094": " Kimsuky  : Kimsuky has used a Mac OS Python implant to gather data.", "S0409": " Machete  : Machete is written in Python and is used in conjunction with additional Python scripts.", "G0095": " Machete  : Machete used multiple compiled Python scripts on the victim\u2019s system. Machete's main backdoor Machete is also written in Python.", "S0459": " MechaFlounder  : MechaFlounder uses a python-based payload.", "G0069": " MuddyWater  : MuddyWater has used developed tools in Python including Out1.", "G0116": " Operation Wocao  : Operation Wocao's backdoors have been written in Python and compiled with py2exe.", "S0428": " PoetRAT  : PoetRAT was executed with a Python script and worked in conjunction with additional Python-based post-exploitation tools.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY has used python scripts.", "S0192": " Pupy  : Pupy can use an add on feature when creating payloads that allows you to create custom Python scripts (\"scriptlets\") to perform tasks offline (without requiring a session) such as sandbox detection, adding persistence, etc.", "S0583": " Pysa  : Pysa has used Python scripts to deploy ransomware.", "S0332": " Remcos  : Remcos uses Python scripts.", "G0106": " Rocke  : Rocke has used Python-based malware to install and spread their coinminer.", "S0374": " SpeakUp  : SpeakUp uses Python scripts.", "G0131": " Tonto Team  : Tonto Team has used Python-based tools for execution. ", "S0609": " TRITON  : TRITON was run as trilog.exe, a Py2EXE compiled python script that accepts a single IP address as a flag.", "S0647": " Turian  : Turian has the ability to use Python to spawn a Unix shell.", "G0010": " Turla  : Turla has used IronPython scripts as part of the IronNetInjector toolchain to drop payloads.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used Python-based implants to interact with compromised hosts."}, "id": "T1059.006", "subtechniqueof": "T1059", "tactics": ["Execution"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Python is installed."], "permissionsrequired": ["Administrator, SYSTEM, root"], "version": "1.0", "created": "09 March 2020", "lastmodified": "26 July 2021"}, {"techniquename": "Exploitation for Client Execution", "detection": "Detecting software exploitation may be difficult depending on the tools available. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the browser or Office processes. This could include suspicious files written to disk, evidence of  for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.", "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.Several types exist:Web browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.Common office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.Other applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist.  Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. Risks of additional exploits and weaknesses in those systems may still exist. ", "M1050": " Exploit Protection  : Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring.  Many of these protections depend on the architecture and target application binary for compatibility."}, "procedureexamples": {"G0018": " admin@338  : admin@338 has exploited client software vulnerabilities for execution, such as Microsoft Word CVE-2012-0158.", "S0331": " Agent Tesla  : Agent Tesla has exploited Office vulnerabilities such as CVE-2017-11882 and CVE-2017-8570 for execution during delivery. ", "G0138": " Andariel  : Andariel has exploited numerous ActiveX vulnerabilities, including zero-days.", "G0005": " APT12  : APT12 has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities (CVE-2009-3129, CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, CVE-2011-0611).", "G0007": " APT28  : APT28 has exploited Microsoft Office vulnerability CVE-2017-0262 for execution.", "G0016": " APT29  : APT29 has used multiple software exploits for common client software, like Microsoft Word, Exchange, and Adobe Reader, to gain code execution.", "G0022": " APT3  : APT3 has exploited the Adobe Flash Player vulnerability CVE-2015-3113 and Internet Explorer vulnerability CVE-2014-1776.", "G0050": " APT32  : APT32 has used RTF document that includes an exploit to execute malicious code. (CVE-2017-11882)", "G0064": " APT33  : APT33 has attempted to exploit a known vulnerability in WinRAR (CVE-2018-20250), and attempted to gain remote code execution via a security bypass vulnerability (CVE-2017-11774).", "G0067": " APT37  : APT37 has used exploits for Flash Player (CVE-2016-4117, CVE-2018-4878), Word (CVE-2017-0199), Internet Explorer (CVE-2020-1380 and CVE-2020-26411), and Microsoft Edge (CVE-2021-26411) for execution.", "G0096": " APT41  : APT41 leveraged the follow exploits in their operations: CVE-2012-0158, CVE-2015-1641, CVE-2017-0199, CVE-2017-11882, and CVE-2019-3396. ", "S0239": " Bankshot  : Bankshot leverages a known zero-day vulnerability in Adobe Flash to execute the implant into the victims\u2019 machines.", "G0098": " BlackTech  : BlackTech has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities CVE-2012-0158, CVE-2014-6352, CVE-2017-0199, and Adobe Flash CVE-2015-5119.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has exploited Microsoft Office vulnerabilities CVE-2014-4114, CVE-2018-0802, and CVE-2018-0798 for execution.", "G0080": " Cobalt Group  : Cobalt Group had exploited multiple vulnerabilities for execution, including Microsoft\u2019s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, CVE-2017-0199, and CVE-2017-8759.", "S0154": " Cobalt Strike  : Cobalt Strike can exploit Oracle Java vulnerabilities for execution, including CVE-2011-3544, CVE-2013-2465, CVE-2012-4681, and CVE-2013-2460.", "G0012": " Darkhotel  : Darkhotel has exploited Adobe Flash vulnerability CVE-2015-8651 for execution.", "S0243": " DealersChoice  : DealersChoice leverages vulnerable versions of Flash to perform execution.", "G0066": " Elderwood  : Elderwood has used exploitation of endpoint software, including Microsoft Internet Explorer Adobe Flash vulnerabilities, to gain execution. They have also used zero-day exploits.", "S0396": " EvilBunny  : EvilBunny has exploited CVE-2011-4369, a vulnerability in the PRC component in Adobe Reader.", "G0101": " Frankenstein  : Frankenstein has used CVE-2017-11882 to execute code on the victim's machine.", "G0125": " HAFNIUM  : HAFNIUM has exploited CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065  to compromise on-premises versions of Microsoft Exchange Server, enabling access to email accounts and installation of additional malware.", "S0391": " HAWKBALL  : HAWKBALL has exploited Microsoft Office vulnerabilities CVE-2017-11882 and CVE-2018-0802 to deliver the payload. ", "G0126": " Higaisa  : Higaisa has exploited CVE-2018-0798 for execution.", "G0100": " Inception  : Inception has exploited CVE-2012-0158, CVE-2014-1761, CVE-2017-11882 and CVE-2018-0802 for execution.", "S0260": " InvisiMole  : InvisiMole has installed legitimate but vulnerable Total Video Player software and wdigest.dll library drivers on compromised hosts to exploit stack overflow and input validation vulnerabilities for code execution.", "G0032": " Lazarus Group  : Lazarus Group has exploited Adobe Flash vulnerability CVE-2018-4878 for execution.", "G0065": " Leviathan  : Leviathan has exploited multiple Microsoft Office and .NET vulnerabilities for execution, including CVE-2017-0199, CVE-2017-8759, and CVE-2017-11882.", "G0069": " MuddyWater  : MuddyWater has exploited the Office vulnerability CVE-2017-0199 for execution.", "G0129": " Mustang Panda  : Mustang Panda has exploited CVE-2017-0199 in Microsoft Word to execute code.", "G0040": " Patchwork  : Patchwork uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, CVE-2017-11882, and CVE-2015-1641.", "S0458": " Ramsay  : Ramsay has been embedded in documents exploiting CVE-2017-0199, CVE-2017-11882, and CVE-2017-8570.", "G0034": " Sandworm Team  : Sandworm Team has exploited vulnerabilities in Microsoft PowerPoint via OLE objects (CVE-2014-4114) and Microsoft Word via crafted TIFF images (CVE-2013-3906).", "G0121": " Sidewinder  : Sidewinder has exploited vulnerabilities to gain execution including CVE-2017-11882 and CVE-2020-0674.", "S0374": " SpeakUp  : SpeakUp attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager. ", "S0578": " SUPERNOVA  : SUPERNOVA was installed via exploitation of a SolarWinds Orion API authentication bypass vulnerability (CVE-2020-10148).", "G0062": " TA459  : TA459 has exploited Microsoft Word vulnerability CVE-2017-0199 for execution.", "G0089": " The White Company  : The White Company has taken advantage of a known vulnerability in Microsoft Word (CVE 2012-0158) to execute code.", "G0027": " Threat Group-3390  : Threat Group-3390 has exploited the Microsoft SharePoint vulnerability CVE-2019-0604.", "G0131": " Tonto Team  : Tonto Team has exploited Microsoft vulnerabilities, including CVE-2018-8174, CVE-2018-0802, and CVE-2017-11882, as well as other vulnerabilities such as CVE-2019-9489 and CVE-2020-8468, to enable execution of their delivered malicious payloads.", "G0134": " Transparent Tribe  : Transparent Tribe has crafted malicious files to exploit CVE-2012-0158 and CVE-2010-3333 for execution.", "G0081": " Tropic Trooper  : Tropic Trooper has executed commands through Microsoft security vulnerabilities, including CVE-2017-11882, CVE-2018-0802, and CVE-2012-0158.", "S0341": " Xbash  : Xbash can attempt to exploit known vulnerabilities in Hadoop, Redis, or ActiveMQ when it finds those services running in order to conduct further execution."}, "id": "T1203", "subtechniques": ["No sub-techniques"], "tactics": ["Execution"], "platforms": ["Linux, Windows, macOS"], "systemrequirements": ["Remote exploitation for execution requires a remotely accessible service reachable over the network or other vector of access such as spearphishing or drive-by compromise."], "version": "1.2", "created": "18 April 2018", "lastmodified": "15 October 2021"}, {"techniquename": "JavaScript", "detection": "Monitor for events associated with scripting execution, such as process activity, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving scripts, or loading of modules associated with scripting languages (ex: JScript.dll). Scripting execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information , , or other programmable post-compromise behaviors and could be used as indicators of detection leading back to the source.Monitor for execution of JXA through  and usage of  API that may be related to other suspicious behavior occurring on the system.Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If scripting is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.", "description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages.JavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility , they can be compiled into applications or script files via , and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.Adversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent JavaScript scripts from executing potentially malicious downloaded content .", "M1042": " Disable or Remove Feature or Program  : Turn off or restrict access to unneeded scripting components.", "M1038": " Execution Prevention  : Denylist scripting where appropriate.", "M1021": " Restrict Web-Based Content  : Script blocking extensions can help prevent the execution of JavaScript and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."}, "procedureexamples": {"S0622": " AppleSeed  : AppleSeed has the ability to use JavaScript to execute PowerShell.", "G0050": " APT32  : APT32 has used JavaScript for drive-by downloads and C2 communications.", "S0373": " Astaroth  : Astaroth uses JavaScript to perform its core functionalities. ", "S0640": " Avaddon  : Avaddon has been executed through a malicious JScript downloader.", "S0482": " Bundlore  : Bundlore can execute JavaScript by injecting it into the victim's browser.", "S0631": " Chaes  : Chaes has used JavaScript and Node.Js information stealer script that exfiltrates data using the node process.", "G0080": " Cobalt Group  : Cobalt Group has executed JavaScript scriptlets on the victim's machine.", "S0154": " Cobalt Strike  : The Cobalt Strike System Profiler can use JavaScript to perform reconnaissance actions.", "S0634": " EnvyScout  : EnvyScout can write files to disk with JavaScript using a modified version of the open-source tool FileSaver.", "G0120": " Evilnum  : Evilnum has used malicious JavaScript files on the victim's machine.", "G0037": " FIN6  : FIN6 has used malicious JavaScript to steal payment card data from e-commerce sites.", "G0046": " FIN7  : FIN7 used JavaScript scripts to help perform tasks on the victim's machine.", "S0417": " GRIFFON  : GRIFFON is written in and executed as JavaScript.    ", "G0126": " Higaisa  : Higaisa used JavaScript to execute additional files.", "G0119": " Indrik Spider  : Indrik Spider has used malicious JavaScript files for several components of their attack.", "S0260": " InvisiMole  : InvisiMole can use a JavaScript file as part of its execution chain.", "S0283": " jRAT  : jRAT has been distributed as HTA files with JScript.    ", "S0648": " JSS Loader  : JSS Loader can download and execute JavaScript files.", "G0094": " Kimsuky  : Kimsuky has used JScript for logging and downloading additional tools.", "G0077": " Leafminer  : Leafminer infected victims using JavaScript code.", "S0455": " Metamorfo  : Metamorfo includes payloads written in JavaScript. ", "G0021": " Molerats  : Molerats used various implants, including those built with JS, on target machines.    ", "G0069": " MuddyWater  : MuddyWater has used JavaScript files to execute its POWERSTATS payload.", "S0228": " NanHaiShu  : NanHaiShu executes additional Jscript code on the victim's machine.", "S0223": " POWERSTATS  : POWERSTATS can use JavaScript code for execution.", "S0650": " QakBot  : The QakBot web inject module can inject Java Script into web banking pages visited by the victim.", "G0121": " Sidewinder  : Sidewinder has used JavaScript to drop and execute malware loaders.", "G0091": " Silence  : Silence has used JS scripts.", "S0646": " SpicyOmelette  : SpicyOmelette has the ability to execute arbitrary JavaScript code on a compromised host.", "G0092": " TA505  : TA505 has used JavaScript for code execution.", "G0010": " Turla  : Turla has used various JavaScript-based backdoors. ", "S0476": " Valak  : Valak can execute JavaScript containing configuration data for establishing persistence.", "S0341": " Xbash  : Xbash can execute malicious JavaScript payloads on the victim\u2019s machine."}, "id": "T1059.007", "subtechniqueof": "T1059", "tactics": ["Execution"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "contributors": ["Cody Thomas, SpecterOps"], "version": "2.1", "created": "23 June 2020", "lastmodified": "16 August 2021"}, {"techniquename": "Container Administration Command", "detection": "Container administration service activities and executed commands can be captured through logging of process execution with command-line arguments on the container and the underlying host. In Docker, the daemon log provides insight into events at the daemon and container service level. Kubernetes system component logs may also detect activities running in and out of containers in the cluster. ", "description": "Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.In Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as  to execute a command within a running container. In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as .", "mitigations": {"M1038": " Execution Prevention  : Use read-only containers and minimal images when possible to prevent the execution of commands.", "M1035": " Limit Access to Resource Over Network  : Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API and Kubernetes API Server.", "M1026": " Privileged Account Management  : Ensure containers are not running as root by default."}, "procedureexamples": {"S0601": " Hildegard  : Hildegard was executed through the kubelet API run command and by executing commands on running containers.", "S0599": " Kinsing  : Kinsing was executed with an Ubuntu container entry point that runs shell scripts.", "S0623": " Siloscape  : Siloscape can send kubectl commands to victim clusters through an IRC channel and can run kubectl locally to spread once within a victim cluster.", "G0139": " TeamTNT  : TeamTNT executed Hildegard through the kubelet API run command and by executing commands on running containers."}, "id": "T1609", "subtechniques": ["No sub-techniques"], "tactics": ["Execution"], "platforms": ["Containers"], "supportsremote": ["Yes"], "contributors": ["Alfredo Oliveira, Trend Micro; Brad Geesaman, @bradgeesaman; Center for Threat-Informed Defense (CTID); David Fiser, @anu4is, Trend Micro; Magno Logan, @magnologan, Trend Micro; Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team"], "version": "1.0", "created": "29 March 2021", "lastmodified": "14 April 2021"}, {"techniquename": "Visual Basic", "detection": "Monitor for events associated with VB execution, such as Office applications spawning processes, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving VB payloads or scripts, or loading of modules associated with VB languages (ex: vbscript.dll). VB execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information , , or other programable post-compromise behaviors and could be used as indicators of detection leading back to the source.Understanding standard usage patterns is important to avoid a high number of false positives. If VB execution is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If VB execution is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Payloads and scripts should be captured from the file system when possible to determine their actions and intent.", "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads.", "mitigations": {"M1049": " Antivirus/Antimalware  : Anti-virus can be used to automatically quarantine suspicious files. ", "M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Visual Basic scripts from executing potentially malicious downloaded content .", "M1042": " Disable or Remove Feature or Program  : Turn off or restrict access to unneeded VB components.", "M1038": " Execution Prevention  : Use application control where appropriate.", "M1021": " Restrict Web-Based Content  : Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."}, "procedureexamples": {"G0099": " APT-C-36  : APT-C-36 has embedded a VBScript within a malicious Word document which is executed upon the document opening.", "G0016": " APT29  : APT29 has written malware variants in Visual Basic.", "G0050": " APT32  : APT32 has used macros, COM scriptlets, and VBS scripts. ", "G0064": " APT33  : APT33 has used VBScript to initiate the delivery of payloads.", "G0067": " APT37  : APT37 executes shellcode and a VBA script to decode Base64 strings.", "G0082": " APT38  : APT38 has used VBScript to execute commands and other operational tasks.", "G0087": " APT39  : APT39 has utilized malicious VBS scripts in malware.", "S0373": " Astaroth  : Astaroth has used malicious VBS e-mail attachments for execution.", "S0475": " BackConfig  : BackConfig has used VBS to install its downloader component and malicious documents with VBA macro code.", "S0234": " Bandook  : Bandook has used malicious VBA code against the target system.", "S0268": " Bisonal  : Bisonal's dropper creates VBS scripts on the victim\u2019s machine.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used VBS and VBE scripts for execution.", "S0631": " Chaes  : Chaes has used VBscript to execute malicious code. ", "G0080": " Cobalt Group  : Cobalt Group has sent Word OLE compound documents with malicious obfuscated VBA macros that will run upon user execution.", "S0154": " Cobalt Strike  : Cobalt Strike can use VBA to perform execution.", "S0244": " Comnie  : Comnie executes VBS scripts.", "S0367": " Emotet  : Emotet has sent Microsoft Word documents with embedded macros that will invoke scripts to download additional payloads. ", "S0343": " Exaramel for Windows  : Exaramel for Windows has a command to execute VBS scripts on the victim\u2019s machine.", "G0085": " FIN4  : FIN4 has used VBA macros to display a dialog box and collect victim credentials.", "G0046": " FIN7  : FIN7 used VBS scripts to help perform tasks on the victim's machine.", "G0101": " Frankenstein  : Frankenstein has used Word documents that prompts the victim to enable macros and run a Visual Basic script.", "G0047": " Gamaredon Group  : Gamaredon Group has embedded malicious macros in document templates, which executed VBScript. Gamaredon Group has also delivered Microsoft Outlook VBA projects with embedded macros.", "S0477": " Goopy  : Goopy has the ability to use a Microsoft Outlook backdoor macro to communicate with its C2.  ", "G0078": " Gorgon Group  : Gorgon Group has used macros in Spearphishing Attachments as well as executed VBScripts on victim machines.", "S0531": " Grandoreiro  : Grandoreiro can use VBScript to execute malicious code.", "S0170": " Helminth  : One version of Helminth consists of VBScript scripts.", "G0126": " Higaisa  : Higaisa has used VBScript code on the victim's machine.", "G0072": " Honeybee  : Honeybee embeds a Visual Basic script within a malicious Word document as part of initial access; the script is executed when the Word document is opened.", "S0483": " IcedID  : IcedID has used obfuscated VBA string expressions.", "G0100": " Inception  : Inception has used VBScript to execute malicious commands and payloads.", "S0528": " Javali  : Javali has used embedded VBScript to download malicious payloads from C2.", "S0389": " JCry  : JCry has used VBS scripts. ", "S0283": " jRAT  : jRAT has been distributed as HTA files with VBScript.   ", "S0648": " JSS Loader  : JSS Loader can download and execute VBScript files.", "S0585": " Kerrdown  : Kerrdown can use a VBS base64 decoder function published by Motobit.", "S0387": " KeyBoy  : KeyBoy uses VBS scripts for installing files and performing execution.", "G0094": " Kimsuky  : Kimsuky has used Visual Basic to download malicious payloads.", "S0250": " Koadic  : Koadic performs most of its operations using Windows Script Host (VBScript) and runs arbitrary shellcode .", "G0065": " Leviathan  : Leviathan has used VBScript.", "S0447": " Lokibot  : Lokibot has used VBS scripts and XLS macros for execution. ", "S0582": " LookBack  : LookBack has used VBA macros in Microsoft Word attachments to drop additional files to the host.", "G0095": " Machete  : Machete has embedded malicious macros within spearphishing attachments to download additional files.", "G0059": " Magic Hound  : Magic Hound malware has used VBS scripts for execution.", "S0530": " Melcoz  : Melcoz can use VBS scripts to execute malicious DLLs.", "S0455": " Metamorfo  : Metamorfo has used VBS code on victims\u2019 systems.", "G0021": " Molerats  : Molerats used various implants, including those built with VBScript, on target machines.", "G0069": " MuddyWater  : MuddyWater has used VBScript files to execute its POWERSTATS payload, as well as macros.", "G0129": " Mustang Panda  : Mustang Panda has embedded VBScript components in LNK files to download additional files and automate collection.", "S0228": " NanHaiShu  : NanHaiShu executes additional VBScript code on the victim's machine.", "S0336": " NanoCore  : NanoCore uses VBS files.", "S0198": " NETWIRE  : NETWIRE has been executed through use of VBScripts.", "G0049": " OilRig  : OilRig has used VBSscipt macros for execution on compromised hosts.", "S0264": " OopsIE  : OopsIE creates and uses a VBScript as part of its persistent execution.", "G0116": " Operation Wocao  : Operation Wocao has used a VBScript to conduct reconnaissance on targeted systems.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D uses Word macros for execution.", "G0040": " Patchwork  : Patchwork used Visual Basic Scripts (VBS) on victim machines.", "S0428": " PoetRAT  : PoetRAT has used Word documents with VBScripts to execute malicious activities.", "S0441": " PowerShower  : PowerShower has the ability to save and execute VBScript.", "S0223": " POWERSTATS  : POWERSTATS can use VBScript (VBE) code for execution.", "S0650": " QakBot  : QakBot can use VBS to download and execute malicious files.", "S0269": " QUADAGENT  : QUADAGENT uses VBScripts.", "S0458": " Ramsay  : Ramsay has included embedded Visual Basic scripts in malicious documents.    ", "G0075": " Rancor  : Rancor has used VBS scripts as well as embedded macros for execution.", "S0375": " Remexi  : Remexi uses AutoIt and VBS scripts throughout its execution process.", "S0496": " REvil  : REvil has used obfuscated VBA macros for execution.", "G0034": " Sandworm Team  : Sandworm Team has created VBScripts to run an SSH server. ", "G0104": " Sharpshooter  : Sharpshooter's first-stage downloader was a VBA macro.", "S0589": " Sibot  : Sibot executes commands using VBScript.   ", "G0121": " Sidewinder  : Sidewinder has used VBScript to drop and execute malware loaders.", "G0091": " Silence  : Silence has used VBS scripts.", "S0226": " Smoke Loader  : Smoke Loader adds a Visual Basic script in the Startup folder to deploy the payload.", "S0380": " StoneDrill  : StoneDrill has several VBS scripts used throughout the malware's lifecycle. ", "S0559": " SUNBURST  : SUNBURST used VBScripts to initiate the execution of payloads.", "G0062": " TA459  : TA459 has a VBScript for execution.", "G0092": " TA505  : TA505 has used VBS for code execution.", "G0134": " Transparent Tribe  : Transparent Tribe has crafted VBS-based malicious documents.    ", "G0010": " Turla  : Turla has used VBS scripts throughout its operations.    ", "S0263": " TYPEFRAME  : TYPEFRAME has used a malicious Word document for delivery with VBA macros for execution.", "S0386": " Ursnif  : Ursnif droppers have used VBA macros to download and execute the malware's full executable payload.", "S0442": " VBShower  : VBShower has the ability to execute VBScript files.", "G0112": " Windshift  : Windshift has used Visual Basic 6 (VB6) payloads.", "G0090": " WIRTE  : WIRTE has used VBS scripts throughout its operation.   ", "S0341": " Xbash  : Xbash can execute malicious VBScript payloads on the victim\u2019s machine."}, "id": "T1059.005", "subtechniqueof": "T1059", "tactics": ["Execution"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, SYSTEM, User"], "version": "1.2", "created": "09 March 2020", "lastmodified": "16 August 2021"}, {"techniquename": "Network Device CLI", "detection": "Consider reviewing command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration.Consider comparing a copy of the network device configuration against a known-good version to discover unauthorized changes to the command interpreter. The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor.", "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. Scripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or SSH.Adversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection. ", "mitigations": {"M1038": " Execution Prevention  : TACACS+ can keep control over which commands administrators are permitted to use through the configuration of authentication and command authorization. ", "M1026": " Privileged Account Management  : Use of Authentication, Authorization, and Accounting (AAA) systems will limit actions administrators can perform and provide a history of user actions to detect unauthorized use and abuse. TACACS+ can keep control over which commands administrators are permitted to use through the configuration of authentication and command authorization ", "M1018": " User Account Management  : Use of Authentication, Authorization, and Accounting (AAA) systems will limit actions users can perform and provide a history of user actions to detect unauthorized use and abuse. Ensure least privilege principles are applied to user accounts and groups so that only authorized users can perform configuration changes. "}, "id": "T1059.008", "subtechniqueof": "T1059", "tactics": ["Execution"], "platforms": ["Network"], "permissionsrequired": ["Administrator, User"], "supportsremote": ["Yes"], "version": "1.1", "created": "20 October 2020", "lastmodified": "26 July 2021"}, {"techniquename": "AppleScript", "detection": "Monitor for execution of AppleScript through  and usage of the  and  APIs that may be related to other suspicious behavior occurring on the system. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information , , or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.", "description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.Scripts can be run from the command-line via  or . Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding  to the start of the script file.AppleScripts do not need to call  to execute, however. They may be executed from within mach-O binaries by using the macOS Native APIs\u00a0\u00a0or\u00a0, both of which execute code independent of the  command line utility.Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute Native APIs, which otherwise would require compilation and execution in a mach-O binary file format.. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via Python.", "mitigations": {"M1045": " Code Signing  : Require that all AppleScript be signed by a trusted developer ID before being executed - this will prevent random AppleScript code from executing. This subjects AppleScript code to the same scrutiny as other .app files passing through Gatekeeper.", "M1038": " Execution Prevention  : Use application control where appropriate."}, "procedureexamples": {"S0482": " Bundlore  : Bundlore can use AppleScript to inject malicious JavaScript into a browser.", "S0281": " Dok  : Dok uses AppleScript to create a login item for persistence.", "S0595": " ThiefQuest  : ThiefQuest uses AppleScript's  command to launch ThiefQuest's persistence via Launch Agent and Launch Daemon. "}, "id": "T1059.002", "subtechniqueof": "T1059", "tactics": ["Execution"], "platforms": ["macOS"], "permissionsrequired": ["User"], "contributors": ["Phil Stokes, SentinelOne"], "version": "1.1", "created": "09 March 2020", "lastmodified": "03 August 2020"}, {"techniquename": "Unix Shell", "detection": "Unix shell usage may be common on administrator, developer, or power user systems, depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script. ", "description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.Unix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.", "mitigations": {"M1038": " Execution Prevention  : Use application control where appropriate."}, "procedureexamples": {"S0504": " Anchor  : Anchor can execute payloads via shell scripting.", "S0584": " AppleJeus  : AppleJeus has used shell scripts to execute commands after installation and set persistence mechanisms.", "G0096": " APT41  : APT41 executed  in activity exploiting CVE-2019-19781 against Citrix devices.", "S0482": " Bundlore  : Bundlore has leveraged /bin/sh and /bin/bash to execute commands on the victim machine.", "S0077": " CallMe  : CallMe has the capability to create a reverse shell on victims.", "S0220": " Chaos  : Chaos provides a reverse shell connection on 8338/TCP, encrypted via AES.", "S0369": " CoinTicker  : CoinTicker executes a bash script to establish a reverse shell.", "S0492": " CookieMiner  : CookieMiner has used a Unix shell script to run a series of commands targeting macOS.", "S0021": " Derusbi  : Derusbi is capable of creating a remote Bash shell and executing commands.", "S0600": " Doki  : Doki has executed shell scripts with /bin/sh.", "S0502": " Drovorub  : Drovorub can execute arbitrary commands as root on a compromised system.", "S0401": " Exaramel for Linux  : Exaramel for Linux has a command to execute a shell command on the system.", "S0410": " Fysbis  : Fysbis has the ability to create and execute commands in a remote shell for CLI.", "S0601": " Hildegard  : Hildegard has used shell scripts for execution.", "S0265": " Kazuar  : Kazuar uses /bin/bash to execute commands on the victim\u2019s machine.", "S0599": " Kinsing  : Kinsing has used Unix shell scripts to execute commands in the victim environment.", "S0641": " Kobalos  : Kobalos can spawn a new pseudo-terminal and execute arbitrary commands at the command prompt. ", "S0451": " LoudMiner  : LoudMiner used shell scripts to launch various services and to start/stop the QEMU virtualization.   ", "S0198": " NETWIRE  : NETWIRE has the ability to use  and  to execute commands.", "S0402": " OSX/Shlayer  : OSX/Shlayer can use bash scripts to check the macOS version, download payloads, and extract bytes from files. OSX/Shlayer uses the command  to extract bytes at an offset from a specified file. OSX/Shlayer uses the  command to download malicious payloads into a temporary directory.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D uses a shell script as the main executable inside an app bundle and drops an embedded base64-encoded payload to the  folder.", "S0587": " Penquin  : Penquin can execute remote commands using bash scripts.", "S0279": " Proton  : Proton uses macOS' .command file type to script actions.", "G0106": " Rocke  : Rocke used shell scripts to run commands which would obtain persistence and execute the cryptocurrency mining malware.  ", "S0468": " Skidmap  : Skidmap has used  to download and install its main payload.", "G0139": " TeamTNT  : TeamTNT has used shell scripts for execution.", "S0647": " Turian  : Turian has the ability to use  to execute commands.", "S0466": " WindTail  : WindTail can use the  command to execute an application.", "S0658": " XCSSET  : XCSSET uses a shell script to execute Mach-o files and  commands such as, ."}, "id": "T1059.004", "subtechniqueof": "T1059", "tactics": ["Execution"], "platforms": ["Linux, macOS"], "permissionsrequired": ["User, root"], "supportsremote": ["Yes"], "version": "1.1", "created": "09 March 2020", "lastmodified": "26 July 2021"}, {"techniquename": "Command and Scripting Interpreter", "detection": "Command-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages.If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.There are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "mitigations": {"M1049": " Antivirus/Antimalware  : Anti-virus can be used to automatically quarantine suspicious files. ", "M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Visual Basic and JavaScript scripts from executing potentially malicious downloaded content .", "M1045": " Code Signing  : Where possible, only permit execution of signed scripts.", "M1042": " Disable or Remove Feature or Program  : Disable or remove any unnecessary or unused shells or interpreters.", "M1038": " Execution Prevention  : Use application control where appropriate.", "M1026": " Privileged Account Management  : When PowerShell is necessary, restrict PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.", "M1021": " Restrict Web-Based Content  : Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."}, "procedureexamples": {"G0073": " APT19  : APT19 downloaded and launched code within a SCT file.", "G0050": " APT32  : APT32 has used COM scriptlets to download Cobalt Strike beacons.   ", "G0067": " APT37  : APT37 has used Ruby scripts to execute payloads.", "G0087": " APT39  : APT39 has utilized AutoIt and custom scripts to perform internal reconnaissance.", "S0234": " Bandook  : Bandook can support commands to execute Java-based payloads. ", "S0486": " Bonadan  : Bonadan can create bind and reverse shells on the infected system. ", "S0023": " CHOPSTICK  : CHOPSTICK is capable of performing remote command execution.", "S0334": " DarkComet  : DarkComet can execute various types of scripts on the victim\u2019s machine.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used command line for execution.", "S0363": " Empire  : Empire uses a command-line interface to interact with systems.", "G0053": " FIN5  : FIN5 scans processes on all victim systems in the environment and uses automated scripts to pull back the results.", "G0037": " FIN6  : FIN6 has used scripting to iterate through a list of compromised PoS systems, copy data to a log file, and remove the original data files.", "G0046": " FIN7  : FIN7 used SQL scripts to help perform tasks on the victim's machine.", "S0618": " FIVEHANDS  : FIVEHANDS can receive a command line argument to limit file encryption to specified directories.", "G0117": " Fox Kitten  : Fox Kitten has used a Perl reverse shell to communicate with C2.", "S0460": " Get2  : Get2 has the ability to run executables with command-line arguments.", "S0032": " gh0st RAT  : gh0st RAT is able to open a remote shell to execute commands.", "S0434": " Imminent Monitor  : Imminent Monitor has a CommandPromptPacket and ScriptPacket module(s) for creating a remote shell and executing scripts.", "G0004": " Ke3chang  : Malware used by Ke3chang can run commands on the command-line interface.", "S0487": " Kessel  : Kessel can create a reverse shell between the infected host and a specified system.    ", "S0167": " Matryoshka  : Matryoshka is capable of providing Meterpreter shell access.", "S0530": " Melcoz  : Melcoz has been distributed through an AutoIt loader script.", "G0049": " OilRig  : OilRig has used various types of scripting for execution.", "S0598": " P.A.S. Webshell  : P.A.S. Webshell has the ability to create reverse shells with Perl scripts.", "S0428": " PoetRAT  : PoetRAT has executed a Lua script through a Lua interpreter for Windows.", "S0374": " SpeakUp  : SpeakUp uses Perl scripts.", "G0038": " Stealth Falcon  : Stealth Falcon malware uses WMI to script data collection and command execution on the victim.", "G0107": " Whitefly  : Whitefly has used a simple remote shell tool that will call back to the C2 server and wait for commands.", "G0124": " Windigo  : Windigo has used a Perl script for information gathering.", "S0219": " WINERACK  : WINERACK can create a reverse shell that utilizes statically-linked Wine cmd.exe code to emulate Windows command prompt commands.", "S0330": " Zeus Panda  : Zeus Panda can launch remote scripts on the victim\u2019s machine.  "}, "id": "T1059", "subtechniques": ["T1059.001", "T1059.002", "T1059.003", "T1059.004", "T1059.005", "T1059.006", "T1059.007", "T1059.008"], "tactics": ["Execution"], "platforms": ["Linux, Network, Windows, macOS"], "permissionsrequired": ["User"], "supportsremote": ["Yes"], "version": "2.2", "created": "31 May 2017", "lastmodified": "16 August 2021"}, {"techniquename": "Local Accounts", "detection": "Perform regular audits of local system accounts to detect accounts that may have been created by an adversary for persistence. Look for suspicious account behavior, such as accounts logged in at odd times or outside of business hours.", "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement. ", "mitigations": {"M1027": " Password Policies  : Ensure that local administrator accounts have complex, unique passwords across all systems on the network.", "M1026": " Privileged Account Management  : Audit local accounts permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should check if new local accounts are created that have not be authorized. Implementing LAPS may help prevent reuse of local administrator credentials across a domain."}, "procedureexamples": {"G0050": " APT32  : APT32 has used legitimate local admin account credentials.", "S0154": " Cobalt Strike  : Cobalt Strike can use known credentials to run commands and spawn processes as a local user account.", "S0367": " Emotet  : Emotet can brute force a local admin password, then use it to facilitate lateral movement.", "G0051": " FIN10  : FIN10 has moved laterally using the Local Administrator account.", "G0125": " HAFNIUM  : HAFNIUM has used the NT AUTHORITY\\SYSTEM account to create files on Exchange servers.", "G0094": " Kimsuky  : Kimsuky has used a tool called GREASE to add a Windows admin account in order to allow them continued access via RDP.", "S0368": " NotPetya  : NotPetya can use valid credentials with PsExec or  to spread itself to remote systems.", "G0116": " Operation Wocao  : Operation Wocao has used local account credentials found during the intrusion for lateral movement and privilege escalation.", "G0056": " PROMETHIUM  : PROMETHIUM has created admin accounts on a compromised host.", "G0081": " Tropic Trooper  : Tropic Trooper has used known administrator account credentials to execute the backdoor directly.    ", "G0010": " Turla  : Turla has abused local accounts that have the same password across the victim\u2019s network.", "S0221": " Umbreon  : Umbreon creates valid local users to provide access to the system."}, "id": "T1078.003", "subtechniqueof": "T1078", "tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "platforms": ["Containers, Linux, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "version": "1.2", "created": "13 March 2020", "lastmodified": "18 October 2021"}, {"techniquename": "PowerShell", "detection": "If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.Monitor for loading and/or execution of artifacts associated with PowerShell specific assemblies, such as System.Management.Automation.dll (especially to unusual process names/locations).It is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations).  PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features. An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.", "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.  Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the  cmdlet which can be used to run an executable and the  cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.A number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.PowerShell commands/scripts can also be executed without directly invoking the  binary through interfaces to PowerShell's underlying  assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI). ", "mitigations": {"M1049": " Antivirus/Antimalware  : Anti-virus can be used to automatically quarantine suspicious files. ", "M1045": " Code Signing  : Set PowerShell execution policy to execute only signed scripts.", "M1042": " Disable or Remove Feature or Program  : It may be possible to remove PowerShell from systems when not needed, but a review should be performed to assess the impact to an environment, since it could be in use for many legitimate purposes and administrative functions.Disable/restrict the WinRM Service to help prevent uses of PowerShell for remote execution.", "M1038": " Execution Prevention  : Use application control where appropriate.", "M1026": " Privileged Account Management  : When PowerShell is necessary, restrict PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration."}, "procedureexamples": {"S0622": " AppleSeed  : AppleSeed has the ability to execute its payload via PowerShell.", "G0073": " APT19  : APT19 used PowerShell commands to execute payloads.", "G0007": " APT28  : APT28 downloads and executes PowerShell scripts and performs PowerShell commands.", "G0016": " APT29  : APT29 has used encoded PowerShell scripts uploaded to CozyCar installations to download and install SeaDuke. APT29 also used PowerShell to create new tasks on remote machines, identify configuration settings, evade defenses, exfiltrate data, and to execute other commands.", "G0022": " APT3  : APT3 has used PowerShell on victim systems to download and run payloads after exploitation.", "G0050": " APT32  : APT32 has used PowerShell-based tools, PowerShell one-liners, and shellcode loaders for execution.", "G0064": " APT33  : APT33 has utilized PowerShell to download files from the C2 server and run various scripts. ", "G0082": " APT38  : APT38 has used PowerShell to execute commands and other operational tasks.", "G0087": " APT39  : APT39 has used PowerShell to execute malicious code.", "G0096": " APT41  : APT41 leveraged PowerShell to deploy malware families in victims\u2019 environments.", "S0129": " AutoIt backdoor  : AutoIt backdoor downloads a PowerShell script that decodes to a typical shellcode loader.", "S0234": " Bandook  : Bandook has used PowerShell loaders as part of execution.", "S0534": " Bazar  : Bazar can execute a PowerShell script received from C2.", "S0521": " BloodHound  : BloodHound can use PowerShell to pull Active Directory information from the target environment.", "G0108": " Blue Mockingbird  : Blue Mockingbird has used PowerShell reverse TCP shells to issue interactive commands over a network connection.", "S0360": " BONDUPDATER  : BONDUPDATER is written in PowerShell.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used PowerShell for execution.", "G0114": " Chimera  : Chimera has used PowerShell scripts to execute malicious payloads and the DSInternals PowerShell module to make use of Active Directory features.  ", "G0080": " Cobalt Group  : Cobalt Group has used powershell.exe to download and execute scripts.", "S0154": " Cobalt Strike  : Cobalt Strike can execute a payload on a remote host with PowerShell. This technique does not write any data to disk. Cobalt Strike can also use PowerSploit and other scripting frameworks to perform execution.", "S0126": " ComRAT  : ComRAT has used PowerShell to load itself every time a user logs in to the system. ComRAT can execute PowerShell scripts loaded into memory or from the file system.", "S0591": " ConnectWise  : ConnectWise can be used to execute PowerShell commands on target machines.", "G0052": " CopyKittens  : CopyKittens has used PowerShell Empire.", "S0488": " CrackMapExec  : CrackMapExec can execute PowerShell commands via WMI.", "S0625": " Cuba  : Cuba has been dropped onto systems and used for lateral movement via obfuscated PowerShell scripts.", "G0079": " DarkHydrus  : DarkHydrus leveraged PowerShell to download and execute additional scripts for execution.", "G0105": " DarkVishnya  : DarkVishnya used PowerShell to create shellcode loaders.", "G0009": " Deep Panda  : Deep Panda has used PowerShell scripts to download and execute programs in memory, without writing to disk.", "S0354": " Denis  : Denis has a version written in PowerShell.   ", "S0186": " DownPaper  : DownPaper uses PowerShell for execution.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used PowerShell scripts for execution.", "S0554": " Egregor  : Egregor has used an encoded PowerShell command by a service created by Cobalt Strike for lateral movement.", "S0367": " Emotet  : Emotet has used Powershell to retrieve the malicious payload and download additional resources like Mimikatz. ", "S0363": " Empire  : Empire leverages PowerShell for the majority of its client-side agent tasks. Empire also contains the ability to conduct PowerShell remoting with the  module.", "S0512": " FatDuke  : FatDuke has the ability to execute PowerShell scripts.", "G0051": " FIN10  : FIN10 uses PowerShell for execution as well as PowerShell Empire to establish persistence.", "G0037": " FIN6  : FIN6 has used PowerShell to gain access to merchant's networks, and a Metasploit PowerShell module to download and execute shellcode and to set up a local listener.", "G0046": " FIN7  : FIN7 used a PowerShell script to launch shellcode that retrieved an additional payload.", "G0061": " FIN8  : FIN8's malicious spearphishing payloads are executed as PowerShell. FIN8 has also used PowerShell for lateral movement and credential access.", "G0117": " Fox Kitten  : Fox Kitten has used PowerShell scripts to access credential data.", "G0101": " Frankenstein  : Frankenstein has used PowerShell to run a series of base64-encoded commands, that acted as a stager and enumerated hosts.  ", "G0093": " GALLIUM  : GALLIUM used PowerShell for execution to assist in lateral movement as well as for dumping credentials stored on compromised machines.", "G0084": " Gallmaker  : Gallmaker used PowerShell to download additional payloads and for execution.", "G0115": " GOLD SOUTHFIELD  : GOLD SOUTHFIELD has staged and executed PowerShell scripts on compromised hosts.", "G0078": " Gorgon Group  : Gorgon Group malware can use PowerShell commands to download and execute a payload and open a decoy document on the victim\u2019s machine.", "S0417": " GRIFFON  : GRIFFON has used PowerShell to execute the Meterpreter downloader TinyMet.", "G0125": " HAFNIUM  : HAFNIUM has used the Exchange Power Shell module  to export mailbox data.", "S0151": " HALFBAKED  : HALFBAKED can execute PowerShell scripts.", "S0037": " HAMMERTOSS  : HAMMERTOSS is known to use PowerShell.", "S0499": " Hancitor  : Hancitor has used PowerShell to execute commands.", "S0170": " Helminth  : One version of Helminth uses a PowerShell script.", "G0100": " Inception  : Inception has used PowerShell to execute malicious commands and payloads.", "G0119": " Indrik Spider  : Indrik Spider has used PowerShell Empire for execution of malware. ", "S0389": " JCry  : JCry has used PowerShell to execute payloads.", "S0648": " JSS Loader  : JSS Loader has the ability to download and execute PowerShell scripts.", "S0387": " KeyBoy  : KeyBoy uses PowerShell commands to download and execute payloads.", "S0526": " KGH_SPY  : KGH_SPY can execute PowerShell commands on the victim's machine.", "G0094": " Kimsuky  : Kimsuky has executed a variety of PowerShell scripts.", "S0356": " KONNI  : KONNI used PowerShell to download and execute a specific 64-bit version of the malware.", "G0065": " Leviathan  : Leviathan has used PowerShell for execution.", "S0447": " Lokibot  : Lokibot has used PowerShell commands embedded inside batch scripts. ", "G0059": " Magic Hound  : Magic Hound has used PowerShell for execution and privilege escalation.", "G0045": " menuPass  : menuPass uses PowerSploit to inject shellcode into PowerShell.", "S0553": " MoleNet  : MoleNet can use PowerShell to set persistence. ", "G0021": " Molerats  : Molerats used PowerShell implants on target machines.", "S0256": " Mosquito  : Mosquito can launch PowerShell Scripts.", "G0069": " MuddyWater  : MuddyWater has used PowerShell for execution.", "G0129": " Mustang Panda  : Mustang Panda has used malicious PowerShell scripts to enable execution.", "S0457": " Netwalker  : Netwalker has been written in PowerShell and executed directly in memory, avoiding detection.", "S0198": " NETWIRE  : The NETWIRE binary has been executed via PowerShell script.", "S0385": " njRAT  : njRAT has executed PowerShell commands via auto-run registry key persistence.", "G0133": " Nomadic Octopus  : Nomadic Octopus has used PowerShell for execution. ", "G0049": " OilRig  : OilRig has used PowerShell scripts for execution, including use of a macro to run a PowerShell command to decode file contents.", "G0116": " Operation Wocao  : Operation Wocao has used PowerShell on compromised systems.", "S0352": " OSX_OCEANLOTUS.D  : OSX_OCEANLOTUS.D uses PowerShell scripts.", "G0040": " Patchwork  : Patchwork used PowerSploit to download payloads, run a reverse shell, and execute malware on the victim's machine.", "S0517": " Pillowmint  : Pillowmint has used a PowerShell script to install a shim database.    ", "G0033": " Poseidon Group  : The Poseidon Group's Information Gathering Tool (IGT) includes PowerShell components.", "S0150": " POSHSPY  : POSHSPY uses PowerShell to execute various commands, one to execute its payload.", "S0441": " PowerShower  : PowerShower is a backdoor written in PowerShell.", "S0145": " POWERSOURCE  : POWERSOURCE is a PowerShell backdoor.", "S0194": " PowerSploit  : PowerSploit modules are written in and executed via PowerShell.", "S0393": " PowerStallion  : PowerStallion uses PowerShell loops to iteratively check for available commands in its OneDrive C2 server.", "S0223": " POWERSTATS  : POWERSTATS uses PowerShell for obfuscation and execution.", "S0371": " POWERTON  : POWERTON is written in PowerShell.", "S0184": " POWRUNER  : POWRUNER is written in PowerShell.", "S0613": " PS1  : PS1 can utilize a PowerShell loader.", "S0196": " PUNCHBUGGY  : PUNCHBUGGY has used PowerShell scripts.", "S0192": " Pupy  : Pupy has a module for loading and executing PowerShell scripts.", "S0583": " Pysa  : Pysa has used Powershell scripts to deploy its ransomware. ", "S0650": " QakBot  : QakBot can use PowerShell to download and execute payloads.", "S0269": " QUADAGENT  : QUADAGENT uses PowerShell scripts for execution.", "S0241": " RATANKBA  : There is a variant of RATANKBA that uses a PowerShell script instead of the traditional PE form.", "S0511": " RegDuke  : RegDuke can extract and execute PowerShell scripts from C2 communications.", "S0379": " Revenge RAT  : Revenge RAT uses the PowerShell command  to load itself into memory to aid in execution.", "S0496": " REvil  : REvil has used PowerShell to delete volume shadow copies and download files.", "S0270": " RogueRobin  : RogueRobin uses a command prompt to run a PowerShell script from Excel. To assist in establishing persistence, RogueRobin creates  and saves the following string to it:.", "G0034": " Sandworm Team  : Sandworm Team has used PowerShell scripts to run a credential harvesting tool in memory to evade defenses. ", "S0053": " SeaDuke  : SeaDuke uses a module to execute Mimikatz with PowerShell to perform Pass the Ticket.", "S0382": " ServHelper  : ServHelper has the ability to execute a PowerShell script to get information from the infected host.", "S0546": " SharpStage  : SharpStage can execute arbitrary commands with PowerShell.", "S0450": " SHARPSTATS  : SHARPSTATS has the ability to employ a custom PowerShell script.", "G0121": " Sidewinder  : Sidewinder has used PowerShell to drop and execute malware loaders.", "G0091": " Silence  : Silence has used PowerShell to download and execute payloads.", "S0649": " SMOKEDHAM  : SMOKEDHAM can execute Powershell commands sent from its C2 server.", "S0273": " Socksbot  : Socksbot can write and execute PowerShell scripts.", "S0390": " SQLRat  : SQLRat has used PowerShell to create a Meterpreter session.", "G0038": " Stealth Falcon  : Stealth Falcon malware uses PowerShell commands to perform various functions, including gathering system information via WMI and executing commands from its C2 server.", "S0491": " StrongPity  : StrongPity can use PowerShell to add files to the Windows Defender exclusions list.", "G0062": " TA459  : TA459 has used PowerShell for execution of a payload.", "G0092": " TA505  : TA505 has used PowerShell to download and execute malware and reconnaissance scripts.", "G0139": " TeamTNT  : TeamTNT has executed PowerShell commands in batch scripts.", "G0088": " TEMP.Veles  : TEMP.Veles has used a publicly-available PowerShell-based tool, WMImplant. The group has also used PowerShell to perform Timestomping.", "G0027": " Threat Group-3390  : Threat Group-3390 has used PowerShell for execution.", "G0076": " Thrip  : Thrip leveraged PowerShell to run commands to download payloads, traverse the compromised networks, and carry out reconnaissance.", "G0131": " Tonto Team  : Tonto Team has used PowerShell to download additional payloads.", "S0266": " TrickBot  : TrickBot has been known to use PowerShell to download new payloads, open documents, and upload data to command and control servers.  ", "G0010": " Turla  : Turla has used PowerShell to execute commands/scripts, in some cases via a custom executable or code from Empire's PSInject. Turla has also used PowerShell scripts to load and execute malware in memory.", "S0386": " Ursnif  : Ursnif droppers have used PowerShell in download cradles to download and execute the malware's full executable payload.", "S0476": " Valak  : Valak has used PowerShell to download additional modules.", "S0514": " WellMess  : WellMess can execute PowerShell scripts received from C2.", "G0090": " WIRTE  : WIRTE has used PowerShell for script execution.", "G0102": " Wizard Spider  : Wizard Spider has used macros to execute PowerShell scripts to download malware on victim's machines. It has also used PowerShell to execute commands and move laterally through a victim network.", "S0341": " Xbash  : Xbash can use scripts to invoke PowerShell to download a malicious PE executable or PE DLL for execution.", "S0330": " Zeus Panda  : Zeus Panda uses PowerShell to download and execute the payload."}, "id": "T1059.001", "subtechniqueof": "T1059", "tactics": ["Execution"], "platforms": ["Windows"], "permissionsrequired": ["Administrator, User"], "supportsremote": ["Yes"], "contributors": ["Praetorian"], "version": "1.1", "created": "09 March 2020", "lastmodified": "28 May 2021"}, {"techniquename": "Windows Command Shell", "detection": "Usage of the Windows command shell may be common on administrator, developer, or power user systems depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.", "description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.", "mitigations": {"M1038": " Execution Prevention  : Use application control where appropriate."}, "procedureexamples": {"S0065": " 4H RAT  : 4H RAT has the capability to create a remote shell.", "S0469": " ABK  : ABK has the ability to use cmd to run a Portable Executable (PE) on the compromised host.", "S0202": " adbupd  : adbupd can run a copy of cmd.exe.", "G0018": " admin@338  : Following exploitation with LOWBALL malware, admin@338 actors created a file containing a list of commands to be executed on the compromised computer.", "S0045": " ADVSTORESHELL  : ADVSTORESHELL can create a remote shell and run a given command.", "S0504": " Anchor  : Anchor has used cmd.exe to run its self deletion routine.", "G0006": " APT1  : APT1 has used the Windows command shell to execute commands, and batch scripting to automate execution.", "G0026": " APT18  : APT18 uses cmd.exe to execute commands on the victim\u2019s machine.", "G0007": " APT28  : An APT28 loader Trojan uses a cmd.exe and batch script to run its payload. The group has also used macros to execute payloads.", "G0016": " APT29  : APT29 used  to execute commands on remote machines.", "G0022": " APT3  : An APT3 downloader uses the Windows command . The group also uses a tool to execute commands on remote computers.", "G0050": " APT32  : APT32 has used cmd.exe for execution. ", "G0067": " APT37  : APT37 has used the command-line interface.", "G0082": " APT38  : APT38 has used a command-line tunneler, NACHOCHEESE, to give them shell access to a victim\u2019s machine.", "G0096": " APT41  : APT41 used  to execute commands on remote machines.APT41 used a batch file to install persistence for the Cobalt Strike BEACON loader.", "S0373": " Astaroth  : Astaroth spawns a CMD process to execute commands. ", "S0347": " AuditCred  : AuditCred can open a reverse shell on the system to execute commands.", "S0638": " Babuk  : Babuk has the ability to use the command line to control execution on compromised hosts.", "S0414": " BabyShark  : BabyShark has used cmd.exe to execute commands. ", "S0475": " BackConfig  : BackConfig can download and run batch files to execute commands on a compromised host.", "S0031": " BACKSPACE  : Adversaries can direct BACKSPACE to execute from the command line on infected hosts, or have BACKSPACE create a reverse shell.", "S0128": " BADNEWS  : BADNEWS is capable of executing commands via cmd.exe.", "S0234": " Bandook  : Bandook is capable of spawning a Windows command shell.", "S0239": " Bankshot  : Bankshot uses the command-line interface to execute arbitrary commands.", "S0534": " Bazar  : Bazar can launch cmd.exe to perform reconnaissance commands.", "S0470": " BBK  : BBK has the ability to use cmd to run a Portable Executable (PE) on the compromised host.", "S0017": " BISCUIT  : BISCUIT has a command to launch a command shell on the system.", "S0268": " Bisonal  : Bisonal can launch cmd.exe to execute commands on the system.", "S0069": " BLACKCOFFEE  : BLACKCOFFEE has the capability to create a reverse shell.", "S0564": " BlackMould  : BlackMould can run cmd.exe with parameters.", "S0520": " BLINDINGCAN  : BLINDINGCAN has executed commands via cmd.exe.", "G0108": " Blue Mockingbird  : Blue Mockingbird has used batch script files to automate execution and deployment of payloads.", "S0360": " BONDUPDATER  : BONDUPDATER can read batch commands in a file sent from its C2 server and execute them with cmd.exe.", "S0651": " BoxCaon  : BoxCaon can execute arbitrary commands and utilize the \"ComSpec\" environment variable.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has used batch scripts and the command-line interface for execution.", "S0025": " CALENDAR  : CALENDAR has a command to run cmd.exe to execute commands.", "S0030": " Carbanak  : Carbanak has a command to create a reverse shell.", "S0348": " Cardinal RAT  : Cardinal RAT can execute commands.", "S0462": " CARROTBAT  : CARROTBAT has the ability to execute command line arguments on a compromised host.", "S0572": " Caterpillar WebShell  : Caterpillar WebShell can run commands on the compromised asset with CMD functions.", "S0631": " Chaes  : Chaes has used cmd to execute tasks on the system. ", "G0114": " Chimera  : Chimera has used the Windows Command Shell and batch scripts for execution on compromised hosts.", "S0020": " China Chopper  : China Chopper's server component is capable of opening a command terminal.", "S0611": " Clop  : Clop can use cmd.exe to help execute commands on the system. ", "S0106": " cmd  : cmd is used to execute programs and other actions at the command-line interface.", "G0080": " Cobalt Group  : Cobalt Group has used a JavaScript backdoor that is capable of launching cmd.exe to execute shell commands. The group has used an exploit toolkit known as Threadkit that launches .bat files.", "S0154": " Cobalt Strike  : Cobalt Strike uses a command-line interface to interact with systems.", "S0338": " Cobian RAT  : Cobian RAT can launch a remote command shell interface for executing commands.", "S0369": " CoinTicker  : CoinTicker executes a bash script to establish a reverse shell.", "S0244": " Comnie  : Comnie executes BAT scripts.", "S0126": " ComRAT  : ComRAT has used  to execute commands.", "S0575": " Conti  : Conti can utilize command line options to allow an attacker control over how it scans and encrypts files.", "S0046": " CozyCar  : A module in CozyCar allows arbitrary commands to be executed by invoking .", "S0115": " Crimson  : Crimson has the ability to execute commands with the COMSPEC environment variable.", "S0625": " Cuba  : Cuba has used  and batch files for execution. ", "G0070": " Dark Caracal  : Dark Caracal has used macros in Word documents that would download a second stage if executed.", "S0334": " DarkComet  : DarkComet can launch a remote shell to execute commands on the victim\u2019s machine.", "G0012": " Darkhotel  : Darkhotel has dropped an mspaint.lnk shortcut to disk which launches a shell script that downloads and executes a file.", "S0187": " Daserf  : Daserf can execute shell commands.", "S0243": " DealersChoice  : DealersChoice makes modifications to open-source scripts from GitHub and executes them on the victim\u2019s machine.", "S0354": " Denis  : Denis can launch a remote shell to execute arbitrary commands on the victim\u2019s machine.", "S0200": " Dipsind  : Dipsind can spawn remote shells.", "S0186": " DownPaper  : DownPaper uses the command line.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used various types of scripting to perform operations, including batch scripts.", "S0547": " DropBook  : DropBook can execute arbitrary shell commands on the victims' machines. ", "S0567": " Dtrack  : Dtrack has used  to add a persistent service.", "S0593": " ECCENTRICBANDWAGON  : ECCENTRICBANDWAGON can use cmd to execute commands on a victim\u2019s machine.", "S0554": " Egregor  : Egregor has used batch files for execution and can launch Internet Explorer from cmd.exe. ", "S0082": " Emissary  : Emissary has the capability to create a remote shell and execute specified commands.", "S0367": " Emotet  : Emotet has used cmd.exe to run a PowerShell script. ", "S0363": " Empire  : Empire has modules for executing scripts.", "S0634": " EnvyScout  : EnvyScout can use cmd.exe to execute malicious files on compromised hosts.", "S0396": " EvilBunny  : EvilBunny has an integrated scripting engine to download and execute Lua scripts.", "S0343": " Exaramel for Windows  : Exaramel for Windows has a command to launch a remote shell and executes commands on the victim\u2019s machine.", "S0171": " Felismus  : Felismus uses command line for execution.", "S0267": " FELIXROOT  : FELIXROOT executes batch scripts on the victim\u2019s machine, and can launch a reverse shell for command execution.", "G0051": " FIN10  : FIN10 has executed malicious .bat files containing PowerShell commands.", "G0037": " FIN6  : FIN6 has used  script to disable security tools.", "G0046": " FIN7  : FIN7 used the command prompt to launch commands on the victim\u2019s machine. ", "G0061": " FIN8  : FIN8 has used a Batch file to automate frequently executed post compromise cleanup activities. FIN8 has also executed commands remotely via cmd.", "G0117": " Fox Kitten  : Fox Kitten has used cmd.exe likely as a password changing mechanism.", "G0101": " Frankenstein  : Frankenstein has run a command script to set up persistence as a scheduled task named \"WinUpdate\", as well as other encoded commands from the command-line.", "G0093": " GALLIUM  : GALLIUM used the Windows command shell to execute commands.", "G0047": " Gamaredon Group  : Gamaredon Group has used various batch scripts to establish C2 and download additional files. Gamaredon Group's backdoor malware has also been written to a batch file.", "S0249": " Gold Dragon  : Gold Dragon uses cmd.exe to execute commands for discovery.", "S0493": " GoldenSpy  : GoldenSpy can execute remote commands via the command-line interface.   ", "S0588": " GoldMax  : GoldMax can spawn a command shell, and execute native commands.", "S0477": " Goopy  : Goopy has the ability to use cmd.exe to execute commands passed from an Outlook C2 channel.  ", "G0078": " Gorgon Group  : Gorgon Group malware can use cmd.exe to download and execute payloads and to execute commands on the system.", "S0237": " GravityRAT  : GravityRAT executes commands remotely on the infected host.", "S0342": " GreyEnergy  : GreyEnergy uses cmd.exe to execute itself in-memory.", "S0632": " GrimAgent  : GrimAgent can use the Windows Command Shell to execute commands, including its own removal.", "S0132": " H1N1  : H1N1 kills and disables services by using cmd.exe.", "S0246": " HARDRAIN  : HARDRAIN uses cmd.exe to execute commands.", "S0391": " HAWKBALL  : HAWKBALL has created a cmd.exe reverse shell, executed commands, and uploaded output via the command line.", "S0071": " hcdLoader  : hcdLoader provides command-line access to the compromised system.", "S0170": " Helminth  : Helminth can provide a remote shell. One version of Helminth uses batch scripting.", "S0087": " Hi-Zor  : Hi-Zor has the ability to create a reverse shell.", "S0394": " HiddenWasp  : HiddenWasp uses a script to automate tasks on the victim's machine and to assist in execution.", "G0126": " Higaisa  : Higaisa used  for execution.", "S0009": " Hikit  : Hikit has the ability to create a remote shell and run given commands.", "S0232": " HOMEFRY  : HOMEFRY uses a command-line interface.", "G0072": " Honeybee  : Several commands are supported by the Honeybee's implant via the command-line interface and there\u2019s also a utility to execute any custom command on an infected endpoint. Honeybee used batch scripting.", "S0376": " HOPLIGHT  : HOPLIGHT can launch cmd.exe to execute commands on the system.  ", "S0431": " HotCroissant  : HotCroissant can remotely open applications on the infected host with the  command.", "S0070": " HTTPBrowser  : HTTPBrowser is capable of spawning a reverse shell on a victim.", "S0068": " httpclient  : httpclient opens cmd.exe on the victim.", "G0119": " Indrik Spider  : Indrik Spider has used batch scripts on victim's machines. ", "S0259": " InnaputRAT  : InnaputRAT launches a shell to execute commands on the victim\u2019s machine.", "S0260": " InvisiMole  : InvisiMole can launch a remote shell to execute commands.", "S0015": " Ixeshe  : Ixeshe is capable of executing commands via cmd.", "S0389": " JCry  : JCry has used  to launch PowerShell.   ", "S0044": " JHUHUGIT  : JHUHUGIT uses a .bat file to execute a .dll.", "S0201": " JPIN  : JPIN can use the command-line utility cacls.exe to change file permissions.", "S0283": " jRAT  : jRAT has command line access.", "S0088": " Kasidet  : Kasidet can execute commands using cmd.exe.", "S0265": " Kazuar  : Kazuar uses cmd.exe to execute commands on the victim\u2019s machine.", "G0004": " Ke3chang  : Ke3chang has used batch scripts in its malware to install persistence mechanisms.", "S0387": " KeyBoy  : KeyBoy can launch interactive shells for communicating with the victim machine.", "S0271": " KEYMARBLE  : KEYMARBLE can execute shell commands using cmd.exe.", "S0526": " KGH_SPY  : KGH_SPY has the ability to set a Registry key to run a cmd.exe command.", "S0250": " Koadic  : Koadic can open an interactive command-shell to perform command line functions on victim machines. Koadic performs most of its operations using Windows Script Host (Jscript) and runs arbitrary shellcode .", "S0156": " KOMPROGO  : KOMPROGO is capable of creating a reverse shell.", "S0356": " KONNI  : KONNI has used cmd.exe execute arbitrary commands on the infected host across different stages of the infection change.", "G0032": " Lazarus Group  : Lazarus Group malware uses cmd.exe to execute commands on victims. A Destover-like variant used by Lazarus Group uses a batch file mechanism to delete its binaries from the system.", "S0395": " LightNeuron  : LightNeuron is capable of executing commands via cmd.exe.", "S0211": " Linfo  : Linfo creates a backdoor through which remote attackers can start a remote shell.", "S0447": " Lokibot  : Lokibot has used  commands embedded within batch scripts. ", "S0582": " LookBack  : LookBack executes the  command.", "S0451": " LoudMiner  : LoudMiner used a batch script to run the Linux virtual machine as a service.", "S0532": " Lucifer  : Lucifer can issue shell commands to download and execute additional payloads.", "G0095": " Machete  : Machete has used batch files to initiate additional downloads of malicious files.", "G0059": " Magic Hound  : Magic Hound has used the command-line interface.", "S0652": " MarkiRAT  : MarkiRAT can utilize cmd.exe to execute commands in a victim's environment.", "S0449": " Maze  : The Maze encryption process has used batch scripts with various commands.", "S0500": " MCMD  : MCMD can launch a console process (cmd.exe) with redirected standard input and output.", "S0459": " MechaFlounder  : MechaFlounder has the ability to run commands on a compromised host.", "S0576": " MegaCortex  : MegaCortex has used  scripts on the victim's system. ", "G0045": " menuPass  : menuPass executes commands using a command-line interface and reverse shell. The group has used a modified version of pentesting script wmiexec.vbs to execute commands. menuPass has used malicious macros embedded inside Office documents to execute files.", "S0455": " Metamorfo  : Metamorfo has used  to execute files. ", "S0339": " Micropsia  : Micropsia creates a command-line shell using cmd.exe.", "S0280": " MirageFox  : MirageFox has the capability to execute commands using cmd.exe.", "S0084": " Mis-Type  : Mis-Type uses cmd.exe to run commands for enumerating the host.", "S0083": " Misdat  : Misdat is capable of providing shell functionality to the attacker to execute commands.", "S0080": " Mivast  : Mivast has the capability to open a remote shell and run basic commands.", "S0553": " MoleNet  : MoleNet can execute commands via the command line utility.", "S0149": " MoonWind  : MoonWind can execute commands via an interactive command shell. MoonWind uses batch scripts for various purposes, including to restart and uninstall itself.", "S0284": " More_eggs  : More_eggs has used cmd.exe for execution.", "S0256": " Mosquito  : Mosquito executes cmd.exe and uses a pipe to read the results and send back the output to the C2 server.", "G0069": " MuddyWater  : MuddyWater has used a custom tool for creating reverse shells.", "S0233": " MURKYTOP  : MURKYTOP uses the command-line interface.", "G0129": " Mustang Panda  : Mustang Panda has executed HTA files via cmd.exe, and used batch scripts for collection.", "S0336": " NanoCore  : NanoCore can open a remote command-line interface and execute commands. NanoCore uses JavaScript files.", "S0247": " NavRAT  : NavRAT leverages cmd.exe to perform discovery techniques. NavRAT loads malicious shellcode and executes it in memory.", "S0630": " Nebulae  : Nebulae can use CMD to execute a process.", "S0034": " NETEAGLE  : NETEAGLE allows adversaries to execute shell commands on the infected host.", "S0457": " Netwalker  : Operators deploying Netwalker have used batch scripts to retrieve the Netwalker payload.", "S0198": " NETWIRE  : NETWIRE can issue commands using cmd.exe.", "S0385": " njRAT  : njRAT can launch a command shell interface for executing commands.", "G0133": " Nomadic Octopus  : Nomadic Octopus used  within a malicious macro.", "S0346": " OceanSalt  : OceanSalt can create a reverse shell on the infected endpoint using cmd.exe. OceanSalt has been executed via malicious macros.", "G0049": " OilRig  : OilRig has used macros to deliver malware such as QUADAGENT and OopsIE. OilRig has used batch scripts.", "S0439": " Okrum  : Okrum's backdoor has used cmd.exe to execute arbitrary commands as well as batch scripts to update itself to a newer version.", "S0264": " OopsIE  : OopsIE uses the command prompt to execute commands on the victim's machine.", "G0116": " Operation Wocao  : Operation Wocao has spawned a new  process to execute commands.    ", "S0229": " Orz  : Orz can execute shell commands. Orz can execute commands with JavaScript.", "S0594": " Out1  : Out1 can use native command line for execution.", "G0040": " Patchwork  : Patchwork ran a reverse shell with Meterpreter. Patchwork used JavaScript code and .SCT files on victim machines.", "S0643": " Peppy  : Peppy has the ability to execute shell commands.", "S0158": " PHOREAL  : PHOREAL is capable of creating reverse shell.", "S0124": " Pisloader  : Pisloader uses cmd.exe to set the Registry Run key value. It also has a command to spawn a command shell.", "S0254": " PLAINTEE  : PLAINTEE uses cmd.exe to execute commands on the victim\u2019s machine.", "S0435": " PLEAD  : PLEAD has the ability to execute shell commands on the compromised host.", "S0013": " PlugX  : PlugX allows actors to spawn a reverse shell on a victim.", "S0428": " PoetRAT  : PoetRAT has called cmd through a Word document macro.", "S0012": " PoisonIvy  : PoisonIvy creates a backdoor through which remote attackers can open a command-line interface.", "S0453": " Pony  : Pony has used batch scripts to delete itself after execution.    ", "S0139": " PowerDuke  : PowerDuke runs  and sends the output to its C2.", "S0184": " POWRUNER  : POWRUNER can execute commands from its C2 server.", "S0238": " Proxysvc  : Proxysvc executes a binary on the system and logs the results into a temp file by using: .", "S0147": " Pteranodon  : Pteranodon can execute commands on the victim.", "S0650": " QakBot  : QakBot can use cmd.exe to launch itself and to execute multiple C2 commands.", "S0269": " QUADAGENT  : QUADAGENT uses cmd.exe to execute scripts and commands on the victim\u2019s machine.", "S0262": " QuasarRAT  : QuasarRAT can launch a remote shell to execute commands on the victim\u2019s machine.", "S0481": " Ragnar Locker  : Ragnar Locker has used cmd.exe and batch scripts to execute commands.", "S0629": " RainyDay  : RainyDay can use the Windows Command Shell for execution.", "G0075": " Rancor  : Rancor has used cmd.exe to execute commmands.", "S0241": " RATANKBA  : RATANKBA uses cmd.exe to execute commands.", "S0495": " RDAT  : RDAT has executed commands using .   ", "S0153": " RedLeaves  : RedLeaves can receive and execute commands with cmd.exe. It can also provide a reverse shell.", "S0332": " Remcos  : Remcos can launch a remote command line to execute commands on the victim\u2019s machine.", "S0375": " Remexi  : Remexi silently executes received commands with cmd.exe.", "S0379": " Revenge RAT  : Revenge RAT uses cmd.exe to execute commands and run scripts on the victim's machine.", "S0496": " REvil  : REvil can use the Windows command line to delete volume shadow copies and disable recovery.", "S0258": " RGDoor  : RGDoor uses cmd.exe to execute commands on the victim\u2019s machine.", "S0448": " Rising Sun  : Rising Sun executed commands using cmd.exe. ", "S0400": " RobbinHood  : RobbinHood uses cmd.exe on the victim's computer.", "S0270": " RogueRobin  : RogueRobin uses Windows Script Components.", "S0148": " RTM  : RTM uses the command line and rundll32.exe to execute.", "S0253": " RunningRAT  : RunningRAT uses a batch file to kill a security program task and then attempts to remove itself.", "S0446": " Ryuk  : Ryuk has used  to create a Registry entry to establish persistence.", "S0074": " Sakula  : Sakula calls cmd.exe to run various DLL files via rundll32 and also to perform file cleanup. Sakula also has the capability to invoke a reverse shell.", "S0370": " SamSam  : SamSam uses custom batch scripts to execute some of its components.", "G0034": " Sandworm Team  : Sandworm Team has run the   command in MS-SQL. ", "S0461": " SDBbot  : SDBbot has the ability to use the command shell to execute commands on a compromised host.", "S0053": " SeaDuke  : SeaDuke is capable of executing commands.", "S0345": " Seasalt  : Seasalt uses cmd.exe to create a reverse shell on the infected endpoint.", "S0185": " SEASHARPEE  : SEASHARPEE can execute commands on victims.", "S0382": " ServHelper  : ServHelper can execute shell commands against cmd.", "S0639": " Seth-Locker  : Seth-Locker can execute commands via the command line shell.", "S0546": " SharpStage  : SharpStage can execute arbitrary commands with the command line.", "S0444": " ShimRat  : ShimRat can be issued a command shell function from the C2.", "S0610": " SideTwist  : SideTwist can execute shell commands on a compromised host.", "G0091": " Silence  : Silence has used Windows command-line to run commands.", "S0623": " Siloscape  : Siloscape can run cmd through an IRC channel.", "S0533": " SLOTHFULMEDIA  : SLOTHFULMEDIA can open a command line to execute commands.", "S0159": " SNUGRIDE  : SNUGRIDE is capable of executing commands and spawning a reverse shell.", "G0054": " Sowbug  : Sowbug has used command line during its intrusions.", "S0543": " Spark  : Spark can use cmd.exe to run commands. ", "S0390": " SQLRat  : SQLRat has used SQL to execute JavaScript and VB scripts on the host system.", "S0142": " StreamEx  : StreamEx has the ability to remotely execute commands.", "G0039": " Suckfly  : Several tools used by Suckfly have been command-line driven.", "S0464": " SYSCON  : SYSCON has the ability to execute commands through cmd on a compromised host.", "G0092": " TA505  : TA505 has executed commands using .", "G0127": " TA551  : TA551 has used  to execute commands.", "S0011": " Taidoor  : Taidoor can copy cmd.exe into the system temp folder.", "S0586": " TAINTEDSCRIBE  : TAINTEDSCRIBE can enable Windows CLI access and execute files.", "S0164": " TDTESS  : TDTESS provides a reverse shell on the victim.", "G0139": " TeamTNT  : TeamTNT has used batch scripts to download tools and executing cryptocurrency miners.", "S0146": " TEXTMATE  : TEXTMATE executes cmd.exe to provide a reverse shell to adversaries.", "G0028": " Threat Group-1314  : Threat Group-1314 actors spawned shells on remote systems on a victim network to execute commands.", "G0027": " Threat Group-3390  : Threat Group-3390 has used command-line interfaces for execution.", "S0004": " TinyZBot  : TinyZBot supports execution from the command-line.", "S0266": " TrickBot  : TrickBot has used macros in Excel documents to download and deploy the malware on the user\u2019s machine.", "S0094": " Trojan.Karagany  : Trojan.Karagany can perform reconnaissance commands on a victim machine via a cmd.exe process.", "G0081": " Tropic Trooper  : Tropic Trooper has used Windows command scripts. ", "S0436": " TSCookie  : TSCookie has the ability to execute shell commands on the infected host.", "S0647": " Turian  : Turian can create a remote shell and execute commands using cmd.", "G0010": " Turla  : Turla RPC backdoors have used cmd.exe to execute commands.", "S0199": " TURNEDUP  : TURNEDUP is capable of creating a reverse shell.", "S0263": " TYPEFRAME  : TYPEFRAME can uninstall malware components using a batch script. TYPEFRAME can execute commands using a shell.", "S0333": " UBoatRAT  : UBoatRAT can start a command shell.", "S0221": " Umbreon  : Umbreon provides access using both standard facilities like SSH and additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet", "S0275": " UPPERCUT  : UPPERCUT uses cmd.exe to execute commands on the victim\u2019s machine.", "S0452": " USBferry  : USBferry can execute various Windows commands. ", "S0180": " Volgmer  : Volgmer can execute commands on the victim's machine.", "S0612": " WastedLocker  : WastedLocker has used cmd to execute commands on the system.", "S0109": " WEBC2  : WEBC2 can open an interactive command shell.", "S0514": " WellMess  : WellMess can execute command line scripts received from C2.", "S0206": " Wiarp  : Wiarp creates a backdoor through which remote attackers can open a command line interface.", "G0102": " Wizard Spider  : Wizard Spider has used cmd.exe to execute commands on a victim's machine.", "S0653": " xCaon  : xCaon has a command to start an interactive shell.", "S0117": " XTunnel  : XTunnel has been used to execute remote commands.", "S0251": " Zebrocy  : Zebrocy uses cmd.exe to execute commands on the system. ", "S0330": " Zeus Panda  : Zeus Panda can launch an interface where it can execute several commands on the victim\u2019s PC.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used a tool to open a Windows Command Shell on a remote host.", "S0086": " ZLib  : ZLib has the ability to execute shell commands.", "S0350": " zwShell  : zwShell can launch command-line shells.", "S0412": " ZxShell  : ZxShell can launch a reverse command shell."}, "id": "T1059.003", "subtechniqueof": "T1059", "tactics": ["Execution"], "platforms": ["Windows"], "permissionsrequired": ["User"], "supportsremote": ["Yes"], "version": "1.2", "created": "09 March 2020", "lastmodified": "26 July 2021"}, {"techniquename": "Domain Accounts", "detection": "Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).On Linux, check logs and other artifacts created by use of domain authentication services, such as the System Security Services Daemon (sssd). Perform regular audits of domain accounts to detect accounts that may have been created by an adversary for persistence.", "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.  Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.", "mitigations": {"M1032": " Multi-factor Authentication  : Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs.", "M1026": " Privileged Account Management  : Audit domain account permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account. Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled and use of accounts is segmented, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. Limit credential overlap across systems to prevent access if account credentials are obtained.", "M1017": " User Training  : Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."}, "procedureexamples": {"G0016": " APT29  : APT29 has used valid accounts, including administrator accounts, to help facilitate lateral movement on compromised networks.", "G0022": " APT3  : APT3 leverages valid accounts after gaining credentials for use within the victim domain.", "G0114": " Chimera  : Chimera has used compromised domain accounts to gain access to the target environment.", "S0154": " Cobalt Strike  : Cobalt Strike can use known credentials to run commands and spawn processes as a domain user account.", "G0119": " Indrik Spider  : Indrik Spider has collected credentials from infected systems, including domain accounts.", "G0019": " Naikon  : Naikon has used administrator credentials for lateral movement in compromised networks.", "G0116": " Operation Wocao  : Operation Wocao has used domain credentials, including domain admin, for lateral movement and privilege escalation.", "S0446": " Ryuk  : Ryuk can use stolen domain admin accounts to move laterally within a victim domain.", "G0034": " Sandworm Team  : Sandworm Team has used stolen credentials to access administrative accounts within the domain.", "S0140": " Shamoon  : If Shamoon cannot access shares using current privileges, it attempts access using hard coded, domain-specific credentials gathered earlier in the intrusion.", "S0603": " Stuxnet  : Stuxnet attempts to access network resources with a domain account\u2019s credentials.", "G0092": " TA505  : TA505 has used stolen domain admin accounts to compromise additional hosts.", "G0028": " Threat Group-1314  : Threat Group-1314 actors used compromised domain credentials for the victim's endpoint management platform, Altiris, to move laterally.", "G0102": " Wizard Spider  : Wizard Spider has used administrative accounts, including Domain Admin, to move laterally within a victim network."}, "id": "T1078.002", "subtechniqueof": "T1078", "tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "platforms": ["Linux, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "capecid": ["CAPEC-560"], "contributors": ["Jon Sternstein, Stern Security"], "version": "1.2", "created": "13 March 2020", "lastmodified": "19 October 2021"}, {"techniquename": "Default Accounts", "detection": "Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.", "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.Default accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen Private Keys or credential materials to legitimately connect to remote environments via Remote Services.", "mitigations": {"M1027": " Password Policies  : Applications and appliances that utilize default username and password should be changed immediately after the installation, and before deployment to a production environment. "}, "procedureexamples": {"S0537": " HyperStack  : HyperStack can use default credentials to connect to IPC$ shares on remote machines.", "S0603": " Stuxnet  : Stuxnet infected WinCC machines via a hardcoded database server password."}, "id": "T1078.001", "subtechniqueof": "T1078", "tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "platforms": ["Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "capecid": ["CAPEC-70"], "version": "1.2", "created": "13 March 2020", "lastmodified": "05 April 2021"}, {"techniquename": "Cloud Accounts", "detection": "Monitor the activity of cloud accounts to detect abnormal or malicious behavior, such as accessing information outside of the normal function of the account or account usage at atypical hours.", "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory. Compromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a Trusted Relationship. Similar to Domain Accounts, compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.", "mitigations": {"M1032": " Multi-factor Authentication  : Use multi-factor authentication for cloud accounts, especially privileged accounts. This can be implemented in a variety of forms (e.g. hardware, virtual, SMS), and can also be audited using administrative reporting features.", "M1027": " Password Policies  : Ensure that cloud accounts, particularly privileged accounts, have complex, unique passwords across all systems on the network. Passwords and access keys should be rotated regularly. This limits the amount of time credentials can be used to access resources if a credential is compromised without your knowledge. Cloud service providers may track access key age to help audit and identify keys that may need to be rotated.", "M1026": " Privileged Account Management  : Review privileged cloud account permission levels routinely to look for those that could allow an adversary to gain wide access. These reviews should also check if new privileged cloud accounts have been created that were not authorized.", "M1018": " User Account Management  : Periodically review user accounts and remove those that are inactive or unnecessary. Limit the ability for user accounts to create additional accounts.", "M1017": " User Training  : Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."}, "procedureexamples": {"G0007": " APT28  : APT28 has used compromised Office 365 service accounts with Global Administrator privileges to collect email from user inboxes.", "G0064": " APT33  : APT33 has used compromised Office 365 accounts in tandem with Ruler in an attempt to gain control of endpoints."}, "id": "T1078.004", "subtechniqueof": "T1078", "tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "platforms": ["Azure AD, Google Workspace, IaaS, Office 365, SaaS"], "permissionsrequired": ["Administrator, User"], "contributors": ["Jon Sternstein, Stern Security"], "version": "1.3", "created": "13 March 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Trusted Relationship", "detection": "Establish monitoring for activity conducted by second and third party providers and other trusted entities that may be leveraged as a means to gain access to the network. Depending on the type of relationship, an adversary may have access to significant amounts of information about the target before conducting an operation, especially if the trusted relationship is based on IT services. Adversaries may be able to act quickly towards an objective, so proper monitoring for behavior related to Credential Access, Lateral Movement, and Collection will be important to detect the intrusion.", "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used.", "mitigations": {"M1030": " Network Segmentation  : Network segmentation can be used to isolate infrastructure components that do not require broad network access.", "M1052": " User Account Control  : Properly manage accounts and permissions used by parties in trusted relationships to minimize potential abuse by the party and if the party is compromised by an adversary."}, "procedureexamples": {"G0007": " APT28  : Once APT28 gained access to the DCCC network, the group then proceeded to use that access to compromise the DNC network.", "G0016": " APT29  : APT29 has used compromised certificates issued by Mimecast to authenticate to Mimecast customer systems.", "G0115": " GOLD SOUTHFIELD  : GOLD SOUTHFIELD has breached Managed Service Providers (MSP's) to deliver malware to MSP customers.", "G0045": " menuPass  : menuPass has used legitimate access granted to Managed Service Providers in order to access victims of interest.", "G0034": " Sandworm Team  : Sandworm Team has used dedicated network connections from one victim organization to gain unauthorized access to a separate organization."}, "id": "T1199", "subtechniques": ["No sub-techniques"], "tactics": ["Initial Access"], "platforms": ["IaaS, Linux, SaaS, Windows, macOS"], "contributors": ["Praetorian"], "version": "2.2", "created": "18 April 2018", "lastmodified": "08 March 2021"}, {"techniquename": "Valid Accounts", "detection": "Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.  Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).Perform regular audits of domain and local system accounts to detect accounts that may have been created by an adversary for persistence. Checks on these accounts could also include whether default accounts such as Guest have been activated. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.", "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise. ", "mitigations": {"M1013": " Application Developer Guidance  : Ensure that applications do not store sensitive data or credentials insecurely. (e.g. plaintext credentials in code, published credentials in repositories, or credentials in public cloud storage).", "M1027": " Password Policies  : Applications and appliances that utilize default username and password should be changed immediately after the installation, and before deployment to a production environment.  When possible, applications that use SSH keys should be updated periodically and properly secured.", "M1026": " Privileged Account Management  : Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. ", "M1017": " User Training  : Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."}, "procedureexamples": {"G0026": " APT18  : APT18 actors leverage legitimate credentials to log into external remote services.", "G0007": " APT28  : APT28 has used legitimate credentials to gain initial access, maintain access, and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone, printer, and video decoder.", "G0016": " APT29  : APT29 used different compromised credentials for remote access and to move laterally.", "G0064": " APT33  : APT33 has used valid accounts for initial access and privilege escalation.", "G0087": " APT39  : APT39 has used stolen credentials to compromise Outlook Web Access (OWA).", "G0096": " APT41  : APT41 used compromised credentials to log on to other systems.", "G0008": " Carbanak  : Carbanak actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars.", "G0114": " Chimera  : Chimera has used a valid account to maintain persistence via scheduled task.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 compromised user credentials and used valid accounts for operations.", "S0567": " Dtrack  : Dtrack used hard-coded credentials to gain access to a network share.", "S0038": " Duqu  : Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.", "G0051": " FIN10  : FIN10 has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor.", "G0085": " FIN4  : FIN4 has used legitimate credentials to hijack email communications.", "G0053": " FIN5  : FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment.", "G0037": " FIN6  : To move laterally on a victim network, FIN6 has used credentials stolen from various systems on which it gathered usernames and password hashes.", "G0046": " FIN7  : FIN7 has harvested valid administrative credentials for lateral movement.", "G0061": " FIN8  : FIN8 has used valid accounts for persistence and lateral movement.", "G0117": " Fox Kitten  : Fox Kitten has used valid credentials with various services during lateral movement.", "G0093": " GALLIUM  : GALLIUM leveraged valid accounts to maintain access to a victim network.", "S0604": " Industroyer  : Industroyer can use supplied user credentials to execute processes and stop services.", "S0599": " Kinsing  : Kinsing has used valid SSH credentials to access remote hosts.", "G0065": " Leviathan  : Leviathan has obtained valid accounts to gain initial access.", "S0362": " Linux Rabbit  : Linux Rabbit acquires valid SSH accounts through brute force. ", "G0045": " menuPass  : menuPass has used valid accounts including shared between Managed Service Providers and clients to move between the two environments.", "G0014": " Night Dragon  : Night Dragon has used compromised VPN accounts to gain access to victim systems.", "G0049": " OilRig  : OilRig has used compromised credentials to access other systems on a victim network.", "G0116": " Operation Wocao  : Operation Wocao has used valid VPN credentials to gain initial access.", "G0011": " PittyTiger  : PittyTiger attempts to obtain legitimate credentials during operations.", "G0034": " Sandworm Team  : Sandworm Team have used previously acquired legitimate credentials prior to attacks.", "S0053": " SeaDuke  : Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials.", "G0091": " Silence  : Silence has used compromised credentials to log on to other systems and escalate privileges.", "G0122": " Silent Librarian  : Silent Librarian has used compromised credentials to obtain unauthorized access to online accounts.", "G0039": " Suckfly  : Suckfly used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner.", "G0088": " TEMP.Veles  : TEMP.Veles has used compromised VPN accounts.   ", "G0027": " Threat Group-3390  : Threat Group-3390 actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks.", "G0102": " Wizard Spider  : Wizard Spider has used valid credentials for privileged accounts with the goal of accessing domain controllers. "}, "id": "T1078", "subtechniques": ["T1078.001", "T1078.002", "T1078.003", "T1078.004"], "tactics": ["Defense Evasion", "Persistence", "Privilege Escalation", "Initial Access"], "platforms": ["Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS"], "permissionsrequired": ["Administrator, User"], "effectivepermissions": ["Administrator, User"], "defensebypassed": ["Anti-virus, Application control, Firewall, Host intrusion prevention systems, Network intrusion detection system, System access controls"], "capecid": ["CAPEC-560"], "contributors": ["Jon Sternstein, Stern Security; Mark Wee; Netskope; Praetorian; Yossi Weizman, Azure Defender Research Team"], "version": "2.3", "created": "31 May 2017", "lastmodified": "19 October 2021"}, {"techniquename": "Compromise Hardware Supply Chain", "detection": "Perform physical inspection of hardware to look for potential tampering. Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes.", "description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.", "mitigations": {"M1046": " Boot Integrity  : Use Trusted Platform Module technology and a secure or trusted boot process to prevent system integrity from being compromised. Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification.  "}, "id": "T1195.003", "subtechniqueof": "T1195", "tactics": ["Initial Access"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "11 March 2020", "lastmodified": "23 March 2020"}, {"techniquename": "Compromise Software Supply Chain", "detection": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. ", "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.   ", "mitigations": {"M1051": " Update Software  : A patch management process should be implemented to check unused applications, unmaintained and/or previously vulnerable software, unnecessary features, components, files, and documentation.", "M1016": " Vulnerability Scanning  : Continuous monitoring of vulnerability sources and the use of automatic and manual code review tools should also be implemented as well."}, "procedureexamples": {"G0016": " APT29  : APT29 gained initial network access to some victims via a trojanized update of SolarWinds Orion software.", "G0096": " APT41  : APT41 gained access to production environments where they could inject malicious code into legitimate, signed files and widely distribute them to end users.", "S0222": " CCBkdr  : CCBkdr was added to a legitimate, signed version 5.33 of the CCleaner software and distributed on CCleaner's distribution site.", "G0080": " Cobalt Group  : Cobalt Group has compromised legitimate web browser updates to deliver a backdoor. ", "G0035": " Dragonfly  : Dragonfly has placed trojanized installers on legitimate vendor app stores.", "G0115": " GOLD SOUTHFIELD  : GOLD SOUTHFIELD has distributed ransomware by backdooring software installers via a strategic web compromise of the site hosting Italian WinRAR.", "S0493": " GoldenSpy  : GoldenSpy has been packaged with a legitimate tax preparation software.", "G0034": " Sandworm Team  : Sandworm Team has distributed NotPetya by compromising the legitimate Ukrainian accounting software M.E.Doc and replacing a legitimate software update with a malicious one.", "S0562": " SUNSPOT  : SUNSPOT malware was designed and used to insert SUNBURST into software builds of the SolarWinds Orion IT management product."}, "id": "T1195.002", "subtechniqueof": "T1195", "tactics": ["Initial Access"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "11 March 2020", "lastmodified": "11 March 2020"}, {"techniquename": "Supply Chain Compromise", "detection": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. Perform physical inspection of hardware to look for potential tampering.", "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.Supply chain compromise can take place at any stage of the supply chain including:While supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.    Targeting may be specific to a desired victim set  or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.   Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency. ", "mitigations": {"M1051": " Update Software  : A patch management process should be implemented to check unused dependencies, unmaintained and/or previously vulnerable dependencies, unnecessary features, components, files, and documentation.", "M1016": " Vulnerability Scanning  : Continuous monitoring of vulnerability sources and the use of automatic and manual code review tools should also be implemented as well."}, "id": "T1195", "subtechniques": ["T1195.001", "T1195.002", "T1195.003"], "tactics": ["Initial Access"], "platforms": ["Linux, Windows, macOS"], "capecid": ["CAPEC-437,", "CAPEC-438,", "CAPEC-439"], "contributors": ["Veeral Patel"], "version": "1.2", "created": "18 April 2018", "lastmodified": "06 January 2021"}, {"techniquename": "Compromise Software Dependencies and Development Tools", "detection": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. ", "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.   Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ", "mitigations": {"M1051": " Update Software  : A patch management process should be implemented to check unused dependencies, unmaintained and/or previously vulnerable dependencies, unnecessary features, components, files, and documentation.", "M1016": " Vulnerability Scanning  : Continuous monitoring of vulnerability sources and the use of automatic and manual code review tools should also be implemented as well."}, "procedureexamples": {"S0658": " XCSSET  : XCSSET adds malicious code to a host's Xcode projects by enumerating CocoaPods  files under the  folder or enumerates all  folders under a given directory. XCSSET then downloads a script and Mach-O file into the Xcode project folder."}, "id": "T1195.001", "subtechniqueof": "T1195", "tactics": ["Initial Access"], "platforms": ["Linux, Windows, macOS"], "version": "1.0", "created": "11 March 2020", "lastmodified": "11 March 2020"}, {"techniquename": "Replication Through Removable Media", "detection": "Monitor file access on removable media. Detect processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for Command and Control and system and network information Discovery.", "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.", "mitigations": {"M1040": " Behavior Prevention on Endpoint  : On Windows 10, enable Attack Surface Reduction (ASR) rules to block unsigned/untrusted executable files (such as .exe, .dll, or .scr) from running from USB removable drives. ", "M1042": " Disable or Remove Feature or Program  : Disable Autorun if it is unnecessary.  Disallow or restrict removable media at an organizational policy level if it is not required for business operations. ", "M1034": " Limit Hardware Installation  : Limit the use of USB devices and removable media within a network."}, "procedureexamples": {"S0092": " Agent.btz  : Agent.btz drops itself onto removable media devices and creates an autorun.inf file with an instruction to run that file. When the device is inserted into another system, it opens autorun.inf and loads the malware.", "G0007": " APT28  : APT28 uses a tool to infect connected USB devices and transmit itself to air-gapped computers when the infected USB device is inserted.", "S0023": " CHOPSTICK  : Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines and using files written to USB sticks to transfer data and command traffic.", "S0608": " Conficker  : Conficker variants used the Windows AUTORUN feature to spread through USB propagation.", "S0115": " Crimson  : Crimson can spread across systems by infecting removable media.", "G0012": " Darkhotel  : Darkhotel's selective infector modifies executables stored on removable media as a method of spreading across computers.", "S0062": " DustySky  : DustySky searches for removable media and duplicates itself onto it.", "S0143": " Flame  : Flame contains modules to infect USB sticks and spread laterally to other Windows systems the stick is plugged into using Autorun functionality.", "S0132": " H1N1  : H1N1 has functionality to copy itself to removable media.", "G0129": " Mustang Panda  : Mustang Panda has used a customized PlugX variant which could spread through USB connections.", "S0385": " njRAT  : njRAT can be configured to spread via removable drives.", "S0650": " QakBot  : QakBot has the ability to use removable drives to spread through compromised networks.", "S0458": " Ramsay  : Ramsay can spread itself by infecting other portable executable files on removable drives.   ", "S0028": " SHIPSHAPE  : APT30 may have used the SHIPSHAPE malware to move onto air-gapped networks. SHIPSHAPE targets removable drives to spread to other systems by modifying the drive to use Autorun to execute or by hiding legitimate document files and copying an executable to the folder with the same name as the legitimate document.", "S0603": " Stuxnet  : Stuxnet can propagate via removable media using an autorun.inf file or the CVE-2010-2568 LNK vulnerability.", "G0081": " Tropic Trooper  : Tropic Trooper has attempted to transfer USBferry from an infected USB device by copying an Autorun function to the target machine.", "S0130": " Unknown Logger  : Unknown Logger is capable of spreading to USB devices.", "S0386": " Ursnif  : Ursnif has copied itself to and infected removable drives for propagation.", "S0452": " USBferry  : USBferry can copy its installer to attached USB storage devices.", "S0136": " USBStealer  : USBStealer drops itself onto removable media and relies on Autorun to execute the malicious file when a user opens the removable media on another system."}, "id": "T1091", "subtechniques": ["No sub-techniques"], "tactics": ["Lateral Movement", "Initial Access"], "platforms": ["Windows"], "systemrequirements": ["Removable media allowed, Autorun enabled or vulnerability present that allows for code execution"], "permissionsrequired": ["User"], "version": "1.1", "created": "31 May 2017", "lastmodified": "20 July 2021"}, {"techniquename": "Spearphishing Link", "detection": "URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.Because this technique usually involves user interaction on the endpoint, many of the possible detections take place once  occurs.", "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to Steal Application Access Tokens, like OAuth tokens, in order to gain access to protected applications and information.", "mitigations": {"M1021": " Restrict Web-Based Content  : Determine if certain websites that can be used for spearphishing are necessary for business operations and consider blocking access if activity cannot be monitored well or if it poses a significant risk.", "M1054": " Software Configuration  : Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation.", "M1017": " User Training  : Users can be trained to identify social engineering techniques and spearphishing emails with malicious links."}, "procedureexamples": {"S0584": " AppleJeus  : AppleJeus has been distributed via spearphishing link.", "G0006": " APT1  : APT1 has sent spearphishing emails containing hyperlinks to malicious files.", "G0007": " APT28  : APT28 sent spearphishing emails which used a URL-shortener service to masquerade as a legitimate service and to redirect targets to credential harvesting sites.", "G0016": " APT29  : APT29 has used spearphishing with a link to trick victims into clicking on a link to a zip file containing malicious files.", "G0022": " APT3  : APT3 has sent spearphishing emails containing malicious links.", "G0050": " APT32  : APT32 has sent spearphishing emails containing malicious links.", "G0064": " APT33  : APT33 has sent spearphishing emails containing links to .hta files.", "G0087": " APT39  : APT39 leveraged spearphishing emails with malicious links to initially compromise victims.", "S0534": " Bazar  : Bazar has been spread via emails with embedded malicious links.", "G0098": " BlackTech  : BlackTech has used spearphishing e-mails with links to cloud services to deliver malware.", "G0080": " Cobalt Group  : Cobalt Group has sent emails with URLs pointing to malicious documents.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used spearphishing with PDF attachments containing malicious links that redirected to credential harvesting websites.", "G0066": " Elderwood  : Elderwood has delivered zero-day exploits and malware to victims via targeted emails containing a link to malicious content hosted on an uncommon Web server.", "S0367": " Emotet  : Emotet has been delivered by phishing emails containing links. ", "G0120": " Evilnum  : Evilnum has sent spearphishing emails containing a link to a zip file hosted on Google Drive.", "G0085": " FIN4  : FIN4 has used spearphishing emails (often sent from compromised accounts) containing malicious links.", "G0046": " FIN7  : FIN7 has conducted broad phishing campaigns using malicious links.", "G0061": " FIN8  : FIN8 has distributed targeted emails containing links to malicious documents with embedded macros.", "S0531": " Grandoreiro  : Grandoreiro has been spread via malicious links embedded in e-mails.", "S0561": " GuLoader  : GuLoader has been spread in phishing campaigns using malicious web links.", "S0499": " Hancitor  : Hancitor has been delivered via phishing emails which contained malicious links.", "S0528": " Javali  : Javali has been delivered via malicious links embedded in e-mails.", "S0585": " Kerrdown  : Kerrdown has been distributed via e-mails containing a malicious link.", "G0094": " Kimsuky  : Kimsuky has sent spearphishing emails containing a link to a document that contained malicious macros or took the victim to an actor-controlled domain.", "G0065": " Leviathan  : Leviathan has sent spearphishing emails with links, often using a fraudulent lookalike domain and stolen branding.", "G0095": " Machete  : Machete has sent phishing emails that contain a link to an external server with ZIP and RAR archives.", "G0059": " Magic Hound  : Magic Hound has sent malicious URL links through email to victims. In some cases the URLs were shortened or linked to Word documents with malicious macros that executed PowerShells scripts to download Pupy.", "S0530": " Melcoz  : Melcoz has been spread through malicious links embedded in e-mails.", "G0103": " Mofang  : Mofang delivered spearphishing emails with malicious links included.", "G0021": " Molerats  : Molerats has sent phishing emails with malicious links included.", "G0069": " MuddyWater  : MuddyWater has sent targeted spearphishing e-mails with malicious links.", "G0129": " Mustang Panda  : Mustang Panda has delivered spearphishing links to their target.", "S0198": " NETWIRE  : NETWIRE has been spread via e-mail campaigns utilizing malicious links.", "G0014": " Night Dragon  : Night Dragon sent spearphishing emails containing links to compromised websites where malware was downloaded.", "G0049": " OilRig  : OilRig has sent spearphising emails with malicious links to potential victims.", "G0040": " Patchwork  : Patchwork has used spearphishing with links to deliver files with exploits to initial victims. The group has also used embedded image tags (known as web bugs) with unique, per-recipient tracking links in their emails for the purpose of identifying which recipients opened messages.", "S0453": " Pony  : Pony has been delivered via spearphishing emails which contained malicious links.    ", "S0650": " QakBot  : QakBot has spread through emails with malicious links.", "G0034": " Sandworm Team  : Sandworm Team has crafted phishing emails containing malicious hyperlinks.", "G0121": " Sidewinder  : Sidewinder has sent e-mails with malicious links often crafted for specific targets.", "S0646": " SpicyOmelette  : SpicyOmelette has been distributed via emails containing a malicious link that appears to be a PDF document.", "G0092": " TA505  : TA505 has sent spearphishing emails containing malicious links.", "G0134": " Transparent Tribe  : Transparent Tribe has embedded links to malicious downloads in e-mails.", "S0266": " TrickBot  : TrickBot has been delivered via malicious links in phishing e-mails.", "G0010": " Turla  : Turla attempted to trick targets into clicking on a link featuring a seemingly legitimate domain from Adobe.com to download their malware and gain initial access.", "S0476": " Valak  : Valak has been delivered via malicious links in e-mail.", "G0112": " Windshift  : Windshift has sent spearphishing emails with links to harvest credentials and deliver malware.", "G0102": " Wizard Spider  : Wizard Spider has sent phishing emails containing a link to an actor-controlled Google Drive document or other free online file hosting services.", "G0128": " ZIRCONIUM  : ZIRCONIUM has used malicious links and web beacons in e-mails for malware download and to track hits to attacker-controlled URL's."}, "id": "T1566.002", "subtechniqueof": "T1566", "tactics": ["Initial Access"], "platforms": ["Google Workspace, Linux, Office 365, SaaS, Windows, macOS"], "capecid": ["CAPEC-163"], "contributors": ["Jeff Sakowicz, Microsoft Identity Developer Platform Services (IDPM Services); Mark Wee; Philip Winther; Saisha Agrawal, Microsoft Threat Intelligent Center (MSTIC); Shailesh Tiwary (Indian Army)"], "version": "2.1", "created": "02 March 2020", "lastmodified": "14 April 2021"}, {"techniquename": "Spearphishing via Service", "detection": "Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as  or usage of malicious scripts.", "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.", "mitigations": {"M1049": " Antivirus/Antimalware  : Anti-virus can also automatically quarantine suspicious files.", "M1021": " Restrict Web-Based Content  : Determine if certain social media sites, personal webmail services, or other service that can be used for spearphishing is necessary for business operations and consider blocking access if activity cannot be monitored well or if it poses a significant risk.", "M1017": " User Training  : Users can be trained to identify social engineering techniques and spearphishing messages with malicious links."}, "procedureexamples": {"G0130": " Ajax Security Team  : Ajax Security Team has used various social media channels to spearphish victims.", "G0016": " APT29  : APT29 has used the legitimate mailing service Constant Contact to send phishing e-mails.", "G0070": " Dark Caracal  : Dark Caracal spearphished victims via Facebook and Whatsapp.", "G0037": " FIN6  : FIN6 has used fake job advertisements sent via LinkedIn to spearphish targets.", "G0059": " Magic Hound  : Magic Hound used various social media channels (such as LinkedIn) as well as messaging services (such as WhatsApp) to spearphish victims.", "G0049": " OilRig  : OilRig has used LinkedIn to send spearphishing links.", "G0112": " Windshift  : Windshift has used fake personas on social media to engage and target victims.   "}, "id": "T1566.003", "subtechniqueof": "T1566", "tactics": ["Initial Access"], "platforms": ["Linux, Windows, macOS"], "capecid": ["CAPEC-163"], "version": "2.0", "created": "02 March 2020", "lastmodified": "18 October 2020"}, {"techniquename": "Link Target", "detection": "If infrastructure or patterns in malicious web content have been previously identified, internet scanning may uncover when an adversary has staged web content to make it accessible for targeting.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on other phases of the adversary lifecycle, such as during , , or .", "description": "Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link. Typically, the resources for a link target will be an HTML page that may include some client-side script such as JavaScript to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during Spearphishing Link. Adversaries may also Upload Malware and have the link target point to malware for download/execution by the user.Adversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Malicious Link. Link shortening services can also be employed.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0122": " Silent Librarian  : Silent Librarian has cloned victim organization login pages and staged them for later use in credential harvesting campaigns. Silent Librarian has also made use of a variety of URL shorteners for these staged websites."}, "id": "T1608.005", "subtechniqueof": "T1608", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "17 March 2021", "lastmodified": "17 October 2021"}, {"techniquename": "Exploit Public-Facing Application", "detection": "Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.", "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include Exploitation for Defense Evasion. If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Application isolation will limit what other processes and system features the exploited target can access.", "M1050": " Exploit Protection  : Web Application Firewalls may be used to limit exposure of applications to prevent exploit traffic from reaching the application.", "M1030": " Network Segmentation  : Segment externally facing servers and services from the rest of the network with a DMZ or on separate hosting infrastructure.", "M1026": " Privileged Account Management  : Use least privilege for service accounts will limit what permissions the exploited process gets on the rest of the system.", "M1051": " Update Software  : Update software regularly by employing patch management for externally exposed applications.", "M1016": " Vulnerability Scanning  : Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."}, "procedureexamples": {"G0007": " APT28  : APT28 has used a variety of public exploits, including CVE 2020-0688 and CVE 2020-17144, to gain execution on vulnerable Microsoft Exchange; they have also conducted SQL injection attacks against external websites.", "G0016": " APT29  : APT29 has exploited CVE-2019-19781 for Citrix, CVE-2019-11510 for Pulse Secure VPNs, CVE-2018-13379 for FortiGate VPNs, and CVE-2019-9670 in Zimbra software to gain access. They have also exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network.", "G0087": " APT39  : APT39 has used SQL injection for initial compromise.", "G0096": " APT41  : APT41 exploited CVE-2020-10189 against Zoho ManageEngine Desktop Central, and CVE-2019-19781 to compromise Citrix Application Delivery Controllers (ADC) and gateway devices.", "G0001": " Axiom  : Axiom has been observed using SQL injection to gain access to systems.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has exploited CVE-2020-5902, an F5 BIP-IP vulnerability, to drop a Linux backdoor. BackdoorDiplomacy has also exploited mis-configured Plesk servers.", "G0098": " BlackTech  : BlackTech has exploited a buffer overflow vulnerability in Microsoft Internet Information Services (IIS) 6.0, CVE-2017-7269, in order to establish a new HTTP or command and control (C2) server.", "G0108": " Blue Mockingbird  : Blue Mockingbird has gained initial access by exploiting CVE-2019-18935, a vulnerability within Telerik UI for ASP.NET AJAX.", "G0117": " Fox Kitten  : Fox Kitten has exploited known vulnerabilities in Fortinet, PulseSecure, and Palo Alto VPN appliances.", "G0093": " GALLIUM  : GALLIUM exploited a publicly-facing servers including Wildfly/JBoss servers to gain access to the network.", "G0115": " GOLD SOUTHFIELD  : GOLD SOUTHFIELD has exploited Oracle WebLogic vulnerabilities for initial compromise.", "S0224": " Havij  : Havij is used to automate SQL injection.", "G0045": " menuPass  : menuPass has leveraged vulnerabilities in Pulse Secure VPNs to hijack sessions.", "G0014": " Night Dragon  : Night Dragon has performed SQL injection attacks of extranet web servers to gain access.", "G0116": " Operation Wocao  : Operation Wocao has gained initial access via vulnerable webservers.", "G0106": " Rocke  : Rocke exploited Apache Struts, Oracle WebLogic (CVE-2017-10271), and Adobe ColdFusion (CVE-2017-3066) vulnerabilities to deliver malware.", "S0623": " Siloscape  : Siloscape is executed after the attacker gains initial access to a Windows container using a known vulnerability. ", "S0516": " SoreFang  : SoreFang can gain access by exploiting a Sangfor SSL VPN vulnerability that allows for the placement and delivery of malicious update binaries.", "S0225": " sqlmap  : sqlmap can be used to automate exploitation of SQL injection vulnerabilities.", "G0123": " Volatile Cedar  : Volatile Cedar has targeted publicly facing web servers, with both automatic and manual vulnerability discovery.  "}, "id": "T1190", "subtechniques": ["No sub-techniques"], "tactics": ["Initial Access"], "platforms": ["Containers, IaaS, Linux, Network, Windows, macOS"], "contributors": ["Praetorian; Yossi Weizman, Azure Defender Research Team"], "version": "2.3", "created": "18 April 2018", "lastmodified": "20 July 2021"}, {"techniquename": "Hardware Additions", "detection": "Asset management systems may help with the detection of computer systems or network devices that should not exist on a network. Endpoint sensors may be able to detect the addition of hardware via USB, Thunderbolt, and other external device communication ports.", "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by threat actors are scarce, many red teams/penetration testers leverage hardware additions for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping , network traffic modification (i.e. Adversary-in-the-Middle) , keystroke injection , kernel memory reading via DMA , addition of new wireless access to an existing network , and others.", "mitigations": {"M1035": " Limit Access to Resource Over Network  : Establish network access control policies, such as using device certificates and the 802.1x standard.  Restrict use of DHCP to registered devices to prevent unregistered devices from communicating with trusted systems.", "M1034": " Limit Hardware Installation  : Block unknown devices and accessories by endpoint security configuration and monitoring agent."}, "procedureexamples": {"G0105": " DarkVishnya  : DarkVishnya used Bash Bunny, Raspberry Pi, netbooks or inexpensive laptops to connect to the company\u2019s local network."}, "id": "T1200", "subtechniques": ["No sub-techniques"], "tactics": ["Initial Access"], "platforms": ["Linux, Windows, macOS"], "capecid": ["CAPEC-440"], "version": "1.2", "created": "18 April 2018", "lastmodified": "17 August 2021"}, {"techniquename": "Drive-by Target", "detection": "If infrastructure or patterns in the malicious web content utilized to deliver a  have been previously identified, internet scanning may uncover when an adversary has staged web content for use in a strategic web compromise.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on other phases of the adversary lifecycle, such as  or .", "description": "Adversaries may prepare an operational environment to infect systems that visit a website over the normal course of browsing. Endpoint systems may be compromised through browsing to adversary controlled sites, as in Drive-by Compromise. In such cases, the user's web browser is typically targeted for exploitation (often not requiring any extra user interaction once landing on the site), but adversaries may also set up websites for non-exploitation behavior such as Application Access Token. Prior to Drive-by Compromise, adversaries must stage resources needed to deliver that exploit to users who browse to an adversary controlled site. Drive-by content can be staged on adversary controlled infrastructure that has been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).Adversaries may upload or inject malicious web content, such as JavaScript, into websites. This may be done in a number of ways, including inserting malicious script into web pages or other user controllable web content such as forum posts. Adversaries may also craft malicious web advertisements and purchase ad space on a website through legitimate ad providers. In addition to staging content to exploit a user's web browser, adversaries may also stage scripting content to profile the user's browser (as in Gather Victim Host Information) to ensure it is vulnerable prior to attempting exploitation.Websites compromised by an adversary and used to stage a drive-by may be ones visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack.Adversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Drive-by Compromise.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0050": " APT32  : APT32 has stood up websites containing numerous articles and content scraped from the Internet to make them appear legitimate, but some of these pages include malicious JavaScript to profile the potential victim or infect them via a fake software update.", "G0027": " Threat Group-3390  : Threat Group-3390 has embedded malicious code into websites to screen a potential victim's IP address and then exploit their browser if they are of interest.", "G0134": " Transparent Tribe  : Transparent Tribe has set up websites with malicious hyperlinks and iframes to infect targeted victims with Crimson, njRAT, and other malicious tools."}, "id": "T1608.004", "subtechniqueof": "T1608", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "17 March 2021", "lastmodified": "17 October 2021"}, {"techniquename": "Spearphishing Attachment", "detection": "Network intrusion detection systems and email gateways can be used to detect spearphishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.Anti-virus can potentially detect malicious documents and attachments as they're scanned to be stored on the email server or on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the attachment is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as  or usage of malicious scripts.Monitor for suspicious descendant process spawning from Microsoft Office and other productivity software.", "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ", "mitigations": {"M1049": " Antivirus/Antimalware  : Anti-virus can also automatically quarantine suspicious files.", "M1031": " Network Intrusion Prevention  : Network intrusion prevention systems and systems designed to scan and remove malicious email attachments can be used to block activity.", "M1021": " Restrict Web-Based Content  : Block unknown or unused attachments by default that should not be transmitted over email as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some email scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious attachments.", "M1054": " Software Configuration  : Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation.", "M1017": " User Training  : Users can be trained to identify social engineering techniques and spearphishing emails."}, "procedureexamples": {"G0018": " admin@338  : admin@338 has sent emails with malicious Microsoft Office documents attached.", "S0331": " Agent Tesla  : The primary delivered mechaism for Agent Tesla is through email phishing messages. ", "G0130": " Ajax Security Team  : Ajax Security Team has used personalized spearphishing attachments.", "G0138": " Andariel  : Andariel has conducted spearphishing campaigns that included malicious Word or Excel attachments.", "S0622": " AppleSeed  : AppleSeed has been distributed to victims through malicious e-mail attachments.", "G0099": " APT-C-36  : APT-C-36 has used spearphishing emails with password protected RAR attachment to avoid being detected by the email gateway. ", "G0006": " APT1  : APT1 has sent spearphishing emails containing malicious attachments.", "G0005": " APT12  : APT12 has sent emails with malicious Microsoft Office documents and PDFs attached.", "G0073": " APT19  : APT19 sent spearphishing emails with malicious attachments in RTF and XLSM formats to deliver initial exploits.", "G0007": " APT28  : APT28 sent spearphishing emails containing malicious Microsoft Office and RAR attachments.", "G0016": " APT29  : APT29 has used spearphishing emails with an attachment to deliver files with exploits to initial victims.", "G0013": " APT30  : APT30 has used spearphishing emails with malicious DOC attachments.", "G0050": " APT32  : APT32 has sent spearphishing emails with a malicious executable disguised as a document or spreadsheet.", "G0064": " APT33  : APT33 has sent spearphishing e-mails with archive attachments.", "G0067": " APT37  : APT37 delivers malware using spearphishing emails with malicious HWP attachments.", "G0082": " APT38  : APT38 has conducted spearphishing campaigns using malicious email attachments.", "G0087": " APT39  : APT39 leveraged spearphishing emails with malicious attachments to initially compromise victims.", "G0096": " APT41  : APT41 sent spearphishing emails with attachments such as compiled HTML (.chm) files to initially compromise their victims.", "S0642": " BADFLICK  : BADFLICK has been distributed via spearphishing campaigns containing malicious Microsoft Word documents.", "S0234": " Bandook  : Bandook is delivered via a malicious Word document inside a zip file.", "G0098": " BlackTech  : BlackTech has used spearphishing e-mails with malicious documents to deliver malware.", "S0520": " BLINDINGCAN  : BLINDINGCAN has been delivered by phishing emails containing malicious Microsoft Office documents.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER used spearphishing emails with malicious Microsoft Word attachments to infect victims.", "S0631": " Chaes  : Chaes has been delivered by sending victims a phishing email containing a malicious .docx file.", "G0080": " Cobalt Group  : Cobalt Group has sent spearphishing emails with various attachment types to corporate and personal email accounts of victim organizations. Attachment types have included .rtf, .doc, .xls, archives containing LNK files, and password protected archives containing .exe and .scr executables.", "G0012": " Darkhotel  : Darkhotel has sent spearphishing emails with malicious RAR and .LNK attachments.", "G0079": " DarkHydrus  : DarkHydrus has sent spearphishing emails with password-protected RAR archives containing malicious Excel Web Query files (.iqy). The group has also sent spearphishing emails that contained malicious Microsoft Office documents that use the \"attachedTemplate\" technique to load a template from a remote server.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used spearphishing with Microsoft Office attachments to target victims.", "G0066": " Elderwood  : Elderwood has delivered zero-day exploits and malware to victims via targeted emails containing malicious attachments.", "S0367": " Emotet  : Emotet has been delivered by phishing emails containing attachments. ", "S0634": " EnvyScout  : EnvyScout has been distributed via spearphishing as an email attachment.", "G0137": " Ferocious Kitten  : Ferocious Kitten has conducted spearphishing campaigns containing malicious documents to lure victims to open the attachments.", "G0085": " FIN4  : FIN4 has used spearphishing emails containing attachments (which are often stolen, legitimate documents sent from compromised accounts) with embedded malicious macros.", "G0037": " FIN6  : FIN6 has targeted victims with e-mails containing malicious attachments.", "G0046": " FIN7  : FIN7 sent spearphishing emails with either malicious Microsoft Documents or RTF files attached.", "G0061": " FIN8  : FIN8 has distributed targeted emails containing Word documents with embedded malicious macros.", "G0101": " Frankenstein  : Frankenstein has used spearphishing emails to send trojanized Microsoft Word documents.  ", "G0084": " Gallmaker  : Gallmaker sent emails with malicious Microsoft Office documents attached.", "G0047": " Gamaredon Group  : Gamaredon Group has delivered spearphishing emails with malicious attachments to targets.", "G0078": " Gorgon Group  : Gorgon Group sent emails to victims with malicious Microsoft Office documents attached.", "S0499": " Hancitor  : Hancitor has been delivered via phishing emails with malicious attachments.", "G0126": " Higaisa  : Higaisa has sent spearphishing emails containing malicious attachments. ", "S0483": " IcedID  : IcedID has been delivered via phishing e-mails with malicious attachments.", "G0100": " Inception  : Inception has used weaponized documents attached to spearphishing emails for reconnaissance and initial compromise.", "G0136": " IndigoZebra  : IndigoZebra sent spearphishing emails containing malicious password-protected RAR attachments.", "S0528": " Javali  : Javali has been delivered as malicious e-mail attachments.", "S0648": " JSS Loader  : JSS Loader has been delivered by phishing emails containing malicious Microsoft Excel attachments.", "S0585": " Kerrdown  : Kerrdown has been distributed through malicious e-mail attachments.", "G0094": " Kimsuky  : Kimsuky has used emails containing Word, Excel and/or HWP (Hangul Word Processor) documents in their spearphishing campaigns.", "G0032": " Lazarus Group  : Lazarus Group has targeted victims with spearphishing emails containing malicious Microsoft Word documents.", "G0065": " Leviathan  : Leviathan has sent spearphishing emails with malicious attachments, including .rtf, .doc, and .xls files.", "S0447": " Lokibot  : Lokibot is delivered via a malicious XLS attachment contained within a spearhpishing email. ", "G0095": " Machete  : Machete has delivered spearphishing emails that contain a zipped file with malicious contents.", "G0045": " menuPass  : menuPass has sent malicious Office documents via email as part of spearphishing campaigns as well as executables disguised as documents.", "S0455": " Metamorfo  : Metamorfo has been delivered to victims via emails with malicious HTML attachments. ", "G0103": " Mofang  : Mofang delivered spearphishing emails with malicious documents, PDFs, or Excel files attached.", "G0021": " Molerats  : Molerats has sent phishing emails with malicious Microsoft Word and PDF attachments.", "G0069": " MuddyWater  : MuddyWater has compromised third parties and used compromised accounts to send spearphishing emails with targeted attachments to recipients.  ", "G0129": " Mustang Panda  : Mustang Panda has used spearphishing attachments to deliver initial access payloads.", "G0019": " Naikon  : Naikon has used malicious e-mail attachments to deliver malware.", "S0198": " NETWIRE  : NETWIRE has been spread via e-mail campaigns utilizing malicious attachments.", "G0133": " Nomadic Octopus  : Nomadic Octopus has targeted victims with spearphishing emails containing malicious attachments.", "S0346": " OceanSalt  : OceanSalt has been delivered via spearphishing emails with Microsoft Office attachments.", "S0340": " Octopus  : Octopus has been delivered via spearsphishing emails.", "G0049": " OilRig  : OilRig has sent spearphising emails with malicious attachments to potential victims using compromised and/or spoofed email accounts.", "G0040": " Patchwork  : Patchwork has used spearphishing with an attachment to deliver files with exploits to initial victims.", "G0068": " PLATINUM  : PLATINUM has sent spearphishing emails with attachments to victims as its primary initial access vector.", "S0428": " PoetRAT  : PoetRAT was distributed via malicious Word documents.", "S0453": " Pony  : Pony has been delivered via spearphishing attachments.", "S0650": " QakBot  : QakBot has spread through emails with malicious attachments.", "S0458": " Ramsay  : Ramsay has been distributed through spearphishing emails with malicious attachments.", "G0075": " Rancor  : Rancor has attached a malicious document to an email to gain initial access.", "S0496": " REvil  : REvil has been distributed via malicious e-mail attachments including MS Word Documents.", "S0433": " Rifdoor  : Rifdoor has been distributed in e-mails with malicious Excel or Word documents.", "S0148": " RTM  : RTM has been delivered via spearphishing attachments disguised as PDF documents.", "G0048": " RTM  : RTM has used spearphishing attachments to distribute its malware.", "G0034": " Sandworm Team  : Sandworm Team has delivered malicious Microsoft Office attachments via spearphishing emails.", "G0104": " Sharpshooter  : Sharpshooter has sent malicious attachments via emails to targets.", "G0121": " Sidewinder  : Sidewinder has sent e-mails with malicious attachments often crafted for specific targets.", "G0091": " Silence  : Silence has sent emails with malicious DOCX, CHM, LNK and ZIP attachments. ", "G0062": " TA459  : TA459 has targeted victims using spearphishing emails with malicious Microsoft Word attachments.", "G0092": " TA505  : TA505 has used spearphishing emails with malicious attachments to initially compromise victims.", "G0127": " TA551  : TA551 has sent spearphishing attachments with password protected ZIP files.", "S0011": " Taidoor  : Taidoor has been delivered through spearphishing emails.", "G0089": " The White Company  : The White Company has sent phishing emails with malicious Microsoft Word attachments to victims.", "G0131": " Tonto Team  : Tonto Team has delivered payloads via spearphishing attachments.", "G0134": " Transparent Tribe  : Transparent Tribe has sent spearphishing e-mails with attachments to deliver malicious payloads.     ", "S0266": " TrickBot  : TrickBot has used an email with an Excel sheet containing a malicious macro to deploy the malware", "G0081": " Tropic Trooper  : Tropic Trooper sent spearphishing emails that contained malicious Microsoft Office and fake installer file attachments.", "S0476": " Valak  : Valak has been delivered via spearphishing e-mails with password protected ZIP files.", "G0112": " Windshift  : Windshift has sent spearphishing emails with attachment to harvest credentials and deliver malware.", "G0102": " Wizard Spider  : Wizard Spider has used spearphishing attachments to deliver Microsoft documents containing macros or PDFs containing malicious links to download either Emotet, Bokbot, TrickBot, or Bazar."}, "id": "T1566.001", "subtechniqueof": "T1566", "tactics": ["Initial Access"], "platforms": ["Linux, Windows, macOS"], "capecid": ["CAPEC-163"], "contributors": ["Philip Winther"], "version": "2.2", "created": "02 March 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Drive-by Compromise", "detection": "Firewalls and proxies can inspect URLs for potentially known-bad domains or parameters. They can also do reputation-based analytics on websites and their requested resources such as how old a domain is, who it's registered to, if it's on a known bad list, or how many other users have connected to it before.Network intrusion detection systems, sometimes with SSL/TLS inspection, can be used to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.Detecting compromise based on the drive-by exploit from a legitimate website may be difficult. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of browser processes. This could include suspicious files written to disk, evidence of  for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.", "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.Multiple ways of delivering exploit code to a browser exist, including:Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.Typical drive-by compromise process:Unlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.Adversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.", "mitigations": {"M1048": " Application Isolation and Sandboxing  : Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist.Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist for these types of systems.", "M1050": " Exploit Protection  : Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring.  Many of these protections depend on the architecture and target application binary for compatibility.", "M1021": " Restrict Web-Based Content  : For malicious code served up through ads, adblockers can help prevent that code from executing in the first place.Script blocking extensions can help prevent the execution of JavaScript that may commonly be used during the exploitation process.", "M1051": " Update Software  : Ensure all browsers and plugins kept updated can help prevent the exploit phase of this technique. Use modern browsers with security features turned on."}, "procedureexamples": {"G0138": " Andariel  : Andariel has used watering hole attacks, often with zero-day exploits, to gain initial access to victims within a specific IP range.", "G0073": " APT19  : APT19 performed a watering hole attack on forbes.com in 2014 to compromise targets.", "G0050": " APT32  : APT32 has infected victims by tricking them into visiting compromised watering hole websites.", "G0067": " APT37  : APT37 has used strategic web compromises, particularly of South Korean websites, to distribute malware. The group has also used torrent file-sharing sites to more indiscriminately disseminate malware to victims. As part of their compromises, the group has used a Javascript based profiler called RICECURRY to profile a victim's web browser and deliver malicious code accordingly.", "G0082": " APT38  : APT38 has conducted watering holes schemes to gain initial access to victims.", "S0606": " Bad Rabbit  : Bad Rabbit spread through watering holes on popular sites by injecting JavaScript into the HTML body or a  file.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER compromised three Japanese websites using a Flash exploit to perform watering hole attacks.", "S0482": " Bundlore  : Bundlore has been spread through malicious advertisements on websites.", "G0070": " Dark Caracal  : Dark Caracal leveraged a watering hole to serve up malicious code.", "G0012": " Darkhotel  : Darkhotel used embedded iframes on hotel login portals to redirect selected victims to download malware.", "G0035": " Dragonfly  : Dragonfly has compromised targets via strategic web compromise (SWC) utilizing a custom exploit kit.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 compromised legitimate organizations' websites to create watering holes to compromise victims.", "G0066": " Elderwood  : Elderwood has delivered zero-day exploits and malware to victims by injecting malicious code into specific public Web pages visited by targets within a particular sector.", "S0531": " Grandoreiro  : Grandoreiro has used compromised websites and Google Ads to bait victims into downloading its installer.", "S0215": " KARAE  : KARAE was distributed through torrent file-sharing websites to South Korean victims, using a YouTube video downloader application as a lure.", "G0032": " Lazarus Group  : Lazarus Group delivered RATANKBA to victims via a compromised legitimate website.", "G0077": " Leafminer  : Leafminer has infected victims using watering holes.", "G0065": " Leviathan  : Leviathan has infected victims using watering holes.", "S0451": " LoudMiner  : LoudMiner is typically bundled with pirated copies of Virtual Studio Technology (VST) for Windows and macOS.", "G0095": " Machete  : Machete has distributed Machete through a fake blog website.", "G0040": " Patchwork  : Patchwork has used watering holes to deliver files with exploits to initial victims.", "G0068": " PLATINUM  : PLATINUM has sometimes used drive-by attacks against vulnerable browser plugins.", "S0216": " POORAIM  : POORAIM has been delivered through compromised sites acting as watering holes.", "G0056": " PROMETHIUM  : PROMETHIUM has used watering hole attacks to deliver malicious versions of legitimate installers.", "S0496": " REvil  : REvil has infected victim machines through compromised websites and exploit kits.", "G0048": " RTM  : RTM has distributed its malware via the RIG and SUNDOWN exploit kits, as well as online advertising network .", "G0027": " Threat Group-3390  : Threat Group-3390 has extensively used strategic web compromises to target victims.", "G0134": " Transparent Tribe  : Transparent Tribe has used websites with malicious hyperlinks and iframes to infect targeted victims with Crimson, njRAT, and other malicious tools.", "G0010": " Turla  : Turla has infected victims using watering holes.", "G0124": " Windigo  : Windigo has distributed Windows malware via drive-by downloads.", "G0112": " Windshift  : Windshift has used compromised websites to register custom URL schemes on a remote system."}, "id": "T1189", "subtechniques": ["No sub-techniques"], "tactics": ["Initial Access"], "platforms": ["Linux, SaaS, Windows, macOS"], "permissionsrequired": ["User"], "contributors": ["Jeff Sakowicz, Microsoft Identity Developer Platform Services (IDPM Services); Saisha Agrawal, Microsoft Threat Intelligent Center (MSTIC)"], "version": "1.3", "created": "18 April 2018", "lastmodified": "28 July 2021"}, {"techniquename": "Phishing", "detection": "Network intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.Because most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware.Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once  occurs.", "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source.", "mitigations": {"M1049": " Antivirus/Antimalware  : Anti-virus can automatically quarantine suspicious files.", "M1031": " Network Intrusion Prevention  : Network intrusion prevention systems and systems designed to scan and remove malicious email attachments or links can be used to block activity.", "M1021": " Restrict Web-Based Content  : Determine if certain websites or attachment types (ex: .scr, .exe, .pif, .cpl, etc.) that can be used for phishing are necessary for business operations and consider blocking access if activity cannot be monitored well or if it poses a significant risk.", "M1054": " Software Configuration  : Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation.", "M1017": " User Training  : Users can be trained to identify social engineering techniques and phishing emails."}, "procedureexamples": {"G0035": " Dragonfly  : Dragonfly has used spearphising campaigns to gain access to victims.", "G0115": " GOLD SOUTHFIELD  : GOLD SOUTHFIELD has conducted malicious spam (malspam) campaigns to gain access to victim's machines."}, "id": "T1566", "subtechniques": ["T1566.001", "T1566.002", "T1566.003"], "tactics": ["Initial Access"], "platforms": ["Google Workspace, Linux, Office 365, SaaS, Windows, macOS"], "capecid": ["CAPEC-98"], "contributors": ["Philip Winther"], "version": "2.2", "created": "02 March 2020", "lastmodified": "18 October 2021"}, {"techniquename": "External Remote Services", "detection": "Follow best practices for detecting adversary use of  for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours.When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.", "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.Access to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.Access may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.", "mitigations": {"M1042": " Disable or Remove Feature or Program  : Disable or block remotely available services that may be unnecessary.", "M1035": " Limit Access to Resource Over Network  : Limit access to remote services through centrally managed concentrators such as VPNs and other managed remote access systems.", "M1032": " Multi-factor Authentication  : Use strong two-factor or multi-factor authentication for remote service accounts to mitigate an adversary's ability to leverage stolen credentials, but be aware of Two-Factor Authentication Interception techniques for some two-factor authentication implementations.", "M1030": " Network Segmentation  : Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."}, "procedureexamples": {"G0026": " APT18  : APT18 actors leverage legitimate credentials to log into external remote services.", "G0007": " APT28  : APT28 has used Tor and a variety of commercial VPN services to route brute force authentication attempts.", "G0016": " APT29  : APT29 has used compromised identities to access VPNs and remote access tools.", "G0096": " APT41  : APT41 compromised an online billing/payment service using VPN access between a third-party service provider and the targeted payment service.", "G0114": " Chimera  : Chimera has used legitimate credentials to login to an external VPN, Citrix, SSH, and other remote services.", "S0600": " Doki  : Doki was executed through an open Docker daemon API port.", "G0074": " Dragonfly 2.0  : Dragonfly 2.0 used VPNs and Outlook Web Access (OWA) to maintain access to victim networks.", "G0053": " FIN5  : FIN5 has used legitimate VPN, Citrix, or VNC credentials to maintain access to a victim environment.", "G0093": " GALLIUM  : GALLIUM has used VPN services, including SoftEther VPN, to access and maintain persistence in victim environments.", "G0115": " GOLD SOUTHFIELD  : GOLD SOUTHFIELD has used publicly-accessible RDP and remote management and monitoring (RMM) servers to gain access to victim machines. ", "S0601": " Hildegard  : Hildegard was executed through an unsecure kubelet that allowed anonymous access to the victim environment.", "G0004": " Ke3chang  : Ke3chang regained access after eviction via the corporate VPN solution with a stolen VPN certificate, which they had extracted from a compromised host.", "G0094": " Kimsuky  : Kimsuky has used RDP to establish persistence.", "S0599": " Kinsing  : Kinsing was executed in an Ubuntu container deployed via an open Docker daemon API.", "G0065": " Leviathan  : Leviathan has used external remote services such as virtual private networks (VPN) to gain initial access.", "S0362": " Linux Rabbit  : Linux Rabbit attempts to gain access to the server via SSH.", "G0014": " Night Dragon  : Night Dragon has used compromised VPN accounts to gain access to victim systems.", "G0049": " OilRig  : OilRig uses remote services such as VPN, Citrix, or OWA to persist in an environment.", "G0116": " Operation Wocao  : Operation Wocao has used stolen credentials to connect to the victim's network via VPN.", "G0034": " Sandworm Team  : Sandworm Team has used Dropbear SSH with a hardcoded backdoor password to maintain persistence within the target network. Sandworm Team has also used VPN tunnels established in legitimate software company infrastructure to gain access to internal networks of that software company's users.", "G0139": " TeamTNT  : TeamTNT has used open-source tools such as Weave Scope to target exposed Docker API ports and gain initial access to victim environments. TeamTNT has also targeted exposed kubelets for Kubernetes environments.", "G0088": " TEMP.Veles  : TEMP.Veles has used a VPN to persist in the victim environment.", "G0027": " Threat Group-3390  : Threat Group-3390 actors look for and use VPN profiles during an operation to access the network using external VPN services. Threat Group-3390 has also obtained OWA account credentials during intrusions that it subsequently used to attempt to regain access when evicted from a victim network.", "G0102": " Wizard Spider  : Wizard Spider has accessed victim networks by using stolen credentials to access the corporate VPN infrastructure."}, "id": "T1133", "subtechniques": ["No sub-techniques"], "tactics": ["Persistence", "Initial Access"], "platforms": ["Containers, Linux, Windows, macOS"], "permissionsrequired": ["User"], "capecid": ["CAPEC-555"], "contributors": ["Alfredo Oliveira, Trend Micro; Ariel Shuper, Cisco; Brad Geesaman, @bradgeesaman; Daniel Oakley; David Fiser, @anu4is, Trend Micro; ExtraHop; Idan Frimark, Cisco; Jay Chen, Palo Alto Networks; Magno Logan, @magnologan, Trend Micro; Rory McCune, Aqua Security; Travis Smith, Tripwire; Vishwas Manral, McAfee; Yossi Weizman, Azure Defender Research Team; Yuval Avrahami, Palo Alto Networks"], "version": "2.3", "created": "31 May 2017", "lastmodified": "19 August 2021"}, {"techniquename": "Install Digital Certificate", "detection": "Consider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure.Detection efforts may be focused on related behaviors, such as  or .", "description": "Adversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.Adversaries may install SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or lending credibility to a credential harvesting site. Installation of digital certificates may take place for a number of server types, including web servers and email servers. Adversaries can obtain digital certificates (see Digital Certificates) or create self-signed certificates (see Digital Certificates). Digital certificates can then be installed on adversary controlled infrastructure that may have been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1608.003", "subtechniqueof": "T1608", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "17 March 2021", "lastmodified": "16 October 2021"}, {"techniquename": "Vulnerabilities", "detection": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. , , , , , , and ).", "description": "Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.An adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. Exploits) or to attempt to develop one themselves (i.e. Exploits).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0034": " Sandworm Team  : In 2017, Sandworm Team conducted technical research related to vulnerabilities associated with websites used by the Korean Sport and Olympic Committee, a Korean power company, and a Korean airport."}, "id": "T1588.006", "subtechniqueof": "T1588", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.0", "created": "15 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Stage Capabilities", "detection": "If infrastructure or patterns in malware, tooling, certificates, or malicious web content have been previously identified, internet scanning may uncover when an adversary has staged their capabilities.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as initial access and post-compromise behaviors.", "description": "Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities can also be staged on web services, such as GitHub or Pastebin.Staging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1608", "subtechniques": ["T1608.001", "T1608.002", "T1608.003", "T1608.004", "T1608.005"], "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "17 March 2021", "lastmodified": "17 October 2021"}, {"techniquename": "Tool", "detection": "In some cases, malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in  payloads.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.", "description": "Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.Adversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0099": " APT-C-36  : APT-C-36 obtained and used a modified variant of Imminent Monitor.", "G0006": " APT1  : APT1 has used various open-source tools for privilege escalation purposes.", "G0073": " APT19  : APT19 has obtained and used publicly-available tools like Empire.", "G0007": " APT28  : APT28 has obtained and used open-source tools like Koadic, Mimikatz, and Responder.", "G0016": " APT29  : APT29 has obtained and used a variety of tools including Mimikatz, SDelete, Tor, meek, and Cobalt Strike.", "G0050": " APT32  : APT32 has obtained and used tools such as Mimikatz and Cobalt Strike, and a variety of other open-source tools from GitHub.", "G0064": " APT33  : APT33 has obtained and leveraged publicly-available tools for early intrusion activities.", "G0082": " APT38  : APT38 has obtained and used open-source tools such as Mimikatz.", "G0087": " APT39  : APT39 has modified and used customized versions of publicly-available tools like PLINK and Mimikatz.", "G0096": " APT41  : APT41 has obtained and used tools such as Mimikatz, pwdump, PowerSploit, and Windows Credential Editor.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has obtained a variety of open-source reconnaissance and red team tools for discovery and lateral movement.", "G0108": " Blue Mockingbird  : Blue Mockingbird has obtained and used tools such as Mimikatz.", "G0060": " BRONZE BUTLER  : BRONZE BUTLER has obtained and used open-source tools such as Mimikatz, gsecdump, and Windows Credential Editor.", "G0008": " Carbanak  : Carbanak has obtained and used open-source tools such as PsExec and Mimikatz.", "G0114": " Chimera  : Chimera has obtained and used tools such as BloodHound, Cobalt Strike, Mimikatz, and PsExec.", "G0003": " Cleaver  : Cleaver has obtained and used open-source tools such as PsExec, Windows Credential Editor, and Mimikatz.", "G0080": " Cobalt Group  : Cobalt Group has obtained and used a variety of tools including Mimikatz, PsExec, Cobalt Strike, and SDelete.", "G0052": " CopyKittens  : CopyKittens has used Metasploit and Empire for post-exploitation activities.", "G0132": " CostaRicto  : CostaRicto has obtained open source tools to use in their operations.", "G0079": " DarkHydrus  : DarkHydrus has obtained and used tools such as Mimikatz, Empire, and Cobalt Strike.", "G0105": " DarkVishnya  : DarkVishnya has obtained and used tools such as Impacket, Winexe, and PsExec.", "G0035": " Dragonfly  : Dragonfly has obtained and used tools such as Mimikatz, CrackMapExec, and PsExec.", "G0137": " Ferocious Kitten  : Ferocious Kitten has obtained open source tools for its operations, including JsonCPP and Psiphon.", "G0051": " FIN10  : FIN10 has relied on publicly-available software to gain footholds and establish persistence in victim environments.", "G0053": " FIN5  : FIN5 has obtained and used a customized version of PsExec, as well as use other tools such as pwdump, SDelete, and Windows Credential Editor.", "G0037": " FIN6  : FIN6 has obtained and used tools such as Mimikatz, Cobalt Strike, and AdFind.", "G0101": " Frankenstein  : Frankenstein has obtained and used Empire to deploy agents.", "G0093": " GALLIUM  : GALLIUM has used a variety of widely-available tools, which in some cases they modified to add functionality and/or subvert antimalware solutions.", "G0078": " Gorgon Group  : Gorgon Group has obtained and used tools such as QuasarRAT and Remcos.", "G0100": " Inception  : Inception has obtained and used open-source tools such as LaZagne.", "G0136": " IndigoZebra  : IndigoZebra has acquired open source tools such as NBTscan and Meterpreter for their operations. ", "G0004": " Ke3chang  : Ke3chang has obtained and used tools such as Mimikatz.", "G0094": " Kimsuky  : Kimsuky has obtained and used tools such as Mimikatz and PsExec.", "G0077": " Leafminer  : Leafminer has obtained and used tools such as LaZagne, Mimikatz, PsExec, and MailSniper.", "G0059": " Magic Hound  : Magic Hound has obtained and used open-source penetration testing tools like Havij, sqlmap, Metasploit, and Mimikatz.", "G0045": " menuPass  : menuPass has used and modified open-source tools like Impacket, Mimikatz, and pwdump.", "G0069": " MuddyWater  : MuddyWater has made use of  legitimate tools ConnectWise and RemoteUtilities for access to target environments.", "G0014": " Night Dragon  : Night Dragon has obtained and used tools such as gsecdump.", "G0040": " Patchwork  : Patchwork has obtained and used open-source tools such as QuasarRAT.", "G0011": " PittyTiger  : PittyTiger has obtained and used tools such as Mimikatz and gsecdump.", "G0034": " Sandworm Team  : Sandworm Team has acquired open-source tools for some of it's operations; for example it acquired Invoke-PSImage to establish an encrypted channel from a compromised host to Sandworm Team's C2 server as part of its preparation for the 2018 Winter Olympics attack.", "G0091": " Silence  : Silence has obtained and modified versions of publicly-available tools like Empire and PsExec. ", "G0122": " Silent Librarian  : Silent Librarian has obtained free and publicly available tools including SingleFile and HTTrack to copy login pages of targeted organizations.", "G0088": " TEMP.Veles  : TEMP.Veles has obtained and used tools such as Mimikatz and PsExec.", "G0027": " Threat Group-3390  : Threat Group-3390 has obtained and used tools such as Impacket, pwdump, Mimikatz, gsecdump, NBTscan, and Windows Credential Editor. ", "G0076": " Thrip  : Thrip has obtained and used tools such as Mimikatz and PsExec.", "G0010": " Turla  : Turla has obtained and customized publicly-available tools like Mimikatz.", "G0107": " Whitefly  : Whitefly has obtained and used tools such as Mimikatz.", "G0090": " WIRTE  : WIRTE has obtained and used Empire for post-exploitation activities.", "G0102": " Wizard Spider  : Wizard Spider has obtained and used publicly-available post-exploitation frameworks and tools like Metasploit, Empire, Mimikatz."}, "id": "T1588.002", "subtechniqueof": "T1588", "tactics": ["Resource Development"], "platforms": ["PRE"], "contributors": ["Mnemonic AS; SOCCRATES"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Upload Malware", "detection": "If infrastructure or patterns in malware have been previously identified, internet scanning may uncover when an adversary has staged malware to make it accessible for targeting.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle, such as  or .", "description": "Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.Malware may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Malware can also be staged on web services, such as GitHub or Pastebin.Adversaries may upload backdoored files, such as application binaries, virtual machine images, or container images, to third-party software stores or repositories (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims may directly download/install these backdoored files via User Execution. Masquerading may increase the chance of users mistakenly executing these files.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0050": " APT32  : APT32 has hosted malicious payloads in Dropbox, Amazon S3, and Google Drive for use during targeting.", "G0139": " TeamTNT  : TeamTNT has uploaded backdoored Docker images to Docker Hub."}, "id": "T1608.001", "subtechniqueof": "T1608", "tactics": ["Resource Development"], "platforms": ["PRE"], "contributors": ["Kobi Haimovich, CardinalOps"], "version": "1.1", "created": "17 March 2021", "lastmodified": "17 October 2021"}, {"techniquename": "Upload Tool", "detection": "If infrastructure or patterns in tooling have been previously identified, internet scanning may uncover when an adversary has staged tools to make them accessible for targeting.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle, such as .", "description": "Adversaries may upload tools to third-party or adversary controlled infrastructure to make it accessible during targeting. Tools can be open or closed source, free or commercial. Tools can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Adversaries may upload tools to support their operations, such as making a tool available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.Tools may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Tools can also be staged on web services, such as an adversary controlled GitHub repo.Adversaries can avoid the need to upload a tool by having compromised victim machines download the tool directly from a third-party hosting location (ex: a non-adversary controlled GitHub repo), including the original hosting site of the tool.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0027": " Threat Group-3390  : Threat Group-3390 has staged tools, including gsecdump and WCE, on previously compromised websites."}, "id": "T1608.002", "subtechniqueof": "T1608", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "17 March 2021", "lastmodified": "17 October 2021"}, {"techniquename": "Exploits", "detection": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the use of exploits (i.e. , , , , , , and ).", "description": "Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.In addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals. In addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).An adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.Adversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1588.005", "subtechniqueof": "T1588", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.0", "created": "01 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Malware", "detection": "Consider analyzing malware for features that may be associated with malware providers, such as compiler used, debugging artifacts, code similarities, or even group identifiers associated with specific MaaS offerings. Malware repositories can also be used to identify additional samples associated with the developers and the adversary utilizing their services. Identifying overlaps in malware use by different adversaries may indicate malware was obtained by the adversary rather than developed by them. In some cases, identifying overlapping characteristics in malware used by different adversaries may point to a shared quartermaster.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.", "description": "Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.In addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0138": " Andariel  : Andariel has used a variety of publicly-available remote access Trojans (RATs) for its operations.", "G0006": " APT1  : APT1 used publicly available malware for privilege escalation.", "G0135": " BackdoorDiplomacy  : BackdoorDiplomacy has obtained and used leaked malware, including DoublePulsar, EternalBlue, EternalRocks, and EternalSynergy, in its operations.", "G0010": " Turla  : Turla has used malware obtained after compromising other threat actors, such as OilRig."}, "id": "T1588.001", "subtechniqueof": "T1588", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Digital Certificates", "detection": "Consider use of services that may aid in the tracking of newly issued certificates and/or certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Some server-side components of adversary tools may have default values set for SSL/TLS certificates.Detection efforts may be focused on related behaviors, such as , , and/or .", "description": "Adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.Adversaries may purchase or steal SSL/TLS certificates to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or even enabling Adversary-in-the-Middle if the certificate is trusted or otherwise added to the root of trust (i.e. Install Root Certificate). The purchase of digital certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal certificate materials directly from a compromised third-party, including from certificate authorities. Adversaries may register or hijack domains that they will later purchase an SSL/TLS certificate for.Certificate authorities exist that allow adversaries to acquire SSL/TLS certificates, such as domain validation certificates, for free.After obtaining a digital certificate, an adversary may then install that certificate (see Install Digital Certificate) on infrastructure under their control.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0032": " Lazarus Group  : Lazarus Group has obtained SSL certificates for their C2 domains.", "G0122": " Silent Librarian  : Silent Librarian has obtained free Let's Encrypt SSL certificates for use on their phishing pages."}, "id": "T1588.004", "subtechniqueof": "T1588", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.2", "created": "01 October 2020", "lastmodified": "16 October 2021"}, {"techniquename": "Email Accounts", "detection": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: ).", "description": "Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Adversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).To decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0006": " APT1  : APT1 has created email accounts for later use in social engineering, phishing, and when registering domains.", "G0065": " Leviathan  : Leviathan has created new email accounts for targeting efforts.", "G0059": " Magic Hound  : Magic Hound has established email accounts using fake personas for spearphishing operations.", "G0034": " Sandworm Team  : Sandworm Team has created email accounts that mimic legitimate organizations for its spearphishing operations.", "G0122": " Silent Librarian  : Silent Librarian has established e-mail accounts to receive e-mails forwarded from compromised accounts."}, "id": "T1585.002", "subtechniqueof": "T1585", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.0", "created": "01 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Obtain Capabilities", "detection": "Consider analyzing malware for features that may be associated with malware providers, such as compiler used, debugging artifacts, code similarities, or even group identifiers associated with specific Malware-as-a-Service (MaaS) offerings. Malware repositories can also be used to identify additional samples associated with the developers and the adversary utilizing their services. Identifying overlaps in malware use by different adversaries may indicate malware was obtained by the adversary rather than developed by them. In some cases, identifying overlapping characteristics in malware used by different adversaries may point to a shared quartermaster. Malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in  payloads.Consider use of services that may aid in the tracking of newly issued certificates and/or certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Some server-side components of adversary tools may have default values set for SSL/TLS certificates.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control.", "description": "Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.In addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals.In addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1588", "subtechniques": ["T1588.001", "T1588.002", "T1588.003", "T1588.004", "T1588.005", "T1588.006"], "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "18 October 2021"}, {"techniquename": "Code Signing Certificates", "detection": "Consider analyzing code signing certificates for features that may be associated with the adversary and/or their developers, such as the thumbprint, algorithm used, validity period, common name, and certificate authority. Malware repositories can also be used to identify additional samples associated with the adversary and identify patterns an adversary has used in procuring code signing certificates.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related follow-on behavior, such as  or .", "description": "Adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.Prior to Code Signing, adversaries may purchase or steal code signing certificates for use in operations. The purchase of code signing certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal code signing materials directly from a compromised third-party.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"S0576": " MegaCortex  : MegaCortex has used code signing certificates issued to fake companies to bypass security controls.", "G0102": " Wizard Spider  : Wizard Spider obtained a code signing certificate signed by Digicert for some of its malware."}, "id": "T1588.003", "subtechniqueof": "T1588", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Exploits", "detection": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the use of exploits (i.e. , , , , , , and ).", "description": "Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits. Adversaries may use information acquired via Vulnerabilities to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.As with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.Adversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1587.004", "subtechniqueof": "T1587", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.0", "created": "01 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Digital Certificates", "detection": "Consider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure.Detection efforts may be focused on related behaviors, such as , , and/or .", "description": "Adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).Adversaries may create self-signed SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or even enabling Adversary-in-the-Middle if added to the root of trust (i.e. Install Root Certificate).After creating a digital certificate, an adversary may then install that certificate (see Install Digital Certificate) on infrastructure under their control.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0016": " APT29  : APT29 has created self-signed digital certificates to enable mutual TLS authentication for malware.", "G0056": " PROMETHIUM  : PROMETHIUM has created self-signed digital certificates for use in HTTPS C2 traffic."}, "id": "T1587.003", "subtechniqueof": "T1587", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.2", "created": "01 October 2020", "lastmodified": "16 October 2021"}, {"techniquename": "Establish Accounts", "detection": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: ).", "description": "Adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.For operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, GitHub, Docker Hub, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.Establishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for Phishing for Information or Phishing.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0025": " APT17  : APT17 has created and cultivated profile pages in Microsoft TechNet. To make profile pages appear more legitimate, APT17 has created biographical sections and posted in forum threads.", "G0117": " Fox Kitten  : Fox Kitten has created KeyBase accounts to communicate with ransomware victims."}, "id": "T1585", "subtechniques": ["T1585.001", "T1585.002"], "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.2", "created": "01 October 2020", "lastmodified": "16 October 2021"}, {"techniquename": "Code Signing Certificates", "detection": "Consider analyzing self-signed code signing certificates for features that may be associated with the adversary and/or their developers, such as the thumbprint, algorithm used, validity period, and common name. Malware repositories can also be used to identify additional samples associated with the adversary and identify patterns an adversary has used in crafting self-signed code signing certificates.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related follow-on behavior, such as  or .", "description": "Adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.Prior to Code Signing, adversaries may develop self-signed code signing certificates for use in operations.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0040": " Patchwork  : Patchwork has created self-signed certificates from fictitious and spoofed legitimate software companies that were later used to sign malware.", "G0056": " PROMETHIUM  : PROMETHIUM has created self-signed certificates to sign malicious installers."}, "id": "T1587.002", "subtechniqueof": "T1587", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Social Media Accounts", "detection": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: ).", "description": "Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.For operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. Once a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others. These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0050": " APT32  : APT32 has set up Facebook pages in tandem with fake websites.", "G0003": " Cleaver  : Cleaver has created fake LinkedIn profiles that included profile photos, details, and connections.", "G0117": " Fox Kitten  : Fox Kitten has used a Twitter account to communicate with ransomware victims.", "G0065": " Leviathan  : Leviathan has created new social media accounts for targeting efforts.", "G0059": " Magic Hound  : Magic Hound has created fake LinkedIn and other social media accounts to contact targets and convince them--through messages and voice communications--to open malicious links.", "G0034": " Sandworm Team  : Sandworm Team has established social media accounts to disseminate victim internal-only documents and other sensitive data."}, "id": "T1585.001", "subtechniqueof": "T1585", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "16 October 2021"}, {"techniquename": "Malware", "detection": "Consider analyzing malware for features that may be associated with the adversary and/or their developers, such as compiler used, debugging artifacts, or code similarities. Malware repositories can also be used to identify additional samples associated with the adversary and identify development patterns over time.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.", "description": "Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.As with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.Some aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of Web Services.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0016": " APT29  : APT29 has leveraged numerous pieces of malware that appear to be unique to APT29 and were likely developed for or by the group.", "G0003": " Cleaver  : Cleaver has created customized tools and payloads for functions including ARP poisoning, encryption, credential dumping, ASP.NET shells, web backdoors, process enumeration, WMI querying, HTTP and SMB communications, network interface sniffing, and keystroke logging.", "G0046": " FIN7  : FIN7 has developed malware for use in operations, including the creation of infected removable media.", "G0032": " Lazarus Group  : Lazarus Group has developed several custom malware for use in operations.", "G0014": " Night Dragon  : Night Dragon used privately developed and customized remote access tools.", "G0034": " Sandworm Team  : Sandworm Team has developed malware for its operations, including malicious mobile applications and destructive malware such as NotPetya and Olympic Destroyer.", "G0139": " TeamTNT  : TeamTNT has developed custom malware such as Hildegard.", "G0010": " Turla  : Turla has developed its own unique malware for use in operations."}, "id": "T1587.001", "subtechniqueof": "T1587", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.2", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Develop Capabilities", "detection": "Consider analyzing malware for features that may be associated with the adversary and/or their developers, such as compiler used, debugging artifacts, or code similarities. Malware repositories can also be used to identify additional samples associated with the adversary and identify development patterns over time.Consider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control.", "description": "Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.As with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0094": " Kimsuky  : Kimsuky created and used a mailing toolkit to use in spearphishing attacks."}, "id": "T1587", "subtechniques": ["T1587.001", "T1587.002", "T1587.003", "T1587.004"], "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Server", "detection": "Once adversaries have provisioned software on a compromised server (ex: for use as a command and control server), internet scans may reveal servers that adversaries have compromised. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.", "description": "Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.Adversaries may also compromise web servers to support watering hole operations, as in Drive-by Compromise.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0023": " APT16  : APT16 has compromised otherwise legitimate sites as staging servers for second-stage payloads.", "G0119": " Indrik Spider  : Indrik Spider has served fake updates via legitimate websites that have been compromised.  ", "G0010": " Turla  : Turla has used compromised servers as infrastructure."}, "id": "T1584.004", "subtechniqueof": "T1584", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Web Services", "detection": "Once adversaries leverage the abused web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control () or .", "description": "Adversaries may compromise access to third-party web services\u00a0that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0010": " Turla  : Turla has frequently used compromised WordPress sites for C2 infrastructure."}, "id": "T1584.006", "subtechniqueof": "T1584", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Botnet", "detection": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during , , or .", "description": "Adversaries may compromise numerous third-party systems to form a botnet\u00a0that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Instead of purchasing/renting a botnet from a booter/stresser service, adversaries may build their own botnet by compromising numerous third-party systems. Adversaries may also conduct a takeover of an existing botnet, such as redirecting bots to adversary-controlled C2 servers. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1584.005", "subtechniqueof": "T1584", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.0", "created": "01 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Virtual Private Server", "detection": "Once adversaries have provisioned software on a compromised VPS (ex: for use as a command and control server), internet scans may reveal VPSs that adversaries have compromised. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.", "description": "Adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.Compromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0010": " Turla  : Turla has used the VPS infrastructure of compromised Iranian threat actors."}, "id": "T1584.003", "subtechniqueof": "T1584", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "DNS Server", "detection": "Consider monitoring for anomalous resolution changes for domain addresses. Efforts may need to be tailored to specific domains of interest as benign resolution changes are a common occurrence on the internet.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.", "description": "Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.By compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary. Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1584.002", "subtechniqueof": "T1584", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Email Accounts", "detection": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: ).", "description": "Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains).A variety of methods exist for compromising email accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Adversaries can use a compromised email account to hijack existing email threads with targets of interest.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0136": " IndigoZebra  : IndigoZebra has compromised legitimate email accounts to use in their spearphishing operations.", "G0094": " Kimsuky  : Kimsuky has compromised email accounts to send spearphishing e-mails.", "G0065": " Leviathan  : Leviathan has compromised email accounts to conduct social engineering attacks.", "G0059": " Magic Hound  : Magic Hound has compromised personal email accounts through the use of legitimate credentials and gathered additional victim information."}, "id": "T1586.002", "subtechniqueof": "T1586", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.0", "created": "01 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Compromise Infrastructure", "detection": "Consider monitoring for anomalous changes to domain registrant information and/or domain resolution information that may indicate the compromise of a domain. Efforts may need to be tailored to specific domains of interest as benign registration and resolution changes are a common occurrence on the internet. Once adversaries have provisioned compromised infrastructure (ex: a server for use in command and control), internet scans may help proactively discover compromised infrastructure. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.", "description": "Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle. Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.Use of compromised infrastructure allows an adversary to stage, launch, and execute an operation. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. By using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1584", "subtechniques": ["T1584.001", "T1584.002", "T1584.003", "T1584.004", "T1584.005", "T1584.006"], "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "DNS", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts.Adversaries may gather this information in various ways, such as querying or otherwise collecting details via DNS/Passive DNS. DNS information may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Active Scanning), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).", "mitigations": {"M1056": " Pre-compromise  : This cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1590.002", "subtechniqueof": "T1590", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Network Trust Dependencies", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1590.003", "subtechniqueof": "T1590", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Domains", "detection": "Consider monitoring for anomalous changes to domain registrant information and/or domain resolution information that may indicate the compromise of a domain. Efforts may need to be tailored to specific domains of interest as benign registration and resolution changes are a common occurrence on the internet.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.", "description": "Adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant. An adversary may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account or taking advantage of renewal process gaps.Subdomain hijacking can occur when organizations have DNS entries that point to non-existent or deprovisioned resources. In such cases, an adversary may take control of a subdomain to conduct operations with the benefit of the trust associated with that domain.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0006": " APT1  : APT1 hijacked FQDNs associated with legitimate websites hosted by hop points.", "G0016": " APT29  : APT29 has compromised domains to use for C2.", "G0059": " Magic Hound  : Magic Hound has used compromised domains to host links targeted to specific phishing victims.", "G0134": " Transparent Tribe  : Transparent Tribe has compromised domains for use in targeted malicious campaigns."}, "id": "T1584.001", "subtechniqueof": "T1584", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Network Topology", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1590.004", "subtechniqueof": "T1590", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Gather Victim Identity Information", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, etc.) as well as sensitive details such as credentials.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about victims may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0050": " APT32  : APT32 has conducted targeted surveillance against activists and bloggers.", "G0059": " Magic Hound  : Magic Hound has acquired mobile phone numbers of potential targets, possibly for mobile malware or additional phishing operations."}, "id": "T1589", "subtechniques": ["T1589.001", "T1589.002", "T1589.003"], "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Compromise Accounts", "detection": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: ).", "description": "Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.Adversaries may directly leverage compromised email accounts for Phishing for Information or Phishing.", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "id": "T1586", "subtechniques": ["T1586.001", "T1586.002"], "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "16 October 2021"}, {"techniquename": "Hardware", "detection": "Internet scanners may be used to look for patterns associated with malicious content designed to collect host hardware information from visitors.Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: hostnames, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Compromise Hardware Supply Chain or Hardware Additions).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1592.001", "subtechniqueof": "T1592", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.1", "created": "02 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Domain Properties", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about victim domains and their properties may also be exposed to adversaries via online or other accessible data sets (ex: WHOIS). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Phishing).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0034": " Sandworm Team  : Sandworm Team conducted technical reconnaissance of the Parliament of Georgia's official internet domain prior to its 2019 attack."}, "id": "T1590.001", "subtechniqueof": "T1590", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Employee Names", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.Adversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0034": " Sandworm Team  : Sandworm Team's research of potential victim organizations included the identification and collection of employee information.", "G0122": " Silent Librarian  : Silent Librarian has collected lists of names for individuals from targeted organizations."}, "id": "T1589.003", "subtechniqueof": "T1589", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Social Media Accounts", "detection": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: ).", "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising social media accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.Adversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others. Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."}, "procedureexamples": {"G0065": " Leviathan  : Leviathan has compromised social media accounts to conduct social engineering attacks."}, "id": "T1586.001", "subtechniqueof": "T1586", "tactics": ["Resource Development"], "platforms": ["PRE"], "version": "1.1", "created": "01 October 2020", "lastmodified": "16 October 2021"}, {"techniquename": "Client Configurations", "detection": "Internet scanners may be used to look for patterns associated with malicious content designed to collect client configuration information from visitors.Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0125": " HAFNIUM  : HAFNIUM has interacted with Office 365 tenants to gather details regarding target's environments."}, "id": "T1592.004", "subtechniqueof": "T1592", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.1", "created": "02 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Email Addresses", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.Adversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Email Accounts), and/or initial access (ex: Phishing).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0050": " APT32  : APT32 has collected e-mail addresses for activists and bloggers in order to target them with spyware.", "G0125": " HAFNIUM  : HAFNIUM has collected e-mail addresses for users they intended to target.", "G0094": " Kimsuky  : Kimsuky has collected valid email addresses that were subsequently used in spearphishing campaigns.", "G0059": " Magic Hound  : Magic Hound has acquired the personal email addresses of some individuals they intend to target.", "G0069": " MuddyWater  : MuddyWater has specifically targeted government agency employees with spearphishing e-mails.     ", "G0034": " Sandworm Team  : Sandworm Team has obtained valid emails addresses while conducting research against target organizations that were subsequently used in spearphishing campaigns.", "G0122": " Silent Librarian  : Silent Librarian has collected e-mail addresses from targeted organizations from open Internet searches.", "G0127": " TA551  : TA551 has used spoofed company emails that were acquired from email clients on previously infected hosts to target other individuals."}, "id": "T1589.002", "subtechniqueof": "T1589", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Credentials", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.Adversaries may gather credentials from potential victims in various ways, such as direct elicitation via Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect website authentication cookies from visitors. Credential information may also be exposed to adversaries via leaks to online or other accessible data sets (ex: Search Engines, breach dumps, code repositories, etc.). Adversaries may also purchase credentials from dark web or other black-markets. Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: External Remote Services or Valid Accounts).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0007": " APT28  : APT28 has harvested user's login credentials.", "G0114": " Chimera  : Chimera has collected credentials for the target organization from previous breaches for use in brute force attacks.", "G0065": " Leviathan  : Leviathan has collected compromised credentials to use for targeting efforts.", "G0059": " Magic Hound  : Magic Hound gathered credentials from two victims that they then attempted to validate across 75 different websites."}, "id": "T1589.001", "subtechniqueof": "T1589", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "contributors": ["Lee Christensen, SpecterOps; Toby Kohlenberg; Vinayak Wadhwa, Lucideus"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Gather Victim Network Information", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about networks may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0125": " HAFNIUM  : HAFNIUM gathered the fully qualified domain names (FQDNs) for targeted Exchange servers in the victim's environment."}, "id": "T1590", "subtechniques": ["T1590.001", "T1590.002", "T1590.003", "T1590.004", "T1590.005", "T1590.006"], "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Software", "detection": "Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors.Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or for initial access (ex: Supply Chain Compromise or External Remote Services).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0138": " Andariel  : Andariel has inserted a malicious script within compromised websites to collect potential victim information such as browser type, system language, Flash Player version, and other data.", "G0034": " Sandworm Team  : Sandworm Team has researched software code to enable supply-chain operations, most notably for the 2017 NotPetya attack. Sandworm Team also collected a list of computers using specific software as part of its targeting efforts."}, "id": "T1592.002", "subtechniqueof": "T1592", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.1", "created": "02 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Gather Victim Host Information", "detection": "Internet scanners may be used to look for patterns associated with malicious content designed to collect host information from visitors.Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1592", "subtechniques": ["T1592.001", "T1592.002", "T1592.003", "T1592.004"], "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.1", "created": "02 October 2020", "lastmodified": "17 October 2021"}, {"techniquename": "Vulnerability Scanning", "detection": "Monitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields.Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.These scans may also include more broad attempts to Gather Victim Host Information that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0007": " APT28  : APT28 has performed large-scale scans in an attempt to find vulnerable servers.", "G0016": " APT29  : APT29 has conducted widespread scanning of target environments to identify vulnerabilities for exploit.", "G0034": " Sandworm Team  : Sandworm Team has scanned network infrastructure for vulnerabilities as part of its operational planning.", "G0139": " TeamTNT  : TeamTNT has scanned for vulnerabilities in IoT devices and other related resources such as the Docker API.", "G0123": " Volatile Cedar  : Volatile Cedar has performed vulnerability scans of the target server."}, "id": "T1595.002", "subtechniqueof": "T1595", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Firmware", "detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about host firmware may only be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or Exploit Public-Facing Application).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "id": "T1592.003", "subtechniqueof": "T1592", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}, {"techniquename": "Scanning IP Blocks", "detection": "Monitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet).Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "description": "Adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.Adversaries may scan IP blocks in order to Gather Victim Network Information, such as which IP addresses are actively in use as well as more detailed information about hosts assigned these addresses. Scans may range from simple pings (ICMP requests and responses) to more nuanced scans that may reveal host software/versions via server banners or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services).", "mitigations": {"M1056": " Pre-compromise  : This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."}, "procedureexamples": {"G0139": " TeamTNT  : TeamTNT has scanned specific lists of target IP addresses."}, "id": "T1595.001", "subtechniqueof": "T1595", "tactics": ["Reconnaissance"], "platforms": ["PRE"], "version": "1.0", "created": "02 October 2020", "lastmodified": "15 April 2021"}]